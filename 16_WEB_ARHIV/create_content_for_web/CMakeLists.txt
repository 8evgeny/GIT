cmake_minimum_required(VERSION 3.14)
project(creater_web_content LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE debug)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(COMPILE_OPTIONS "-Wpedantic;-Wall;-Wextra")
#;-finput-charset=UTF8")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -pthread -fcoroutines")
include_directories(rapidjson/include src)
include(${CMAKE_SOURCE_DIR}/conanbuildinfo.cmake)
#conan_basic_setup()
find_package(QT NAMES Qt5 COMPONENTS Core REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)
file(GLOB src src/*.cpp)
add_executable(${PROJECT_NAME} ${src})
target_link_libraries(${PROJECT_NAME} Qt${QT_VERSION_MAJOR}::Core )
add_subdirectory(rapidjson)

#add_definitions(-DprintJson)
#add_definitions(-DprintDebugInfo)
set(PQXX ON)
#set(POKO ON)

if (PQXX)
    add_definitions(-DenablePQXX)
    target_link_libraries(${PROJECT_NAME} -lpqxx )
endif()
if (POKO)
    add_definitions(-DenablePOKO)
    target_link_libraries(${PROJECT_NAME} ${CONAN_LIBS} )
endif()
