
R_1_DTS_011M_STM32F429ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800527c  0800527c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005284  08005284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800528c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000404  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  20000410  20000410  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      000000a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000134af  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031ea  00000000  00000000  00033592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001060  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f60  00000000  00000000  000377e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027720  00000000  00000000  00038740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011269  00000000  00000000  0005fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef73b  00000000  00000000  000710c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000405c  00000000  00000000  00160804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000128d  00000000  00000000  00164860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <deregister_tm_clones>:
 80001ac:	4803      	ldr	r0, [pc, #12]	; (80001bc <deregister_tm_clones+0x10>)
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <deregister_tm_clones+0x14>)
 80001b0:	4283      	cmp	r3, r0
 80001b2:	d002      	beq.n	80001ba <deregister_tm_clones+0xe>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <deregister_tm_clones+0x18>)
 80001b6:	b103      	cbz	r3, 80001ba <deregister_tm_clones+0xe>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000

080001c8 <register_tm_clones>:
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <register_tm_clones+0x18>)
 80001ca:	4906      	ldr	r1, [pc, #24]	; (80001e4 <register_tm_clones+0x1c>)
 80001cc:	1a0b      	subs	r3, r1, r0
 80001ce:	0fd9      	lsrs	r1, r3, #31
 80001d0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001d4:	1049      	asrs	r1, r1, #1
 80001d6:	d002      	beq.n	80001de <register_tm_clones+0x16>
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <register_tm_clones+0x20>)
 80001da:	b103      	cbz	r3, 80001de <register_tm_clones+0x16>
 80001dc:	4718      	bx	r3
 80001de:	4770      	bx	lr
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	00000000 	.word	0x00000000

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c06      	ldr	r4, [pc, #24]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b943      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x1a>
 80001f4:	f7ff ffda 	bl	80001ac <deregister_tm_clones>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x24>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000000c 	.word	0x2000000c
 800020c:	00000000 	.word	0x00000000
 8000210:	08005244 	.word	0x08005244

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <frame_dummy+0x14>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4904      	ldr	r1, [pc, #16]	; (800022c <frame_dummy+0x18>)
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <frame_dummy+0x1c>)
 800021e:	f3af 8000 	nop.w
 8000222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000226:	e7cf      	b.n	80001c8 <register_tm_clones>
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08005244 	.word	0x08005244

08000234 <__libc_init_array>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	4e0d      	ldr	r6, [pc, #52]	; (800026c <__libc_init_array+0x38>)
 8000238:	4d0d      	ldr	r5, [pc, #52]	; (8000270 <__libc_init_array+0x3c>)
 800023a:	1b76      	subs	r6, r6, r5
 800023c:	10b6      	asrs	r6, r6, #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x1a>
 8000240:	2400      	movs	r4, #0
 8000242:	3401      	adds	r4, #1
 8000244:	f855 3b04 	ldr.w	r3, [r5], #4
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d1f9      	bne.n	8000242 <__libc_init_array+0xe>
 800024e:	4e09      	ldr	r6, [pc, #36]	; (8000274 <__libc_init_array+0x40>)
 8000250:	4d09      	ldr	r5, [pc, #36]	; (8000278 <__libc_init_array+0x44>)
 8000252:	1b76      	subs	r6, r6, r5
 8000254:	f004 fff6 	bl	8005244 <_init>
 8000258:	10b6      	asrs	r6, r6, #2
 800025a:	d006      	beq.n	800026a <__libc_init_array+0x36>
 800025c:	2400      	movs	r4, #0
 800025e:	3401      	adds	r4, #1
 8000260:	f855 3b04 	ldr.w	r3, [r5], #4
 8000264:	4798      	blx	r3
 8000266:	42a6      	cmp	r6, r4
 8000268:	d1f9      	bne.n	800025e <__libc_init_array+0x2a>
 800026a:	bd70      	pop	{r4, r5, r6, pc}
 800026c:	08005284 	.word	0x08005284
 8000270:	08005284 	.word	0x08005284
 8000274:	08005288 	.word	0x08005288
 8000278:	08005284 	.word	0x08005284

0800027c <memset>:
 800027c:	b4f0      	push	{r4, r5, r6, r7}
 800027e:	0786      	lsls	r6, r0, #30
 8000280:	d046      	beq.n	8000310 <memset+0x94>
 8000282:	1e54      	subs	r4, r2, #1
 8000284:	2a00      	cmp	r2, #0
 8000286:	d03c      	beq.n	8000302 <memset+0x86>
 8000288:	b2ca      	uxtb	r2, r1
 800028a:	4603      	mov	r3, r0
 800028c:	e002      	b.n	8000294 <memset+0x18>
 800028e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000292:	d336      	bcc.n	8000302 <memset+0x86>
 8000294:	f803 2b01 	strb.w	r2, [r3], #1
 8000298:	079d      	lsls	r5, r3, #30
 800029a:	d1f8      	bne.n	800028e <memset+0x12>
 800029c:	2c03      	cmp	r4, #3
 800029e:	d929      	bls.n	80002f4 <memset+0x78>
 80002a0:	b2cd      	uxtb	r5, r1
 80002a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002a6:	2c0f      	cmp	r4, #15
 80002a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002ac:	d933      	bls.n	8000316 <memset+0x9a>
 80002ae:	f1a4 0610 	sub.w	r6, r4, #16
 80002b2:	0936      	lsrs	r6, r6, #4
 80002b4:	f103 0720 	add.w	r7, r3, #32
 80002b8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80002bc:	f103 0210 	add.w	r2, r3, #16
 80002c0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002c4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002c8:	3210      	adds	r2, #16
 80002ca:	42ba      	cmp	r2, r7
 80002cc:	d1f8      	bne.n	80002c0 <memset+0x44>
 80002ce:	1c72      	adds	r2, r6, #1
 80002d0:	f014 0f0c 	tst.w	r4, #12
 80002d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002d8:	f004 060f 	and.w	r6, r4, #15
 80002dc:	d013      	beq.n	8000306 <memset+0x8a>
 80002de:	1f33      	subs	r3, r6, #4
 80002e0:	f023 0303 	bic.w	r3, r3, #3
 80002e4:	3304      	adds	r3, #4
 80002e6:	4413      	add	r3, r2
 80002e8:	f842 5b04 	str.w	r5, [r2], #4
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d1fb      	bne.n	80002e8 <memset+0x6c>
 80002f0:	f006 0403 	and.w	r4, r6, #3
 80002f4:	b12c      	cbz	r4, 8000302 <memset+0x86>
 80002f6:	b2c9      	uxtb	r1, r1
 80002f8:	441c      	add	r4, r3
 80002fa:	f803 1b01 	strb.w	r1, [r3], #1
 80002fe:	429c      	cmp	r4, r3
 8000300:	d1fb      	bne.n	80002fa <memset+0x7e>
 8000302:	bcf0      	pop	{r4, r5, r6, r7}
 8000304:	4770      	bx	lr
 8000306:	4634      	mov	r4, r6
 8000308:	4613      	mov	r3, r2
 800030a:	2c00      	cmp	r4, #0
 800030c:	d1f3      	bne.n	80002f6 <memset+0x7a>
 800030e:	e7f8      	b.n	8000302 <memset+0x86>
 8000310:	4614      	mov	r4, r2
 8000312:	4603      	mov	r3, r0
 8000314:	e7c2      	b.n	800029c <memset+0x20>
 8000316:	461a      	mov	r2, r3
 8000318:	4626      	mov	r6, r4
 800031a:	e7e0      	b.n	80002de <memset+0x62>

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800032c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000330:	f000 b96e 	b.w	8000610 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468c      	mov	ip, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8083 	bne.w	8000462 <__udivmoddi4+0x116>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d947      	bls.n	80003f2 <__udivmoddi4+0xa6>
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b142      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000368:	f1c2 0020 	rsb	r0, r2, #32
 800036c:	fa24 f000 	lsr.w	r0, r4, r0
 8000370:	4091      	lsls	r1, r2
 8000372:	4097      	lsls	r7, r2
 8000374:	ea40 0c01 	orr.w	ip, r0, r1
 8000378:	4094      	lsls	r4, r2
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fbbc f6f8 	udiv	r6, ip, r8
 8000384:	fa1f fe87 	uxth.w	lr, r7
 8000388:	fb08 c116 	mls	r1, r8, r6, ip
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f10e 	mul.w	r1, r6, lr
 8000394:	4299      	cmp	r1, r3
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x60>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800039e:	f080 8119 	bcs.w	80005d4 <__udivmoddi4+0x288>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 8116 	bls.w	80005d4 <__udivmoddi4+0x288>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x8c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ca:	f080 8105 	bcs.w	80005d8 <__udivmoddi4+0x28c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8102 	bls.w	80005d8 <__udivmoddi4+0x28c>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003dc:	eba4 040e 	sub.w	r4, r4, lr
 80003e0:	2600      	movs	r6, #0
 80003e2:	b11d      	cbz	r5, 80003ec <__udivmoddi4+0xa0>
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	2300      	movs	r3, #0
 80003e8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xaa>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d150      	bne.n	80004a0 <__udivmoddi4+0x154>
 80003fe:	1bcb      	subs	r3, r1, r7
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	2601      	movs	r6, #1
 800040a:	fbb3 fcfe 	udiv	ip, r3, lr
 800040e:	0c21      	lsrs	r1, r4, #16
 8000410:	fb0e 331c 	mls	r3, lr, ip, r3
 8000414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000418:	fb08 f30c 	mul.w	r3, r8, ip
 800041c:	428b      	cmp	r3, r1
 800041e:	d907      	bls.n	8000430 <__udivmoddi4+0xe4>
 8000420:	1879      	adds	r1, r7, r1
 8000422:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0xe2>
 8000428:	428b      	cmp	r3, r1
 800042a:	f200 80e9 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 800042e:	4684      	mov	ip, r0
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	b2a3      	uxth	r3, r4
 8000434:	fbb1 f0fe 	udiv	r0, r1, lr
 8000438:	fb0e 1110 	mls	r1, lr, r0, r1
 800043c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000440:	fb08 f800 	mul.w	r8, r8, r0
 8000444:	45a0      	cmp	r8, r4
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x10c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x10a>
 8000450:	45a0      	cmp	r8, r4
 8000452:	f200 80d9 	bhi.w	8000608 <__udivmoddi4+0x2bc>
 8000456:	4618      	mov	r0, r3
 8000458:	eba4 0408 	sub.w	r4, r4, r8
 800045c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000460:	e7bf      	b.n	80003e2 <__udivmoddi4+0x96>
 8000462:	428b      	cmp	r3, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x12e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	f000 80b1 	beq.w	80005ce <__udivmoddi4+0x282>
 800046c:	2600      	movs	r6, #0
 800046e:	e9c5 0100 	strd	r0, r1, [r5]
 8000472:	4630      	mov	r0, r6
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	fab3 f683 	clz	r6, r3
 800047e:	2e00      	cmp	r6, #0
 8000480:	d14a      	bne.n	8000518 <__udivmoddi4+0x1cc>
 8000482:	428b      	cmp	r3, r1
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0x140>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80b8 	bhi.w	80005fc <__udivmoddi4+0x2b0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb61 0103 	sbc.w	r1, r1, r3
 8000492:	2001      	movs	r0, #1
 8000494:	468c      	mov	ip, r1
 8000496:	2d00      	cmp	r5, #0
 8000498:	d0a8      	beq.n	80003ec <__udivmoddi4+0xa0>
 800049a:	e9c5 4c00 	strd	r4, ip, [r5]
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f603 	lsr.w	r6, r0, r3
 80004a8:	4097      	lsls	r7, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b2:	40d9      	lsrs	r1, r3
 80004b4:	4330      	orrs	r0, r6
 80004b6:	0c03      	lsrs	r3, r0, #16
 80004b8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004bc:	fa1f f887 	uxth.w	r8, r7
 80004c0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c8:	fb06 f108 	mul.w	r1, r6, r8
 80004cc:	4299      	cmp	r1, r3
 80004ce:	fa04 f402 	lsl.w	r4, r4, r2
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x19c>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004da:	f080 808d 	bcs.w	80005f8 <__udivmoddi4+0x2ac>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 808a 	bls.w	80005f8 <__udivmoddi4+0x2ac>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	443b      	add	r3, r7
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b281      	uxth	r1, r0
 80004ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f8:	fb00 f308 	mul.w	r3, r0, r8
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x1c4>
 8000500:	1879      	adds	r1, r7, r1
 8000502:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000506:	d273      	bcs.n	80005f0 <__udivmoddi4+0x2a4>
 8000508:	428b      	cmp	r3, r1
 800050a:	d971      	bls.n	80005f0 <__udivmoddi4+0x2a4>
 800050c:	3802      	subs	r0, #2
 800050e:	4439      	add	r1, r7
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000516:	e778      	b.n	800040a <__udivmoddi4+0xbe>
 8000518:	f1c6 0c20 	rsb	ip, r6, #32
 800051c:	fa03 f406 	lsl.w	r4, r3, r6
 8000520:	fa22 f30c 	lsr.w	r3, r2, ip
 8000524:	431c      	orrs	r4, r3
 8000526:	fa20 f70c 	lsr.w	r7, r0, ip
 800052a:	fa01 f306 	lsl.w	r3, r1, r6
 800052e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000532:	fa21 f10c 	lsr.w	r1, r1, ip
 8000536:	431f      	orrs	r7, r3
 8000538:	0c3b      	lsrs	r3, r7, #16
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fa1f f884 	uxth.w	r8, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054a:	fb09 fa08 	mul.w	sl, r9, r8
 800054e:	458a      	cmp	sl, r1
 8000550:	fa02 f206 	lsl.w	r2, r2, r6
 8000554:	fa00 f306 	lsl.w	r3, r0, r6
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x220>
 800055a:	1861      	adds	r1, r4, r1
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	d248      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 8000562:	458a      	cmp	sl, r1
 8000564:	d946      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 8000566:	f1a9 0902 	sub.w	r9, r9, #2
 800056a:	4421      	add	r1, r4
 800056c:	eba1 010a 	sub.w	r1, r1, sl
 8000570:	b2bf      	uxth	r7, r7
 8000572:	fbb1 f0fe 	udiv	r0, r1, lr
 8000576:	fb0e 1110 	mls	r1, lr, r0, r1
 800057a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800057e:	fb00 f808 	mul.w	r8, r0, r8
 8000582:	45b8      	cmp	r8, r7
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x24a>
 8000586:	19e7      	adds	r7, r4, r7
 8000588:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800058c:	d22e      	bcs.n	80005ec <__udivmoddi4+0x2a0>
 800058e:	45b8      	cmp	r8, r7
 8000590:	d92c      	bls.n	80005ec <__udivmoddi4+0x2a0>
 8000592:	3802      	subs	r0, #2
 8000594:	4427      	add	r7, r4
 8000596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059a:	eba7 0708 	sub.w	r7, r7, r8
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	454f      	cmp	r7, r9
 80005a4:	46c6      	mov	lr, r8
 80005a6:	4649      	mov	r1, r9
 80005a8:	d31a      	bcc.n	80005e0 <__udivmoddi4+0x294>
 80005aa:	d017      	beq.n	80005dc <__udivmoddi4+0x290>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x27a>
 80005ae:	ebb3 020e 	subs.w	r2, r3, lr
 80005b2:	eb67 0701 	sbc.w	r7, r7, r1
 80005b6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ba:	40f2      	lsrs	r2, r6
 80005bc:	ea4c 0202 	orr.w	r2, ip, r2
 80005c0:	40f7      	lsrs	r7, r6
 80005c2:	e9c5 2700 	strd	r2, r7, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e70b      	b.n	80003ec <__udivmoddi4+0xa0>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e9      	b.n	80003ac <__udivmoddi4+0x60>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6fd      	b.n	80003d8 <__udivmoddi4+0x8c>
 80005dc:	4543      	cmp	r3, r8
 80005de:	d2e5      	bcs.n	80005ac <__udivmoddi4+0x260>
 80005e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e4:	eb69 0104 	sbc.w	r1, r9, r4
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7df      	b.n	80005ac <__udivmoddi4+0x260>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e7d2      	b.n	8000596 <__udivmoddi4+0x24a>
 80005f0:	4660      	mov	r0, ip
 80005f2:	e78d      	b.n	8000510 <__udivmoddi4+0x1c4>
 80005f4:	4681      	mov	r9, r0
 80005f6:	e7b9      	b.n	800056c <__udivmoddi4+0x220>
 80005f8:	4666      	mov	r6, ip
 80005fa:	e775      	b.n	80004e8 <__udivmoddi4+0x19c>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e74a      	b.n	8000496 <__udivmoddi4+0x14a>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	4439      	add	r1, r7
 8000606:	e713      	b.n	8000430 <__udivmoddi4+0xe4>
 8000608:	3802      	subs	r0, #2
 800060a:	443c      	add	r4, r7
 800060c:	e724      	b.n	8000458 <__udivmoddi4+0x10c>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <__NVIC_EnableIRQ+0x38>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60da      	str	r2, [r3, #12]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	615a      	str	r2, [r3, #20]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800078a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800

080007a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b0:	4907      	ldr	r1, [pc, #28]	; (80007d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e0:	4907      	ldr	r1, [pc, #28]	; (8000800 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4013      	ands	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 ffd4 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f816 	bl	800083c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000810:	f000 f896 	bl	8000940 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 fb40 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000818:	f000 fb00 	bl	8000e1c <MX_DMA_Init>
  MX_SAI1_Init();
 800081c:	f000 f9b2 	bl	8000b84 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8000820:	f000 fa3a 	bl	8000c98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000824:	f000 fa98 	bl	8000d58 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000828:	f000 f924 	bl	8000a74 <MX_I2C1_Init>
  MX_I2S3_Init();
 800082c:	f000 f962 	bl	8000af4 <MX_I2S3_Init>
  MX_ADC1_Init();
 8000830:	f000 f8a4 	bl	800097c <MX_ADC1_Init>
  MX_IWDG_Init();
 8000834:	f000 f98c 	bl	8000b50 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x34>
	...

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd16 	bl	800027c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Macro to configure SAI1BlockB clock source selection
  */
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLSAI);
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <SystemClock_Config+0xfc>)
 8000862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000866:	4a34      	ldr	r2, [pc, #208]	; (8000938 <SystemClock_Config+0xfc>)
 8000868:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800086c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  /** Macro to configure SAI1BlockA clock source selection
  */
  __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLSAI);
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <SystemClock_Config+0xfc>)
 8000872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000876:	4a30      	ldr	r2, [pc, #192]	; (8000938 <SystemClock_Config+0xfc>)
 8000878:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800087c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <SystemClock_Config+0xfc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <SystemClock_Config+0xfc>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <SystemClock_Config+0xfc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemClock_Config+0x100>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a25      	ldr	r2, [pc, #148]	; (800093c <SystemClock_Config+0x100>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <SystemClock_Config+0x100>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008b8:	2309      	movs	r3, #9
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008d4:	23b4      	movs	r3, #180	; 0xb4
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fefd 	bl	80036e4 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008f0:	f000 fbf0 	bl	80010d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008f4:	f002 fea6 	bl	8003644 <HAL_PWREx_EnableOverDrive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008fe:	f000 fbe9 	bl	80010d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2105      	movs	r1, #5
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f957 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800092c:	f000 fbd2 	bl	80010d4 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2230      	movs	r2, #48	; 0x30
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc95 	bl	800027c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI;
 8000952:	2304      	movs	r3, #4
 8000954:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 8000956:	23d8      	movs	r3, #216	; 0xd8
 8000958:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fb1d 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000970:	f000 fbb0 	bl	80010d4 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000990:	4a36      	ldr	r2, [pc, #216]	; (8000a6c <MX_ADC1_Init+0xf0>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000996:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800099a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_ADC1_Init+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <MX_ADC1_Init+0xf4>)
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009d8:	2201      	movs	r2, #1
 80009da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009de:	f000 ff5b 	bl	8001898 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009e8:	f000 fb74 	bl	80010d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009ec:	230a      	movs	r3, #10
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	481a      	ldr	r0, [pc, #104]	; (8000a68 <MX_ADC1_Init+0xec>)
 80009fe:	f000 ff8f 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a08:	f000 fb64 	bl	80010d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000a1a:	f000 ff81 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a24:	f000 fb56 	bl	80010d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000a36:	f000 ff73 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a40:	f000 fb48 	bl	80010d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a44:	230d      	movs	r3, #13
 8000a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000a52:	f000 ff65 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a5c:	f000 fb3a 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001d4 	.word	0x200001d4
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C1_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ab2:	f001 ff25 	bl	8002900 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 fb0a 	bl	80010d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ac4:	f002 f860 	bl	8002b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ace:	f000 fb01 	bl	80010d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ad6:	f002 f893 	bl	8002c00 <HAL_I2CEx_ConfigDigitalFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 faf8 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	40005400 	.word	0x40005400
 8000af0:	00061a80 	.word	0x00061a80

08000af4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <MX_I2S3_Init+0x58>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b1a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2S3_Init+0x54>)
 8000b34:	f002 f8a4 	bl	8002c80 <HAL_I2S_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b3e:	f000 fac9 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200003c4 	.word	0x200003c4
 8000b4c:	40003c00 	.word	0x40003c00

08000b50 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_IWDG_Init+0x2c>)
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <MX_IWDG_Init+0x30>)
 8000b58:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_IWDG_Init+0x2c>)
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3500;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_IWDG_Init+0x2c>)
 8000b62:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000b66:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_IWDG_Init+0x2c>)
 8000b6a:	f002 fd29 	bl	80035c0 <HAL_IWDG_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b74:	f000 faae 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000080 	.word	0x20000080
 8000b80:	40003000 	.word	0x40003000

08000b84 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <MX_SAI1_Init+0x108>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bec:	2210      	movs	r2, #16
 8000bee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bf6:	4824      	ldr	r0, [pc, #144]	; (8000c88 <MX_SAI1_Init+0x104>)
 8000bf8:	f003 fbee 	bl	80043d8 <HAL_SAI_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_SAI1_Init+0x82>
  {
    Error_Handler();
 8000c02:	f000 fa67 	bl	80010d4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <MX_SAI1_Init+0x110>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.SlotActive = 0x00000003;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c70:	2203      	movs	r2, #3
 8000c72:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_SAI1_Init+0x10c>)
 8000c76:	f003 fbaf 	bl	80043d8 <HAL_SAI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SAI1_Init+0x100>
  {
    Error_Handler();
 8000c80:	f000 fa28 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200002dc 	.word	0x200002dc
 8000c8c:	40015804 	.word	0x40015804
 8000c90:	2000008c 	.word	0x2000008c
 8000c94:	40015824 	.word	0x40015824

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f7ff fd86 	bl	80007d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fd53 	bl	8000774 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000cce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4818      	ldr	r0, [pc, #96]	; (8000d50 <MX_USART1_UART_Init+0xb8>)
 8000cee:	f003 fea0 	bl	8004a32 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cf2:	f7ff fc8f 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fcdf 	bl	80006c0 <NVIC_EncodePriority>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4619      	mov	r1, r3
 8000d06:	2025      	movs	r0, #37	; 0x25
 8000d08:	f7ff fcb0 	bl	800066c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000d0c:	2025      	movs	r0, #37	; 0x25
 8000d0e:	f7ff fc8f 	bl	8000630 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000d12:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d16:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d24:	230c      	movs	r3, #12
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <MX_USART1_UART_Init+0xbc>)
 8000d38:	f004 f9f2 	bl	8005120 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART1_UART_Init+0xbc>)
 8000d3e:	f7ff fd02 	bl	8000746 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_USART1_UART_Init+0xbc>)
 8000d44:	f7ff fcef 	bl	8000726 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3738      	adds	r7, #56	; 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40011000 	.word	0x40011000

08000d58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000d82:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d86:	f7ff fd0d 	bl	80007a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff fcf2 	bl	8000774 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000da6:	2307      	movs	r3, #7
 8000da8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MX_USART3_UART_Init+0xbc>)
 8000db0:	f003 fe3f 	bl	8004a32 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000db4:	f7ff fc2e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2106      	movs	r1, #6
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fc7e 	bl	80006c0 <NVIC_EncodePriority>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2027      	movs	r0, #39	; 0x27
 8000dca:	f7ff fc4f 	bl	800066c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000dce:	2027      	movs	r0, #39	; 0x27
 8000dd0:	f7ff fc2e 	bl	8000630 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 2400;
 8000dd4:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000dd8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000de6:	230c      	movs	r3, #12
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MX_USART3_UART_Init+0xc0>)
 8000dfa:	f004 f991 	bl	8005120 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_USART3_UART_Init+0xc0>)
 8000e00:	f7ff fca1 	bl	8000746 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_USART3_UART_Init+0xc0>)
 8000e06:	f7ff fc8e 	bl	8000726 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40004800 	.word	0x40004800

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_DMA_Init+0x78>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f001 f867 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e64:	2010      	movs	r0, #16
 8000e66:	f001 f880 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2038      	movs	r0, #56	; 0x38
 8000e70:	f001 f85f 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e74:	2038      	movs	r0, #56	; 0x38
 8000e76:	f001 f878 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 1, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	203c      	movs	r0, #60	; 0x3c
 8000e80:	f001 f857 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e84:	203c      	movs	r0, #60	; 0x3c
 8000e86:	f001 f870 	bl	8001f6a <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	4b82      	ldr	r3, [pc, #520]	; (80010bc <MX_GPIO_Init+0x224>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a81      	ldr	r2, [pc, #516]	; (80010bc <MX_GPIO_Init+0x224>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <MX_GPIO_Init+0x224>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <MX_GPIO_Init+0x224>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a7a      	ldr	r2, [pc, #488]	; (80010bc <MX_GPIO_Init+0x224>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <MX_GPIO_Init+0x224>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <MX_GPIO_Init+0x224>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a73      	ldr	r2, [pc, #460]	; (80010bc <MX_GPIO_Init+0x224>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <MX_GPIO_Init+0x224>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a6c      	ldr	r2, [pc, #432]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b66      	ldr	r3, [pc, #408]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b58      	ldr	r3, [pc, #352]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a57      	ldr	r2, [pc, #348]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b55      	ldr	r3, [pc, #340]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a50      	ldr	r2, [pc, #320]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <MX_GPIO_Init+0x224>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, EN_25W_Pin|nEN_HLT_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f94:	484a      	ldr	r0, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x228>)
 8000f96:	f001 fc99 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USART3_485_DE_Pin|nAIC_RES_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2181      	movs	r1, #129	; 0x81
 8000f9e:	4849      	ldr	r0, [pc, #292]	; (80010c4 <MX_GPIO_Init+0x22c>)
 8000fa0:	f001 fc94 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ST_LOUTDIS_Pin|REL_Pin|LED_ON_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000faa:	4847      	ldr	r0, [pc, #284]	; (80010c8 <MX_GPIO_Init+0x230>)
 8000fac:	f001 fc8e 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb6:	4844      	ldr	r0, [pc, #272]	; (80010c8 <MX_GPIO_Init+0x230>)
 8000fb8:	f001 fc88 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_S1_Pin|LED_S2_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fc2:	4842      	ldr	r0, [pc, #264]	; (80010cc <MX_GPIO_Init+0x234>)
 8000fc4:	f001 fc82 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXTIN1_Pin EXTIN2_Pin EXTIN3_Pin EXTIN4_Pin
                           EXTIN5_Pin */
  GPIO_InitStruct.Pin = EXTIN1_Pin|EXTIN2_Pin|EXTIN3_Pin|EXTIN4_Pin
 8000fc8:	237c      	movs	r3, #124	; 0x7c
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
                          |EXTIN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4839      	ldr	r0, [pc, #228]	; (80010c0 <MX_GPIO_Init+0x228>)
 8000fdc:	f001 faca 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_25W_Pin nEN_HLT_Pin */
  GPIO_InitStruct.Pin = EN_25W_Pin|nEN_HLT_Pin;
 8000fe0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4831      	ldr	r0, [pc, #196]	; (80010c0 <MX_GPIO_Init+0x228>)
 8000ffa:	f001 fabb 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_485_DE_Pin */
  GPIO_InitStruct.Pin = USART3_485_DE_Pin;
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USART3_485_DE_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <MX_GPIO_Init+0x22c>)
 8001016:	f001 faad 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102c:	2305      	movs	r3, #5
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <MX_GPIO_Init+0x238>)
 8001038:	f001 fa9c 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_LOUTDIS_Pin */
  GPIO_InitStruct.Pin = ST_LOUTDIS_Pin;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ST_LOUTDIS_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <MX_GPIO_Init+0x230>)
 8001056:	f001 fa8d 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : REL_Pin LED_ON_Pin LED_ERR_Pin */
  GPIO_InitStruct.Pin = REL_Pin|LED_ON_Pin|LED_ERR_Pin;
 800105a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001068:	2301      	movs	r3, #1
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <MX_GPIO_Init+0x230>)
 8001074:	f001 fa7e 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_S1_Pin LED_S2_Pin */
  GPIO_InitStruct.Pin = LED_S1_Pin|LED_S2_Pin;
 8001078:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001086:	2301      	movs	r3, #1
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_GPIO_Init+0x234>)
 8001092:	f001 fa6f 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : nAIC_RES_Pin */
  GPIO_InitStruct.Pin = nAIC_RES_Pin;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nAIC_RES_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_GPIO_Init+0x22c>)
 80010ae:	f001 fa61 	bl	8002574 <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_MspInit+0x4c>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x4c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_ADC_MspInit+0xdc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d157      	bne.n	8001202 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_ADC_MspInit+0xe0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800118a:	230f      	movs	r3, #15
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <HAL_ADC_MspInit+0xe4>)
 800119e:	f001 f9e9 	bl	8002574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_ADC_MspInit+0xec>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011e8:	f000 feda 	bl	8001fa0 <HAL_DMA_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011f2:	f7ff ff6f 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_ADC_MspInit+0xe8>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012000 	.word	0x40012000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	2000021c 	.word	0x2000021c
 800121c:	40026410 	.word	0x40026410

08001220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_I2C_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001262:	2312      	movs	r3, #18
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126e:	2304      	movs	r3, #4
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <HAL_I2C_MspInit+0x8c>)
 800127a:	f001 f97b 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b098      	sub	sp, #96	; 0x60
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2230      	movs	r2, #48	; 0x30
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ffd3 	bl	800027c <memset>
  if(hi2s->Instance==SPI3)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a7a      	ldr	r2, [pc, #488]	; (80014c4 <HAL_I2S_MspInit+0x214>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	f040 80ed 	bne.w	80014bc <HAL_I2S_MspInit+0x20c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012e6:	23c0      	movs	r3, #192	; 0xc0
 80012e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fe56 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80012fe:	f7ff fee9 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 800130c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a68      	ldr	r2, [pc, #416]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b62      	ldr	r3, [pc, #392]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a61      	ldr	r2, [pc, #388]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b5f      	ldr	r3, [pc, #380]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a5a      	ldr	r2, [pc, #360]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <HAL_I2S_MspInit+0x218>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PD6     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001372:	2310      	movs	r3, #16
 8001374:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001382:	2306      	movs	r3, #6
 8001384:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800138a:	4619      	mov	r1, r3
 800138c:	484f      	ldr	r0, [pc, #316]	; (80014cc <HAL_I2S_MspInit+0x21c>)
 800138e:	f001 f8f1 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a4:	2306      	movs	r3, #6
 80013a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ac:	4619      	mov	r1, r3
 80013ae:	4848      	ldr	r0, [pc, #288]	; (80014d0 <HAL_I2S_MspInit+0x220>)
 80013b0:	f001 f8e0 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80013c6:	2305      	movs	r3, #5
 80013c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ce:	4619      	mov	r1, r3
 80013d0:	483f      	ldr	r0, [pc, #252]	; (80014d0 <HAL_I2S_MspInit+0x220>)
 80013d2:	f001 f8cf 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d6:	2340      	movs	r3, #64	; 0x40
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e6:	2305      	movs	r3, #5
 80013e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ee:	4619      	mov	r1, r3
 80013f0:	4838      	ldr	r0, [pc, #224]	; (80014d4 <HAL_I2S_MspInit+0x224>)
 80013f2:	f001 f8bf 	bl	8002574 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 80013f8:	4a38      	ldr	r2, [pc, #224]	; (80014dc <HAL_I2S_MspInit+0x22c>)
 80013fa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001414:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800141c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001424:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001434:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800143c:	4826      	ldr	r0, [pc, #152]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 800143e:	f000 fdaf 	bl	8001fa0 <HAL_DMA_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2S_MspInit+0x19c>
    {
      Error_Handler();
 8001448:	f7ff fe44 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_I2S_MspInit+0x228>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_I2S_MspInit+0x234>)
 800145c:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 8001460:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001464:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 8001474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001478:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 800147c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001480:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 8001484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001488:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 8001494:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001498:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 80014a0:	480f      	ldr	r0, [pc, #60]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 80014a2:	f000 fd7d 	bl	8001fa0 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_I2S_MspInit+0x200>
    {
      Error_Handler();
 80014ac:	f7ff fe12 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_I2S_MspInit+0x230>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3760      	adds	r7, #96	; 0x60
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40003c00 	.word	0x40003c00
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	20000114 	.word	0x20000114
 80014dc:	40026088 	.word	0x40026088
 80014e0:	20000364 	.word	0x20000364
 80014e4:	40026010 	.word	0x40026010

080014e8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a64      	ldr	r2, [pc, #400]	; (8001688 <HAL_SAI_MspInit+0x1a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d15d      	bne.n	80015b6 <HAL_SAI_MspInit+0xce>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80014fa:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a61      	ldr	r2, [pc, #388]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 800150c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a59      	ldr	r2, [pc, #356]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 8001526:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001528:	2370      	movs	r3, #112	; 0x70
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001538:	2306      	movs	r3, #6
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4854      	ldr	r0, [pc, #336]	; (8001694 <HAL_SAI_MspInit+0x1ac>)
 8001544:	f001 f816 	bl	8002574 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 800154a:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_SAI_MspInit+0x1b4>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001566:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 800156a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001576:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 800157a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001580:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001582:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001586:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800158e:	4842      	ldr	r0, [pc, #264]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 8001590:	f000 fd06 	bl	8001fa0 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 800159a:	f7ff fd9b 	bl	80010d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 80015a2:	675a      	str	r2, [r3, #116]	; 0x74
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 80015ae:	671a      	str	r2, [r3, #112]	; 0x70
 80015b0:	4a39      	ldr	r2, [pc, #228]	; (8001698 <HAL_SAI_MspInit+0x1b0>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a39      	ldr	r2, [pc, #228]	; (80016a0 <HAL_SAI_MspInit+0x1b8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d15e      	bne.n	800167e <HAL_SAI_MspInit+0x196>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80015c0:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_SAI_MspInit+0xfc>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 80015d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d6:	6453      	str	r3, [r2, #68]	; 0x44
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_SAI_MspInit+0x1a8>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a28      	ldr	r2, [pc, #160]	; (800168c <HAL_SAI_MspInit+0x1a4>)
 80015ec:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ee:	2308      	movs	r3, #8
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015fe:	2306      	movs	r3, #6
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4822      	ldr	r0, [pc, #136]	; (8001694 <HAL_SAI_MspInit+0x1ac>)
 800160a:	f000 ffb3 	bl	8002574 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_SAI_MspInit+0x1c0>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161a:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800162a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162e:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001636:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001646:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800164a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001658:	f000 fca2 	bl	8001fa0 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_SAI_MspInit+0x17e>
    {
      Error_Handler();
 8001662:	f7ff fd37 	bl	80010d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800166a:	675a      	str	r2, [r3, #116]	; 0x74
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 8001676:	671a      	str	r2, [r3, #112]	; 0x70
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_SAI_MspInit+0x1bc>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40015804 	.word	0x40015804
 800168c:	20000028 	.word	0x20000028
 8001690:	40023800 	.word	0x40023800
 8001694:	40021000 	.word	0x40021000
 8001698:	20000174 	.word	0x20000174
 800169c:	40026428 	.word	0x40026428
 80016a0:	40015824 	.word	0x40015824
 80016a4:	2000027c 	.word	0x2000027c
 80016a8:	40026470 	.word	0x40026470

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f8ae 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Stream5_IRQHandler+0x10>)
 8001706:	f000 fcf9 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000114 	.word	0x20000114

08001714 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA2_Stream0_IRQHandler+0x10>)
 800171a:	f000 fcef 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000021c 	.word	0x2000021c

08001728 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA2_Stream4_IRQHandler+0x10>)
 800172e:	f000 fce5 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000027c 	.word	0x2000027c

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800177c:	4c0b      	ldr	r4, [pc, #44]	; (80017ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178a:	f7ff ffd7 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f7fe fd51 	bl	8000234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff f837 	bl	8000804 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001798:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017a4:	0800528c 	.word	0x0800528c
  ldr r2, =_sbss
 80017a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017ac:	20000410 	.word	0x20000410

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 fb9d 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fc7a 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fbb5 	bl	8001f86 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001834:	f000 fb7d 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	2000040c 	.word	0x2000040c

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000040c 	.word	0x2000040c

08001898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e033      	b.n	8001916 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fc3a 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	f043 0202 	orr.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f94a 	bl	8001b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
 8001906:	e001      	b.n	800190c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1c>
 8001938:	2302      	movs	r3, #2
 800193a:	e113      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x244>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b09      	cmp	r3, #9
 800194a:	d925      	bls.n	8001998 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68d9      	ldr	r1, [r3, #12]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	3b1e      	subs	r3, #30
 8001962:	2207      	movs	r2, #7
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43da      	mvns	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	400a      	ands	r2, r1
 8001970:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68d9      	ldr	r1, [r3, #12]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	4603      	mov	r3, r0
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4403      	add	r3, r0
 800198a:	3b1e      	subs	r3, #30
 800198c:	409a      	lsls	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e022      	b.n	80019de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6919      	ldr	r1, [r3, #16]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	2207      	movs	r2, #7
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	400a      	ands	r2, r1
 80019ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4403      	add	r3, r0
 80019d4:	409a      	lsls	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d824      	bhi.n	8001a30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b05      	subs	r3, #5
 80019f8:	221f      	movs	r2, #31
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	400a      	ands	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b05      	subs	r3, #5
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2e:	e04c      	b.n	8001aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d824      	bhi.n	8001a82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b23      	subs	r3, #35	; 0x23
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b23      	subs	r3, #35	; 0x23
 8001a74:	fa00 f203 	lsl.w	r2, r0, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a80:	e023      	b.n	8001aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b41      	subs	r3, #65	; 0x41
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b41      	subs	r3, #65	; 0x41
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_ADC_ConfigChannel+0x250>)
 8001acc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <HAL_ADC_ConfigChannel+0x254>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d10f      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	d10b      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_ADC_ConfigChannel+0x254>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d12b      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x23a>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_ADC_ConfigChannel+0x258>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d003      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x1f4>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b11      	cmp	r3, #17
 8001b12:	d122      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_ADC_ConfigChannel+0x258>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d111      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_ADC_ConfigChannel+0x25c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_ADC_ConfigChannel+0x260>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9a      	lsrs	r2, r3, #18
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40012300 	.word	0x40012300
 8001b74:	40012000 	.word	0x40012000
 8001b78:	10000012 	.word	0x10000012
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8c:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <ADC_Init+0x1f0>)
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	021a      	lsls	r2, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <ADC_Init+0x1f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e00f      	b.n	8001c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0202 	bic.w	r2, r2, #2
 8001c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7e1b      	ldrb	r3, [r3, #24]
 8001c9c:	005a      	lsls	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	035a      	lsls	r2, r3, #13
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	e007      	b.n	8001cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	051a      	lsls	r2, r3, #20
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d3a:	025a      	lsls	r2, r3, #9
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	029a      	lsls	r2, r3, #10
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012300 	.word	0x40012300
 8001d78:	0f000001 	.word	0x0f000001

08001d7c <__NVIC_SetPriorityGrouping>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff fc68 	bl	8001880 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e099      	b.n	80020f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	e00f      	b.n	8001ffe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fde:	f7ff fc4f 	bl	8001880 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d908      	bls.n	8001ffe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e078      	b.n	80020f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e8      	bne.n	8001fde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_DMA_Init+0x158>)
 8002018:	4013      	ands	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2b04      	cmp	r3, #4
 8002056:	d107      	bne.n	8002068 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4313      	orrs	r3, r2
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0307 	bic.w	r3, r3, #7
 800207e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2b04      	cmp	r3, #4
 8002090:	d117      	bne.n	80020c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00e      	beq.n	80020c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f9e9 	bl	800247c <DMA_CheckFifoParam>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020be:	2301      	movs	r3, #1
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f9a0 	bl	8002410 <DMA_CalcBaseAndBitshift>
 80020d0:	4603      	mov	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	f010803f 	.word	0xf010803f

080020fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002108:	4b92      	ldr	r3, [pc, #584]	; (8002354 <HAL_DMA_IRQHandler+0x258>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_DMA_IRQHandler+0x25c>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2208      	movs	r2, #8
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2208      	movs	r2, #8
 8002156:	409a      	lsls	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2204      	movs	r2, #4
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2210      	movs	r2, #16
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d043      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03c      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2210      	movs	r2, #16
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
 800222a:	e01f      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e016      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0208 	bic.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2220      	movs	r2, #32
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 808e 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8086 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2220      	movs	r2, #32
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d136      	bne.n	8002314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0216 	bic.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x1da>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0208 	bic.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07d      	beq.n	8002406 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
        }
        return;
 8002312:	e078      	b.n	8002406 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01c      	beq.n	800235c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d030      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e02b      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d027      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e022      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
 8002354:	20000000 	.word	0x20000000
 8002358:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d307      	bcc.n	80023e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f2      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x2ca>
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e000      	b.n	8002408 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002406:	bf00      	nop
    }
  }
}
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop

08002410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3b10      	subs	r3, #16
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <DMA_CalcBaseAndBitshift+0x64>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <DMA_CalcBaseAndBitshift+0x68>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d909      	bls.n	8002452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58
 8002450:	e007      	b.n	8002462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	aaaaaaab 	.word	0xaaaaaaab
 8002478:	08005274 	.word	0x08005274

0800247c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0x5a>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d856      	bhi.n	800254a <DMA_CheckFifoParam+0xce>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x28>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024c7 	.word	0x080024c7
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	0800254b 	.word	0x0800254b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d046      	beq.n	800254e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e043      	b.n	800254e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ce:	d140      	bne.n	8002552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e03d      	b.n	8002552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	d121      	bne.n	8002524 <DMA_CheckFifoParam+0xa8>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d837      	bhi.n	8002556 <DMA_CheckFifoParam+0xda>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <DMA_CheckFifoParam+0x70>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	08002503 	.word	0x08002503
 80024f4:	080024fd 	.word	0x080024fd
 80024f8:	08002515 	.word	0x08002515
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e030      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d025      	beq.n	800255a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e022      	b.n	800255a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251c:	d11f      	bne.n	800255e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002522:	e01c      	b.n	800255e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d903      	bls.n	8002532 <DMA_CheckFifoParam+0xb6>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d003      	beq.n	8002538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002530:	e018      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      break;
 8002536:	e015      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e00b      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 800254a:	bf00      	nop
 800254c:	e00a      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e008      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e006      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
 8002558:	e004      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;   
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
    }
  } 
  
  return status; 
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e177      	b.n	8002880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8166 	bne.w	800287a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80c0 	beq.w	800287a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_GPIO_Init+0x324>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_GPIO_Init+0x324>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_GPIO_Init+0x324>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a61      	ldr	r2, [pc, #388]	; (800289c <HAL_GPIO_Init+0x328>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_GPIO_Init+0x32c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d037      	beq.n	80027b2 <HAL_GPIO_Init+0x23e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <HAL_GPIO_Init+0x330>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_GPIO_Init+0x23a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x236>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a55      	ldr	r2, [pc, #340]	; (80028ac <HAL_GPIO_Init+0x338>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x232>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_GPIO_Init+0x33c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x22e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_GPIO_Init+0x340>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x22a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_GPIO_Init+0x344>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_GPIO_Init+0x348>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_GPIO_Init+0x34c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4f      	ldr	r2, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x350>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x21a>
 800278a:	2309      	movs	r3, #9
 800278c:	e012      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800278e:	230a      	movs	r3, #10
 8002790:	e010      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002792:	2308      	movs	r3, #8
 8002794:	e00e      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002796:	2307      	movs	r3, #7
 8002798:	e00c      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279a:	2306      	movs	r3, #6
 800279c:	e00a      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279e:	2305      	movs	r3, #5
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c4:	4935      	ldr	r1, [pc, #212]	; (800289c <HAL_GPIO_Init+0x328>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_GPIO_Init+0x354>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f6:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_GPIO_Init+0x354>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_GPIO_Init+0x354>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002820:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <HAL_GPIO_Init+0x354>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_GPIO_Init+0x354>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_GPIO_Init+0x354>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_GPIO_Init+0x354>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_GPIO_Init+0x354>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f ae84 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40021c00 	.word	0x40021c00
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40022400 	.word	0x40022400
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e12b      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fc7a 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f001 fb0a 	bl	8003f7c <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a81      	ldr	r2, [pc, #516]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a80      	ldr	r2, [pc, #512]	; (8002b78 <HAL_I2C_Init+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_I2C_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e7      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a78      	ldr	r2, [pc, #480]	; (8002b80 <HAL_I2C_Init+0x280>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_I2C_Init+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_I2C_Init+0x284>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495c      	ldr	r1, [pc, #368]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d819      	bhi.n	8002a3c <HAL_I2C_Init+0x13c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_I2C_Init+0x138>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	e051      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e04f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_I2C_Init+0x168>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Init+0x18e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x196>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10e      	bne.n	8002abc <HAL_I2C_Init+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6911      	ldr	r1, [r2, #16]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	000186a0 	.word	0x000186a0
 8002b78:	001e847f 	.word	0x001e847f
 8002b7c:	003d08ff 	.word	0x003d08ff
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d129      	bne.n	8002bf2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2224      	movs	r2, #36	; 0x24
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0210 	bic.w	r2, r2, #16
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d12a      	bne.n	8002c70 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2224      	movs	r2, #36	; 0x24
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	f023 030f 	bic.w	r3, r3, #15
 8002c40:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	89fa      	ldrh	r2, [r7, #14]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e128      	b.n	8002ee4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a90      	ldr	r2, [pc, #576]	; (8002eec <HAL_I2S_Init+0x26c>)
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fe faff 	bl	80012b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d060      	beq.n	8002da0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e001      	b.n	8002cf0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d802      	bhi.n	8002cfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f001 fb0e 	bl	8004320 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0e:	d125      	bne.n	8002d5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	3305      	adds	r3, #5
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e01f      	b.n	8002d7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	3305      	adds	r3, #5
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e00e      	b.n	8002d7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	3305      	adds	r3, #5
 8002d78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4a5c      	ldr	r2, [pc, #368]	; (8002ef0 <HAL_I2S_Init+0x270>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e003      	b.n	8002da8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d902      	bls.n	8002db4 <HAL_I2S_Init+0x134>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	d907      	bls.n	8002dc4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e08f      	b.n	8002ee4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	ea42 0103 	orr.w	r1, r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002de2:	f023 030f 	bic.w	r3, r3, #15
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6851      	ldr	r1, [r2, #4]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68d2      	ldr	r2, [r2, #12]
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6992      	ldr	r2, [r2, #24]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d161      	bne.n	8002ed4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_I2S_Init+0x274>)
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <HAL_I2S_Init+0x278>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_I2S_Init+0x1a4>
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_I2S_Init+0x27c>)
 8002e22:	e001      	b.n	8002e28 <HAL_I2S_Init+0x1a8>
 8002e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4932      	ldr	r1, [pc, #200]	; (8002ef8 <HAL_I2S_Init+0x278>)
 8002e30:	428a      	cmp	r2, r1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2S_Init+0x1b8>
 8002e34:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_I2S_Init+0x27c>)
 8002e36:	e001      	b.n	8002e3c <HAL_I2S_Init+0x1bc>
 8002e38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e40:	f023 030f 	bic.w	r3, r3, #15
 8002e44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_I2S_Init+0x278>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2S_Init+0x1d4>
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_I2S_Init+0x27c>)
 8002e52:	e001      	b.n	8002e58 <HAL_I2S_Init+0x1d8>
 8002e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e58:	2202      	movs	r2, #2
 8002e5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_I2S_Init+0x278>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_I2S_Init+0x1ea>
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_I2S_Init+0x27c>)
 8002e68:	e001      	b.n	8002e6e <HAL_I2S_Init+0x1ee>
 8002e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d003      	beq.n	8002e84 <HAL_I2S_Init+0x204>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d103      	bne.n	8002e8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	e001      	b.n	8002e90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ebc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_I2S_Init+0x278>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2S_Init+0x24c>
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_I2S_Init+0x27c>)
 8002eca:	e001      	b.n	8002ed0 <HAL_I2S_Init+0x250>
 8002ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed0:	897a      	ldrh	r2, [r7, #10]
 8002ed2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08002ff7 	.word	0x08002ff7
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	0800310d 	.word	0x0800310d
 8002ef8:	40003800 	.word	0x40003800
 8002efc:	40003400 	.word	0x40003400

08002f00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ffb8 	bl	8002f00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	b292      	uxth	r2, r2
 8002fac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10e      	bne.n	8002fee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff93 	bl	8002f14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b04      	cmp	r3, #4
 8003010:	d13a      	bne.n	8003088 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d109      	bne.n	8003030 <I2S_IRQHandler+0x3a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d102      	bne.n	8003030 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffb4 	bl	8002f98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d126      	bne.n	8003088 <I2S_IRQHandler+0x92>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d11f      	bne.n	8003088 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003056:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff50 	bl	8002f28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d136      	bne.n	8003102 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d109      	bne.n	80030b2 <I2S_IRQHandler+0xbc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d102      	bne.n	80030b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff45 	bl	8002f3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d122      	bne.n	8003102 <I2S_IRQHandler+0x10c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d11b      	bne.n	8003102 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff13 	bl	8002f28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4aa2      	ldr	r2, [pc, #648]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003126:	4ba2      	ldr	r3, [pc, #648]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003128:	e001      	b.n	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800312a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a9b      	ldr	r2, [pc, #620]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003144:	4b9a      	ldr	r3, [pc, #616]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003146:	e001      	b.n	800314c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d004      	beq.n	8003164 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8099 	bne.w	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f925 	bl	80033c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9c8 	bl	8003528 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d13a      	bne.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d035      	beq.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031b6:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031b8:	e001      	b.n	80031be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4979      	ldr	r1, [pc, #484]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031c6:	428b      	cmp	r3, r1
 80031c8:	d101      	bne.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031ca:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031cc:	e001      	b.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fe88 	bl	8002f28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	f040 80be 	bne.w	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80b8 	beq.w	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800323e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800324a:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800324c:	e001      	b.n	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800324e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4954      	ldr	r1, [pc, #336]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800325a:	428b      	cmp	r3, r1
 800325c:	d101      	bne.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003260:	e001      	b.n	8003266 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003266:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800326a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fe4a 	bl	8002f28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003294:	e084      	b.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d107      	bne.n	80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8be 	bl	800342c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8fd 	bl	80034c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d12f      	bne.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d02a      	beq.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80032f8:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032fa:	e001      	b.n	8003300 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4929      	ldr	r1, [pc, #164]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d101      	bne.n	8003310 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800330e:	e001      	b.n	8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003318:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fdfa 	bl	8002f28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b08      	cmp	r3, #8
 800333c:	d131      	bne.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02c      	beq.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003354:	e001      	b.n	800335a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4912      	ldr	r1, [pc, #72]	; (80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003362:	428b      	cmp	r3, r1
 8003364:	d101      	bne.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003368:	e001      	b.n	800336e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800336a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003372:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003382:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fdc5 	bl	8002f28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800339e:	e000      	b.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033a0:	bf00      	nop
}
 80033a2:	bf00      	nop
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40003800 	.word	0x40003800
 80033b0:	40003400 	.word	0x40003400

080033b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c99      	adds	r1, r3, #2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6251      	str	r1, [r2, #36]	; 0x24
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003408:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ffc9 	bl	80033b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c99      	adds	r1, r3, #2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6251      	str	r1, [r2, #36]	; 0x24
 800343e:	8819      	ldrh	r1, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <I2SEx_TxISR_I2SExt+0x90>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <I2SEx_TxISR_I2SExt+0x22>
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <I2SEx_TxISR_I2SExt+0x94>)
 800344c:	e001      	b.n	8003452 <I2SEx_TxISR_I2SExt+0x26>
 800344e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003452:	460a      	mov	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d121      	bne.n	80034b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <I2SEx_TxISR_I2SExt+0x90>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <I2SEx_TxISR_I2SExt+0x50>
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <I2SEx_TxISR_I2SExt+0x94>)
 800347a:	e001      	b.n	8003480 <I2SEx_TxISR_I2SExt+0x54>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <I2SEx_TxISR_I2SExt+0x90>)
 8003488:	428b      	cmp	r3, r1
 800348a:	d101      	bne.n	8003490 <I2SEx_TxISR_I2SExt+0x64>
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <I2SEx_TxISR_I2SExt+0x94>)
 800348e:	e001      	b.n	8003494 <I2SEx_TxISR_I2SExt+0x68>
 8003490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003494:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003498:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff81 	bl	80033b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40003800 	.word	0x40003800
 80034c0:	40003400 	.word	0x40003400

080034c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68d8      	ldr	r0, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	1c99      	adds	r1, r3, #2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034dc:	b282      	uxth	r2, r0
 80034de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d113      	bne.n	8003520 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003506:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff4a 	bl	80033b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <I2SEx_RxISR_I2SExt+0x16>
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <I2SEx_RxISR_I2SExt+0x94>)
 800353c:	e001      	b.n	8003542 <I2SEx_RxISR_I2SExt+0x1a>
 800353e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003542:	68d8      	ldr	r0, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	1c99      	adds	r1, r3, #2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800354e:	b282      	uxth	r2, r0
 8003550:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d121      	bne.n	80035ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <I2SEx_RxISR_I2SExt+0x50>
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <I2SEx_RxISR_I2SExt+0x94>)
 8003576:	e001      	b.n	800357c <I2SEx_RxISR_I2SExt+0x54>
 8003578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <I2SEx_RxISR_I2SExt+0x90>)
 8003584:	428b      	cmp	r3, r1
 8003586:	d101      	bne.n	800358c <I2SEx_RxISR_I2SExt+0x64>
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <I2SEx_RxISR_I2SExt+0x94>)
 800358a:	e001      	b.n	8003590 <I2SEx_RxISR_I2SExt+0x68>
 800358c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003590:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003594:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff03 	bl	80033b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40003800 	.word	0x40003800
 80035bc:	40003400 	.word	0x40003400

080035c0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e034      	b.n	800363c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80035da:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80035e4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6852      	ldr	r2, [r2, #4]
 80035ee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80035fa:	f7fe f941 	bl	8001880 <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003600:	e00f      	b.n	8003622 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003602:	f7fe f93d 	bl	8001880 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b31      	cmp	r3, #49	; 0x31
 800360e:	d908      	bls.n	8003622 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00c      	b.n	800363c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e8      	bne.n	8003602 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003638:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003670:	f7fe f906 	bl	8001880 <HAL_GetTick>
 8003674:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003676:	e009      	b.n	800368c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003678:	f7fe f902 	bl	8001880 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003686:	d901      	bls.n	800368c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e01f      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_PWREx_EnableOverDrive+0x98>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d1ee      	bne.n	8003678 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7fe f8ee 	bl	8001880 <HAL_GetTick>
 80036a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036a6:	e009      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a8:	f7fe f8ea 	bl	8001880 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b6:	d901      	bls.n	80036bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e007      	b.n	80036cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_PWREx_EnableOverDrive+0x98>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c8:	d1ee      	bne.n	80036a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	420e0040 	.word	0x420e0040
 80036dc:	40007000 	.word	0x40007000
 80036e0:	420e0044 	.word	0x420e0044

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e264      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d075      	beq.n	80037ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	4ba3      	ldr	r3, [pc, #652]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d00c      	beq.n	8003728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	4ba0      	ldr	r3, [pc, #640]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003716:	2b08      	cmp	r3, #8
 8003718:	d112      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371a:	4b9d      	ldr	r3, [pc, #628]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b99      	ldr	r3, [pc, #612]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05b      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d157      	bne.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e23f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x74>
 800374a:	4b91      	ldr	r3, [pc, #580]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a90      	ldr	r2, [pc, #576]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e01d      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a8a      	ldr	r2, [pc, #552]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a87      	ldr	r2, [pc, #540]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 800377c:	4b84      	ldr	r3, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a83      	ldr	r2, [pc, #524]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f870 	bl	8001880 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe f86c 	bl	8001880 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e204      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe f85c 	bl	8001880 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe f858 	bl	8001880 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1f0      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b62      	ldr	r3, [pc, #392]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11c      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1c4      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4952      	ldr	r1, [pc, #328]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <HAL_RCC_OscConfig+0x2b0>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe f811 	bl	8001880 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe f80d 	bl	8001880 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1a5      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4940      	ldr	r1, [pc, #256]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCC_OscConfig+0x2b0>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd fff0 	bl	8001880 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fd ffec 	bl	8001880 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e184      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d030      	beq.n	8003930 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b30      	ldr	r3, [pc, #192]	; (8003998 <HAL_RCC_OscConfig+0x2b4>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd ffd0 	bl	8001880 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd ffcc 	bl	8001880 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e164      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	4b26      	ldr	r3, [pc, #152]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x200>
 8003902:	e015      	b.n	8003930 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x2b4>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fd ffb9 	bl	8001880 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7fd ffb5 	bl	8001880 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e14d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a0 	beq.w	8003a7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_OscConfig+0x2b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d121      	bne.n	80039be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCC_OscConfig+0x2b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a07      	ldr	r2, [pc, #28]	; (800399c <HAL_RCC_OscConfig+0x2b8>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fd ff7b 	bl	8001880 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	e011      	b.n	80039b2 <HAL_RCC_OscConfig+0x2ce>
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	42470000 	.word	0x42470000
 8003998:	42470e80 	.word	0x42470e80
 800399c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fd ff6e 	bl	8001880 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e106      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCC_OscConfig+0x4e4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2f0>
 80039c6:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x32a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x312>
 80039dc:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a7a      	ldr	r2, [pc, #488]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	4b78      	ldr	r3, [pc, #480]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x32a>
 80039f6:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a74      	ldr	r2, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a71      	ldr	r2, [pc, #452]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fd ff33 	bl	8001880 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fd ff2f 	bl	8001880 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0c5      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RCC_OscConfig+0x33a>
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fd ff1d 	bl	8001880 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd ff19 	bl	8001880 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0af      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ee      	bne.n	8003a4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b56      	ldr	r3, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 809b 	beq.w	8003bbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d05c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d141      	bne.n	8003b20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd feed 	bl	8001880 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fee9 	bl	8001880 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e081      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	019b      	lsls	r3, r3, #6
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	4937      	ldr	r1, [pc, #220]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd fec2 	bl	8001880 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd febe 	bl	8001880 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e056      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x41c>
 8003b1e:	e04e      	b.n	8003bbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fd feab 	bl	8001880 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fd fea7 	bl	8001880 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e03f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b40:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x44a>
 8003b4c:	e037      	b.n	8003bbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e032      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d028      	beq.n	8003bba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d121      	bne.n	8003bba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d11a      	bne.n	8003bba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470060 	.word	0x42470060

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fddc 	bl	8001880 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd fdd8 	bl	8001880 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd fd3c 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	0800525c 	.word	0x0800525c
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	2300      	movs	r3, #0
 8003db2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db8:	4b67      	ldr	r3, [pc, #412]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d00d      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	f200 80bd 	bhi.w	8003f44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd2:	e0b7      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dd6:	60bb      	str	r3, [r7, #8]
       break;
 8003dd8:	e0b7      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dda:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ddc:	60bb      	str	r3, [r7, #8]
      break;
 8003dde:	e0b4      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de0:	4b5d      	ldr	r3, [pc, #372]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04d      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	ea02 0800 	and.w	r8, r2, r0
 8003e0e:	ea03 0901 	and.w	r9, r3, r1
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	014b      	lsls	r3, r1, #5
 8003e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e24:	0142      	lsls	r2, r0, #5
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003e2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	018b      	lsls	r3, r1, #6
 8003e3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e40:	0182      	lsls	r2, r0, #6
 8003e42:	1a12      	subs	r2, r2, r0
 8003e44:	eb63 0301 	sbc.w	r3, r3, r1
 8003e48:	f04f 0000 	mov.w	r0, #0
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	00d9      	lsls	r1, r3, #3
 8003e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e56:	00d0      	lsls	r0, r2, #3
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	eb12 0208 	adds.w	r2, r2, r8
 8003e60:	eb43 0309 	adc.w	r3, r3, r9
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	0259      	lsls	r1, r3, #9
 8003e6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e72:	0250      	lsls	r0, r2, #9
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	f7fc fa4a 	bl	800031c <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e04a      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	ea02 0400 	and.w	r4, r2, r0
 8003eaa:	ea03 0501 	and.w	r5, r3, r1
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	014b      	lsls	r3, r1, #5
 8003ebc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ec0:	0142      	lsls	r2, r0, #5
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	1b00      	subs	r0, r0, r4
 8003ec8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	018b      	lsls	r3, r1, #6
 8003ed6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eda:	0182      	lsls	r2, r0, #6
 8003edc:	1a12      	subs	r2, r2, r0
 8003ede:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	00d9      	lsls	r1, r3, #3
 8003eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ef0:	00d0      	lsls	r0, r2, #3
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	1912      	adds	r2, r2, r4
 8003ef8:	eb45 0303 	adc.w	r3, r5, r3
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	0299      	lsls	r1, r3, #10
 8003f06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f0a:	0290      	lsls	r0, r2, #10
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	f7fc f9fe 	bl	800031c <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4613      	mov	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	3301      	adds	r3, #1
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	60bb      	str	r3, [r7, #8]
      break;
 8003f42:	e002      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f46:	60bb      	str	r3, [r7, #8]
      break;
 8003f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	007a1200 	.word	0x007a1200

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000000 	.word	0x20000000

08003f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f80:	f7ff fff0 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0a9b      	lsrs	r3, r3, #10
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800526c 	.word	0x0800526c

08003fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d075      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd8:	4bad      	ldr	r3, [pc, #692]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fde:	f7fd fc4f 	bl	8001880 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe6:	f7fd fc4b 	bl	8001880 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e18b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff8:	4ba6      	ldr	r3, [pc, #664]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	019a      	lsls	r2, r3, #6
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	071b      	lsls	r3, r3, #28
 800401c:	499d      	ldr	r1, [pc, #628]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01f      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004030:	4b98      	ldr	r3, [pc, #608]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004036:	0f1b      	lsrs	r3, r3, #28
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	019a      	lsls	r2, r3, #6
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	431a      	orrs	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	071b      	lsls	r3, r3, #28
 8004050:	4990      	ldr	r1, [pc, #576]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004058:	4b8e      	ldr	r3, [pc, #568]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800405a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405e:	f023 021f 	bic.w	r2, r3, #31
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	3b01      	subs	r3, #1
 8004068:	498a      	ldr	r1, [pc, #552]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	019a      	lsls	r2, r3, #6
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	071b      	lsls	r3, r3, #28
 8004090:	4980      	ldr	r1, [pc, #512]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004098:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800409e:	f7fd fbef 	bl	8001880 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040a6:	f7fd fbeb 	bl	8001880 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e12b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b8:	4b76      	ldr	r3, [pc, #472]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d079      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e2:	f7fd fbcd 	bl	8001880 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040ea:	f7fd fbc9 	bl	8001880 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e109      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040fc:	4b65      	ldr	r3, [pc, #404]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004108:	d0ef      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004116:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	0f1b      	lsrs	r3, r3, #28
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	019a      	lsls	r2, r3, #6
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4957      	ldr	r1, [pc, #348]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004144:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	3b01      	subs	r3, #1
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4950      	ldr	r1, [pc, #320]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004164:	4b4b      	ldr	r3, [pc, #300]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	0e1b      	lsrs	r3, r3, #24
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	019a      	lsls	r2, r3, #6
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	071b      	lsls	r3, r3, #28
 8004184:	4943      	ldr	r1, [pc, #268]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800418c:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	493e      	ldr	r1, [pc, #248]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041a2:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041a8:	f7fd fb6a 	bl	8001880 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fd fb66 	bl	8001880 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0a6      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 808d 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a2b      	ldr	r2, [pc, #172]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041fa:	4b28      	ldr	r3, [pc, #160]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004206:	f7fd fb3b 	bl	8001880 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fd fb37 	bl	8001880 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e077      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d039      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d032      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004260:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11e      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd fb05 	bl	8001880 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	e014      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fd fb01 	bl	8001880 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d90b      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e03f      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004290:	42470068 	.word	0x42470068
 8004294:	40023800 	.word	0x40023800
 8004298:	42470070 	.word	0x42470070
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0e4      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042bc:	d10d      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	4911      	ldr	r1, [pc, #68]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
 80042d8:	e005      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042e4:	6093      	str	r3, [r2, #8]
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	4909      	ldr	r1, [pc, #36]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800430c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	424711e0 	.word	0x424711e0

08004320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d13f      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d130      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004354:	f44f 13fa 	mov.w	r3, #2048000	; 0x1f4000
 8004358:	617b      	str	r3, [r7, #20]
          break;
 800435a:	e02f      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004368:	d108      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e007      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	617b      	str	r3, [r7, #20]
          break;
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
          break;
 80043ba:	bf00      	nop
        }
      }
      break;
 80043bc:	bf00      	nop
    }
  }
  return frequency;
 80043be:	697b      	ldr	r3, [r7, #20]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40023800 	.word	0x40023800
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	00f42400 	.word	0x00f42400

080043d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e10c      	b.n	8004614 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f86a 	bl	80014e8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f903 	bl	8004628 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f938 	bl	8004698 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d030      	beq.n	8004492 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f957 	bl	80046e4 <SAI_GetInputClock>
 8004436:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	025b      	lsls	r3, r3, #9
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a72      	ldr	r2, [pc, #456]	; (800461c <HAL_SAI_Init+0x244>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	4b6e      	ldr	r3, [pc, #440]	; (800461c <HAL_SAI_Init+0x244>)
 8004462:	fba3 2301 	umull	r2, r3, r3, r1
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	1aca      	subs	r2, r1, r3
 8004472:	2a08      	cmp	r2, #8
 8004474:	d904      	bls.n	8004480 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b04      	cmp	r3, #4
 8004486:	d104      	bne.n	8004492 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	085a      	lsrs	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_SAI_Init+0xca>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d109      	bne.n	80044b6 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_SAI_Init+0xd6>
 80044aa:	2300      	movs	r3, #0
 80044ac:	e001      	b.n	80044b2 <HAL_SAI_Init+0xda>
 80044ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e008      	b.n	80044c8 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_SAI_Init+0xec>
 80044be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c2:	e000      	b.n	80044c6 <HAL_SAI_Init+0xee>
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d811      	bhi.n	80044f4 <HAL_SAI_Init+0x11c>
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d20b      	bcs.n	80044ec <HAL_SAI_Init+0x114>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_SAI_Init+0x106>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d003      	beq.n	80044e4 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80044dc:	e00a      	b.n	80044f4 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
    break;
 80044e2:	e008      	b.n	80044f6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80044e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e8:	613b      	str	r3, [r7, #16]
    break;
 80044ea:	e004      	b.n	80044f6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044f0:	613b      	str	r3, [r7, #16]
    break;
 80044f2:	e000      	b.n	80044f6 <HAL_SAI_Init+0x11e>
      break;
 80044f4:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_SAI_Init+0x248>)
 8004502:	400b      	ands	r3, r1
 8004504:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800451a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	431a      	orrs	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800452e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800453a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	051b      	lsls	r3, r3, #20
 8004542:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800455a:	f023 030f 	bic.w	r3, r3, #15
 800455e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b26      	ldr	r3, [pc, #152]	; (8004624 <HAL_SAI_Init+0x24c>)
 800458a:	400b      	ands	r3, r1
 800458c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800459e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 80045a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 80045aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b0:	3b01      	subs	r3, #1
 80045b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80045b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68d9      	ldr	r1, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80045cc:	400b      	ands	r3, r1
 80045ce:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68d9      	ldr	r1, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80045e6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	3b01      	subs	r3, #1
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	cccccccd 	.word	0xcccccccd
 8004620:	ff05c010 	.word	0xff05c010
 8004624:	fff88000 	.word	0xfff88000

08004628 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <SAI_Disable+0x68>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a17      	ldr	r2, [pc, #92]	; (8004694 <SAI_Disable+0x6c>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0b1b      	lsrs	r3, r3, #12
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004652:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	60fa      	str	r2, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	72fb      	strb	r3, [r7, #11]
      break;
 8004672:	e006      	b.n	8004682 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e8      	bne.n	8004654 <SAI_Disable+0x2c>

  return status;
 8004682:	7afb      	ldrb	r3, [r7, #11]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000000 	.word	0x20000000
 8004694:	95cbec1b 	.word	0x95cbec1b

08004698 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d00c      	beq.n	80046c2 <SAI_BlockSynchroConfig+0x2a>
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d80d      	bhi.n	80046c8 <SAI_BlockSynchroConfig+0x30>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <SAI_BlockSynchroConfig+0x1e>
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d003      	beq.n	80046bc <SAI_BlockSynchroConfig+0x24>
 80046b4:	e008      	b.n	80046c8 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
      break;
 80046ba:	e008      	b.n	80046ce <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80046bc:	2310      	movs	r3, #16
 80046be:	60fb      	str	r3, [r7, #12]
      break;
 80046c0:	e005      	b.n	80046ce <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80046c2:	2320      	movs	r3, #32
 80046c4:	60fb      	str	r3, [r7, #12]
      break;
 80046c6:	e002      	b.n	80046ce <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
      break;
 80046cc:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80046ce:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <SAI_BlockSynchroConfig+0x48>)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40015800 	.word	0x40015800

080046e4 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a45      	ldr	r2, [pc, #276]	; (8004814 <SAI_GetInputClock+0x130>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10b      	bne.n	800471a <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8004702:	4b45      	ldr	r3, [pc, #276]	; (8004818 <SAI_GetInputClock+0x134>)
 8004704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4941      	ldr	r1, [pc, #260]	; (8004818 <SAI_GetInputClock+0x134>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004718:	e00b      	b.n	8004732 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <SAI_GetInputClock+0x134>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	493b      	ldr	r1, [pc, #236]	; (8004818 <SAI_GetInputClock+0x134>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <SAI_GetInputClock+0x134>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d108      	bne.n	8004750 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <SAI_GetInputClock+0x134>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004746:	4a35      	ldr	r2, [pc, #212]	; (800481c <SAI_GetInputClock+0x138>)
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e007      	b.n	8004760 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <SAI_GetInputClock+0x134>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004758:	4a31      	ldr	r2, [pc, #196]	; (8004820 <SAI_GetInputClock+0x13c>)
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d121      	bne.n	80047ac <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <SAI_GetInputClock+0x134>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	0e1b      	lsrs	r3, r3, #24
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8004776:	4b28      	ldr	r3, [pc, #160]	; (8004818 <SAI_GetInputClock+0x134>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	fb02 f203 	mul.w	r2, r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <SAI_GetInputClock+0x134>)
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e02b      	b.n	8004804 <SAI_GetInputClock+0x120>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b4:	d120      	bne.n	80047f8 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <SAI_GetInputClock+0x134>)
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <SAI_GetInputClock+0x134>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	fb02 f203 	mul.w	r2, r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <SAI_GetInputClock+0x134>)
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e005      	b.n	8004804 <SAI_GetInputClock+0x120>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <SAI_GetInputClock+0x140>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80047fe:	f44f 13fa 	mov.w	r3, #2048000	; 0x1f4000
 8004802:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004804:	697b      	ldr	r3, [r7, #20]
}
 8004806:	4618      	mov	r0, r3
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40015804 	.word	0x40015804
 8004818:	40023800 	.word	0x40023800
 800481c:	00f42400 	.word	0x00f42400
 8004820:	007a1200 	.word	0x007a1200
 8004824:	4247015c 	.word	0x4247015c

08004828 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	; 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2103      	movs	r1, #3
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	61bb      	str	r3, [r7, #24]
  return result;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	605a      	str	r2, [r3, #4]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b089      	sub	sp, #36	; 0x24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	613b      	str	r3, [r7, #16]
  return result;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2103      	movs	r1, #3
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	401a      	ands	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	61bb      	str	r3, [r7, #24]
  return result;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	431a      	orrs	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004908:	bf00      	nop
 800490a:	3724      	adds	r7, #36	; 0x24
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	613b      	str	r3, [r7, #16]
  return result;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2103      	movs	r1, #3
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	61bb      	str	r3, [r7, #24]
  return result;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	60da      	str	r2, [r3, #12]
}
 8004966:	bf00      	nop
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004972:	b480      	push	{r7}
 8004974:	b089      	sub	sp, #36	; 0x24
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa93 f3a3 	rbit	r3, r3
 800498c:	613b      	str	r3, [r7, #16]
  return result;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	fab3 f383 	clz	r3, r3
 8004994:	b2db      	uxtb	r3, r3
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	210f      	movs	r1, #15
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	401a      	ands	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	61bb      	str	r3, [r7, #24]
  return result;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80049c4:	bf00      	nop
 80049c6:	3724      	adds	r7, #36	; 0x24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	613b      	str	r3, [r7, #16]
  return result;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	210f      	movs	r1, #15
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	401a      	ands	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	61bb      	str	r3, [r7, #24]
  return result;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b088      	sub	sp, #32
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	613b      	str	r3, [r7, #16]
  return result;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	fab3 f383 	clz	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a5c:	e050      	b.n	8004b00 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	2101      	movs	r1, #1
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d042      	beq.n	8004afa <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d003      	beq.n	8004a84 <LL_GPIO_Init+0x52>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d10d      	bne.n	8004aa0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff12 	bl	80048b6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fef3 	bl	8004886 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	69b9      	ldr	r1, [r7, #24]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff33 	bl	8004914 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d11a      	bne.n	8004aec <LL_GPIO_Init+0xba>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	60bb      	str	r3, [r7, #8]
  return result;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b07      	cmp	r3, #7
 8004acc:	d807      	bhi.n	8004ade <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff4b 	bl	8004972 <LL_GPIO_SetAFPin_0_7>
 8004adc:	e006      	b.n	8004aec <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff72 	bl	80049d0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	461a      	mov	r2, r3
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fe97 	bl	8004828 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1a7      	bne.n	8004a5e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <LL_RCC_GetSysClkSource+0x18>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <LL_RCC_GetAHBPrescaler+0x18>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800

08004b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800

08004b6c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800

08004b88 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <LL_RCC_PLL_GetMainSource+0x18>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <LL_RCC_PLL_GetN+0x18>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <LL_RCC_PLL_GetP+0x18>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800

08004bdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <LL_RCC_PLL_GetDivider+0x18>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800

08004bf8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004c00:	f000 f820 	bl	8004c44 <RCC_GetSystemClockFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f840 	bl	8004c94 <RCC_GetHCLKClockFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f84e 	bl	8004cc0 <RCC_GetPCLK1ClockFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f85a 	bl	8004ce8 <RCC_GetPCLK2ClockFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004c4e:	f7ff ff63 	bl	8004b18 <LL_RCC_GetSysClkSource>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d00c      	beq.n	8004c72 <RCC_GetSystemClockFreq+0x2e>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d80f      	bhi.n	8004c7c <RCC_GetSystemClockFreq+0x38>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <RCC_GetSystemClockFreq+0x22>
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d003      	beq.n	8004c6c <RCC_GetSystemClockFreq+0x28>
 8004c64:	e00a      	b.n	8004c7c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <RCC_GetSystemClockFreq+0x48>)
 8004c68:	607b      	str	r3, [r7, #4]
      break;
 8004c6a:	e00a      	b.n	8004c82 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <RCC_GetSystemClockFreq+0x4c>)
 8004c6e:	607b      	str	r3, [r7, #4]
      break;
 8004c70:	e007      	b.n	8004c82 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004c72:	2008      	movs	r0, #8
 8004c74:	f000 f84c 	bl	8004d10 <RCC_PLL_GetFreqDomain_SYS>
 8004c78:	6078      	str	r0, [r7, #4]
      break;
 8004c7a:	e002      	b.n	8004c82 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <RCC_GetSystemClockFreq+0x48>)
 8004c7e:	607b      	str	r3, [r7, #4]
      break;
 8004c80:	bf00      	nop
  }

  return frequency;
 8004c82:	687b      	ldr	r3, [r7, #4]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c9c:	f7ff ff4a 	bl	8004b34 <LL_RCC_GetAHBPrescaler>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <RCC_GetHCLKClockFreq+0x28>)
 8004caa:	5cd3      	ldrb	r3, [r2, r3]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	40d3      	lsrs	r3, r2
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	0800525c 	.word	0x0800525c

08004cc0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004cc8:	f7ff ff42 	bl	8004b50 <LL_RCC_GetAPB1Prescaler>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	0a9b      	lsrs	r3, r3, #10
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	40d3      	lsrs	r3, r2
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	0800526c 	.word	0x0800526c

08004ce8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004cf0:	f7ff ff3c 	bl	8004b6c <LL_RCC_GetAPB2Prescaler>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	0b5b      	lsrs	r3, r3, #13
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <RCC_GetPCLK2ClockFreq+0x24>)
 8004cfa:	5cd3      	ldrb	r3, [r2, r3]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	40d3      	lsrs	r3, r2
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	0800526c 	.word	0x0800526c

08004d10 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004d24:	f7ff ff30 	bl	8004b88 <LL_RCC_PLL_GetMainSource>
 8004d28:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d36:	d003      	beq.n	8004d40 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004d38:	e005      	b.n	8004d46 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004d3c:	617b      	str	r3, [r7, #20]
      break;
 8004d3e:	e005      	b.n	8004d4c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004d42:	617b      	str	r3, [r7, #20]
      break;
 8004d44:	e002      	b.n	8004d4c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004d46:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004d48:	617b      	str	r3, [r7, #20]
      break;
 8004d4a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d113      	bne.n	8004d7a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004d52:	f7ff ff43 	bl	8004bdc <LL_RCC_PLL_GetDivider>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fbb3 f4f2 	udiv	r4, r3, r2
 8004d5e:	f7ff ff21 	bl	8004ba4 <LL_RCC_PLL_GetN>
 8004d62:	4603      	mov	r3, r0
 8004d64:	fb03 f404 	mul.w	r4, r3, r4
 8004d68:	f7ff ff2a 	bl	8004bc0 <LL_RCC_PLL_GetP>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	3301      	adds	r3, #1
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d78:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004d7a:	693b      	ldr	r3, [r7, #16]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd90      	pop	{r4, r7, pc}
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <LL_USART_IsEnabled>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_USART_SetStopBitsLength>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <LL_USART_SetHWFlowCtrl>:
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	615a      	str	r2, [r3, #20]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_USART_SetBaudRate>:
{
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	b09f      	sub	sp, #124	; 0x7c
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6778      	str	r0, [r7, #116]	; 0x74
 8004e0a:	6739      	str	r1, [r7, #112]	; 0x70
 8004e0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e0e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e16:	f040 80bc 	bne.w	8004f92 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	461c      	mov	r4, r3
 8004e1e:	f04f 0500 	mov.w	r5, #0
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	eb12 0a02 	adds.w	sl, r2, r2
 8004e2a:	eb43 0b03 	adc.w	fp, r3, r3
 8004e2e:	4652      	mov	r2, sl
 8004e30:	465b      	mov	r3, fp
 8004e32:	1912      	adds	r2, r2, r4
 8004e34:	eb45 0303 	adc.w	r3, r5, r3
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	00d9      	lsls	r1, r3, #3
 8004e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e46:	00d0      	lsls	r0, r2, #3
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	1911      	adds	r1, r2, r4
 8004e4e:	6639      	str	r1, [r7, #96]	; 0x60
 8004e50:	416b      	adcs	r3, r5
 8004e52:	667b      	str	r3, [r7, #100]	; 0x64
 8004e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e56:	461a      	mov	r2, r3
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	6339      	str	r1, [r7, #48]	; 0x30
 8004e60:	415b      	adcs	r3, r3
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
 8004e64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e6c:	f7fb fa56 	bl	800031c <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4ba9      	ldr	r3, [pc, #676]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004e76:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	b29e      	uxth	r6, r3
 8004e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e84:	461c      	mov	r4, r3
 8004e86:	f04f 0500 	mov.w	r5, #0
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	1891      	adds	r1, r2, r2
 8004e90:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e92:	415b      	adcs	r3, r3
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e9a:	1912      	adds	r2, r2, r4
 8004e9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ea0:	f04f 0000 	mov.w	r0, #0
 8004ea4:	f04f 0100 	mov.w	r1, #0
 8004ea8:	00d9      	lsls	r1, r3, #3
 8004eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eae:	00d0      	lsls	r0, r2, #3
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	1911      	adds	r1, r2, r4
 8004eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eb8:	416b      	adcs	r3, r5
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	6239      	str	r1, [r7, #32]
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ed4:	f7fb fa22 	bl	800031c <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4b8f      	ldr	r3, [pc, #572]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004ede:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2164      	movs	r1, #100	; 0x64
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a8a      	ldr	r2, [pc, #552]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4433      	add	r3, r6
 8004f06:	b29e      	uxth	r6, r3
 8004f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	1894      	adds	r4, r2, r2
 8004f16:	61bc      	str	r4, [r7, #24]
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	1812      	adds	r2, r2, r0
 8004f22:	eb41 0303 	adc.w	r3, r1, r3
 8004f26:	f04f 0400 	mov.w	r4, #0
 8004f2a:	f04f 0500 	mov.w	r5, #0
 8004f2e:	00dd      	lsls	r5, r3, #3
 8004f30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f34:	00d4      	lsls	r4, r2, #3
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	1814      	adds	r4, r2, r0
 8004f3c:	653c      	str	r4, [r7, #80]	; 0x50
 8004f3e:	414b      	adcs	r3, r1
 8004f40:	657b      	str	r3, [r7, #84]	; 0x54
 8004f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	1891      	adds	r1, r2, r2
 8004f4c:	6139      	str	r1, [r7, #16]
 8004f4e:	415b      	adcs	r3, r3
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f5a:	f7fb f9df 	bl	800031c <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4b6e      	ldr	r3, [pc, #440]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004f64:	fba3 1302 	umull	r1, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	2164      	movs	r1, #100	; 0x64
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3332      	adds	r3, #50	; 0x32
 8004f76:	4a69      	ldr	r2, [pc, #420]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	4433      	add	r3, r6
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	e0be      	b.n	8005110 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f94:	461c      	mov	r4, r3
 8004f96:	f04f 0500 	mov.w	r5, #0
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	eb12 0802 	adds.w	r8, r2, r2
 8004fa2:	eb43 0903 	adc.w	r9, r3, r3
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	1912      	adds	r2, r2, r4
 8004fac:	eb45 0303 	adc.w	r3, r5, r3
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	00d9      	lsls	r1, r3, #3
 8004fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fbe:	00d0      	lsls	r0, r2, #3
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	1911      	adds	r1, r2, r4
 8004fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fc8:	416b      	adcs	r3, r5
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f04f 0100 	mov.w	r1, #0
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	008b      	lsls	r3, r1, #2
 8004fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fe2:	0082      	lsls	r2, r0, #2
 8004fe4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fe8:	f7fb f998 	bl	800031c <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	b29e      	uxth	r6, r3
 8004ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005000:	4618      	mov	r0, r3
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	1894      	adds	r4, r2, r2
 800500c:	60bc      	str	r4, [r7, #8]
 800500e:	415b      	adcs	r3, r3
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005016:	1812      	adds	r2, r2, r0
 8005018:	eb41 0303 	adc.w	r3, r1, r3
 800501c:	f04f 0400 	mov.w	r4, #0
 8005020:	f04f 0500 	mov.w	r5, #0
 8005024:	00dd      	lsls	r5, r3, #3
 8005026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800502a:	00d4      	lsls	r4, r2, #3
 800502c:	4622      	mov	r2, r4
 800502e:	462b      	mov	r3, r5
 8005030:	1814      	adds	r4, r2, r0
 8005032:	643c      	str	r4, [r7, #64]	; 0x40
 8005034:	414b      	adcs	r3, r1
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
 8005038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800503a:	4618      	mov	r0, r3
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	008b      	lsls	r3, r1, #2
 800504a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800504e:	0082      	lsls	r2, r0, #2
 8005050:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005054:	f7fb f962 	bl	800031c <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4b2f      	ldr	r3, [pc, #188]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 800505e:	fba3 1302 	umull	r1, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2164      	movs	r1, #100	; 0x64
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a2a      	ldr	r2, [pc, #168]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	b29b      	uxth	r3, r3
 800507a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507e:	b29b      	uxth	r3, r3
 8005080:	4433      	add	r3, r6
 8005082:	b29e      	uxth	r6, r3
 8005084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005086:	4618      	mov	r0, r3
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	1894      	adds	r4, r2, r2
 8005092:	603c      	str	r4, [r7, #0]
 8005094:	415b      	adcs	r3, r3
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509c:	1812      	adds	r2, r2, r0
 800509e:	eb41 0303 	adc.w	r3, r1, r3
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	f04f 0500 	mov.w	r5, #0
 80050aa:	00dd      	lsls	r5, r3, #3
 80050ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050b0:	00d4      	lsls	r4, r2, #3
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	1814      	adds	r4, r2, r0
 80050b8:	63bc      	str	r4, [r7, #56]	; 0x38
 80050ba:	414b      	adcs	r3, r1
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c0:	4618      	mov	r0, r3
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050d4:	0082      	lsls	r2, r0, #2
 80050d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80050da:	f7fb f91f 	bl	800031c <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <LL_USART_SetBaudRate+0x31c>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	b29b      	uxth	r3, r3
 8005106:	4433      	add	r3, r6
 8005108:	b29b      	uxth	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	377c      	adds	r7, #124	; 0x7c
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	bf00      	nop
 800511c:	51eb851f 	.word	0x51eb851f

08005120 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fe2a 	bl	8004d8c <LL_USART_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d16c      	bne.n	8005218 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005146:	f023 030c 	bic.w	r3, r3, #12
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	6851      	ldr	r1, [r2, #4]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	68d2      	ldr	r2, [r2, #12]
 8005152:	4311      	orrs	r1, r2
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	6912      	ldr	r2, [r2, #16]
 8005158:	4311      	orrs	r1, r2
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	6992      	ldr	r2, [r2, #24]
 800515e:	430a      	orrs	r2, r1
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fe21 	bl	8004db4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fe2e 	bl	8004dda <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fd38 	bl	8004bf8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <LL_USART_Init+0x104>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d102      	bne.n	8005196 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e02f      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <LL_USART_Init+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d102      	bne.n	80051a4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e028      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <LL_USART_Init+0x10c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d102      	bne.n	80051b2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e021      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <LL_USART_Init+0x110>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d102      	bne.n	80051c0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e01a      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <LL_USART_Init+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d102      	bne.n	80051ce <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e013      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <LL_USART_Init+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d102      	bne.n	80051dc <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	e00c      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <LL_USART_Init+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d102      	bne.n	80051ea <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e005      	b.n	80051f6 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <LL_USART_Init+0x120>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005204:	2300      	movs	r3, #0
 8005206:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fdf4 	bl	8004e00 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005218:	7ffb      	ldrb	r3, [r7, #31]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40011000 	.word	0x40011000
 8005228:	40004400 	.word	0x40004400
 800522c:	40004800 	.word	0x40004800
 8005230:	40011400 	.word	0x40011400
 8005234:	40004c00 	.word	0x40004c00
 8005238:	40005000 	.word	0x40005000
 800523c:	40007800 	.word	0x40007800
 8005240:	40007c00 	.word	0x40007c00

08005244 <_init>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr

08005250 <_fini>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr
