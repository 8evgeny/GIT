
test_mega64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000216  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000106  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ec  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fc  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
    DDRE |= ( 1 << 4 );
  a4:	14 9a       	sbi	0x02, 4	; 2
    DDRE |= ( 1 << 5 );
  a6:	15 9a       	sbi	0x02, 5	; 2
    DDRE |= ( 1 << 6 );
  a8:	16 9a       	sbi	0x02, 6	; 2
    DDRE |= ( 1 << 7 );
  aa:	17 9a       	sbi	0x02, 7	; 2
//    DDRE = 0b11110000; //Можно и так
     while (1)
     {
             PORTE = 0b00010000;
  ac:	30 e1       	ldi	r19, 0x10	; 16
             _delay_ms(500);
             PORTE = 0b00100000;
  ae:	20 e2       	ldi	r18, 0x20	; 32
             _delay_ms(500);
             PORTE = 0b01000000;
  b0:	90 e4       	ldi	r25, 0x40	; 64
             _delay_ms(500);
			 PORTE = 0b10000000;
  b2:	80 e8       	ldi	r24, 0x80	; 128
    DDRE |= ( 1 << 6 );
    DDRE |= ( 1 << 7 );
//    DDRE = 0b11110000; //Можно и так
     while (1)
     {
             PORTE = 0b00010000;
  b4:	33 b9       	out	0x03, r19	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	4f e9       	ldi	r20, 0x9F	; 159
  b8:	56 e8       	ldi	r21, 0x86	; 134
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	50 40       	sbci	r21, 0x00	; 0
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x18>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x22>
  c6:	00 00       	nop
             _delay_ms(500);
             PORTE = 0b00100000;
  c8:	23 b9       	out	0x03, r18	; 3
  ca:	4f e9       	ldi	r20, 0x9F	; 159
  cc:	56 e8       	ldi	r21, 0x86	; 134
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	50 40       	sbci	r21, 0x00	; 0
  d4:	60 40       	sbci	r22, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x36>
  da:	00 00       	nop
             _delay_ms(500);
             PORTE = 0b01000000;
  dc:	93 b9       	out	0x03, r25	; 3
  de:	4f e9       	ldi	r20, 0x9F	; 159
  e0:	56 e8       	ldi	r21, 0x86	; 134
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	41 50       	subi	r20, 0x01	; 1
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	60 40       	sbci	r22, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x40>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x4a>
  ee:	00 00       	nop
             _delay_ms(500);
			 PORTE = 0b10000000;
  f0:	83 b9       	out	0x03, r24	; 3
  f2:	4f e9       	ldi	r20, 0x9F	; 159
  f4:	56 e8       	ldi	r21, 0x86	; 134
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x54>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x5e>
 102:	00 00       	nop
 104:	d7 cf       	rjmp	.-82     	; 0xb4 <main+0x10>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
