
Studio2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  008001f8  008001f8  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6a  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a28  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000524  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 3f       	cpi	r26, 0xF8	; 248
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 ef       	ldi	r26, 0xF8	; 248
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4c d0       	rcall	.+152    	; 0x15c <main>
  c4:	75 c1       	rjmp	.+746    	; 0x3b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <uart_putchar>:
// функция вывода символа
static int uart_putchar(char c, FILE *stream)
{
	//    if (c == '\n')
	//        uart_putchar('\r', stream);
	loop_until_bit_is_set(UCSR0A, UDRE0);
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart_putchar>
	UDR0 = c;
  cc:	8c b9       	out	0x0c, r24	; 12
	//    special_output_port = c; //ХЗ
	return 0;
}
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <setLed>:
	}
	return false;
}
static void setLed(int num)
{
	switch(num) {
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	91 05       	cpc	r25, r1
  d8:	89 f0       	breq	.+34     	; 0xfc <setLed+0x28>
  da:	2c f4       	brge	.+10     	; 0xe6 <setLed+0x12>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	51 f0       	breq	.+20     	; 0xf4 <setLed+0x20>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	51 f0       	breq	.+20     	; 0xf8 <setLed+0x24>
  e4:	08 95       	ret
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	91 05       	cpc	r25, r1
  ea:	61 f0       	breq	.+24     	; 0x104 <setLed+0x30>
  ec:	4c f0       	brlt	.+18     	; 0x100 <setLed+0x2c>
  ee:	05 97       	sbiw	r24, 0x05	; 5
  f0:	59 f0       	breq	.+22     	; 0x108 <setLed+0x34>
  f2:	08 95       	ret
		case 0:
		PORTC &= 0b11111011;
  f4:	aa 98       	cbi	0x15, 2	; 21
		led[num] = true;
		break;
  f6:	08 95       	ret
		case 1:
		PORTC &= 0b11110111;
  f8:	ab 98       	cbi	0x15, 3	; 21
		led[num] = true;
		break;
  fa:	08 95       	ret
		case 2:
		PORTC &= 0b11101111;
  fc:	ac 98       	cbi	0x15, 4	; 21
		led[num] = true;
		break;
  fe:	08 95       	ret
		case 3:
		PORTC &= 0b11011111;
 100:	ad 98       	cbi	0x15, 5	; 21
		led[num] = true;
		break;
 102:	08 95       	ret
		case 4:
		PORTC &= 0b10111111;
 104:	ae 98       	cbi	0x15, 6	; 21
		led[num] = true;
		break;
 106:	08 95       	ret
		case 5:
		PORTC &= 0b01111111;
 108:	af 98       	cbi	0x15, 7	; 21
 10a:	08 95       	ret

0000010c <resetLed>:
		break;
	}
}
static void resetLed(int num)
{
	switch(num) {
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	91 05       	cpc	r25, r1
 110:	89 f0       	breq	.+34     	; 0x134 <resetLed+0x28>
 112:	2c f4       	brge	.+10     	; 0x11e <resetLed+0x12>
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	51 f0       	breq	.+20     	; 0x12c <resetLed+0x20>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	51 f0       	breq	.+20     	; 0x130 <resetLed+0x24>
 11c:	08 95       	ret
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	91 05       	cpc	r25, r1
 122:	61 f0       	breq	.+24     	; 0x13c <resetLed+0x30>
 124:	4c f0       	brlt	.+18     	; 0x138 <resetLed+0x2c>
 126:	05 97       	sbiw	r24, 0x05	; 5
 128:	59 f0       	breq	.+22     	; 0x140 <resetLed+0x34>
 12a:	08 95       	ret
		case 0:
		PORTC |= 0b00000100;
 12c:	aa 9a       	sbi	0x15, 2	; 21
		led[num] = false;
		break;
 12e:	08 95       	ret
		case 1:
		PORTC |= 0b00001000;
 130:	ab 9a       	sbi	0x15, 3	; 21
		led[num] = false;
		break;
 132:	08 95       	ret
		case 2:
		PORTC |= 0b00010000;
 134:	ac 9a       	sbi	0x15, 4	; 21
		led[num] = false;
		break;
 136:	08 95       	ret
		case 3:
		PORTC |= 0b00100000;
 138:	ad 9a       	sbi	0x15, 5	; 21
		led[num] = false;
		break;
 13a:	08 95       	ret
		case 4:
		PORTC |= 0b01000000;
 13c:	ae 9a       	sbi	0x15, 6	; 21
		led[num] = false;
		break;
 13e:	08 95       	ret
		case 5:
		PORTC |= 0b10000000;
 140:	af 9a       	sbi	0x15, 7	; 21
 142:	08 95       	ret

00000144 <USART_sendLine>:
}
static unsigned char USART0_Receive( void ) {
	while ( !(UCSR0A & (1<<RXC0)));         //Wait for data to be received
	return UDR0;                            //Get and return received data from buffer
}
static void USART_sendLine(char *string) {
 144:	fc 01       	movw	r30, r24
	while ( *string ) {
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	39 f0       	breq	.+14     	; 0x15a <USART_sendLine+0x16>
 14c:	31 96       	adiw	r30, 0x01	; 1
static char USART_receiveChar(void) {
	return ( (UCSR0A >> RXC0) & 1 ) ? UDR0 : 0;  // возвращаем значение буфера приёма
}
// Отправка ASCII символа
static void USART_sendChar(char character) {
	loop_until_bit_is_set(UCSR0A, UDRE0);
 14e:	5d 9b       	sbis	0x0b, 5	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <USART_sendLine+0xa>
	//    while ( !( UCSR0A & (1<<UDRE0)));   //Wait for empty transmit buffer
	UDR0 = character;                        //Put data into buffer, sends the data
 152:	9c b9       	out	0x0c, r25	; 12
static unsigned char USART0_Receive( void ) {
	while ( !(UCSR0A & (1<<RXC0)));         //Wait for data to be received
	return UDR0;                            //Get and return received data from buffer
}
static void USART_sendLine(char *string) {
	while ( *string ) {
 154:	91 91       	ld	r25, Z+
 156:	91 11       	cpse	r25, r1
 158:	fa cf       	rjmp	.-12     	; 0x14e <USART_sendLine+0xa>
 15a:	08 95       	ret

0000015c <main>:
}


static void GPIO_Init()
{
	DDRC = 0b11111100;  //6 светодиодов  PC2 - PC7 инверсия (1 - не горит)
 15c:	8c ef       	ldi	r24, 0xFC	; 252
 15e:	84 bb       	out	0x14, r24	; 20
	DDRF = 0b0000000;   //6 рычагов  PF2 - PF7 (предположительно нулем )
 160:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0b11111100; //Подтяжка к 1
 164:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	PORTC = 0b11111111;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	85 bb       	out	0x15, r24	; 21
	++numLedAlive;
	if (numLedAlive == 7)
	numLedAlive = 1;
}
static void USART0_Init() {
	UBRR0H = (unsigned char) (BRC >> 8);  // порт UART0, скорость = BUAD
 16c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)  BRC;
 170:	89 e1       	ldi	r24, 0x19	; 25
 172:	89 b9       	out	0x09, r24	; 9

	UCSR0B |= (1 << TXEN); //разрешение передачи
 174:	53 9a       	sbi	0x0a, 3	; 10
	UCSR0C |= (1 << UCSZ1) | (1 << UCSZ0); //8 бит
 176:	e5 e9       	ldi	r30, 0x95	; 149
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	86 60       	ori	r24, 0x06	; 6
 17e:	80 83       	st	Z, r24


int main() {
	GPIO_Init();
	USART0_Init();
	stdout = &mystdout;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__iob+0x3>
 188:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__iob+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	21 2c       	mov	r2, r1
						signalPressed[i] = 1;
					}
					break;
					case 2: {
						USART_sendLine("Button 3 pressed\r\n");
						signalPressed[i] = 1;
 18e:	33 24       	eor	r3, r3
 190:	33 94       	inc	r3
		if (!(PINF & 0b00010000)) {
			butON[num] = true;
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 192:	0f 2e       	mov	r0, r31
 194:	f4 e0       	ldi	r31, 0x04	; 4
 196:	6f 2e       	mov	r6, r31
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	7f 2e       	mov	r7, r31
 19c:	f0 2d       	mov	r31, r0
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x46>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x4c>
 1a8:	00 00       	nop
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f2 ef       	ldi	r31, 0xF2	; 242
 1ae:	af 2e       	mov	r10, r31
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	bf 2e       	mov	r11, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f8 ef       	ldi	r31, 0xF8	; 248
 1ba:	8f 2e       	mov	r8, r31
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	9f 2e       	mov	r9, r31
 1c0:	f0 2d       	mov	r31, r0
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f4 e0       	ldi	r31, 0x04	; 4
 1c6:	cf 2e       	mov	r12, r31
 1c8:	f2 e0       	ldi	r31, 0x02	; 2
 1ca:	df 2e       	mov	r13, r31
 1cc:	f0 2d       	mov	r31, r0
 1ce:	0f 2e       	mov	r0, r31
 1d0:	fe ef       	ldi	r31, 0xFE	; 254
 1d2:	ef 2e       	mov	r14, r31
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	ff 2e       	mov	r15, r31
 1d8:	f0 2d       	mov	r31, r0
 1da:	c2 2d       	mov	r28, r2
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	de 2f       	mov	r29, r30
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <main+0x9a>
 1e2:	ff ef       	ldi	r31, 0xFF	; 255
 1e4:	8f 1a       	sub	r8, r31
 1e6:	9f 0a       	sbc	r9, r31
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	c8 1a       	sub	r12, r24
 1ec:	d8 0a       	sbc	r13, r24
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	e9 1a       	sub	r14, r25
 1f2:	f9 0a       	sbc	r15, r25
//        USART_sendLine(buff);
//        va_end(args);
//}


int main() {
 1f4:	e8 01       	movw	r28, r16
 1f6:	8c 2f       	mov	r24, r28
 1f8:	9d 2f       	mov	r25, r29
	UDR0 = character;                        //Put data into buffer, sends the data
}

static void checkButtons(){
	for (int i = 0; i < 6; ++i) {
		if (Buttons[i]) { //Если рычаг существует
 1fa:	f5 01       	movw	r30, r10
 1fc:	21 91       	ld	r18, Z+
 1fe:	5f 01       	movw	r10, r30
 200:	8e 01       	movw	r16, r28
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	22 23       	and	r18, r18
 208:	09 f4       	brne	.+2      	; 0x20c <main+0xb0>
 20a:	c6 c0       	rjmp	.+396    	; 0x398 <main+0x23c>
	DDRF = 0b0000000;   //6 рычагов  PF2 - PF7 (предположительно нулем )
	PORTF = 0b11111100; //Подтяжка к 1
	PORTC = 0b11111111;
}
static bool checkButton(int num){ //0 - 5
	switch(num) {
 20c:	c2 30       	cpi	r28, 0x02	; 2
 20e:	d1 05       	cpc	r29, r1
 210:	21 f1       	breq	.+72     	; 0x25a <main+0xfe>
 212:	30 f4       	brcc	.+12     	; 0x220 <main+0xc4>
 214:	20 97       	sbiw	r28, 0x00	; 0
 216:	61 f0       	breq	.+24     	; 0x230 <main+0xd4>
 218:	c1 30       	cpi	r28, 0x01	; 1
 21a:	d1 05       	cpc	r29, r1
 21c:	a1 f0       	breq	.+40     	; 0x246 <main+0xea>
 21e:	44 c0       	rjmp	.+136    	; 0x2a8 <main+0x14c>
 220:	c4 30       	cpi	r28, 0x04	; 4
 222:	d1 05       	cpc	r29, r1
 224:	71 f1       	breq	.+92     	; 0x282 <main+0x126>
 226:	18 f1       	brcs	.+70     	; 0x26e <main+0x112>
 228:	c5 30       	cpi	r28, 0x05	; 5
 22a:	d1 05       	cpc	r29, r1
 22c:	a1 f1       	breq	.+104    	; 0x296 <main+0x13a>
 22e:	3c c0       	rjmp	.+120    	; 0x2a8 <main+0x14c>
		case 0:
		if (!(PINF & 0b00000100)) {
 230:	02 99       	sbic	0x00, 2	; 0
 232:	03 c0       	rjmp	.+6      	; 0x23a <main+0xde>
			butON[num] = true;
 234:	f3 01       	movw	r30, r6
 236:	30 82       	st	Z, r3
 238:	b4 c0       	rjmp	.+360    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 23a:	ee ef       	ldi	r30, 0xFE	; 254
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	30 82       	st	Z, r3
 240:	f3 01       	movw	r30, r6
 242:	10 82       	st	Z, r1
 244:	31 c0       	rjmp	.+98     	; 0x2a8 <main+0x14c>
			return false;
		}
		break;
		case 1:
		if (!(PINF & 0b00001000)) {
 246:	03 99       	sbic	0x00, 3	; 0
 248:	03 c0       	rjmp	.+6      	; 0x250 <main+0xf4>
			butON[num] = true;
 24a:	f3 01       	movw	r30, r6
 24c:	31 82       	std	Z+1, r3	; 0x01
 24e:	a9 c0       	rjmp	.+338    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 250:	30 92 ff 01 	sts	0x01FF, r3	; 0x8001ff <butOFF+0x1>
 254:	f3 01       	movw	r30, r6
 256:	11 82       	std	Z+1, r1	; 0x01
 258:	27 c0       	rjmp	.+78     	; 0x2a8 <main+0x14c>
			return false;
		}
		break;
		case 2:
		if (!(PINF & 0b00010000)) {
 25a:	04 99       	sbic	0x00, 4	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <main+0x108>
			butON[num] = true;
 25e:	f3 01       	movw	r30, r6
 260:	32 82       	std	Z+2, r3	; 0x02
 262:	9f c0       	rjmp	.+318    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 264:	30 92 00 02 	sts	0x0200, r3	; 0x800200 <butOFF+0x2>
 268:	f3 01       	movw	r30, r6
 26a:	12 82       	std	Z+2, r1	; 0x02
 26c:	1d c0       	rjmp	.+58     	; 0x2a8 <main+0x14c>
			return false;
		}
		break;
		case 3:
		if (!(PINF & 0b00100000)) {
 26e:	05 99       	sbic	0x00, 5	; 0
 270:	03 c0       	rjmp	.+6      	; 0x278 <main+0x11c>
			butON[num] = true;
 272:	f3 01       	movw	r30, r6
 274:	33 82       	std	Z+3, r3	; 0x03
 276:	95 c0       	rjmp	.+298    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 278:	30 92 01 02 	sts	0x0201, r3	; 0x800201 <butOFF+0x3>
 27c:	f3 01       	movw	r30, r6
 27e:	13 82       	std	Z+3, r1	; 0x03
 280:	13 c0       	rjmp	.+38     	; 0x2a8 <main+0x14c>
			return false;
		}
		break;
		case 4:
		if (!(PINF & 0b01000000)) {
 282:	06 99       	sbic	0x00, 6	; 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <main+0x130>
			butON[num] = true;
 286:	f3 01       	movw	r30, r6
 288:	34 82       	std	Z+4, r3	; 0x04
 28a:	8b c0       	rjmp	.+278    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 28c:	30 92 02 02 	sts	0x0202, r3	; 0x800202 <butOFF+0x4>
 290:	f3 01       	movw	r30, r6
 292:	14 82       	std	Z+4, r1	; 0x04
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <main+0x14c>
			return false;
		}
		break;
		case 5:
		if (!(PINF & 0b10000000)) {
 296:	07 99       	sbic	0x00, 7	; 0
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <main+0x144>
			butON[num] = true;
 29a:	f3 01       	movw	r30, r6
 29c:	35 82       	std	Z+5, r3	; 0x05
 29e:	81 c0       	rjmp	.+258    	; 0x3a2 <main+0x246>
			return true;
		}
		else {
			butOFF[num] = true; butON[num] = false;
 2a0:	30 92 03 02 	sts	0x0203, r3	; 0x800203 <butOFF+0x5>
 2a4:	f3 01       	movw	r30, r6
 2a6:	15 82       	std	Z+5, r1	; 0x05
	for (int i = 0; i < 6; ++i) {
		if (Buttons[i]) { //Если рычаг существует
			if (checkButton(i))
			setLed(i);
			else
			resetLed(i);
 2a8:	31 df       	rcall	.-414    	; 0x10c <resetLed>

			if (butON[i] && butOFF[i]) {
 2aa:	f6 01       	movw	r30, r12
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <main+0x158>
 2b2:	79 c0       	rjmp	.+242    	; 0x3a6 <main+0x24a>
 2b4:	27 01       	movw	r4, r14
 2b6:	f7 01       	movw	r30, r14
 2b8:	80 81       	ld	r24, Z
 2ba:	88 23       	and	r24, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0x164>
 2be:	6c c0       	rjmp	.+216    	; 0x398 <main+0x23c>
				switch (i) {
 2c0:	c2 30       	cpi	r28, 0x02	; 2
 2c2:	d1 05       	cpc	r29, r1
 2c4:	d1 f0       	breq	.+52     	; 0x2fa <main+0x19e>
 2c6:	28 f4       	brcc	.+10     	; 0x2d2 <main+0x176>
 2c8:	20 97       	sbiw	r28, 0x00	; 0
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <main+0x184>
 2cc:	21 97       	sbiw	r28, 0x01	; 1
 2ce:	79 f0       	breq	.+30     	; 0x2ee <main+0x192>
 2d0:	2b c0       	rjmp	.+86     	; 0x328 <main+0x1cc>
 2d2:	c4 30       	cpi	r28, 0x04	; 4
 2d4:	d1 05       	cpc	r29, r1
 2d6:	e9 f0       	breq	.+58     	; 0x312 <main+0x1b6>
 2d8:	b0 f0       	brcs	.+44     	; 0x306 <main+0x1aa>
 2da:	25 97       	sbiw	r28, 0x05	; 5
 2dc:	01 f1       	breq	.+64     	; 0x31e <main+0x1c2>
 2de:	24 c0       	rjmp	.+72     	; 0x328 <main+0x1cc>
					case 0: {
						USART_sendLine("Button 1 pressed\r\n");
 2e0:	8e e0       	ldi	r24, 0x0E	; 14
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	2f df       	rcall	.-418    	; 0x144 <USART_sendLine>
						//Тут сигнал одиночный о нажатии 1 рычага
						signalPressed[i] = 1;
 2e6:	e8 ef       	ldi	r30, 0xF8	; 248
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
 2ea:	30 82       	st	Z, r3
 2ec:	1d c0       	rjmp	.+58     	; 0x328 <main+0x1cc>
					}
					break;
					case 1: {
						USART_sendLine("Button 2 pressed\r\n");
 2ee:	81 e2       	ldi	r24, 0x21	; 33
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	28 df       	rcall	.-432    	; 0x144 <USART_sendLine>
						signalPressed[i] = 1;
 2f4:	30 92 f9 01 	sts	0x01F9, r3	; 0x8001f9 <__data_end+0x1>
					}
					break;
					case 2: {
						USART_sendLine("Button 3 pressed\r\n");
 2f8:	17 c0       	rjmp	.+46     	; 0x328 <main+0x1cc>
 2fa:	84 e3       	ldi	r24, 0x34	; 52
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	22 df       	rcall	.-444    	; 0x144 <USART_sendLine>
						signalPressed[i] = 1;
 300:	30 92 fa 01 	sts	0x01FA, r3	; 0x8001fa <__data_end+0x2>
					}
					break;
					case 3: {
						USART_sendLine("Button 4 pressed\r\n");
 304:	11 c0       	rjmp	.+34     	; 0x328 <main+0x1cc>
 306:	87 e4       	ldi	r24, 0x47	; 71
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	1c df       	rcall	.-456    	; 0x144 <USART_sendLine>
						signalPressed[i] = 1;
 30c:	30 92 fb 01 	sts	0x01FB, r3	; 0x8001fb <__data_end+0x3>
					}
					break;
					case 4: {
						USART_sendLine("Button 5 pressed\r\n");
 310:	0b c0       	rjmp	.+22     	; 0x328 <main+0x1cc>
 312:	8a e5       	ldi	r24, 0x5A	; 90
 314:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 1;
 316:	16 df       	rcall	.-468    	; 0x144 <USART_sendLine>
 318:	30 92 fc 01 	sts	0x01FC, r3	; 0x8001fc <__data_end+0x4>
					}
					break;
					case 5: {
						USART_sendLine("Button 6 pressed\r\n");
 31c:	05 c0       	rjmp	.+10     	; 0x328 <main+0x1cc>
 31e:	8d e6       	ldi	r24, 0x6D	; 109
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	10 df       	rcall	.-480    	; 0x144 <USART_sendLine>
						signalPressed[i] = 1;
 324:	30 92 fd 01 	sts	0x01FD, r3	; 0x8001fd <__data_end+0x5>
					}
					break;
				}
				butOFF[i] = 0;
 328:	f2 01       	movw	r30, r4
 32a:	10 82       	st	Z, r1
 32c:	35 c0       	rjmp	.+106    	; 0x398 <main+0x23c>
			}//Сигналы о нажатии рычага

			if (signalPressed[i] && !butON[i]) {
				switch (i) {
 32e:	c2 30       	cpi	r28, 0x02	; 2
 330:	d1 05       	cpc	r29, r1
 332:	d1 f0       	breq	.+52     	; 0x368 <main+0x20c>
 334:	28 f4       	brcc	.+10     	; 0x340 <main+0x1e4>
 336:	20 97       	sbiw	r28, 0x00	; 0
 338:	51 f0       	breq	.+20     	; 0x34e <main+0x1f2>
 33a:	21 97       	sbiw	r28, 0x01	; 1
 33c:	79 f0       	breq	.+30     	; 0x35c <main+0x200>
 33e:	2c c0       	rjmp	.+88     	; 0x398 <main+0x23c>
 340:	c4 30       	cpi	r28, 0x04	; 4
 342:	d1 05       	cpc	r29, r1
 344:	e9 f0       	breq	.+58     	; 0x380 <main+0x224>
 346:	b0 f0       	brcs	.+44     	; 0x374 <main+0x218>
 348:	25 97       	sbiw	r28, 0x05	; 5
 34a:	01 f1       	breq	.+64     	; 0x38c <main+0x230>
					case 0: {
						USART_sendLine("Button 1 relesed\r\n");
 34c:	25 c0       	rjmp	.+74     	; 0x398 <main+0x23c>
 34e:	80 e8       	ldi	r24, 0x80	; 128
 350:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 352:	f8 de       	rcall	.-528    	; 0x144 <USART_sendLine>
 354:	e8 ef       	ldi	r30, 0xF8	; 248
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	10 82       	st	Z, r1
					}
					break;
					case 1: {
						USART_sendLine("Button 2 relesed\r\n");
 35a:	43 cf       	rjmp	.-378    	; 0x1e2 <main+0x86>
 35c:	83 e9       	ldi	r24, 0x93	; 147
 35e:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 360:	f1 de       	rcall	.-542    	; 0x144 <USART_sendLine>
 362:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <__data_end+0x1>
					}
					break;
					case 2: {
						USART_sendLine("Button 3 relesed\r\n");
 366:	3d cf       	rjmp	.-390    	; 0x1e2 <main+0x86>
 368:	86 ea       	ldi	r24, 0xA6	; 166
 36a:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 36c:	eb de       	rcall	.-554    	; 0x144 <USART_sendLine>
 36e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <__data_end+0x2>
					}
					break;
					case 3: {
						USART_sendLine("Button 4 relesed\r\n");
 372:	37 cf       	rjmp	.-402    	; 0x1e2 <main+0x86>
 374:	89 eb       	ldi	r24, 0xB9	; 185
 376:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 378:	e5 de       	rcall	.-566    	; 0x144 <USART_sendLine>
 37a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <__data_end+0x3>
					}
					break;
					case 4: {
						USART_sendLine("Button 5 relesed\r\n");
 37e:	31 cf       	rjmp	.-414    	; 0x1e2 <main+0x86>
 380:	8c ec       	ldi	r24, 0xCC	; 204
 382:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 384:	df de       	rcall	.-578    	; 0x144 <USART_sendLine>
 386:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end+0x4>
					}
					break;
					case 5: {
						USART_sendLine("Button 6 relesed\r\n");
 38a:	2b cf       	rjmp	.-426    	; 0x1e2 <main+0x86>
 38c:	8f ed       	ldi	r24, 0xDF	; 223
 38e:	91 e0       	ldi	r25, 0x01	; 1
						signalPressed[i] = 0;
 390:	d9 de       	rcall	.-590    	; 0x144 <USART_sendLine>
 392:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <__data_end+0x5>
	//    while ( !( UCSR0A & (1<<UDRE0)));   //Wait for empty transmit buffer
	UDR0 = character;                        //Put data into buffer, sends the data
}

static void checkButtons(){
	for (int i = 0; i < 6; ++i) {
 396:	03 cf       	rjmp	.-506    	; 0x19e <main+0x42>
 398:	06 30       	cpi	r16, 0x06	; 6
 39a:	11 05       	cpc	r17, r1
 39c:	0c f4       	brge	.+2      	; 0x3a0 <main+0x244>
 39e:	21 cf       	rjmp	.-446    	; 0x1e2 <main+0x86>
		if (Buttons[i]) { //Если рычаг существует
			if (checkButton(i))
			setLed(i);
 3a0:	fe ce       	rjmp	.-516    	; 0x19e <main+0x42>
 3a2:	98 de       	rcall	.-720    	; 0xd4 <setLed>
 3a4:	82 cf       	rjmp	.-252    	; 0x2aa <main+0x14e>
					break;
				}
				butOFF[i] = 0;
			}//Сигналы о нажатии рычага

			if (signalPressed[i] && !butON[i]) {
 3a6:	f4 01       	movw	r30, r8
 3a8:	80 81       	ld	r24, Z
 3aa:	88 23       	and	r24, r24
 3ac:	a9 f3       	breq	.-22     	; 0x398 <main+0x23c>
 3ae:	bf cf       	rjmp	.-130    	; 0x32e <main+0x1d2>

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
