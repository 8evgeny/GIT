
DX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000b92  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080019c  0080019c  00000cc2  2**0
                  ALLOC
  3 .stab         00000cb4  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000216  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001bb  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d4d  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006ff  00000000  00000000  00002b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001152  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  00004368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003f7  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008bf  00000000  00000000  000048cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000014f  00000000  00000000  0000518e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  000052dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 39       	cpi	r26, 0x9C	; 156
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e9       	ldi	r26, 0x9C	; 156
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3b       	cpi	r26, 0xBA	; 186
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 02 02 	call	0x404	; 0x404 <main>
  c6:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <uart_putchar>:
    _FDEV_SETUP_WRITE // флаги потока - только вывод
    );

// функция вывода символа
static int uart_putchar(char c, FILE *stream)
{
  ce:	1f 93       	push	r17
  d0:	18 2f       	mov	r17, r24
    if (c == '\n')
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	19 f4       	brne	.+6      	; 0xdc <uart_putchar+0xe>
        uart_putchar('\r', stream); //Если раскомментировать ничего не работает
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <uart_putchar+0xe>
    UDR0 = c;
  e0:	1c b9       	out	0x0c, r17	; 12
//    special_output_port = c; //ХЗ
    return 0;
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <GPIO_Init>:
}


void GPIO_Init()
{
    DDRC = 0b11111100;  //6 светодиодов  PC2 - PC7 инверсия (1 - не горит)
  ea:	8c ef       	ldi	r24, 0xFC	; 252
  ec:	84 bb       	out	0x14, r24	; 20
    DDRF = 0b0000000;   //6 рычагов  PF2 - PF7 (предположительно нулем )
  ee:	10 92 61 00 	sts	0x0061, r1
    PORTF = 0b11111100; //Подтяжка к 1
  f2:	80 93 62 00 	sts	0x0062, r24
    PORTC = 0b11111111;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	85 bb       	out	0x15, r24	; 21
}
  fa:	08 95       	ret

000000fc <checkButton>:
bool checkButton(int num){ //0 - 5
    switch(num) {
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	91 05       	cpc	r25, r1
 100:	69 f1       	breq	.+90     	; 0x15c <checkButton+0x60>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	91 05       	cpc	r25, r1
 106:	3c f4       	brge	.+14     	; 0x116 <checkButton+0x1a>
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	81 f0       	breq	.+32     	; 0x12c <checkButton+0x30>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	09 f0       	breq	.+2      	; 0x114 <checkButton+0x18>
 112:	55 c0       	rjmp	.+170    	; 0x1be <checkButton+0xc2>
 114:	17 c0       	rjmp	.+46     	; 0x144 <checkButton+0x48>
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	91 05       	cpc	r25, r1
 11a:	c1 f1       	breq	.+112    	; 0x18c <checkButton+0x90>
 11c:	84 30       	cpi	r24, 0x04	; 4
 11e:	91 05       	cpc	r25, r1
 120:	4c f1       	brlt	.+82     	; 0x174 <checkButton+0x78>
 122:	85 30       	cpi	r24, 0x05	; 5
 124:	91 05       	cpc	r25, r1
 126:	09 f0       	breq	.+2      	; 0x12a <checkButton+0x2e>
 128:	4a c0       	rjmp	.+148    	; 0x1be <checkButton+0xc2>
 12a:	3c c0       	rjmp	.+120    	; 0x1a4 <checkButton+0xa8>
    case 0:
        if (!(PINF & 0b00000100)) {
 12c:	02 99       	sbic	0x00, 2	; 0
 12e:	04 c0       	rjmp	.+8      	; 0x138 <checkButton+0x3c>
            butON[num] = true;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 ae 01 	sts	0x01AE, r24
            return true;
 136:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 9c 01 	sts	0x019C, r24
 13e:	10 92 ae 01 	sts	0x01AE, r1
 142:	3b c0       	rjmp	.+118    	; 0x1ba <checkButton+0xbe>
            return false;
        }
        break;
    case 1:
        if (!(PINF & 0b00001000)) {
 144:	03 99       	sbic	0x00, 3	; 0
 146:	04 c0       	rjmp	.+8      	; 0x150 <checkButton+0x54>
            butON[num] = true;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 af 01 	sts	0x01AF, r24
            return true;
 14e:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 9d 01 	sts	0x019D, r24
 156:	10 92 af 01 	sts	0x01AF, r1
 15a:	2f c0       	rjmp	.+94     	; 0x1ba <checkButton+0xbe>
            return false;
        }
        break;
    case 2:
        if (!(PINF & 0b00010000)) {
 15c:	04 99       	sbic	0x00, 4	; 0
 15e:	04 c0       	rjmp	.+8      	; 0x168 <checkButton+0x6c>
            butON[num] = true;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 b0 01 	sts	0x01B0, r24
            return true;
 166:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 9e 01 	sts	0x019E, r24
 16e:	10 92 b0 01 	sts	0x01B0, r1
 172:	23 c0       	rjmp	.+70     	; 0x1ba <checkButton+0xbe>
            return false;
        }
        break;
    case 3:
        if (!(PINF & 0b00100000)) {
 174:	05 99       	sbic	0x00, 5	; 0
 176:	04 c0       	rjmp	.+8      	; 0x180 <checkButton+0x84>
            butON[num] = true;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 b1 01 	sts	0x01B1, r24
            return true;
 17e:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 9f 01 	sts	0x019F, r24
 186:	10 92 b1 01 	sts	0x01B1, r1
 18a:	17 c0       	rjmp	.+46     	; 0x1ba <checkButton+0xbe>
            return false;
        }
        break;
    case 4:
        if (!(PINF & 0b01000000)) {
 18c:	06 99       	sbic	0x00, 6	; 0
 18e:	04 c0       	rjmp	.+8      	; 0x198 <checkButton+0x9c>
            butON[num] = true;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 b2 01 	sts	0x01B2, r24
            return true;
 196:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 a0 01 	sts	0x01A0, r24
 19e:	10 92 b2 01 	sts	0x01B2, r1
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <checkButton+0xbe>
            return false;
        }
        break;
    case 5:
        if (!(PINF & 0b10000000)) {
 1a4:	07 99       	sbic	0x00, 7	; 0
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <checkButton+0xb4>
            butON[num] = true;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 b3 01 	sts	0x01B3, r24
            return true;
 1ae:	08 95       	ret
        }
        else {
            butOFF[num] = true; butON[num] = false;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 a1 01 	sts	0x01A1, r24
 1b6:	10 92 b3 01 	sts	0x01B3, r1
            return false;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
        }
        break;
    default :
        break;
    }
    return false;
 1be:	80 e0       	ldi	r24, 0x00	; 0
}
 1c0:	08 95       	ret

000001c2 <setLed>:
void setLed(int num)
{
    switch(num) {
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	91 05       	cpc	r25, r1
 1c6:	e9 f0       	breq	.+58     	; 0x202 <setLed+0x40>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	34 f4       	brge	.+12     	; 0x1da <setLed+0x18>
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	71 f0       	breq	.+28     	; 0x1ee <setLed+0x2c>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 05       	cpc	r25, r1
 1d6:	41 f5       	brne	.+80     	; 0x228 <setLed+0x66>
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <setLed+0x36>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	91 05       	cpc	r25, r1
 1de:	d9 f0       	breq	.+54     	; 0x216 <setLed+0x54>
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	91 05       	cpc	r25, r1
 1e4:	9c f0       	brlt	.+38     	; 0x20c <setLed+0x4a>
 1e6:	85 30       	cpi	r24, 0x05	; 5
 1e8:	91 05       	cpc	r25, r1
 1ea:	f1 f4       	brne	.+60     	; 0x228 <setLed+0x66>
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <setLed+0x5e>
        case 0:
            PORTC &= 0b11111011;
 1ee:	aa 98       	cbi	0x15, 2	; 21
            led[num] = true;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 a8 01 	sts	0x01A8, r24
            break;
 1f6:	08 95       	ret
        case 1:
            PORTC &= 0b11110111;
 1f8:	ab 98       	cbi	0x15, 3	; 21
            led[num] = true;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 a9 01 	sts	0x01A9, r24
            break;
 200:	08 95       	ret
        case 2:
            PORTC &= 0b11101111;
 202:	ac 98       	cbi	0x15, 4	; 21
            led[num] = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 aa 01 	sts	0x01AA, r24
            break;
 20a:	08 95       	ret
        case 3:
            PORTC &= 0b11011111;
 20c:	ad 98       	cbi	0x15, 5	; 21
            led[num] = true;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 ab 01 	sts	0x01AB, r24
            break;
 214:	08 95       	ret
        case 4:
            PORTC &= 0b10111111;
 216:	ae 98       	cbi	0x15, 6	; 21
            led[num] = true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 ac 01 	sts	0x01AC, r24
            break;
 21e:	08 95       	ret
        case 5:
            PORTC &= 0b01111111;
 220:	af 98       	cbi	0x15, 7	; 21
            led[num] = true;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 ad 01 	sts	0x01AD, r24
 228:	08 95       	ret

0000022a <resetLed>:
            break;
    }
}
void resetLed(int num)
{
    switch(num) {
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	91 05       	cpc	r25, r1
 22e:	d9 f0       	breq	.+54     	; 0x266 <resetLed+0x3c>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	91 05       	cpc	r25, r1
 234:	34 f4       	brge	.+12     	; 0x242 <resetLed+0x18>
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	71 f0       	breq	.+28     	; 0x256 <resetLed+0x2c>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	91 05       	cpc	r25, r1
 23e:	11 f5       	brne	.+68     	; 0x284 <resetLed+0x5a>
 240:	0e c0       	rjmp	.+28     	; 0x25e <resetLed+0x34>
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	91 05       	cpc	r25, r1
 246:	b9 f0       	breq	.+46     	; 0x276 <resetLed+0x4c>
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	91 05       	cpc	r25, r1
 24c:	84 f0       	brlt	.+32     	; 0x26e <resetLed+0x44>
 24e:	85 30       	cpi	r24, 0x05	; 5
 250:	91 05       	cpc	r25, r1
 252:	c1 f4       	brne	.+48     	; 0x284 <resetLed+0x5a>
 254:	14 c0       	rjmp	.+40     	; 0x27e <resetLed+0x54>
        case 0:
            PORTC |= 0b00000100;
 256:	aa 9a       	sbi	0x15, 2	; 21
            led[num] = false;
 258:	10 92 a8 01 	sts	0x01A8, r1
            break;
 25c:	08 95       	ret
        case 1:
            PORTC |= 0b00001000;
 25e:	ab 9a       	sbi	0x15, 3	; 21
            led[num] = false;
 260:	10 92 a9 01 	sts	0x01A9, r1
            break;
 264:	08 95       	ret
        case 2:
            PORTC |= 0b00010000;
 266:	ac 9a       	sbi	0x15, 4	; 21
            led[num] = false;
 268:	10 92 aa 01 	sts	0x01AA, r1
            break;
 26c:	08 95       	ret
        case 3:
            PORTC |= 0b00100000;
 26e:	ad 9a       	sbi	0x15, 5	; 21
            led[num] = false;
 270:	10 92 ab 01 	sts	0x01AB, r1
            break;
 274:	08 95       	ret
        case 4:
            PORTC |= 0b01000000;
 276:	ae 9a       	sbi	0x15, 6	; 21
            led[num] = false;
 278:	10 92 ac 01 	sts	0x01AC, r1
            break;
 27c:	08 95       	ret
        case 5:
            PORTC |= 0b10000000;
 27e:	af 9a       	sbi	0x15, 7	; 21
            led[num] = false;
 280:	10 92 ad 01 	sts	0x01AD, r1
 284:	08 95       	ret

00000286 <TIMER1_Init>:
1 0 0 clkI/O /256 (From prescaler)
1 0 1 clkI/O /1024 (From prescaler)
1 1 0 External clock source on Tn pin. Clock on falling edge
1 1 1 External clock source on Tn pin. Clock on rising edge
#endif
    TCCR1B |= (1 << CS12);  //CSn2
 286:	8e b5       	in	r24, 0x2e	; 46
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	8e bd       	out	0x2e, r24	; 46
    TCCR1B &= ~(1 << CS11); //CSn1
 28c:	8e b5       	in	r24, 0x2e	; 46
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS10); //CSn0
 292:	8e b5       	in	r24, 0x2e	; 46
 294:	81 60       	ori	r24, 0x01	; 1
 296:	8e bd       	out	0x2e, r24	; 46
    //    TCNT1 = 65536-62439;    //коррекция счетчика, чтобы время было ровно 1 секунда
    TCNT1 = 45535; //Первое срабатывание сразу
 298:	8f ed       	ldi	r24, 0xDF	; 223
 29a:	91 eb       	ldi	r25, 0xB1	; 177
 29c:	9d bd       	out	0x2d, r25	; 45
 29e:	8c bd       	out	0x2c, r24	; 44
    TIMSK |= (1 << TOIE1);   // Разрешение прерывания overflow таймера 1
 2a0:	87 b7       	in	r24, 0x37	; 55
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	87 bf       	out	0x37, r24	; 55
}
 2a6:	08 95       	ret

000002a8 <TIMER3_Init>:
void TIMER3_Init (void){
    TCCR3B &= ~(1 << CS32);  //CSn2
 2a8:	ea e8       	ldi	r30, 0x8A	; 138
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	8b 7f       	andi	r24, 0xFB	; 251
 2b0:	80 83       	st	Z, r24
    TCCR3B |= (1 << CS31); //CSn1
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
    TCCR3B |= (1 << CS30); //CSn0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
    ETIMSK |= (1 << TOIE3);  // Разрешение прерывания overflow таймера 3
 2be:	ed e7       	ldi	r30, 0x7D	; 125
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	80 83       	st	Z, r24
}
 2c8:	08 95       	ret

000002ca <__vector_14>:
ISR (TIMER1_OVF_vect){
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	0b b6       	in	r0, 0x3b	; 59
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
    TCNT1 = 0;          //Чем число ближе к 65535  тем быстрее сработает таймер 1 (LED ON)
 2f0:	1d bc       	out	0x2d, r1	; 45
 2f2:	1c bc       	out	0x2c, r1	; 44
    setLed(numLedAlive);
 2f4:	80 91 8b 01 	lds	r24, 0x018B
 2f8:	90 91 8c 01 	lds	r25, 0x018C
 2fc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <setLed>
    TCNT3 = 0;          //Чем число ближе к 65535  тем быстрее сработает таймер 3 (LED OFF)
 300:	10 92 89 00 	sts	0x0089, r1
 304:	10 92 88 00 	sts	0x0088, r1
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_29>:
ISR (TIMER3_OVF_vect) {
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	0b b6       	in	r0, 0x3b	; 59
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
    resetLed(numLedAlive);
 354:	80 91 8b 01 	lds	r24, 0x018B
 358:	90 91 8c 01 	lds	r25, 0x018C
 35c:	0e 94 15 01 	call	0x22a	; 0x22a <resetLed>
    ++numLedAlive;
 360:	80 91 8b 01 	lds	r24, 0x018B
 364:	90 91 8c 01 	lds	r25, 0x018C
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 8c 01 	sts	0x018C, r25
 36e:	80 93 8b 01 	sts	0x018B, r24
    if (numLedAlive == 7)
 372:	87 30       	cpi	r24, 0x07	; 7
 374:	91 05       	cpc	r25, r1
 376:	31 f4       	brne	.+12     	; 0x384 <__vector_29+0x56>
        numLedAlive = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 8c 01 	sts	0x018C, r25
 380:	80 93 8b 01 	sts	0x018B, r24
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0b be       	out	0x3b, r0	; 59
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <USART0_Init>:
void USART0_Init() {
    UBRR0H = (unsigned char) (BRC >> 8);  // порт UART0, скорость = BUAD
 3aa:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = (unsigned char)  BRC;
 3ae:	89 e1       	ldi	r24, 0x19	; 25
 3b0:	89 b9       	out	0x09, r24	; 9

    UCSR0B |= (1 << TXEN); //разрешение передачи
 3b2:	53 9a       	sbi	0x0a, 3	; 10
    UCSR0C |= (1 << UCSZ1) | (1 << UCSZ0); //8 бит
 3b4:	e5 e9       	ldi	r30, 0x95	; 149
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	86 60       	ori	r24, 0x06	; 6
 3bc:	80 83       	st	Z, r24
}
 3be:	08 95       	ret

000003c0 <USART0_Receive>:
unsigned char USART0_Receive( void ) {
    while ( !(UCSR0A & (1<<RXC0)));         //Wait for data to be received
 3c0:	5f 9b       	sbis	0x0b, 7	; 11
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <USART0_Receive>
    return UDR0;                            //Get and return received data from buffer
 3c4:	8c b1       	in	r24, 0x0c	; 12
}
 3c6:	08 95       	ret

000003c8 <USART_receiveChar>:
        USART_sendChar(*string); // посимвольно отправляем строку
        string++;
    }
}
char USART_receiveChar(void) {
    return ( (UCSR0A >> RXC0) & 1 ) ? UDR0 : 0;  // возвращаем значение буфера приёма
 3c8:	5f 9b       	sbis	0x0b, 7	; 11
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <USART_receiveChar+0x8>
 3cc:	8c b1       	in	r24, 0x0c	; 12
 3ce:	08 95       	ret
 3d0:	80 e0       	ldi	r24, 0x00	; 0
}
 3d2:	08 95       	ret

000003d4 <USART_sendChar>:
// Отправка ASCII символа
void USART_sendChar(char character) {
    loop_until_bit_is_set(UCSR0A, UDRE0);
 3d4:	5d 9b       	sbis	0x0b, 5	; 11
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <USART_sendChar>
//    while ( !( UCSR0A & (1<<UDRE0)));   //Wait for empty transmit buffer
    UDR0 = character;                        //Put data into buffer, sends the data
 3d8:	8c b9       	out	0x0c, r24	; 12
}
 3da:	08 95       	ret

000003dc <USART_sendLine>:
}
unsigned char USART0_Receive( void ) {
    while ( !(UCSR0A & (1<<RXC0)));         //Wait for data to be received
    return UDR0;                            //Get and return received data from buffer
}
void USART_sendLine(char *string) {
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	e8 2e       	mov	r14, r24
 3e6:	e7 01       	movw	r28, r14
 3e8:	7e 01       	movw	r14, r28
 3ea:	f9 2e       	mov	r15, r25
 3ec:	e7 01       	movw	r28, r14
    while ( *string ) {
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <USART_sendLine+0x18>
//        uart_putchar(*string, stdout);
        USART_sendChar(*string); // посимвольно отправляем строку
 3f0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <USART_sendChar>
unsigned char USART0_Receive( void ) {
    while ( !(UCSR0A & (1<<RXC0)));         //Wait for data to be received
    return UDR0;                            //Get and return received data from buffer
}
void USART_sendLine(char *string) {
    while ( *string ) {
 3f4:	89 91       	ld	r24, Y+
 3f6:	88 23       	and	r24, r24
 3f8:	d9 f7       	brne	.-10     	; 0x3f0 <USART_sendLine+0x14>
//        uart_putchar(*string, stdout);
        USART_sendChar(*string); // посимвольно отправляем строку
        string++;
    }
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	08 95       	ret

00000404 <main>:
        USART_sendLine(buff);
        va_end(args);
}


int main() {
 404:	bf 92       	push	r11
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
    GPIO_Init();
 416:	0e 94 75 00 	call	0xea	; 0xea <GPIO_Init>
    USART0_Init();
 41a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <USART0_Init>
    stdout = &mystdout;
 41e:	8d e8       	ldi	r24, 0x8D	; 141
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	90 93 b7 01 	sts	0x01B7, r25
 426:	80 93 b6 01 	sts	0x01B6, r24
                            signalPressed[i] = 1;
                        }
                        break;
                        case 3: {
                            USART_sendLine("Button 4 pressed\r\n");
                            signalPressed[i] = 1;
 42a:	bb 24       	eor	r11, r11
 42c:	b3 94       	inc	r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	87 e8       	ldi	r24, 0x87	; 135
 430:	93 e1       	ldi	r25, 0x13	; 19
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <main+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x34>
 438:	00 00       	nop
 43a:	95 e8       	ldi	r25, 0x85	; 133
 43c:	c9 2e       	mov	r12, r25
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	d9 2e       	mov	r13, r25
 442:	8e ea       	ldi	r24, 0xAE	; 174
 444:	e8 2e       	mov	r14, r24
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	f8 2e       	mov	r15, r24
 44a:	0c e9       	ldi	r16, 0x9C	; 156
 44c:	11 e0       	ldi	r17, 0x01	; 1
//    SetupTIMER3();
//    sei();

    while (1) {
        _delay_ms(5);
        for (int i = 0; i < 6; ++i) {
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d0 e0       	ldi	r29, 0x00	; 0
            if (Buttons[i]) { //Если рычаг существует
 452:	f6 01       	movw	r30, r12
 454:	81 91       	ld	r24, Z+
 456:	6f 01       	movw	r12, r30
 458:	88 23       	and	r24, r24
 45a:	09 f4       	brne	.+2      	; 0x45e <main+0x5a>
 45c:	65 c0       	rjmp	.+202    	; 0x528 <main+0x124>
                if (checkButton(i))
 45e:	ce 01       	movw	r24, r28
 460:	0e 94 7e 00 	call	0xfc	; 0xfc <checkButton>
 464:	88 23       	and	r24, r24
 466:	21 f0       	breq	.+8      	; 0x470 <main+0x6c>
                    setLed(i);
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <setLed>
 46e:	03 c0       	rjmp	.+6      	; 0x476 <main+0x72>
                else
                    resetLed(i);
 470:	ce 01       	movw	r24, r28
 472:	0e 94 15 01 	call	0x22a	; 0x22a <resetLed>

                if (butON[i] && butOFF[i]) {
 476:	f7 01       	movw	r30, r14
 478:	80 81       	ld	r24, Z
 47a:	88 23       	and	r24, r24
 47c:	09 f4       	brne	.+2      	; 0x480 <main+0x7c>
 47e:	42 c0       	rjmp	.+132    	; 0x504 <main+0x100>
 480:	f8 01       	movw	r30, r16
 482:	80 81       	ld	r24, Z
 484:	88 23       	and	r24, r24
 486:	f1 f1       	breq	.+124    	; 0x504 <main+0x100>
                    switch (i) {
 488:	c3 30       	cpi	r28, 0x03	; 3
 48a:	d1 05       	cpc	r29, r1
 48c:	29 f1       	breq	.+74     	; 0x4d8 <main+0xd4>
 48e:	c4 30       	cpi	r28, 0x04	; 4
 490:	d1 05       	cpc	r29, r1
 492:	3c f4       	brge	.+14     	; 0x4a2 <main+0x9e>
 494:	c1 30       	cpi	r28, 0x01	; 1
 496:	d1 05       	cpc	r29, r1
 498:	89 f0       	breq	.+34     	; 0x4bc <main+0xb8>
 49a:	c2 30       	cpi	r28, 0x02	; 2
 49c:	d1 05       	cpc	r29, r1
 49e:	39 f4       	brne	.+14     	; 0x4ae <main+0xaa>
 4a0:	14 c0       	rjmp	.+40     	; 0x4ca <main+0xc6>
 4a2:	c4 30       	cpi	r28, 0x04	; 4
 4a4:	d1 05       	cpc	r29, r1
 4a6:	f9 f0       	breq	.+62     	; 0x4e6 <main+0xe2>
 4a8:	c5 30       	cpi	r28, 0x05	; 5
 4aa:	d1 05       	cpc	r29, r1
 4ac:	19 f1       	breq	.+70     	; 0x4f4 <main+0xf0>
                        case 0: {
                            USART_sendLine("Button 1 pressed\r\n");
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            //Тут сигнал одиночный о нажатии 1 рычага
                            signalPressed[i] = 1;
 4b6:	b0 92 a2 01 	sts	0x01A2, r11
                        }
                        break;
 4ba:	22 c0       	rjmp	.+68     	; 0x500 <main+0xfc>
                        case 1: {
                            USART_sendLine("Button 2 pressed\r\n");
 4bc:	83 e1       	ldi	r24, 0x13	; 19
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            signalPressed[i] = 1;
 4c4:	b0 92 a3 01 	sts	0x01A3, r11
                        }
                        break;
 4c8:	1b c0       	rjmp	.+54     	; 0x500 <main+0xfc>
                        case 2: {
                            USART_sendLine("Button 3 pressed\r\n");
 4ca:	86 e2       	ldi	r24, 0x26	; 38
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            signalPressed[i] = 1;
 4d2:	b0 92 a4 01 	sts	0x01A4, r11
                        }
                        break;
 4d6:	14 c0       	rjmp	.+40     	; 0x500 <main+0xfc>
                        case 3: {
                            USART_sendLine("Button 4 pressed\r\n");
 4d8:	89 e3       	ldi	r24, 0x39	; 57
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            signalPressed[i] = 1;
 4e0:	b0 92 a5 01 	sts	0x01A5, r11
                        }
                        break;
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <main+0xfc>
                        case 4: {
                            USART_sendLine("Button 5 pressed\r\n");
 4e6:	8c e4       	ldi	r24, 0x4C	; 76
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            signalPressed[i] = 1;
 4ee:	b0 92 a6 01 	sts	0x01A6, r11
                        }
                        break;
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <main+0xfc>
                        case 5: {
                            USART_sendLine("Button 6 pressed\r\n");
 4f4:	8f e5       	ldi	r24, 0x5F	; 95
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                            signalPressed[i] = 1;
 4fc:	b0 92 a7 01 	sts	0x01A7, r11
                        }
                        break;
                    }
                    butOFF[i] = 0;
 500:	f8 01       	movw	r30, r16
 502:	10 82       	st	Z, r1
        USART_sendLine(buff);
        va_end(args);
}


int main() {
 504:	fe 01       	movw	r30, r28
 506:	ee 55       	subi	r30, 0x5E	; 94
 508:	fe 4f       	sbci	r31, 0xFE	; 254
                        break;
                    }
                    butOFF[i] = 0;
                }//Сигнал о нажатии рычага

                if (signalPressed[i] && !butON[i]) {
 50a:	80 81       	ld	r24, Z
 50c:	88 23       	and	r24, r24
 50e:	61 f0       	breq	.+24     	; 0x528 <main+0x124>
 510:	f7 01       	movw	r30, r14
 512:	80 81       	ld	r24, Z
 514:	88 23       	and	r24, r24
 516:	41 f4       	brne	.+16     	; 0x528 <main+0x124>
                    switch (i) {
 518:	20 97       	sbiw	r28, 0x00	; 0
 51a:	31 f4       	brne	.+12     	; 0x528 <main+0x124>
                    case 0: {
                        USART_sendLine("Button 1 relesed\r\n");
 51c:	82 e7       	ldi	r24, 0x72	; 114
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
                        signalPressed[i] = 0;
 524:	10 92 a2 01 	sts	0x01A2, r1
//    SetupTIMER3();
//    sei();

    while (1) {
        _delay_ms(5);
        for (int i = 0; i < 6; ++i) {
 528:	21 96       	adiw	r28, 0x01	; 1
 52a:	08 94       	sec
 52c:	e1 1c       	adc	r14, r1
 52e:	f1 1c       	adc	r15, r1
 530:	0f 5f       	subi	r16, 0xFF	; 255
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	c6 30       	cpi	r28, 0x06	; 6
 536:	d1 05       	cpc	r29, r1
 538:	09 f0       	breq	.+2      	; 0x53c <main+0x138>
 53a:	8b cf       	rjmp	.-234    	; 0x452 <main+0x4e>
 53c:	78 cf       	rjmp	.-272    	; 0x42e <main+0x2a>

0000053e <Printf>:
//    vsprintf(buff, fmt, args);
//    USART_sendLine(buff);
//    va_end(args);
//}

void Printf(const char* fmt, ...) {
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	df 93       	push	r29
 544:	cf 93       	push	r28
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	c0 50       	subi	r28, 0x00	; 0
 54c:	d2 40       	sbci	r29, 0x02	; 2
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	fe 01       	movw	r30, r28
 55a:	e9 5f       	subi	r30, 0xF9	; 249
 55c:	fd 4f       	sbci	r31, 0xFD	; 253
 55e:	81 91       	ld	r24, Z+
 560:	91 91       	ld	r25, Z+
        char buff[512];
        va_list args;
        va_start(args, fmt);
        sprintf(buff, fmt, args);
 562:	00 d0       	rcall	.+0      	; 0x564 <Printf+0x26>
 564:	00 d0       	rcall	.+0      	; 0x566 <Printf+0x28>
 566:	00 d0       	rcall	.+0      	; 0x568 <Printf+0x2a>
 568:	2d b7       	in	r18, 0x3d	; 61
 56a:	3e b7       	in	r19, 0x3e	; 62
 56c:	2f 5f       	subi	r18, 0xFF	; 255
 56e:	3f 4f       	sbci	r19, 0xFF	; 255
 570:	8e 01       	movw	r16, r28
 572:	0f 5f       	subi	r16, 0xFF	; 255
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	ad b7       	in	r26, 0x3d	; 61
 578:	be b7       	in	r27, 0x3e	; 62
 57a:	12 96       	adiw	r26, 0x02	; 2
 57c:	1c 93       	st	X, r17
 57e:	0e 93       	st	-X, r16
 580:	11 97       	sbiw	r26, 0x01	; 1
 582:	d9 01       	movw	r26, r18
 584:	13 96       	adiw	r26, 0x03	; 3
 586:	9c 93       	st	X, r25
 588:	8e 93       	st	-X, r24
 58a:	12 97       	sbiw	r26, 0x02	; 2
 58c:	14 96       	adiw	r26, 0x04	; 4
 58e:	ec 93       	st	X, r30
 590:	14 97       	sbiw	r26, 0x04	; 4
 592:	15 96       	adiw	r26, 0x05	; 5
 594:	fc 93       	st	X, r31
 596:	0e 94 e7 02 	call	0x5ce	; 0x5ce <sprintf>
        USART_sendLine(buff);
 59a:	8d b7       	in	r24, 0x3d	; 61
 59c:	9e b7       	in	r25, 0x3e	; 62
 59e:	06 96       	adiw	r24, 0x06	; 6
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	9e bf       	out	0x3e, r25	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	8d bf       	out	0x3d, r24	; 61
 5aa:	c8 01       	movw	r24, r16
 5ac:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_sendLine>
        va_end(args);
}
 5b0:	c0 50       	subi	r28, 0x00	; 0
 5b2:	de 4f       	sbci	r29, 0xFE	; 254
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	08 95       	ret

000005c8 <exit>:
 5c8:	f8 94       	cli
 5ca:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <_exit>

000005ce <sprintf>:
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	df 93       	push	r29
 5d4:	cf 93       	push	r28
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	2e 97       	sbiw	r28, 0x0e	; 14
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	0d 89       	ldd	r16, Y+21	; 0x15
 5e8:	1e 89       	ldd	r17, Y+22	; 0x16
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	8c 83       	std	Y+4, r24	; 0x04
 5ee:	1a 83       	std	Y+2, r17	; 0x02
 5f0:	09 83       	std	Y+1, r16	; 0x01
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	9f e7       	ldi	r25, 0x7F	; 127
 5f6:	9e 83       	std	Y+6, r25	; 0x06
 5f8:	8d 83       	std	Y+5, r24	; 0x05
 5fa:	9e 01       	movw	r18, r28
 5fc:	27 5e       	subi	r18, 0xE7	; 231
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	6f 89       	ldd	r22, Y+23	; 0x17
 606:	78 8d       	ldd	r23, Y+24	; 0x18
 608:	a9 01       	movw	r20, r18
 60a:	0e 94 17 03 	call	0x62e	; 0x62e <vfprintf>
 60e:	ef 81       	ldd	r30, Y+7	; 0x07
 610:	f8 85       	ldd	r31, Y+8	; 0x08
 612:	e0 0f       	add	r30, r16
 614:	f1 1f       	adc	r31, r17
 616:	10 82       	st	Z, r1
 618:	2e 96       	adiw	r28, 0x0e	; 14
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	cf 91       	pop	r28
 626:	df 91       	pop	r29
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	08 95       	ret

0000062e <vfprintf>:
 62e:	2f 92       	push	r2
 630:	3f 92       	push	r3
 632:	4f 92       	push	r4
 634:	5f 92       	push	r5
 636:	6f 92       	push	r6
 638:	7f 92       	push	r7
 63a:	8f 92       	push	r8
 63c:	9f 92       	push	r9
 63e:	af 92       	push	r10
 640:	bf 92       	push	r11
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	df 93       	push	r29
 650:	cf 93       	push	r28
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	2c 97       	sbiw	r28, 0x0c	; 12
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	6c 01       	movw	r12, r24
 664:	1b 01       	movw	r2, r22
 666:	8a 01       	movw	r16, r20
 668:	fc 01       	movw	r30, r24
 66a:	17 82       	std	Z+7, r1	; 0x07
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 ff       	sbrs	r24, 1
 672:	d1 c1       	rjmp	.+930    	; 0xa16 <vfprintf+0x3e8>
 674:	2e 01       	movw	r4, r28
 676:	08 94       	sec
 678:	41 1c       	adc	r4, r1
 67a:	51 1c       	adc	r5, r1
 67c:	f6 01       	movw	r30, r12
 67e:	93 81       	ldd	r25, Z+3	; 0x03
 680:	f1 01       	movw	r30, r2
 682:	93 fd       	sbrc	r25, 3
 684:	85 91       	lpm	r24, Z+
 686:	93 ff       	sbrs	r25, 3
 688:	81 91       	ld	r24, Z+
 68a:	1f 01       	movw	r2, r30
 68c:	88 23       	and	r24, r24
 68e:	09 f4       	brne	.+2      	; 0x692 <vfprintf+0x64>
 690:	be c1       	rjmp	.+892    	; 0xa0e <vfprintf+0x3e0>
 692:	85 32       	cpi	r24, 0x25	; 37
 694:	39 f4       	brne	.+14     	; 0x6a4 <vfprintf+0x76>
 696:	93 fd       	sbrc	r25, 3
 698:	85 91       	lpm	r24, Z+
 69a:	93 ff       	sbrs	r25, 3
 69c:	81 91       	ld	r24, Z+
 69e:	1f 01       	movw	r2, r30
 6a0:	85 32       	cpi	r24, 0x25	; 37
 6a2:	29 f4       	brne	.+10     	; 0x6ae <vfprintf+0x80>
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	b6 01       	movw	r22, r12
 6a8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 6ac:	e7 cf       	rjmp	.-50     	; 0x67c <vfprintf+0x4e>
 6ae:	ee 24       	eor	r14, r14
 6b0:	ff 24       	eor	r15, r15
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	20 32       	cpi	r18, 0x20	; 32
 6b6:	b0 f4       	brcc	.+44     	; 0x6e4 <vfprintf+0xb6>
 6b8:	8b 32       	cpi	r24, 0x2B	; 43
 6ba:	69 f0       	breq	.+26     	; 0x6d6 <vfprintf+0xa8>
 6bc:	8c 32       	cpi	r24, 0x2C	; 44
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x9c>
 6c0:	80 32       	cpi	r24, 0x20	; 32
 6c2:	51 f0       	breq	.+20     	; 0x6d8 <vfprintf+0xaa>
 6c4:	83 32       	cpi	r24, 0x23	; 35
 6c6:	71 f4       	brne	.+28     	; 0x6e4 <vfprintf+0xb6>
 6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <vfprintf+0xb2>
 6ca:	8d 32       	cpi	r24, 0x2D	; 45
 6cc:	39 f0       	breq	.+14     	; 0x6dc <vfprintf+0xae>
 6ce:	80 33       	cpi	r24, 0x30	; 48
 6d0:	49 f4       	brne	.+18     	; 0x6e4 <vfprintf+0xb6>
 6d2:	21 60       	ori	r18, 0x01	; 1
 6d4:	2c c0       	rjmp	.+88     	; 0x72e <vfprintf+0x100>
 6d6:	22 60       	ori	r18, 0x02	; 2
 6d8:	24 60       	ori	r18, 0x04	; 4
 6da:	29 c0       	rjmp	.+82     	; 0x72e <vfprintf+0x100>
 6dc:	28 60       	ori	r18, 0x08	; 8
 6de:	27 c0       	rjmp	.+78     	; 0x72e <vfprintf+0x100>
 6e0:	20 61       	ori	r18, 0x10	; 16
 6e2:	25 c0       	rjmp	.+74     	; 0x72e <vfprintf+0x100>
 6e4:	27 fd       	sbrc	r18, 7
 6e6:	2c c0       	rjmp	.+88     	; 0x740 <vfprintf+0x112>
 6e8:	38 2f       	mov	r19, r24
 6ea:	30 53       	subi	r19, 0x30	; 48
 6ec:	3a 30       	cpi	r19, 0x0A	; 10
 6ee:	98 f4       	brcc	.+38     	; 0x716 <vfprintf+0xe8>
 6f0:	26 ff       	sbrs	r18, 6
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <vfprintf+0xd6>
 6f4:	8e 2d       	mov	r24, r14
 6f6:	88 0f       	add	r24, r24
 6f8:	e8 2e       	mov	r14, r24
 6fa:	ee 0c       	add	r14, r14
 6fc:	ee 0c       	add	r14, r14
 6fe:	e8 0e       	add	r14, r24
 700:	e3 0e       	add	r14, r19
 702:	15 c0       	rjmp	.+42     	; 0x72e <vfprintf+0x100>
 704:	8f 2d       	mov	r24, r15
 706:	88 0f       	add	r24, r24
 708:	f8 2e       	mov	r15, r24
 70a:	ff 0c       	add	r15, r15
 70c:	ff 0c       	add	r15, r15
 70e:	f8 0e       	add	r15, r24
 710:	f3 0e       	add	r15, r19
 712:	20 62       	ori	r18, 0x20	; 32
 714:	0c c0       	rjmp	.+24     	; 0x72e <vfprintf+0x100>
 716:	8e 32       	cpi	r24, 0x2E	; 46
 718:	21 f4       	brne	.+8      	; 0x722 <vfprintf+0xf4>
 71a:	26 fd       	sbrc	r18, 6
 71c:	78 c1       	rjmp	.+752    	; 0xa0e <vfprintf+0x3e0>
 71e:	20 64       	ori	r18, 0x40	; 64
 720:	06 c0       	rjmp	.+12     	; 0x72e <vfprintf+0x100>
 722:	8c 36       	cpi	r24, 0x6C	; 108
 724:	11 f4       	brne	.+4      	; 0x72a <vfprintf+0xfc>
 726:	20 68       	ori	r18, 0x80	; 128
 728:	02 c0       	rjmp	.+4      	; 0x72e <vfprintf+0x100>
 72a:	88 36       	cpi	r24, 0x68	; 104
 72c:	49 f4       	brne	.+18     	; 0x740 <vfprintf+0x112>
 72e:	f1 01       	movw	r30, r2
 730:	93 fd       	sbrc	r25, 3
 732:	85 91       	lpm	r24, Z+
 734:	93 ff       	sbrs	r25, 3
 736:	81 91       	ld	r24, Z+
 738:	1f 01       	movw	r2, r30
 73a:	88 23       	and	r24, r24
 73c:	09 f0       	breq	.+2      	; 0x740 <vfprintf+0x112>
 73e:	ba cf       	rjmp	.-140    	; 0x6b4 <vfprintf+0x86>
 740:	98 2f       	mov	r25, r24
 742:	95 54       	subi	r25, 0x45	; 69
 744:	93 30       	cpi	r25, 0x03	; 3
 746:	18 f0       	brcs	.+6      	; 0x74e <vfprintf+0x120>
 748:	90 52       	subi	r25, 0x20	; 32
 74a:	93 30       	cpi	r25, 0x03	; 3
 74c:	28 f4       	brcc	.+10     	; 0x758 <vfprintf+0x12a>
 74e:	0c 5f       	subi	r16, 0xFC	; 252
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	ff e3       	ldi	r31, 0x3F	; 63
 754:	f9 83       	std	Y+1, r31	; 0x01
 756:	0d c0       	rjmp	.+26     	; 0x772 <vfprintf+0x144>
 758:	83 36       	cpi	r24, 0x63	; 99
 75a:	31 f0       	breq	.+12     	; 0x768 <vfprintf+0x13a>
 75c:	83 37       	cpi	r24, 0x73	; 115
 75e:	71 f0       	breq	.+28     	; 0x77c <vfprintf+0x14e>
 760:	83 35       	cpi	r24, 0x53	; 83
 762:	09 f0       	breq	.+2      	; 0x766 <vfprintf+0x138>
 764:	60 c0       	rjmp	.+192    	; 0x826 <vfprintf+0x1f8>
 766:	22 c0       	rjmp	.+68     	; 0x7ac <vfprintf+0x17e>
 768:	f8 01       	movw	r30, r16
 76a:	80 81       	ld	r24, Z
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	0e 5f       	subi	r16, 0xFE	; 254
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	42 01       	movw	r8, r4
 774:	71 e0       	ldi	r23, 0x01	; 1
 776:	a7 2e       	mov	r10, r23
 778:	b1 2c       	mov	r11, r1
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <vfprintf+0x17a>
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	66 2e       	mov	r6, r22
 780:	71 2c       	mov	r7, r1
 782:	60 0e       	add	r6, r16
 784:	71 1e       	adc	r7, r17
 786:	f8 01       	movw	r30, r16
 788:	80 80       	ld	r8, Z
 78a:	91 80       	ldd	r9, Z+1	; 0x01
 78c:	26 ff       	sbrs	r18, 6
 78e:	03 c0       	rjmp	.+6      	; 0x796 <vfprintf+0x168>
 790:	6e 2d       	mov	r22, r14
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x16c>
 796:	6f ef       	ldi	r22, 0xFF	; 255
 798:	7f ef       	ldi	r23, 0xFF	; 255
 79a:	c4 01       	movw	r24, r8
 79c:	2c 87       	std	Y+12, r18	; 0x0c
 79e:	0e 94 32 05 	call	0xa64	; 0xa64 <strnlen>
 7a2:	5c 01       	movw	r10, r24
 7a4:	83 01       	movw	r16, r6
 7a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a8:	2f 77       	andi	r18, 0x7F	; 127
 7aa:	17 c0       	rjmp	.+46     	; 0x7da <vfprintf+0x1ac>
 7ac:	52 e0       	ldi	r21, 0x02	; 2
 7ae:	65 2e       	mov	r6, r21
 7b0:	71 2c       	mov	r7, r1
 7b2:	60 0e       	add	r6, r16
 7b4:	71 1e       	adc	r7, r17
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 80       	ld	r8, Z
 7ba:	91 80       	ldd	r9, Z+1	; 0x01
 7bc:	26 ff       	sbrs	r18, 6
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x198>
 7c0:	6e 2d       	mov	r22, r14
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x19c>
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	7f ef       	ldi	r23, 0xFF	; 255
 7ca:	c4 01       	movw	r24, r8
 7cc:	2c 87       	std	Y+12, r18	; 0x0c
 7ce:	0e 94 27 05 	call	0xa4e	; 0xa4e <strnlen_P>
 7d2:	5c 01       	movw	r10, r24
 7d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d6:	20 68       	ori	r18, 0x80	; 128
 7d8:	83 01       	movw	r16, r6
 7da:	23 fd       	sbrc	r18, 3
 7dc:	20 c0       	rjmp	.+64     	; 0x81e <vfprintf+0x1f0>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <vfprintf+0x1c2>
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	b6 01       	movw	r22, r12
 7e6:	2c 87       	std	Y+12, r18	; 0x0c
 7e8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 7ec:	fa 94       	dec	r15
 7ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f0:	8f 2d       	mov	r24, r15
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	a8 16       	cp	r10, r24
 7f6:	b9 06       	cpc	r11, r25
 7f8:	98 f3       	brcs	.-26     	; 0x7e0 <vfprintf+0x1b2>
 7fa:	11 c0       	rjmp	.+34     	; 0x81e <vfprintf+0x1f0>
 7fc:	f4 01       	movw	r30, r8
 7fe:	27 fd       	sbrc	r18, 7
 800:	85 91       	lpm	r24, Z+
 802:	27 ff       	sbrs	r18, 7
 804:	81 91       	ld	r24, Z+
 806:	4f 01       	movw	r8, r30
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	b6 01       	movw	r22, r12
 80c:	2c 87       	std	Y+12, r18	; 0x0c
 80e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 812:	2c 85       	ldd	r18, Y+12	; 0x0c
 814:	f1 10       	cpse	r15, r1
 816:	fa 94       	dec	r15
 818:	08 94       	sec
 81a:	a1 08       	sbc	r10, r1
 81c:	b1 08       	sbc	r11, r1
 81e:	a1 14       	cp	r10, r1
 820:	b1 04       	cpc	r11, r1
 822:	61 f7       	brne	.-40     	; 0x7fc <vfprintf+0x1ce>
 824:	f1 c0       	rjmp	.+482    	; 0xa08 <vfprintf+0x3da>
 826:	84 36       	cpi	r24, 0x64	; 100
 828:	11 f0       	breq	.+4      	; 0x82e <vfprintf+0x200>
 82a:	89 36       	cpi	r24, 0x69	; 105
 82c:	49 f5       	brne	.+82     	; 0x880 <vfprintf+0x252>
 82e:	27 ff       	sbrs	r18, 7
 830:	08 c0       	rjmp	.+16     	; 0x842 <vfprintf+0x214>
 832:	f8 01       	movw	r30, r16
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	0c 5f       	subi	r16, 0xFC	; 252
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	09 c0       	rjmp	.+18     	; 0x854 <vfprintf+0x226>
 842:	f8 01       	movw	r30, r16
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	88 27       	eor	r24, r24
 84a:	77 fd       	sbrc	r23, 7
 84c:	80 95       	com	r24
 84e:	98 2f       	mov	r25, r24
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	4f e6       	ldi	r20, 0x6F	; 111
 856:	b4 2e       	mov	r11, r20
 858:	b2 22       	and	r11, r18
 85a:	97 ff       	sbrs	r25, 7
 85c:	09 c0       	rjmp	.+18     	; 0x870 <vfprintf+0x242>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	f0 e8       	ldi	r31, 0x80	; 128
 86e:	bf 2a       	or	r11, r31
 870:	a2 01       	movw	r20, r4
 872:	2a e0       	ldi	r18, 0x0A	; 10
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	0e 94 69 05 	call	0xad2	; 0xad2 <__ultoa_invert>
 87a:	78 2e       	mov	r7, r24
 87c:	74 18       	sub	r7, r4
 87e:	45 c0       	rjmp	.+138    	; 0x90a <vfprintf+0x2dc>
 880:	85 37       	cpi	r24, 0x75	; 117
 882:	31 f4       	brne	.+12     	; 0x890 <vfprintf+0x262>
 884:	3f ee       	ldi	r19, 0xEF	; 239
 886:	b3 2e       	mov	r11, r19
 888:	b2 22       	and	r11, r18
 88a:	2a e0       	ldi	r18, 0x0A	; 10
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	25 c0       	rjmp	.+74     	; 0x8da <vfprintf+0x2ac>
 890:	99 ef       	ldi	r25, 0xF9	; 249
 892:	b9 2e       	mov	r11, r25
 894:	b2 22       	and	r11, r18
 896:	8f 36       	cpi	r24, 0x6F	; 111
 898:	c1 f0       	breq	.+48     	; 0x8ca <vfprintf+0x29c>
 89a:	80 37       	cpi	r24, 0x70	; 112
 89c:	20 f4       	brcc	.+8      	; 0x8a6 <vfprintf+0x278>
 89e:	88 35       	cpi	r24, 0x58	; 88
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <vfprintf+0x276>
 8a2:	b5 c0       	rjmp	.+362    	; 0xa0e <vfprintf+0x3e0>
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <vfprintf+0x292>
 8a6:	80 37       	cpi	r24, 0x70	; 112
 8a8:	21 f0       	breq	.+8      	; 0x8b2 <vfprintf+0x284>
 8aa:	88 37       	cpi	r24, 0x78	; 120
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <vfprintf+0x282>
 8ae:	af c0       	rjmp	.+350    	; 0xa0e <vfprintf+0x3e0>
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x288>
 8b2:	20 e1       	ldi	r18, 0x10	; 16
 8b4:	b2 2a       	or	r11, r18
 8b6:	b4 fe       	sbrs	r11, 4
 8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <vfprintf+0x2a2>
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	b8 2a       	or	r11, r24
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vfprintf+0x2a2>
 8c0:	b4 fe       	sbrs	r11, 4
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x2a8>
 8c4:	e6 e0       	ldi	r30, 0x06	; 6
 8c6:	be 2a       	or	r11, r30
 8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <vfprintf+0x2a8>
 8ca:	28 e0       	ldi	r18, 0x08	; 8
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <vfprintf+0x2ac>
 8d0:	20 e1       	ldi	r18, 0x10	; 16
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x2ac>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	32 e0       	ldi	r19, 0x02	; 2
 8da:	b7 fe       	sbrs	r11, 7
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <vfprintf+0x2c0>
 8de:	f8 01       	movw	r30, r16
 8e0:	60 81       	ld	r22, Z
 8e2:	71 81       	ldd	r23, Z+1	; 0x01
 8e4:	82 81       	ldd	r24, Z+2	; 0x02
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
 8e8:	0c 5f       	subi	r16, 0xFC	; 252
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <vfprintf+0x2ce>
 8ee:	f8 01       	movw	r30, r16
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 5f       	subi	r16, 0xFE	; 254
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	a2 01       	movw	r20, r4
 8fe:	0e 94 69 05 	call	0xad2	; 0xad2 <__ultoa_invert>
 902:	78 2e       	mov	r7, r24
 904:	74 18       	sub	r7, r4
 906:	ff e7       	ldi	r31, 0x7F	; 127
 908:	bf 22       	and	r11, r31
 90a:	b6 fe       	sbrs	r11, 6
 90c:	0b c0       	rjmp	.+22     	; 0x924 <vfprintf+0x2f6>
 90e:	2e ef       	ldi	r18, 0xFE	; 254
 910:	b2 22       	and	r11, r18
 912:	7e 14       	cp	r7, r14
 914:	38 f4       	brcc	.+14     	; 0x924 <vfprintf+0x2f6>
 916:	b4 fe       	sbrs	r11, 4
 918:	07 c0       	rjmp	.+14     	; 0x928 <vfprintf+0x2fa>
 91a:	b2 fc       	sbrc	r11, 2
 91c:	05 c0       	rjmp	.+10     	; 0x928 <vfprintf+0x2fa>
 91e:	8f ee       	ldi	r24, 0xEF	; 239
 920:	b8 22       	and	r11, r24
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x2fa>
 924:	a7 2c       	mov	r10, r7
 926:	01 c0       	rjmp	.+2      	; 0x92a <vfprintf+0x2fc>
 928:	ae 2c       	mov	r10, r14
 92a:	8b 2d       	mov	r24, r11
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	b4 fe       	sbrs	r11, 4
 930:	0d c0       	rjmp	.+26     	; 0x94c <vfprintf+0x31e>
 932:	fe 01       	movw	r30, r28
 934:	e7 0d       	add	r30, r7
 936:	f1 1d       	adc	r31, r1
 938:	20 81       	ld	r18, Z
 93a:	20 33       	cpi	r18, 0x30	; 48
 93c:	19 f4       	brne	.+6      	; 0x944 <vfprintf+0x316>
 93e:	e9 ee       	ldi	r30, 0xE9	; 233
 940:	be 22       	and	r11, r30
 942:	09 c0       	rjmp	.+18     	; 0x956 <vfprintf+0x328>
 944:	a3 94       	inc	r10
 946:	b2 fe       	sbrs	r11, 2
 948:	06 c0       	rjmp	.+12     	; 0x956 <vfprintf+0x328>
 94a:	04 c0       	rjmp	.+8      	; 0x954 <vfprintf+0x326>
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	90 70       	andi	r25, 0x00	; 0
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	09 f0       	breq	.+2      	; 0x956 <vfprintf+0x328>
 954:	a3 94       	inc	r10
 956:	8b 2c       	mov	r8, r11
 958:	99 24       	eor	r9, r9
 95a:	b3 fc       	sbrc	r11, 3
 95c:	14 c0       	rjmp	.+40     	; 0x986 <vfprintf+0x358>
 95e:	b0 fe       	sbrs	r11, 0
 960:	0f c0       	rjmp	.+30     	; 0x980 <vfprintf+0x352>
 962:	af 14       	cp	r10, r15
 964:	28 f4       	brcc	.+10     	; 0x970 <vfprintf+0x342>
 966:	e7 2c       	mov	r14, r7
 968:	ef 0c       	add	r14, r15
 96a:	ea 18       	sub	r14, r10
 96c:	af 2c       	mov	r10, r15
 96e:	08 c0       	rjmp	.+16     	; 0x980 <vfprintf+0x352>
 970:	e7 2c       	mov	r14, r7
 972:	06 c0       	rjmp	.+12     	; 0x980 <vfprintf+0x352>
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	b6 01       	movw	r22, r12
 97a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 97e:	a3 94       	inc	r10
 980:	af 14       	cp	r10, r15
 982:	c0 f3       	brcs	.-16     	; 0x974 <vfprintf+0x346>
 984:	04 c0       	rjmp	.+8      	; 0x98e <vfprintf+0x360>
 986:	af 14       	cp	r10, r15
 988:	10 f4       	brcc	.+4      	; 0x98e <vfprintf+0x360>
 98a:	fa 18       	sub	r15, r10
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x362>
 98e:	ff 24       	eor	r15, r15
 990:	84 fe       	sbrs	r8, 4
 992:	0f c0       	rjmp	.+30     	; 0x9b2 <vfprintf+0x384>
 994:	80 e3       	ldi	r24, 0x30	; 48
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	b6 01       	movw	r22, r12
 99a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 99e:	82 fe       	sbrs	r8, 2
 9a0:	1f c0       	rjmp	.+62     	; 0x9e0 <vfprintf+0x3b2>
 9a2:	81 fe       	sbrs	r8, 1
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <vfprintf+0x37e>
 9a6:	88 e5       	ldi	r24, 0x58	; 88
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	10 c0       	rjmp	.+32     	; 0x9cc <vfprintf+0x39e>
 9ac:	88 e7       	ldi	r24, 0x78	; 120
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0d c0       	rjmp	.+26     	; 0x9cc <vfprintf+0x39e>
 9b2:	c4 01       	movw	r24, r8
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	90 70       	andi	r25, 0x00	; 0
 9b8:	00 97       	sbiw	r24, 0x00	; 0
 9ba:	91 f0       	breq	.+36     	; 0x9e0 <vfprintf+0x3b2>
 9bc:	81 fc       	sbrc	r8, 1
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <vfprintf+0x396>
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <vfprintf+0x398>
 9c4:	8b e2       	ldi	r24, 0x2B	; 43
 9c6:	b7 fc       	sbrc	r11, 7
 9c8:	8d e2       	ldi	r24, 0x2D	; 45
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	b6 01       	movw	r22, r12
 9ce:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x3b2>
 9d4:	80 e3       	ldi	r24, 0x30	; 48
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	b6 01       	movw	r22, r12
 9da:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 9de:	ea 94       	dec	r14
 9e0:	7e 14       	cp	r7, r14
 9e2:	c0 f3       	brcs	.-16     	; 0x9d4 <vfprintf+0x3a6>
 9e4:	7a 94       	dec	r7
 9e6:	f2 01       	movw	r30, r4
 9e8:	e7 0d       	add	r30, r7
 9ea:	f1 1d       	adc	r31, r1
 9ec:	80 81       	ld	r24, Z
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	b6 01       	movw	r22, r12
 9f2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 9f6:	77 20       	and	r7, r7
 9f8:	a9 f7       	brne	.-22     	; 0x9e4 <vfprintf+0x3b6>
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <vfprintf+0x3da>
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	b6 01       	movw	r22, r12
 a02:	0e 94 3d 05 	call	0xa7a	; 0xa7a <fputc>
 a06:	fa 94       	dec	r15
 a08:	ff 20       	and	r15, r15
 a0a:	c1 f7       	brne	.-16     	; 0x9fc <vfprintf+0x3ce>
 a0c:	37 ce       	rjmp	.-914    	; 0x67c <vfprintf+0x4e>
 a0e:	f6 01       	movw	r30, r12
 a10:	26 81       	ldd	r18, Z+6	; 0x06
 a12:	37 81       	ldd	r19, Z+7	; 0x07
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x3ec>
 a16:	2f ef       	ldi	r18, 0xFF	; 255
 a18:	3f ef       	ldi	r19, 0xFF	; 255
 a1a:	c9 01       	movw	r24, r18
 a1c:	2c 96       	adiw	r28, 0x0c	; 12
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	1f 91       	pop	r17
 a2e:	0f 91       	pop	r16
 a30:	ff 90       	pop	r15
 a32:	ef 90       	pop	r14
 a34:	df 90       	pop	r13
 a36:	cf 90       	pop	r12
 a38:	bf 90       	pop	r11
 a3a:	af 90       	pop	r10
 a3c:	9f 90       	pop	r9
 a3e:	8f 90       	pop	r8
 a40:	7f 90       	pop	r7
 a42:	6f 90       	pop	r6
 a44:	5f 90       	pop	r5
 a46:	4f 90       	pop	r4
 a48:	3f 90       	pop	r3
 a4a:	2f 90       	pop	r2
 a4c:	08 95       	ret

00000a4e <strnlen_P>:
 a4e:	fc 01       	movw	r30, r24
 a50:	05 90       	lpm	r0, Z+
 a52:	61 50       	subi	r22, 0x01	; 1
 a54:	70 40       	sbci	r23, 0x00	; 0
 a56:	01 10       	cpse	r0, r1
 a58:	d8 f7       	brcc	.-10     	; 0xa50 <strnlen_P+0x2>
 a5a:	80 95       	com	r24
 a5c:	90 95       	com	r25
 a5e:	8e 0f       	add	r24, r30
 a60:	9f 1f       	adc	r25, r31
 a62:	08 95       	ret

00000a64 <strnlen>:
 a64:	fc 01       	movw	r30, r24
 a66:	61 50       	subi	r22, 0x01	; 1
 a68:	70 40       	sbci	r23, 0x00	; 0
 a6a:	01 90       	ld	r0, Z+
 a6c:	01 10       	cpse	r0, r1
 a6e:	d8 f7       	brcc	.-10     	; 0xa66 <strnlen+0x2>
 a70:	80 95       	com	r24
 a72:	90 95       	com	r25
 a74:	8e 0f       	add	r24, r30
 a76:	9f 1f       	adc	r25, r31
 a78:	08 95       	ret

00000a7a <fputc>:
 a7a:	0f 93       	push	r16
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	8c 01       	movw	r16, r24
 a84:	eb 01       	movw	r28, r22
 a86:	8b 81       	ldd	r24, Y+3	; 0x03
 a88:	81 ff       	sbrs	r24, 1
 a8a:	1b c0       	rjmp	.+54     	; 0xac2 <fputc+0x48>
 a8c:	82 ff       	sbrs	r24, 2
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <fputc+0x30>
 a90:	2e 81       	ldd	r18, Y+6	; 0x06
 a92:	3f 81       	ldd	r19, Y+7	; 0x07
 a94:	8c 81       	ldd	r24, Y+4	; 0x04
 a96:	9d 81       	ldd	r25, Y+5	; 0x05
 a98:	28 17       	cp	r18, r24
 a9a:	39 07       	cpc	r19, r25
 a9c:	64 f4       	brge	.+24     	; 0xab6 <fputc+0x3c>
 a9e:	e8 81       	ld	r30, Y
 aa0:	f9 81       	ldd	r31, Y+1	; 0x01
 aa2:	01 93       	st	Z+, r16
 aa4:	f9 83       	std	Y+1, r31	; 0x01
 aa6:	e8 83       	st	Y, r30
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <fputc+0x3c>
 aaa:	e8 85       	ldd	r30, Y+8	; 0x08
 aac:	f9 85       	ldd	r31, Y+9	; 0x09
 aae:	80 2f       	mov	r24, r16
 ab0:	09 95       	icall
 ab2:	00 97       	sbiw	r24, 0x00	; 0
 ab4:	31 f4       	brne	.+12     	; 0xac2 <fputc+0x48>
 ab6:	8e 81       	ldd	r24, Y+6	; 0x06
 ab8:	9f 81       	ldd	r25, Y+7	; 0x07
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	9f 83       	std	Y+7, r25	; 0x07
 abe:	8e 83       	std	Y+6, r24	; 0x06
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <fputc+0x4c>
 ac2:	0f ef       	ldi	r16, 0xFF	; 255
 ac4:	1f ef       	ldi	r17, 0xFF	; 255
 ac6:	c8 01       	movw	r24, r16
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
 ad0:	08 95       	ret

00000ad2 <__ultoa_invert>:
 ad2:	fa 01       	movw	r30, r20
 ad4:	aa 27       	eor	r26, r26
 ad6:	28 30       	cpi	r18, 0x08	; 8
 ad8:	51 f1       	breq	.+84     	; 0xb2e <__ultoa_invert+0x5c>
 ada:	20 31       	cpi	r18, 0x10	; 16
 adc:	81 f1       	breq	.+96     	; 0xb3e <__ultoa_invert+0x6c>
 ade:	e8 94       	clt
 ae0:	6f 93       	push	r22
 ae2:	6e 7f       	andi	r22, 0xFE	; 254
 ae4:	6e 5f       	subi	r22, 0xFE	; 254
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	af 4f       	sbci	r26, 0xFF	; 255
 aee:	b1 e0       	ldi	r27, 0x01	; 1
 af0:	3e d0       	rcall	.+124    	; 0xb6e <__ultoa_invert+0x9c>
 af2:	b4 e0       	ldi	r27, 0x04	; 4
 af4:	3c d0       	rcall	.+120    	; 0xb6e <__ultoa_invert+0x9c>
 af6:	67 0f       	add	r22, r23
 af8:	78 1f       	adc	r23, r24
 afa:	89 1f       	adc	r24, r25
 afc:	9a 1f       	adc	r25, r26
 afe:	a1 1d       	adc	r26, r1
 b00:	68 0f       	add	r22, r24
 b02:	79 1f       	adc	r23, r25
 b04:	8a 1f       	adc	r24, r26
 b06:	91 1d       	adc	r25, r1
 b08:	a1 1d       	adc	r26, r1
 b0a:	6a 0f       	add	r22, r26
 b0c:	71 1d       	adc	r23, r1
 b0e:	81 1d       	adc	r24, r1
 b10:	91 1d       	adc	r25, r1
 b12:	a1 1d       	adc	r26, r1
 b14:	20 d0       	rcall	.+64     	; 0xb56 <__ultoa_invert+0x84>
 b16:	09 f4       	brne	.+2      	; 0xb1a <__ultoa_invert+0x48>
 b18:	68 94       	set
 b1a:	3f 91       	pop	r19
 b1c:	2a e0       	ldi	r18, 0x0A	; 10
 b1e:	26 9f       	mul	r18, r22
 b20:	11 24       	eor	r1, r1
 b22:	30 19       	sub	r19, r0
 b24:	30 5d       	subi	r19, 0xD0	; 208
 b26:	31 93       	st	Z+, r19
 b28:	de f6       	brtc	.-74     	; 0xae0 <__ultoa_invert+0xe>
 b2a:	cf 01       	movw	r24, r30
 b2c:	08 95       	ret
 b2e:	46 2f       	mov	r20, r22
 b30:	47 70       	andi	r20, 0x07	; 7
 b32:	40 5d       	subi	r20, 0xD0	; 208
 b34:	41 93       	st	Z+, r20
 b36:	b3 e0       	ldi	r27, 0x03	; 3
 b38:	0f d0       	rcall	.+30     	; 0xb58 <__ultoa_invert+0x86>
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__ultoa_invert+0x5c>
 b3c:	f6 cf       	rjmp	.-20     	; 0xb2a <__ultoa_invert+0x58>
 b3e:	46 2f       	mov	r20, r22
 b40:	4f 70       	andi	r20, 0x0F	; 15
 b42:	40 5d       	subi	r20, 0xD0	; 208
 b44:	4a 33       	cpi	r20, 0x3A	; 58
 b46:	18 f0       	brcs	.+6      	; 0xb4e <__ultoa_invert+0x7c>
 b48:	49 5d       	subi	r20, 0xD9	; 217
 b4a:	31 fd       	sbrc	r19, 1
 b4c:	40 52       	subi	r20, 0x20	; 32
 b4e:	41 93       	st	Z+, r20
 b50:	02 d0       	rcall	.+4      	; 0xb56 <__ultoa_invert+0x84>
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__ultoa_invert+0x6c>
 b54:	ea cf       	rjmp	.-44     	; 0xb2a <__ultoa_invert+0x58>
 b56:	b4 e0       	ldi	r27, 0x04	; 4
 b58:	a6 95       	lsr	r26
 b5a:	97 95       	ror	r25
 b5c:	87 95       	ror	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	ba 95       	dec	r27
 b64:	c9 f7       	brne	.-14     	; 0xb58 <__ultoa_invert+0x86>
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	61 05       	cpc	r22, r1
 b6a:	71 05       	cpc	r23, r1
 b6c:	08 95       	ret
 b6e:	9b 01       	movw	r18, r22
 b70:	ac 01       	movw	r20, r24
 b72:	0a 2e       	mov	r0, r26
 b74:	06 94       	lsr	r0
 b76:	57 95       	ror	r21
 b78:	47 95       	ror	r20
 b7a:	37 95       	ror	r19
 b7c:	27 95       	ror	r18
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0xa2>
 b82:	62 0f       	add	r22, r18
 b84:	73 1f       	adc	r23, r19
 b86:	84 1f       	adc	r24, r20
 b88:	95 1f       	adc	r25, r21
 b8a:	a0 1d       	adc	r26, r0
 b8c:	08 95       	ret

00000b8e <_exit>:
 b8e:	f8 94       	cli

00000b90 <__stop_program>:
 b90:	ff cf       	rjmp	.-2      	; 0xb90 <__stop_program>
