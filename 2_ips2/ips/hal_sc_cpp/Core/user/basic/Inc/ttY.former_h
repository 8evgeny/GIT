/*
 * ttY.h
 *
 *  Created on: 4 июн. 2020 г.
 *      Author: Donskikh Dmitry
 */
/*
 MIT License

 Copyright (c) 2020 Dmitry Donskikh

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

#ifndef USER_INC_TTY_H_
#define USER_INC_TTY_H_

#define MAX_TERM_LINE (2*1024)

#define TERM_RES_VT100 80*24

#include "main.h"
#include "printf.h"

class ttY
    {
protected:
    char *linebuffer = NULL;
//	struct
//	{
//		char* buffer=NULL;
//		uint32_t pos=0;
//		uint32_t length=0;
//	} pagebuffer;
    uint16_t b_size = MAX_TERM_LINE;
public:
    ttY();
    ~ttY();
    void resizeBuffer(uint16_t size);
    virtual void write_t(const char *buf, uint32_t size) =0;
    virtual void printfl(const char *fmt, ...);
    void cls();
    /*Work with page. Big formatted output data blocks goes out*/
//	void pg_Start(uint16_t size=TERM_RES_VT100);
//	void pg_Printf (const char *fmt,...);
//	void pg_Write (const char* buf,uint32_t size);
//	void pg_cls ();
    void endl();
    void flush();
    void close();

    friend ttY& operator<<(ttY &terminal, char data);
    friend ttY& operator<<(ttY &terminal, unsigned char data);

    friend ttY& operator<<(ttY &terminal, short data);
    friend ttY& operator<<(ttY &terminal, unsigned short data);

    friend ttY& operator<<(ttY &terminal, int data);
    friend ttY& operator<<(ttY &terminal, unsigned int data);

    friend ttY& operator<<(ttY &terminal, long int data);
    friend ttY& operator<<(ttY &terminal, unsigned long int data);

    friend ttY& operator<<(ttY &terminal, const char *data);
    //friend ttY &operator<<(ttY &terminal, const std::string &data);

    friend ttY& operator<<(ttY &terminal, const unsigned char *data);

    friend ttY& operator<<(ttY &terminal, double data);
    friend ttY& operator<<(ttY &terminal, void *data);
    };
#endif /* USER_INC_TTY_H_ */
