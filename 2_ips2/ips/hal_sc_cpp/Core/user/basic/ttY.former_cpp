/*
 * ttY.cpp
 *
 *  Created on: 4 июн. 2020 г.
 *      Author: Donskikh Dmitry
 */
/*
 MIT License

 Copyright (c) 2020 Dmitry Donskikh

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

#include "ttY.h"
#include "FreeRTOS.h"
#include "string.h"
#include <ips_globals.hpp>
#include <ipssystem.hpp>
//#include <ITMacrocell.hpp>

#include <debug3.h> //TODO: Mmake normal debug output;

ttY::ttY()
    {
    linebuffer = (char*) system_cpp.getBuffer(); //pvPortMalloc(sizeof(char[MAX_TERM_LINE]));
    if (!linebuffer)
	{
	DEBUG_IPS("No free buffers sorry");
	Error_Handler();
	}
    }
;

void ttY::resizeBuffer(uint16_t size)
    {
    if (size < UFW_SYSTEM_GP_BUFFER_SIZE)
	{
	return;
	}
    else
	{
	DEBUG_IPS("You want too much(buffer size)"); //TODO: Make dynamic mem realloc buffer
	Error_Handler();
	}

    /*
     vPortFree((void*)linebuffer);
     linebuffer=(char*)pvPortMalloc(sizeof(char[size]));
     */
    }
;

void ttY::printfl(const char *fmt, ...)
    {
    va_list arp;
    va_start(arp, fmt);
    int len = vsnprintf(linebuffer, b_size, fmt, arp);
    va_end(arp);
    write_t(linebuffer, len);

    }

void ttY::cls()
    {
    write_t("\033[2J", 8);
    }


//void ttY::pg_Start(uint16_t size) {
//	if (size>IPS_SYSTEM_GP_BUFFER_SIZE){
//		DEBUG_IPS("You want too much(buffer size)"); //TODO: Make dynamic mem realloc buffer
//		Error_Handler();
//	}
//	if (!pagebuffer.buffer){
//		pagebuffer.buffer=(char*)system_cpp.getBuffer();	//(char*)pvPortMalloc(sizeof(char[size]));
//		pagebuffer.length=size;
//		pagebuffer.pos=0;
//	}else{
//		if(pagebuffer.length!=size)
//		{
//			//pagebuffer.buffer=(char*)pvPortMalloc(sizeof(char[size]));
//			pagebuffer.length=size;
//			pagebuffer.pos=0;
//		} else {
//			pagebuffer.pos=0;
//		}
//	}
//	if(!pagebuffer.buffer){
//			DEBUG_IPS("No free buffers sorry");
//			Error_Handler();
//	}
//	memset(pagebuffer.buffer,0x00,pagebuffer.length);
//}
//
//void ttY::pg_Printf(const char *fmt,...) {
//	if (pagebuffer.buffer){
//		va_list arp;
//		va_start(arp, fmt);
//		pagebuffer.pos=pagebuffer.pos+snprintf(&pagebuffer.buffer[pagebuffer.pos],pagebuffer.length-pagebuffer.pos,fmt,arp);
//		va_end(arp);
//	}
//}
//
//void ttY::pg_Write(const char *buf, uint32_t size) {
//	if (pagebuffer.buffer){
//			if (size<pagebuffer.length-pagebuffer.pos){
//				memcpy((void*)&pagebuffer.buffer[pagebuffer.pos],buf,size);
//				pagebuffer.pos=pagebuffer.pos+size;
//			}
//		}
//}
//
//void ttY::pg_cls() {
//	cls();
//	memset (pagebuffer.buffer,0x00,pagebuffer.length);
//	pagebuffer.pos=0;
//}

void ttY::endl()
    {
    printfl("\f\n");
    }

void ttY::flush()
    {
//	write_t(pagebuffer.buffer,pagebuffer.pos);
//	pagebuffer.pos=0;
//	memset (pagebuffer.buffer,0x00,pagebuffer.length);
    }

void ttY::close()
    {
    flush();
//	system_cpp.freeBuffer(pagebuffer.buffer);	//vPortFree((void*)pagebuffer.buffer);
//	pagebuffer.buffer=NULL;
//	pagebuffer.length=0;
//	pagebuffer.pos=0;
    }

ttY::~ttY()
    {

    if (ipsSystem::debug == this)
	{
	ipsSystem::debug = &ioITM::Instance();
	}
    if (ipsSystem::systerm == this)
	{
	ipsSystem::systerm = ipsSystem::seial;
	}
    if (ipsSystem::monterm == this)
	{
	ipsSystem::monterm = ipsSystem::systerm;
	//ipsSystem::sysmonitor->setTerm();
	}


    if (linebuffer)
	{
	system_cpp.freeBuffer(linebuffer); //vPortFree((void*)linebuffer);
	}

    }

ttY& operator<<(ttY &terminal, char data)
    {
    terminal.printfl("%c", data);
    return terminal;
    }
ttY& operator<<(ttY &terminal, unsigned char data)
    {
    terminal.printfl("%u", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, short data)
    {
    terminal.printfl("%h", data);
    return terminal;
    }
ttY& operator<<(ttY &terminal, unsigned short data)
    {
    terminal.printfl("%h", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, int data)
    {
    terminal.printfl("%d", data);
    return terminal;
    }
ttY& operator<<(ttY &terminal, unsigned int data)
    {
    terminal.printfl("%d", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, long int data)
    {
    terminal.printfl("%l", data);
    return terminal;
    }
ttY& operator<<(ttY &terminal, unsigned long int data)
    {
    terminal.printfl("%ul", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, const char *data)
    {
    terminal.printfl("%s", data);
    return terminal;
    }
//friend ttY &operator<<(ttY &terminal, const std::string &data);

ttY& operator<<(ttY &terminal, const unsigned char *data)
    {
    terminal.printfl("%s", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, double data)
    {
    terminal.printfl("%f", data);
    return terminal;
    }

ttY& operator<<(ttY &terminal, void *data)
    {
    terminal.printfl("%x", (uint32_t) data);
    return terminal;
    }
