
sc4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08011498  08011498  00021498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801204c  0801204c  0002204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012054  08012054  00022054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012058  08012058  00022058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0801205c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000abc  20000074  080120d0  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b30  080120d0  00030b30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .DMATransferSection 00000a00  240000c0  240000c0  00040000  2**2
                  ALLOC
 11 .debug_info   0003c86a  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005a4a  00000000  00000000  0006c90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d80  00000000  00000000  00072358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bb0  00000000  00000000  000740d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d96f  00000000  00000000  00075c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000268f2  00000000  00000000  000b35f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001760f2  00000000  00000000  000d9ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0024ffdb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008678  00000000  00000000  00250030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .RxDecripSection 00000060  24000000  24000000  00040000  2**2
                  ALLOC
 21 .TxDecripSection 00000060  24000060  24000060  00040000  2**2
                  ALLOC

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011480 	.word	0x08011480

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08011480 	.word	0x08011480

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <__NVIC_SystemReset+0x24>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <__NVIC_SystemReset+0x24>)
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_SystemReset+0x28>)
 800068e:	4313      	orrs	r3, r2
 8000690:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000692:	f3bf 8f4f 	dsb	sy
}
 8000696:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <__NVIC_SystemReset+0x20>
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	05fa0004 	.word	0x05fa0004

080006a4 <fnConnect>:

static const char txtHelp[]="System commands:\r\n\ \033[33;1m DEVICE RESET \033[31;1m - soft restart MCU(connection will be lost)\r\n \033[33;1m DEVICE GET CFGUI \033[32;1m - get UI type\r\n";


void fnConnect(int numParam, char** num)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	(void)numParam;
	(void)num;
	CLI_print((char *)txtTitle1);
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <fnConnect+0x6c>)
 80006b0:	f000 fe12 	bl	80012d8 <CLI_print>

	switch (cfg_ui) {
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <fnConnect+0x70>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d821      	bhi.n	8000700 <fnConnect+0x5c>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <fnConnect+0x20>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006d9 	.word	0x080006d9
 80006c8:	080006e1 	.word	0x080006e1
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f1 	.word	0x080006f1
 80006d4:	080006f9 	.word	0x080006f9
			case UI_mode_UI16: CLI_print("PDO-16 detected\r\n"); break;
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <fnConnect+0x74>)
 80006da:	f000 fdfd 	bl	80012d8 <CLI_print>
 80006de:	e010      	b.n	8000702 <fnConnect+0x5e>
			case UI_mode_UI32: CLI_print("PDO-32 detected\r\n"); break;
 80006e0:	480e      	ldr	r0, [pc, #56]	; (800071c <fnConnect+0x78>)
 80006e2:	f000 fdf9 	bl	80012d8 <CLI_print>
 80006e6:	e00c      	b.n	8000702 <fnConnect+0x5e>
			case UI_mode_UI48: CLI_print("PDO-48 detected\r\n"); break;
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <fnConnect+0x7c>)
 80006ea:	f000 fdf5 	bl	80012d8 <CLI_print>
 80006ee:	e008      	b.n	8000702 <fnConnect+0x5e>
			case UI_mode_UI16N: CLI_print("PDO-16N detected\r\n"); break;
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <fnConnect+0x80>)
 80006f2:	f000 fdf1 	bl	80012d8 <CLI_print>
 80006f6:	e004      	b.n	8000702 <fnConnect+0x5e>
			case UI_mode_UI32N: CLI_print("PDO-32N detected\r\n"); break;
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <fnConnect+0x84>)
 80006fa:	f000 fded 	bl	80012d8 <CLI_print>
 80006fe:	e000      	b.n	8000702 <fnConnect+0x5e>
			default:  break;
 8000700:	bf00      	nop
	};
	CLI_print((char *)txtTitle2);
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <fnConnect+0x88>)
 8000704:	f000 fde8 	bl	80012d8 <CLI_print>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	080119e0 	.word	0x080119e0
 8000714:	2000070c 	.word	0x2000070c
 8000718:	08011498 	.word	0x08011498
 800071c:	080114ac 	.word	0x080114ac
 8000720:	080114c0 	.word	0x080114c0
 8000724:	080114d4 	.word	0x080114d4
 8000728:	080114e8 	.word	0x080114e8
 800072c:	080119f8 	.word	0x080119f8

08000730 <fnHelp>:

void fnHelp(int numParam, char** num)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	(void)numParam;
	(void)num;
	CLI_print((char *)txtHelp);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <fnHelp+0x18>)
 800073c:	f000 fdcc 	bl	80012d8 <CLI_print>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08011a40 	.word	0x08011a40

0800074c <fnGetType>:

void fnGetType(int numParam, char** num)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	(void)numParam;
	(void)num;
	CLI_print("CFGUI : %d\r\n", cfg_ui);
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <fnGetType+0x20>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <fnGetType+0x24>)
 800075e:	f000 fdbb 	bl	80012d8 <CLI_print>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000070c 	.word	0x2000070c
 8000770:	080114fc 	.word	0x080114fc

08000774 <fnResetDevice>:

void fnResetDevice(int numParam, char** num)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	(void)numParam;
	(void)num;
	CLI_print("RESETING DEVICE...\r\n");
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <fnResetDevice+0x14>)
 8000780:	f000 fdaa 	bl	80012d8 <CLI_print>
	NVIC_SystemReset();
 8000784:	f7ff ff78 	bl	8000678 <__NVIC_SystemReset>
 8000788:	0801150c 	.word	0x0801150c

0800078c <CLI_getParNumMsg>:

char arrStrPar[CLI_MAX_PARAMETERS_LENGTH];
char* arrPSTR[CLI_MAX_NUMBER_OF_PARAMETERS];

unsigned char CLI_getParNumMsg(char* _pMsg)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	char* pMsg = _pMsg;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	617b      	str	r3, [r7, #20]
	unsigned char result = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
	char* pSubStr;
	while(pSubStr=strstr(pMsg, " : ")){
 800079c:	e007      	b.n	80007ae <CLI_getParNumMsg+0x22>
		result++;
 800079e:	7cfb      	ldrb	r3, [r7, #19]
 80007a0:	3301      	adds	r3, #1
 80007a2:	74fb      	strb	r3, [r7, #19]
		pMsg += (pSubStr-pMsg);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	617b      	str	r3, [r7, #20]
		pMsg += 3;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3303      	adds	r3, #3
 80007ac:	617b      	str	r3, [r7, #20]
	while(pSubStr=strstr(pMsg, " : ")){
 80007ae:	4906      	ldr	r1, [pc, #24]	; (80007c8 <CLI_getParNumMsg+0x3c>)
 80007b0:	6978      	ldr	r0, [r7, #20]
 80007b2:	f00f fd31 	bl	8010218 <strstr>
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1ef      	bne.n	800079e <CLI_getParNumMsg+0x12>
	}
	return result;
 80007be:	7cfb      	ldrb	r3, [r7, #19]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08011524 	.word	0x08011524

080007cc <CLI_parse_msg>:

void CLI_parse_msg(char* _pMsg)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	char* pMsg = _pMsg;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	617b      	str	r3, [r7, #20]
	unsigned char index = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	74fb      	strb	r3, [r7, #19]
	char* it = arrStrPar;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <CLI_parse_msg+0x84>)
 80007de:	60fb      	str	r3, [r7, #12]
	char* pSubStr;
	memset(&arrStrPar, 0, CLI_MAX_PARAMETERS_LENGTH);
 80007e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e4:	2100      	movs	r1, #0
 80007e6:	481a      	ldr	r0, [pc, #104]	; (8000850 <CLI_parse_msg+0x84>)
 80007e8:	f00f fc78 	bl	80100dc <memset>
	while(pSubStr=strstr(pMsg, " : ")){
 80007ec:	e01b      	b.n	8000826 <CLI_parse_msg+0x5a>
		arrPSTR[index] = it;
 80007ee:	7cfb      	ldrb	r3, [r7, #19]
 80007f0:	4918      	ldr	r1, [pc, #96]	; (8000854 <CLI_parse_msg+0x88>)
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		memcpy(it, pMsg, pSubStr-pMsg);
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	6979      	ldr	r1, [r7, #20]
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f00f fc5c 	bl	80100c0 <memcpy>
		it += (pSubStr-pMsg)+1;
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	3301      	adds	r3, #1
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
		pMsg += (pSubStr-pMsg);
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	617b      	str	r3, [r7, #20]
		pMsg += 3;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3303      	adds	r3, #3
 800081e:	617b      	str	r3, [r7, #20]
		index++;
 8000820:	7cfb      	ldrb	r3, [r7, #19]
 8000822:	3301      	adds	r3, #1
 8000824:	74fb      	strb	r3, [r7, #19]
	while(pSubStr=strstr(pMsg, " : ")){
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <CLI_parse_msg+0x8c>)
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f00f fcf5 	bl	8010218 <strstr>
 800082e:	60b8      	str	r0, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1db      	bne.n	80007ee <CLI_parse_msg+0x22>
	}
	arrPSTR[index] = it;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <CLI_parse_msg+0x88>)
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	strcpy(it, pMsg);
 8000840:	6979      	ldr	r1, [r7, #20]
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f00f fce0 	bl	8010208 <strcpy>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000c8 	.word	0x200000c8
 8000854:	200001c8 	.word	0x200001c8
 8000858:	08011524 	.word	0x08011524

0800085c <CLI_executeCMD>:

void CLI_executeCMD(char* _message, unsigned int _size)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	(void)_size;
char* pMsg = _message;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	617b      	str	r3, [r7, #20]
unsigned char parNum;
unsigned char calculate_parNum;
//unsigned char it;
const sCLI_cmd_desc* index_cmd = CLI_searchCMD(pMsg);
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f000 f82c 	bl	80008c8 <CLI_searchCMD>
 8000870:	6138      	str	r0, [r7, #16]
	if (index_cmd != NULL){
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01a      	beq.n	80008ae <CLI_executeCMD+0x52>
//читаем из структуры кол-во параметров
		parNum = (*index_cmd).par_num;
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	73fb      	strb	r3, [r7, #15]
//проверяем сколько параметров в данном сообщении
		calculate_parNum = CLI_getParNumMsg(pMsg);
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff84 	bl	800078c <CLI_getParNumMsg>
 8000884:	4603      	mov	r3, r0
 8000886:	73bb      	strb	r3, [r7, #14]
//сравниваем кол-во подсчитанных параметров с необходимым для данной команды и если не соответствует то сообщение об ошибке
		if (calculate_parNum < parNum){
 8000888:	7bba      	ldrb	r2, [r7, #14]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	429a      	cmp	r2, r3
 800088e:	d203      	bcs.n	8000898 <CLI_executeCMD+0x3c>
			CLI_print("Error: not enough parameters\r\n");
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <CLI_executeCMD+0x60>)
 8000892:	f000 fd21 	bl	80012d8 <CLI_print>
			(*index_cmd).func(parNum+1, &arrPSTR[1]);
		}
	} else {
		CLI_print("Error: Unknown command\r\n");
	}
}
 8000896:	e00d      	b.n	80008b4 <CLI_executeCMD+0x58>
			CLI_parse_msg(pMsg);
 8000898:	6978      	ldr	r0, [r7, #20]
 800089a:	f7ff ff97 	bl	80007cc <CLI_parse_msg>
			(*index_cmd).func(parNum+1, &arrPSTR[1]);
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	3201      	adds	r2, #1
 80008a6:	4906      	ldr	r1, [pc, #24]	; (80008c0 <CLI_executeCMD+0x64>)
 80008a8:	4610      	mov	r0, r2
 80008aa:	4798      	blx	r3
}
 80008ac:	e002      	b.n	80008b4 <CLI_executeCMD+0x58>
		CLI_print("Error: Unknown command\r\n");
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <CLI_executeCMD+0x68>)
 80008b0:	f000 fd12 	bl	80012d8 <CLI_print>
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08011528 	.word	0x08011528
 80008c0:	200001cc 	.word	0x200001cc
 80008c4:	08011548 	.word	0x08011548

080008c8 <CLI_searchCMD>:
	{&cmdConnect[0] , fnConnect, 0},
	{&cmdHelp[0] , fnHelp, 0},
	{NULL , NULL, 0}
};

const sCLI_cmd_desc* CLI_searchCMD(char* _cmd){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	unsigned char index;
	for(index = 0; cmd_tab[index].cmd_text; index++){
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e019      	b.n	800090a <CLI_searchCMD+0x42>
		if (strstr(_cmd, cmd_tab[index].cmd_text) != NULL)
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	4913      	ldr	r1, [pc, #76]	; (8000928 <CLI_searchCMD+0x60>)
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f00f fc95 	bl	8010218 <strstr>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d007      	beq.n	8000904 <CLI_searchCMD+0x3c>
			return &cmd_tab[index];
 80008f4:	7bfa      	ldrb	r2, [r7, #15]
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <CLI_searchCMD+0x60>)
 8000900:	4413      	add	r3, r2
 8000902:	e00d      	b.n	8000920 <CLI_searchCMD+0x58>
	for(index = 0; cmd_tab[index].cmd_text; index++){
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	3301      	adds	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <CLI_searchCMD+0x60>)
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1db      	bne.n	80008d6 <CLI_searchCMD+0xe>
	}
	return NULL;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08011c30 	.word	0x08011c30

0800092c <searchPIN>:
           };

#define PinNamesInNum (sizeof(PinNamesIn)/sizeof(sPIN_DESC))
#define PinNamesOutNum (sizeof(PinNamesOut)/sizeof(sPIN_DESC))
		   
int8_t searchPIN(char* _pinname, const sPIN_DESC *pintab, uint8_t num ){
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 0; i < num; i++){
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]
 800093e:	e014      	b.n	800096a <searchPIN+0x3e>
		if (strstr(_pinname, pintab[i].name) != NULL) return i;
 8000940:	7dfa      	ldrb	r2, [r7, #23]
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f00f fc60 	bl	8010218 <strstr>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <searchPIN+0x38>
 800095e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000962:	e008      	b.n	8000976 <searchPIN+0x4a>
	for(i = 0; i < num; i++){
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	3301      	adds	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
 800096a:	7dfa      	ldrb	r2, [r7, #23]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	429a      	cmp	r2, r3
 8000970:	d3e6      	bcc.n	8000940 <searchPIN+0x14>
	}
	return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <fnSetPIN>:

void fnSetPIN(int numParam, char** num)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	int8_t pinnum, pinval;

	if (!TestModeOn) {
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <fnSetPIN+0xa8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <fnSetPIN+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000992:	4826      	ldr	r0, [pc, #152]	; (8000a2c <fnSetPIN+0xac>)
 8000994:	f000 fca0 	bl	80012d8 <CLI_print>
	 return;
 8000998:	e043      	b.n	8000a22 <fnSetPIN+0xa2>
	}

	pinnum = searchPIN(num[0], &PinNamesOut[0], PinNamesOutNum );
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2207      	movs	r2, #7
 80009a0:	4923      	ldr	r1, [pc, #140]	; (8000a30 <fnSetPIN+0xb0>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffc2 	bl	800092c <searchPIN>
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
	if (pinnum>=0) {
 80009ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db33      	blt.n	8000a1c <fnSetPIN+0x9c>
	 pinval = num[1][0] - '0';
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3304      	adds	r3, #4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3b30      	subs	r3, #48	; 0x30
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73bb      	strb	r3, [r7, #14]
	 if ((pinval==0) || (pinval==1)) {
 80009c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <fnSetPIN+0x52>
 80009ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d120      	bne.n	8000a14 <fnSetPIN+0x94>
	  HAL_GPIO_WritePin(PinNamesOut[pinnum].port, PinNamesOut[pinnum].pin, pinval);
 80009d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80009d6:	4916      	ldr	r1, [pc, #88]	; (8000a30 <fnSetPIN+0xb0>)
 80009d8:	4613      	mov	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	440b      	add	r3, r1
 80009e2:	330c      	adds	r3, #12
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80009ea:	4911      	ldr	r1, [pc, #68]	; (8000a30 <fnSetPIN+0xb0>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	3310      	adds	r3, #16
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	7bba      	ldrb	r2, [r7, #14]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f007 fb73 	bl	80080e8 <HAL_GPIO_WritePin>
	  CLI_print("Pin %s set to %i\r\n", num[0], pinval);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <fnSetPIN+0xb4>)
 8000a0e:	f000 fc63 	bl	80012d8 <CLI_print>
 8000a12:	e006      	b.n	8000a22 <fnSetPIN+0xa2>
	 }
	 else CLI_print("Error: wrong pin value\r\n");	 
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <fnSetPIN+0xb8>)
 8000a16:	f000 fc5f 	bl	80012d8 <CLI_print>
 8000a1a:	e002      	b.n	8000a22 <fnSetPIN+0xa2>
	} else {
	 CLI_print("Error: wrong pin name\r\n");
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <fnSetPIN+0xbc>)
 8000a1e:	f000 fc5b 	bl	80012d8 <CLI_print>
	}
}
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001ea 	.word	0x200001ea
 8000a2c:	08011564 	.word	0x08011564
 8000a30:	08011d74 	.word	0x08011d74
 8000a34:	08011580 	.word	0x08011580
 8000a38:	08011594 	.word	0x08011594
 8000a3c:	080115b0 	.word	0x080115b0

08000a40 <fnGetPIN>:

void fnGetPIN(int numParam, char** num)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	int8_t pinnum, pinval;

	if (!TestModeOn) {
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <fnGetPIN+0x84>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <fnGetPIN+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000a52:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <fnGetPIN+0x88>)
 8000a54:	f000 fc40 	bl	80012d8 <CLI_print>
	 return;
 8000a58:	e031      	b.n	8000abe <fnGetPIN+0x7e>
	}

	pinnum = searchPIN(num[0], &PinNamesIn[0], PinNamesInNum );
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	220c      	movs	r2, #12
 8000a60:	491a      	ldr	r1, [pc, #104]	; (8000acc <fnGetPIN+0x8c>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff62 	bl	800092c <searchPIN>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	if (pinnum>=0) {
 8000a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db21      	blt.n	8000ab8 <fnGetPIN+0x78>
	  pinval = HAL_GPIO_ReadPin(PinNamesIn[pinnum].port, PinNamesIn[pinnum].pin);
 8000a74:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000a78:	4914      	ldr	r1, [pc, #80]	; (8000acc <fnGetPIN+0x8c>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	330c      	adds	r3, #12
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000a8c:	490f      	ldr	r1, [pc, #60]	; (8000acc <fnGetPIN+0x8c>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	3310      	adds	r3, #16
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f007 fb0b 	bl	80080b8 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73bb      	strb	r3, [r7, #14]
	  CLI_print("Input pin %s : %i\r\n", num[0], pinval);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <fnGetPIN+0x90>)
 8000ab2:	f000 fc11 	bl	80012d8 <CLI_print>
 8000ab6:	e002      	b.n	8000abe <fnGetPIN+0x7e>
	} else {
	 CLI_print("Error: wrong pin name\r\n");
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <fnGetPIN+0x94>)
 8000aba:	f000 fc0d 	bl	80012d8 <CLI_print>
	}	
}
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001ea 	.word	0x200001ea
 8000ac8:	08011564 	.word	0x08011564
 8000acc:	08011e00 	.word	0x08011e00
 8000ad0:	080115c8 	.word	0x080115c8
 8000ad4:	080115b0 	.word	0x080115b0

08000ad8 <fnSetLED>:

// SetLED idx8 st8
void fnSetLED(int numParam, char** num)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint8_t ledidx, ledst;
	
	if (!TestModeOn) {
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <fnSetLED+0x64>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <fnSetLED+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000aea:	4815      	ldr	r0, [pc, #84]	; (8000b40 <fnSetLED+0x68>)
 8000aec:	f000 fbf4 	bl	80012d8 <CLI_print>
	 return;
 8000af0:	e020      	b.n	8000b34 <fnSetLED+0x5c>
	}
	
    ledidx = Hex2Int(num[0], 1);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fcbd 	bl	8001478 <Hex2Int>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]
	ledst = Hex2Int(num[1], 1);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3304      	adds	r3, #4
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fcb4 	bl	8001478 <Hex2Int>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73bb      	strb	r3, [r7, #14]
	
	if (ledidx>=LED_NUM) {
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b38      	cmp	r3, #56	; 0x38
 8000b18:	d903      	bls.n	8000b22 <fnSetLED+0x4a>
	 CLI_print("Error: invalid led number\r\n");
 8000b1a:	480a      	ldr	r0, [pc, #40]	; (8000b44 <fnSetLED+0x6c>)
 8000b1c:	f000 fbdc 	bl	80012d8 <CLI_print>
	 return;
 8000b20:	e008      	b.n	8000b34 <fnSetLED+0x5c>
	}
	
	ui_setledstate(ledidx, ledst);
 8000b22:	7bba      	ldrb	r2, [r7, #14]
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fb6f 	bl	800220c <ui_setledstate>
	CLI_print("Set led state ok\r\n");
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <fnSetLED+0x70>)
 8000b30:	f000 fbd2 	bl	80012d8 <CLI_print>
}
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001ea 	.word	0x200001ea
 8000b40:	08011564 	.word	0x08011564
 8000b44:	080115dc 	.word	0x080115dc
 8000b48:	080115f8 	.word	0x080115f8

08000b4c <fnGetBTN>:

// GetBTN idx8
void fnGetBTN(int numParam, char** num)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	uint8_t btnidx, btnval;
	
	if (!TestModeOn) {
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <fnGetBTN+0x58>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <fnGetBTN+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <fnGetBTN+0x5c>)
 8000b60:	f000 fbba 	bl	80012d8 <CLI_print>
	 return;
 8000b64:	e01a      	b.n	8000b9c <fnGetBTN+0x50>
	}

    btnidx = Hex2Int(num[0], 1);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fc83 	bl	8001478 <Hex2Int>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]
	if (btnidx>=BTN_NUM) {
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	2b45      	cmp	r3, #69	; 0x45
 8000b7a:	d903      	bls.n	8000b84 <fnGetBTN+0x38>
	 CLI_print("Error: invalid btn number\r\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <fnGetBTN+0x60>)
 8000b7e:	f000 fbab 	bl	80012d8 <CLI_print>
	 return;
 8000b82:	e00b      	b.n	8000b9c <fnGetBTN+0x50>
	}

    btnval = ui_getbtnval(btnidx);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fbbc 	bl	8002304 <ui_getbtnval>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	CLI_print("Get btn %.2X val : %i\r\n", btnidx, btnval);	
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	7bba      	ldrb	r2, [r7, #14]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <fnGetBTN+0x64>)
 8000b98:	f000 fb9e 	bl	80012d8 <CLI_print>
}
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001ea 	.word	0x200001ea
 8000ba8:	08011564 	.word	0x08011564
 8000bac:	0801160c 	.word	0x0801160c
 8000bb0:	08011628 	.word	0x08011628

08000bb4 <fnSetAIC>:

extern I2C_HandleTypeDef hi2c2;

// SetAIC reg8 data8
void fnSetAIC(int numParam, char** num)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	uint8_t res, page, reg, data;
	
	if (!TestModeOn) {
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <fnSetAIC+0x80>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <fnSetAIC+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000bc6:	481c      	ldr	r0, [pc, #112]	; (8000c38 <fnSetAIC+0x84>)
 8000bc8:	f000 fb86 	bl	80012d8 <CLI_print>
	 return;
 8000bcc:	e02e      	b.n	8000c2c <fnSetAIC+0x78>
	}

	page = Hex2Int(num[0], 1);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fc4f 	bl	8001478 <Hex2Int>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	reg = Hex2Int(num[1], 1);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	3304      	adds	r3, #4
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fc46 	bl	8001478 <Hex2Int>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	data = Hex2Int(num[2], 1);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fc3d 	bl	8001478 <Hex2Int>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	737b      	strb	r3, [r7, #13]
	res = TLV320_WritePage(page, reg, data);
 8000c02:	7b7a      	ldrb	r2, [r7, #13]
 8000c04:	7bb9      	ldrb	r1, [r7, #14]
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 ff5f 	bl	8001acc <TLV320_WritePage>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	733b      	strb	r3, [r7, #12]
	if (res == HAL_OK)
 8000c12:	7b3b      	ldrb	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d106      	bne.n	8000c26 <fnSetAIC+0x72>
	  CLI_print("AIC reg %.2X val : %.2X\r\n", reg, data);	
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	7b7a      	ldrb	r2, [r7, #13]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <fnSetAIC+0x88>)
 8000c20:	f000 fb5a 	bl	80012d8 <CLI_print>
 8000c24:	e002      	b.n	8000c2c <fnSetAIC+0x78>
	else
	  CLI_print("Error: AIC write error\r\n");		
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <fnSetAIC+0x8c>)
 8000c28:	f000 fb56 	bl	80012d8 <CLI_print>
}
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001ea 	.word	0x200001ea
 8000c38:	08011564 	.word	0x08011564
 8000c3c:	08011640 	.word	0x08011640
 8000c40:	0801165c 	.word	0x0801165c

08000c44 <fnGetAIC>:

// GetAIC reg8 
void fnGetAIC(int numParam, char** num)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	uint8_t res, page, reg, data;
	
	if (!TestModeOn) {
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <fnGetAIC+0x70>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <fnGetAIC+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000c56:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <fnGetAIC+0x74>)
 8000c58:	f000 fb3e 	bl	80012d8 <CLI_print>
 8000c5c:	e026      	b.n	8000cac <fnGetAIC+0x68>
	 return;
	}
	
	page = Hex2Int(num[0], 1);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fc07 	bl	8001478 <Hex2Int>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
	reg = Hex2Int(num[1], 1);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3304      	adds	r3, #4
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fbfe 	bl	8001478 <Hex2Int>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73bb      	strb	r3, [r7, #14]
	res = TLV320_ReadPage(page, reg, &data);
 8000c80:	f107 020c 	add.w	r2, r7, #12
 8000c84:	7bb9      	ldrb	r1, [r7, #14]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 feef 	bl	8001a6c <TLV320_ReadPage>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	737b      	strb	r3, [r7, #13]
	if (res == HAL_OK)
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d106      	bne.n	8000ca6 <fnGetAIC+0x62>
	  CLI_print("AIC reg %.2X val : %.2X\r\n", reg, data);	
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	7b3a      	ldrb	r2, [r7, #12]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <fnGetAIC+0x78>)
 8000ca0:	f000 fb1a 	bl	80012d8 <CLI_print>
 8000ca4:	e002      	b.n	8000cac <fnGetAIC+0x68>
	else
	  CLI_print("Error: AIC read error\r\n");	
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <fnGetAIC+0x7c>)
 8000ca8:	f000 fb16 	bl	80012d8 <CLI_print>
}
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001ea 	.word	0x200001ea
 8000cb8:	08011564 	.word	0x08011564
 8000cbc:	08011640 	.word	0x08011640
 8000cc0:	08011678 	.word	0x08011678

08000cc4 <fnSetETH>:

extern ETH_HandleTypeDef heth;

// SetETH reg8 data16
void fnSetETH(int numParam, char** num)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	uint8_t res, reg;
	uint16_t data;

	if (!TestModeOn) {
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <fnSetETH+0x6c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <fnSetETH+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000cd6:	4817      	ldr	r0, [pc, #92]	; (8000d34 <fnSetETH+0x70>)
 8000cd8:	f000 fafe 	bl	80012d8 <CLI_print>
	 return;
 8000cdc:	e025      	b.n	8000d2a <fnSetETH+0x66>
	}
	
	reg = Hex2Int(num[0], 1);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fbc7 	bl	8001478 <Hex2Int>
 8000cea:	4603      	mov	r3, r0
 8000cec:	73fb      	strb	r3, [r7, #15]
	data = Hex2Int(num[1], 2);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fbbe 	bl	8001478 <Hex2Int>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	81bb      	strh	r3, [r7, #12]
	res = HAL_ETH_WritePHYRegister(&heth, 1, reg, data);
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	2101      	movs	r1, #1
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <fnSetETH+0x74>)
 8000d08:	f006 fc96 	bl	8007638 <HAL_ETH_WritePHYRegister>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	72fb      	strb	r3, [r7, #11]
	if (res == HAL_OK)
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d106      	bne.n	8000d24 <fnSetETH+0x60>
	  CLI_print("ETHPHY reg %.2X val : %.4X\r\n", reg, data);	
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	89ba      	ldrh	r2, [r7, #12]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <fnSetETH+0x78>)
 8000d1e:	f000 fadb 	bl	80012d8 <CLI_print>
 8000d22:	e002      	b.n	8000d2a <fnSetETH+0x66>
	else
	  CLI_print("Error: ETHPHY write error\r\n");			
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <fnSetETH+0x7c>)
 8000d26:	f000 fad7 	bl	80012d8 <CLI_print>
}
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200001ea 	.word	0x200001ea
 8000d34:	08011564 	.word	0x08011564
 8000d38:	20000a60 	.word	0x20000a60
 8000d3c:	08011690 	.word	0x08011690
 8000d40:	080116b0 	.word	0x080116b0

08000d44 <fnGetETH>:

// GetETH reg8
void fnGetETH(int numParam, char** num)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	uint8_t res, reg;
	uint32_t data;

	if (!TestModeOn) {
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <fnGetETH+0x5c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <fnGetETH+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <fnGetETH+0x60>)
 8000d58:	f000 fabe 	bl	80012d8 <CLI_print>
 8000d5c:	e01d      	b.n	8000d9a <fnGetETH+0x56>
	 return;
	}

	reg = Hex2Int(num[0], 1);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fb87 	bl	8001478 <Hex2Int>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	res = HAL_ETH_ReadPHYRegister(&heth, 1, reg, &data);
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2101      	movs	r1, #1
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <fnGetETH+0x64>)
 8000d78:	f006 fc0a 	bl	8007590 <HAL_ETH_ReadPHYRegister>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73bb      	strb	r3, [r7, #14]
	if (res == HAL_OK)
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <fnGetETH+0x50>
	  CLI_print("ETHPHY reg %.2X val : %.4X\r\n", reg, data);	
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <fnGetETH+0x68>)
 8000d8e:	f000 faa3 	bl	80012d8 <CLI_print>
 8000d92:	e002      	b.n	8000d9a <fnGetETH+0x56>
	else
	  CLI_print("Error: ETHPHY read error\r\n");			
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <fnGetETH+0x6c>)
 8000d96:	f000 fa9f 	bl	80012d8 <CLI_print>
}
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001ea 	.word	0x200001ea
 8000da4:	08011564 	.word	0x08011564
 8000da8:	20000a60 	.word	0x20000a60
 8000dac:	08011690 	.word	0x08011690
 8000db0:	080116cc 	.word	0x080116cc

08000db4 <fnTestSRAM>:

void fnTestSRAM(int numParam, char** num)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  // TODO more
  SRam_Status ram_st;

  Test_RAM(0x60000000, 0x100000, &ram_st, 1);
 8000dbe:	f107 0208 	add.w	r2, r7, #8
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000dc8:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000dcc:	f000 fd26 	bl	800181c <Test_RAM>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <fnTestEEPROM>:

void fnTestEEPROM(int numParam, char** num)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  // TODO
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <fnTestCODEC>:

void fnTestCODEC(int numParam, char** num)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  // TODO
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <fnTestPHY>:

void fnTestPHY(int numParam, char** num)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  // TODO
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <fnTestLEDOn>:

void fnTestLEDOn(int numParam, char** num)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	if (!TestModeOn) {
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <fnTestLEDOn+0x4c>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <fnTestLEDOn+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <fnTestLEDOn+0x50>)
 8000e30:	f000 fa52 	bl	80012d8 <CLI_print>
	 return;
 8000e34:	e015      	b.n	8000e62 <fnTestLEDOn+0x46>
	}

	if (TestBTNOn) fnTestBTNOff( numParam, num);	
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <fnTestLEDOn+0x54>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <fnTestLEDOn+0x2a>
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f867 	bl	8000f14 <fnTestBTNOff>
	TestLEDOn = 1;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <fnTestLEDOn+0x58>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
	testLEDtime = HAL_GetTick(); 
 8000e4c:	f003 f9ba 	bl	80041c4 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <fnTestLEDOn+0x5c>)
 8000e54:	6013      	str	r3, [r2, #0]
	testLEDst = 0;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <fnTestLEDOn+0x60>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	
	CLI_print("LED Test on\r\n");
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <fnTestLEDOn+0x64>)
 8000e5e:	f000 fa3b 	bl	80012d8 <CLI_print>
}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001ea 	.word	0x200001ea
 8000e6c:	08011564 	.word	0x08011564
 8000e70:	200001eb 	.word	0x200001eb
 8000e74:	200001ec 	.word	0x200001ec
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	080116e8 	.word	0x080116e8

08000e84 <fnTestLEDOff>:

void fnTestLEDOff(int numParam, char** num) 
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	if (!TestModeOn) {
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <fnTestLEDOff+0x30>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <fnTestLEDOff+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <fnTestLEDOff+0x34>)
 8000e98:	f000 fa1e 	bl	80012d8 <CLI_print>
	 return;
 8000e9c:	e007      	b.n	8000eae <fnTestLEDOff+0x2a>
	}

	TestLEDOn = 0;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <fnTestLEDOff+0x38>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	ui_init();
 8000ea4:	f001 fa5e 	bl	8002364 <ui_init>
	
	CLI_print("LED Test off\r\n");
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <fnTestLEDOff+0x3c>)
 8000eaa:	f000 fa15 	bl	80012d8 <CLI_print>
}
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001ea 	.word	0x200001ea
 8000eb8:	08011564 	.word	0x08011564
 8000ebc:	200001ec 	.word	0x200001ec
 8000ec0:	080116f8 	.word	0x080116f8

08000ec4 <fnTestBTNOn>:

void fnTestBTNOn(int numParam, char** num)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	if (!TestModeOn) {
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <fnTestBTNOn+0x3c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <fnTestBTNOn+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <fnTestBTNOn+0x40>)
 8000ed8:	f000 f9fe 	bl	80012d8 <CLI_print>
	 return;
 8000edc:	e00d      	b.n	8000efa <fnTestBTNOn+0x36>
	}
	
	if (TestLEDOn) fnTestLEDOff( numParam, num);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <fnTestBTNOn+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <fnTestBTNOn+0x2a>
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffcb 	bl	8000e84 <fnTestLEDOff>
	TestBTNOn = 1;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <fnTestBTNOn+0x48>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
	CLI_print("BTN Test on\r\n");
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <fnTestBTNOn+0x4c>)
 8000ef6:	f000 f9ef 	bl	80012d8 <CLI_print>
}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001ea 	.word	0x200001ea
 8000f04:	08011564 	.word	0x08011564
 8000f08:	200001ec 	.word	0x200001ec
 8000f0c:	200001eb 	.word	0x200001eb
 8000f10:	08011708 	.word	0x08011708

08000f14 <fnTestBTNOff>:

void fnTestBTNOff(int numParam, char** num)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	if (!TestModeOn) {
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <fnTestBTNOff+0x30>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <fnTestBTNOff+0x1a>
	 CLI_print("Error: not in test mode\r\n");
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <fnTestBTNOff+0x34>)
 8000f28:	f000 f9d6 	bl	80012d8 <CLI_print>
	 return;
 8000f2c:	e007      	b.n	8000f3e <fnTestBTNOff+0x2a>
	}
	
	TestBTNOn = 0;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <fnTestBTNOff+0x38>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
	ui_init();
 8000f34:	f001 fa16 	bl	8002364 <ui_init>
	
	CLI_print("BTN Test off\r\n");
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <fnTestBTNOff+0x3c>)
 8000f3a:	f000 f9cd 	bl	80012d8 <CLI_print>
}
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001ea 	.word	0x200001ea
 8000f48:	08011564 	.word	0x08011564
 8000f4c:	200001eb 	.word	0x200001eb
 8000f50:	08011718 	.word	0x08011718

08000f54 <fnStartTestMode>:

void fnStartTestMode(int numParam, char** num)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  TestModeOn = 1;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <fnStartTestMode+0x20>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
  CLI_print("TEST MODE ENABLED\r\n");
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <fnStartTestMode+0x24>)
 8000f66:	f000 f9b7 	bl	80012d8 <CLI_print>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001ea 	.word	0x200001ea
 8000f78:	08011728 	.word	0x08011728

08000f7c <fnStopTestMode>:

void fnStopTestMode(int numParam, char** num)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  TestModeOn = 0;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <fnStopTestMode+0x40>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
  
  if (TestLEDOn) fnTestLEDOff( numParam, num);
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <fnStopTestMode+0x44>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <fnStopTestMode+0x20>
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff74 	bl	8000e84 <fnTestLEDOff>
  if (TestBTNOn) fnTestBTNOff( numParam, num);
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <fnStopTestMode+0x48>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <fnStopTestMode+0x30>
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb4 	bl	8000f14 <fnTestBTNOff>
  
  CLI_print("TEST MODE DISABLED\r\n");
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <fnStopTestMode+0x4c>)
 8000fae:	f000 f993 	bl	80012d8 <CLI_print>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001ea 	.word	0x200001ea
 8000fc0:	200001ec 	.word	0x200001ec
 8000fc4:	200001eb 	.word	0x200001eb
 8000fc8:	0801173c 	.word	0x0801173c

08000fcc <fnStartDebugMode>:

void fnStartDebugMode(int numParam, char** num)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  ServiceModeOn = 1;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <fnStartDebugMode+0x20>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
  CLI_print("DEBUG MODE ENABLED\r\n");
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <fnStartDebugMode+0x24>)
 8000fde:	f000 f97b 	bl	80012d8 <CLI_print>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001e8 	.word	0x200001e8
 8000ff0:	08011754 	.word	0x08011754

08000ff4 <fnStopDebugMode>:

void fnStopDebugMode(int numParam, char** num)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  ServiceModeOn = 0;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <fnStopDebugMode+0x20>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
  CLI_print("DEBUG MODE DISABLED\r\n");
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <fnStopDebugMode+0x24>)
 8001006:	f000 f967 	bl	80012d8 <CLI_print>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001e8 	.word	0x200001e8
 8001018:	0801176c 	.word	0x0801176c

0800101c <fnStartServiceMode>:

void fnStartServiceMode(int numParam, char** num)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  DebugModeOn = 1;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <fnStartServiceMode+0x20>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
  CLI_print("SERVICE MODE ENABLED\r\n");
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <fnStartServiceMode+0x24>)
 800102e:	f000 f953 	bl	80012d8 <CLI_print>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001e9 	.word	0x200001e9
 8001040:	08011784 	.word	0x08011784

08001044 <fnStopServiceMode>:

void fnStopServiceMode(int numParam, char** num)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  DebugModeOn = 0;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <fnStopServiceMode+0x20>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  CLI_print("SERVICE MODE DISABLED\r\n");
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <fnStopServiceMode+0x24>)
 8001056:	f000 f93f 	bl	80012d8 <CLI_print>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001e9 	.word	0x200001e9
 8001068:	0801179c 	.word	0x0801179c

0800106c <Test_Init>:

void Test_Init()
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
//  TestModeOn = 0;
  TestModeOn = 1;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <Test_Init+0x2c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
  ServiceModeOn = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <Test_Init+0x30>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
  DebugModeOn = 0;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <Test_Init+0x34>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
  TestLEDOn = 0;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Test_Init+0x38>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  TestBTNOn = 0;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <Test_Init+0x3c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	200001ea 	.word	0x200001ea
 800109c:	200001e8 	.word	0x200001e8
 80010a0:	200001e9 	.word	0x200001e9
 80010a4:	200001ec 	.word	0x200001ec
 80010a8:	200001eb 	.word	0x200001eb

080010ac <Test_Task>:

void Test_Task()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
   uint8_t i, btidx;
   
   if (TestModeOn) {
 80010b2:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <Test_Task+0x174>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80ae 	beq.w	8001218 <Test_Task+0x16c>
     if (TestLEDOn) {
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <Test_Task+0x178>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d059      	beq.n	8001178 <Test_Task+0xcc>
      if ((HAL_GetTick() - testLEDtime) > 1000) {
 80010c4:	f003 f87e 	bl	80041c4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <Test_Task+0x17c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d4:	f240 80a0 	bls.w	8001218 <Test_Task+0x16c>
		testLEDtime = HAL_GetTick(); 
 80010d8:	f003 f874 	bl	80041c4 <HAL_GetTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a52      	ldr	r2, [pc, #328]	; (8001228 <Test_Task+0x17c>)
 80010e0:	6013      	str	r3, [r2, #0]
		testLEDst ^= 1;
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <Test_Task+0x180>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <Test_Task+0x180>)
 80010ee:	701a      	strb	r2, [r3, #0]
		i = LED_AB1R;
 80010f0:	2308      	movs	r3, #8
 80010f2:	71fb      	strb	r3, [r7, #7]
		if (testLEDst) {
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <Test_Task+0x180>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01e      	beq.n	800113a <Test_Task+0x8e>
			ui_setledstate(LED_TEST, LED_STATE_OFF);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2000      	movs	r0, #0
 8001100:	f001 f884 	bl	800220c <ui_setledstate>
			ui_setledstate(LED_NORMA, LED_STATE_OFF);
 8001104:	2100      	movs	r1, #0
 8001106:	2001      	movs	r0, #1
 8001108:	f001 f880 	bl	800220c <ui_setledstate>
			ui_setledstate(LED_MKVKL, LED_STATE_ON);
 800110c:	2101      	movs	r1, #1
 800110e:	2002      	movs	r0, #2
 8001110:	f001 f87c 	bl	800220c <ui_setledstate>

		 while (i<LED_NUM) {
 8001114:	e00d      	b.n	8001132 <Test_Task+0x86>
			ui_setledstate(i++, LED_STATE_ON);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	71fa      	strb	r2, [r7, #7]
 800111c:	2101      	movs	r1, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f874 	bl	800220c <ui_setledstate>
			ui_setledstate(i++, LED_STATE_OFF);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	71fa      	strb	r2, [r7, #7]
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f001 f86d 	bl	800220c <ui_setledstate>
		 while (i<LED_NUM) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b38      	cmp	r3, #56	; 0x38
 8001136:	d9ee      	bls.n	8001116 <Test_Task+0x6a>
		    ui_setledstate(btidx,LED_STATE_OFF);
		 }	   
	   }
	 }      
   }
}
 8001138:	e06e      	b.n	8001218 <Test_Task+0x16c>
		 ui_setledstate(LED_TEST, LED_STATE_ON);
 800113a:	2101      	movs	r1, #1
 800113c:	2000      	movs	r0, #0
 800113e:	f001 f865 	bl	800220c <ui_setledstate>
		 ui_setledstate(LED_NORMA, LED_STATE_ON);
 8001142:	2101      	movs	r1, #1
 8001144:	2001      	movs	r0, #1
 8001146:	f001 f861 	bl	800220c <ui_setledstate>
		 ui_setledstate(LED_MKVKL, LED_STATE_OFF);
 800114a:	2100      	movs	r1, #0
 800114c:	2002      	movs	r0, #2
 800114e:	f001 f85d 	bl	800220c <ui_setledstate>
		 while (i<LED_NUM) {
 8001152:	e00d      	b.n	8001170 <Test_Task+0xc4>
			ui_setledstate(i++, LED_STATE_OFF);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	71fa      	strb	r2, [r7, #7]
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f855 	bl	800220c <ui_setledstate>
			ui_setledstate(i++, LED_STATE_ON);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	71fa      	strb	r2, [r7, #7]
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f84e 	bl	800220c <ui_setledstate>
		 while (i<LED_NUM) {
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b38      	cmp	r3, #56	; 0x38
 8001174:	d9ee      	bls.n	8001154 <Test_Task+0xa8>
}
 8001176:	e04f      	b.n	8001218 <Test_Task+0x16c>
	 } else if (TestBTNOn) {
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <Test_Task+0x184>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d04b      	beq.n	8001218 <Test_Task+0x16c>
	   btidx = ui_getactivebtn();
 8001180:	f001 f8d0 	bl	8002324 <ui_getactivebtn>
 8001184:	4603      	mov	r3, r0
 8001186:	71bb      	strb	r3, [r7, #6]
	   if ((btidx!=BTN_NONE) && (btidx>=BTN_AB1))
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d044      	beq.n	8001218 <Test_Task+0x16c>
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b07      	cmp	r3, #7
 8001192:	d941      	bls.n	8001218 <Test_Task+0x16c>
	    if (ui_getbtnval(btidx)==BTN_VAL_DOWN) {
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f8b4 	bl	8002304 <ui_getbtnval>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d13a      	bne.n	8001218 <Test_Task+0x16c>
	    	CLI_print("BTN %.2X\r\n",btidx);
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <Test_Task+0x188>)
 80011a8:	f000 f896 	bl	80012d8 <CLI_print>
	     if (btidx>=BTN_NN1) {
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	2b38      	cmp	r3, #56	; 0x38
 80011b0:	d919      	bls.n	80011e6 <Test_Task+0x13a>
		   btidx = LED_AB1R + ((btidx - BTN_NN1) << 1); // red led corresponding to button
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	3b39      	subs	r3, #57	; 0x39
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	3308      	adds	r3, #8
 80011be:	71bb      	strb	r3, [r7, #6]
		   if (ui_getledstate(btidx)==LED_STATE_OFF) 
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 f88e 	bl	80022e4 <ui_getledstate>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <Test_Task+0x12e>
		    ui_setledstate(btidx,LED_STATE_ON);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	2101      	movs	r1, #1
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f81a 	bl	800220c <ui_setledstate>
}
 80011d8:	e01e      	b.n	8001218 <Test_Task+0x16c>
		    ui_setledstate(btidx,LED_STATE_OFF);		   
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f814 	bl	800220c <ui_setledstate>
}
 80011e4:	e018      	b.n	8001218 <Test_Task+0x16c>
		   btidx = LED_AB1G + ((btidx - BTN_AB1) << 1); // green led corresponding to button
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	3b08      	subs	r3, #8
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3309      	adds	r3, #9
 80011f2:	71bb      	strb	r3, [r7, #6]
		   if (ui_getledstate(btidx)==LED_STATE_OFF) 
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f874 	bl	80022e4 <ui_getledstate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <Test_Task+0x162>
		    ui_setledstate(btidx,LED_STATE_ON);
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f800 	bl	800220c <ui_setledstate>
}
 800120c:	e004      	b.n	8001218 <Test_Task+0x16c>
		    ui_setledstate(btidx,LED_STATE_OFF);
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fffa 	bl	800220c <ui_setledstate>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001ea 	.word	0x200001ea
 8001224:	200001ec 	.word	0x200001ec
 8001228:	20000090 	.word	0x20000090
 800122c:	20000094 	.word	0x20000094
 8001230:	200001eb 	.word	0x200001eb
 8001234:	080117b4 	.word	0x080117b4

08001238 <__io_putchar>:

uint8_t CLI_PrintLevel;


PUTCHAR_PROTOTYPE
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF)==HAL_OK) return ch;
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001246:	2201      	movs	r2, #1
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <__io_putchar+0x2c>)
 800124a:	f00c fd81 	bl	800dd50 <HAL_UART_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <__io_putchar+0x20>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	e001      	b.n	800125c <__io_putchar+0x24>
  else return EOF;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000067c 	.word	0x2000067c

08001268 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  char ch;
  
  if (HAL_UART_Receive(&huart7, (uint8_t *)&ch, 1, 0xFFFF)==HAL_OK) return ch;
 800126e:	1df9      	adds	r1, r7, #7
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	2201      	movs	r2, #1
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <__io_getchar+0x2c>)
 8001278:	f00c fe00 	bl	800de7c <HAL_UART_Receive>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <__io_getchar+0x1e>
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	e001      	b.n	800128a <__io_getchar+0x22>
  else return EOF;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000067c 	.word	0x2000067c

08001298 <CLI_init>:

static void *eth_socket;
static uint8_t eth_print;

void CLI_init()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  eth_socket = NULL;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <CLI_init+0x2c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  eth_print = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <CLI_init+0x30>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  CLI_RxBufferCnt = 0;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <CLI_init+0x34>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	801a      	strh	r2, [r3, #0]
  CLI_InBufferCnt = 0;  
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <CLI_init+0x38>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
  CLI_PrintLevel = CLI_PRINTLEVEL_ALLMSG;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <CLI_init+0x3c>)
 80012b6:	22fa      	movs	r2, #250	; 0xfa
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000098 	.word	0x20000098
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	200003f4 	.word	0x200003f4
 80012d0:	200001f0 	.word	0x200001f0
 80012d4:	200004f8 	.word	0x200004f8

080012d8 <CLI_print>:
  va_end(arg_ptr);
  HAL_UART_Transmit(&huart7, (uint8_t *)&CLI_OutBuffer[0], len, 0xFFFF);
}

void CLI_print(char *str, ...)
{
 80012d8:	b40f      	push	{r0, r1, r2, r3}
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
  uint32_t len;
  va_list arg_ptr;
  va_start(arg_ptr, str);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	603b      	str	r3, [r7, #0]
  len = vsnprintf((char *)&CLI_OutBuffer[0], CLI_MAX_STR_LENGTH, str, arg_ptr);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <CLI_print+0x40>)
 80012f0:	f00e ffd6 	bl	80102a0 <vsniprintf>
 80012f4:	4603      	mov	r3, r0
 80012f6:	607b      	str	r3, [r7, #4]
  va_end(arg_ptr);
  HAL_UART_Transmit(&huart7, (uint8_t *)&CLI_OutBuffer[0], len, 0xFFFF);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001300:	4905      	ldr	r1, [pc, #20]	; (8001318 <CLI_print+0x40>)
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <CLI_print+0x44>)
 8001304:	f00c fd24 	bl	800dd50 <HAL_UART_Transmit>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001312:	b004      	add	sp, #16
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200001f4 	.word	0x200001f4
 800131c:	2000067c 	.word	0x2000067c

08001320 <CLI_uart_input>:
{
  
}

void CLI_uart_input(uint8_t *data, uint32_t len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  data[len-1] = 0;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
  CLI_print("Executing... %s\r\n",&data[0]);
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <CLI_uart_input+0x30>)
 800133a:	f7ff ffcd 	bl	80012d8 <CLI_print>
  CLI_executeCMD((char *)&data[0],len);
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fa8b 	bl	800085c <CLI_executeCMD>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	080117c0 	.word	0x080117c0

08001354 <CLI_uart_task>:

void CLI_uart_task()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
   uint16_t i;
   uint8_t data;

   if (CLI_RxBufferCnt) { // something received
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <CLI_uart_task+0xa8>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d042      	beq.n	80013e8 <CLI_uart_task+0x94>
	  i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	80fb      	strh	r3, [r7, #6]
      while ((CLI_InBufferCnt < CLI_MAX_STR_LENGTH) && (i < CLI_RxBufferCnt)) {
 8001366:	e02c      	b.n	80013c2 <CLI_uart_task+0x6e>
	    data = CLI_RxBuffer[i++];
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	80fa      	strh	r2, [r7, #6]
 800136e:	461a      	mov	r2, r3
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <CLI_uart_task+0xac>)
 8001372:	5c9b      	ldrb	r3, [r3, r2]
 8001374:	717b      	strb	r3, [r7, #5]
		switch (data) {
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	2b0a      	cmp	r3, #10
 800137a:	d001      	beq.n	8001380 <CLI_uart_task+0x2c>
 800137c:	2b0d      	cmp	r3, #13
 800137e:	d114      	bne.n	80013aa <CLI_uart_task+0x56>
		  case '\r': //break;  // skip
		  case '\n':     // command line received
			 if (CLI_InBufferCnt>0) {
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <CLI_uart_task+0xb0>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01c      	beq.n	80013c2 <CLI_uart_task+0x6e>
		      CLI_InBuffer[CLI_InBufferCnt] = data;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <CLI_uart_task+0xb0>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <CLI_uart_task+0xb4>)
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	5453      	strb	r3, [r2, r1]
			  CLI_uart_input(&CLI_InBuffer[0], CLI_InBufferCnt + 1);
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <CLI_uart_task+0xb0>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4619      	mov	r1, r3
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <CLI_uart_task+0xb4>)
 800139e:	f7ff ffbf 	bl	8001320 <CLI_uart_input>
			  CLI_InBufferCnt = 0;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <CLI_uart_task+0xb0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	801a      	strh	r2, [r3, #0]
			 };
		     break;
 80013a8:	e00b      	b.n	80013c2 <CLI_uart_task+0x6e>
		  default: // simply symbol
		     CLI_InBuffer[CLI_InBufferCnt] = data;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <CLI_uart_task+0xb0>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <CLI_uart_task+0xb4>)
 80013b2:	797b      	ldrb	r3, [r7, #5]
 80013b4:	5453      	strb	r3, [r2, r1]
		     CLI_InBufferCnt++;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <CLI_uart_task+0xb0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <CLI_uart_task+0xb0>)
 80013c0:	801a      	strh	r2, [r3, #0]
      while ((CLI_InBufferCnt < CLI_MAX_STR_LENGTH) && (i < CLI_RxBufferCnt)) {
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <CLI_uart_task+0xb0>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	2bff      	cmp	r3, #255	; 0xff
 80013c8:	d804      	bhi.n	80013d4 <CLI_uart_task+0x80>
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <CLI_uart_task+0xa8>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	88fa      	ldrh	r2, [r7, #6]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3c9      	bcc.n	8001368 <CLI_uart_task+0x14>
		}
	  }

	  if (CLI_InBufferCnt >= CLI_MAX_STR_LENGTH) // receive without <\n> overflow
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <CLI_uart_task+0xb0>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d902      	bls.n	80013e2 <CLI_uart_task+0x8e>
	   CLI_InBufferCnt = 0; // delete line without processing
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <CLI_uart_task+0xb0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]

	  CLI_RxBufferCnt = 0;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <CLI_uart_task+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	801a      	strh	r2, [r3, #0]
   }
   
   HAL_UARTEx_ReceiveToIdle_IT(&huart7, (uint8_t *)&CLI_UARTRxBuffer[0], CLI_MAX_UARTBUF_LENGTH);
 80013e8:	2220      	movs	r2, #32
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <CLI_uart_task+0xb8>)
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <CLI_uart_task+0xbc>)
 80013ee:	f00e fc90 	bl	800fd12 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003f4 	.word	0x200003f4
 8001400:	200002f4 	.word	0x200002f4
 8001404:	200001f0 	.word	0x200001f0
 8001408:	200003f8 	.word	0x200003f8
 800140c:	200004fc 	.word	0x200004fc
 8001410:	2000067c 	.word	0x2000067c

08001414 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
	uint8_t idx = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

	while ((CLI_RxBufferCnt < CLI_MAX_STR_LENGTH) && (idx < Size)) {
 8001424:	e00e      	b.n	8001444 <HAL_UARTEx_RxEventCallback+0x30>
		CLI_RxBuffer[CLI_RxBufferCnt++] = CLI_UARTRxBuffer[idx++];
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	73fa      	strb	r2, [r7, #15]
 800142c:	4619      	mov	r1, r3
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UARTEx_RxEventCallback+0x54>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	b290      	uxth	r0, r2
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_UARTEx_RxEventCallback+0x54>)
 8001438:	8010      	strh	r0, [r2, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_UARTEx_RxEventCallback+0x58>)
 800143e:	5c59      	ldrb	r1, [r3, r1]
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001442:	5499      	strb	r1, [r3, r2]
	while ((CLI_RxBufferCnt < CLI_MAX_STR_LENGTH) && (idx < Size)) {
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_UARTEx_RxEventCallback+0x54>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2bff      	cmp	r3, #255	; 0xff
 800144a:	d804      	bhi.n	8001456 <HAL_UARTEx_RxEventCallback+0x42>
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	b29b      	uxth	r3, r3
 8001450:	887a      	ldrh	r2, [r7, #2]
 8001452:	429a      	cmp	r2, r3
 8001454:	d8e7      	bhi.n	8001426 <HAL_UARTEx_RxEventCallback+0x12>
	}
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, (uint8_t *)&CLI_UARTRxBuffer[0], CLI_MAX_UARTBUF_LENGTH);
 8001456:	2220      	movs	r2, #32
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <HAL_UARTEx_RxEventCallback+0x58>)
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_UARTEx_RxEventCallback+0x60>)
 800145c:	f00e fc59 	bl	800fd12 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200003f4 	.word	0x200003f4
 800146c:	200004fc 	.word	0x200004fc
 8001470:	200002f4 	.word	0x200002f4
 8001474:	2000067c 	.word	0x2000067c

08001478 <Hex2Int>:

uint32_t Hex2Int(char* _src, uint8_t _size)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
	uint32_t _result = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	int _i;
	uint8_t symb;
	if (_size > 4) return 0;
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d901      	bls.n	8001492 <Hex2Int+0x1a>
 800148e:	2300      	movs	r3, #0
 8001490:	e023      	b.n	80014da <Hex2Int+0x62>
	_size <<= 1;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	70fb      	strb	r3, [r7, #3]
	for (_i = 0; _i < _size; _i++){
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e018      	b.n	80014d0 <Hex2Int+0x58>
		symb = _src[_i];
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	73fb      	strb	r3, [r7, #15]
		if (symb < 0x41) symb -= 0x30; else	symb -= 0x37;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b40      	cmp	r3, #64	; 0x40
 80014ac:	d803      	bhi.n	80014b6 <Hex2Int+0x3e>
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3b30      	subs	r3, #48	; 0x30
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e002      	b.n	80014bc <Hex2Int+0x44>
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3b37      	subs	r3, #55	; 0x37
 80014ba:	73fb      	strb	r3, [r7, #15]
		_result <<= 4;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	617b      	str	r3, [r7, #20]
		_result |= symb;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
	for (_i = 0; _i < _size; _i++){
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3301      	adds	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbe2      	blt.n	800149e <Hex2Int+0x26>
	}
	return _result;
 80014d8:	697b      	ldr	r3, [r7, #20]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <crc32NT>:
#include "CRC32.h"

// вычисление CRC32 IEEE802.3

uint32_t crc32NT(uint32_t crc, uint8_t *buf,uint32_t len) {
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
   uint32_t i,mask;

   crc = ~crc;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	60fb      	str	r3, [r7, #12]
   while (len--) {
 80014fa:	e01b      	b.n	8001534 <crc32NT+0x4c>
	  crc = crc ^ (*buf++); // process next byte
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4053      	eors	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
	  i=8;
 800150c:	2308      	movs	r3, #8
 800150e:	617b      	str	r3, [r7, #20]
	  while (i--) { // process 8 bits
 8001510:	e00b      	b.n	800152a <crc32NT+0x42>
		 mask = -(crc & 1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	425b      	negs	r3, r3
 800151a:	613b      	str	r3, [r7, #16]
		 crc = (crc >> 1) ^ (0xEDB88320 & mask);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	085a      	lsrs	r2, r3, #1
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <crc32NT+0x68>)
 8001524:	400b      	ands	r3, r1
 8001526:	4053      	eors	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
	  while (i--) { // process 8 bits
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	617a      	str	r2, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ee      	bne.n	8001512 <crc32NT+0x2a>
   while (len--) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1de      	bne.n	80014fc <crc32NT+0x14>
	  }
   }
   return ~crc;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	edb88320 	.word	0xedb88320

08001554 <TestRAM_byteio>:
#include "crc32.h"
#include "memtest.h"
#include "CLI_io.h"

// Тест байтовой записи
uint8_t TestRAM_byteio(uint32_t start_address, uint32_t len, SRam_Status* ram_st){
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	uint8_t *ptr8;
	uint8_t tmp8, r_data;
	uint32_t i;
	
	ptr8 = (uint8_t*)start_address;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	61fb      	str	r3, [r7, #28]
	tmp8 = 0;	
 8001564:	2300      	movs	r3, #0
 8001566:	76fb      	strb	r3, [r7, #27]
	for (i = 0; i < len; i++){
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e00b      	b.n	8001586 <TestRAM_byteio+0x32>
	 	*ptr8 = tmp8;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	7efa      	ldrb	r2, [r7, #27]
 8001572:	701a      	strb	r2, [r3, #0]
		ptr8++;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
		tmp8++;
 800157a:	7efb      	ldrb	r3, [r7, #27]
 800157c:	3301      	adds	r3, #1
 800157e:	76fb      	strb	r3, [r7, #27]
	for (i = 0; i < len; i++){
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3ef      	bcc.n	800156e <TestRAM_byteio+0x1a>
	}	
	ptr8 = (uint8_t*)start_address;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	61fb      	str	r3, [r7, #28]
	tmp8 = 0;	
 8001592:	2300      	movs	r3, #0
 8001594:	76fb      	strb	r3, [r7, #27]
	for (i = 0; i < len; i++){
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e01f      	b.n	80015dc <TestRAM_byteio+0x88>
		  r_data = *ptr8;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	74fb      	strb	r3, [r7, #19]
		  if (r_data != tmp8){	
 80015a2:	7cfa      	ldrb	r2, [r7, #19]
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d00f      	beq.n	80015ca <TestRAM_byteio+0x76>
			ram_st->error_address = (uint32_t)ptr8;
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	605a      	str	r2, [r3, #4]
			ram_st->error_wdata = tmp8;
 80015b0:	7efa      	ldrb	r2, [r7, #27]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
			ram_st->error_rdata = r_data;
 80015b6:	7cfa      	ldrb	r2, [r7, #19]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
            ram_st->error_flags = ram_st->error_flags | TESTMEM_ERROR_BYTE;				
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
			break;
 80015c8:	e00c      	b.n	80015e4 <TestRAM_byteio+0x90>
		}
		ptr8++;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
		tmp8++;
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	3301      	adds	r3, #1
 80015d4:	76fb      	strb	r3, [r7, #27]
	for (i = 0; i < len; i++){
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3db      	bcc.n	800159c <TestRAM_byteio+0x48>
	}
	
	return ram_st->error_flags;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <TestRAM_runzeros>:

// Тест бегущий ноль
uint8_t TestRAM_runzeros(uint32_t start_address, uint32_t len, SRam_Status* ram_st){
 80015f6:	b480      	push	{r7}
 80015f8:	b089      	sub	sp, #36	; 0x24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	uint32_t *ptr32;
	uint32_t tmp32,r_data;
	uint32_t i;

	len = len >> 2;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]

	ptr32 = (uint32_t*)start_address;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	61fb      	str	r3, [r7, #28]
	tmp32 = 1;	
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e010      	b.n	8001638 <TestRAM_runzeros+0x42>
	 	*ptr32++ = ~tmp32;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	1d1a      	adds	r2, r3, #4
 800161a:	61fa      	str	r2, [r7, #28]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	43d2      	mvns	r2, r2
 8001620:	601a      	str	r2, [r3, #0]
		tmp32 = tmp32<<1;
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
		if (!tmp32) tmp32=1;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <TestRAM_runzeros+0x3c>
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ea      	bcc.n	8001616 <TestRAM_runzeros+0x20>
	}	
	ptr32 = (uint32_t*)start_address;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	61fb      	str	r3, [r7, #28]
	tmp32 = 1;	
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e024      	b.n	8001698 <TestRAM_runzeros+0xa2>
		r_data = *ptr32++;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	1d1a      	adds	r2, r3, #4
 8001652:	61fa      	str	r2, [r7, #28]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
		if (r_data != ~tmp32){	
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	429a      	cmp	r2, r3
 8001660:	d00f      	beq.n	8001682 <TestRAM_runzeros+0x8c>
			ram_st->error_address = (uint32_t)ptr32;
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
			ram_st->error_wdata = tmp32;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]
			ram_st->error_rdata = r_data;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	60da      	str	r2, [r3, #12]
			ram_st->error_flags = ram_st->error_flags | TESTMEM_ERROR_RZEROS;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f043 0202 	orr.w	r2, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	601a      	str	r2, [r3, #0]
			break;
 8001680:	e00e      	b.n	80016a0 <TestRAM_runzeros+0xaa>
		}
		tmp32 = tmp32<<1;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
		if (!tmp32) tmp32=1;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <TestRAM_runzeros+0x9c>
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3d6      	bcc.n	800164e <TestRAM_runzeros+0x58>
	}

	return ram_st->error_flags;	
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <TestRAM_runones>:

// Тест бегущая единица
uint8_t TestRAM_runones(uint32_t start_address, uint32_t len, SRam_Status* ram_st){
 80016b2:	b480      	push	{r7}
 80016b4:	b089      	sub	sp, #36	; 0x24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	uint32_t *ptr32;
	uint32_t tmp32,r_data;
	uint32_t i;

	len = len >> 2;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
	
	ptr32 = (uint32_t*)start_address;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	61fb      	str	r3, [r7, #28]
	tmp32 = 1;	
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00f      	b.n	80016f2 <TestRAM_runones+0x40>
	 	*ptr32++ = tmp32;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	1d1a      	adds	r2, r3, #4
 80016d6:	61fa      	str	r2, [r7, #28]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]
		tmp32 = tmp32<<1;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
		if (!tmp32) tmp32=1;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <TestRAM_runones+0x3a>
 80016e8:	2301      	movs	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3eb      	bcc.n	80016d2 <TestRAM_runones+0x20>
	}	
	ptr32 = (uint32_t*)start_address;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	61fb      	str	r3, [r7, #28]
	tmp32 = 1;	
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e024      	b.n	8001752 <TestRAM_runones+0xa0>
		r_data = *ptr32;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	613b      	str	r3, [r7, #16]
		if (r_data != tmp32){	
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	429a      	cmp	r2, r3
 8001714:	d00f      	beq.n	8001736 <TestRAM_runones+0x84>
			ram_st->error_address = (uint32_t)ptr32;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
			ram_st->error_wdata = tmp32;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	609a      	str	r2, [r3, #8]
			ram_st->error_rdata = r_data;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	60da      	str	r2, [r3, #12]
			ram_st->error_flags = ram_st->error_flags | TESTMEM_ERROR_RONES;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f043 0204 	orr.w	r2, r3, #4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]
			break;
 8001734:	e011      	b.n	800175a <TestRAM_runones+0xa8>
		}
		ptr32++;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
		tmp32 = tmp32<<1;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
		if (!tmp32) tmp32=1;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <TestRAM_runones+0x9a>
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++){
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3d6      	bcc.n	8001708 <TestRAM_runones+0x56>
	}
	
	return ram_st->error_flags;	
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	3724      	adds	r7, #36	; 0x24
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <TestRAM_hashaddress>:

	return ram_st->error_flags;
}

// Тест шины адреса с хешированием
uint8_t TestRAM_hashaddress(uint32_t start_address, uint32_t len, SRam_Status* ram_st){
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	uint32_t *ptr32;
	uint32_t tmp32,r_data;
	uint32_t i;

	len = len >> 2;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	60bb      	str	r3, [r7, #8]

	// Тест шины адреса
	ptr32=(uint32_t*)start_address;	
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len; i++){
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e00f      	b.n	80017a8 <TestRAM_hashaddress+0x3c>
		*ptr32 = crc32NT(0,(uint8_t *)&ptr32,4); 
 8001788:	693c      	ldr	r4, [r7, #16]
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2204      	movs	r2, #4
 8001790:	4619      	mov	r1, r3
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fea8 	bl	80014e8 <crc32NT>
 8001798:	4603      	mov	r3, r0
 800179a:	6023      	str	r3, [r4, #0]
		ptr32++;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3304      	adds	r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len; i++){
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3eb      	bcc.n	8001788 <TestRAM_hashaddress+0x1c>
	}
	// Чтение
	ptr32 = (uint32_t*)start_address;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len; i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e025      	b.n	8001806 <TestRAM_hashaddress+0x9a>
		tmp32 = crc32NT(0,(uint8_t *)&ptr32,4);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fe90 	bl	80014e8 <crc32NT>
 80017c8:	61b8      	str	r0, [r7, #24]
		r_data = *ptr32;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	617b      	str	r3, [r7, #20]
		if(tmp32 != r_data){  
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d010      	beq.n	80017fa <TestRAM_hashaddress+0x8e>
			ram_st->error_address = (uint32_t)ptr32;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	605a      	str	r2, [r3, #4]
			ram_st->error_wdata = tmp32;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]
			ram_st->error_rdata = r_data;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	60da      	str	r2, [r3, #12]
			ram_st->error_flags = ram_st->error_flags | TESTMEM_ERROR_ADDRESS;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f043 0208 	orr.w	r2, r3, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
			break;
 80017f8:	e009      	b.n	800180e <TestRAM_hashaddress+0xa2>
		}
		ptr32++;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3304      	adds	r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len; i++){
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3d5      	bcc.n	80017ba <TestRAM_hashaddress+0x4e>
	}

	return ram_st->error_flags;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}

0800181c <Test_RAM>:

uint8_t Test_RAM(uint32_t start_address, uint32_t len, SRam_Status* ram_st, uint8_t printout){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	70fb      	strb	r3, [r7, #3]

	ram_st->error_flags=0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

    TestRAM_byteio(start_address, len, ram_st);		
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fe8d 	bl	8001554 <TestRAM_byteio>
    if (printout) {
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <Test_RAM+0x4a>
     if (ram_st->error_flags & TESTMEM_ERROR_BYTE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <Test_RAM+0x44>
	  CLI_print("Test RAM Error byteio: A %.8lX , W %.8lX, R %.8lX\r\n",ram_st->error_address,ram_st->error_wdata,ram_st->error_rdata);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	482f      	ldr	r0, [pc, #188]	; (8001918 <Test_RAM+0xfc>)
 800185a:	f7ff fd3d 	bl	80012d8 <CLI_print>
 800185e:	e002      	b.n	8001866 <Test_RAM+0x4a>
     else
      CLI_print("Test RAM Error byteio: OK\r\n");
 8001860:	482e      	ldr	r0, [pc, #184]	; (800191c <Test_RAM+0x100>)
 8001862:	f7ff fd39 	bl	80012d8 <CLI_print>
    }

    TestRAM_runones(start_address, len, ram_st);	
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff ff21 	bl	80016b2 <TestRAM_runones>
    if (printout) {
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <Test_RAM+0x80>
	if (ram_st->error_flags & TESTMEM_ERROR_BYTE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <Test_RAM+0x7a>
	  CLI_print("Test RAM Error ones: A %.8lX , W %.8lX, R %.8lX\r\n",ram_st->error_address,ram_st->error_wdata,ram_st->error_rdata);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	4824      	ldr	r0, [pc, #144]	; (8001920 <Test_RAM+0x104>)
 8001890:	f7ff fd22 	bl	80012d8 <CLI_print>
 8001894:	e002      	b.n	800189c <Test_RAM+0x80>
     else
      CLI_print("Test RAM Error ones: OK\r\n");
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <Test_RAM+0x108>)
 8001898:	f7ff fd1e 	bl	80012d8 <CLI_print>
    }

    TestRAM_runzeros(start_address, len, ram_st);	
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fea8 	bl	80015f6 <TestRAM_runzeros>
    if (printout) {
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d012      	beq.n	80018d2 <Test_RAM+0xb6>
	if (ram_st->error_flags & TESTMEM_ERROR_BYTE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <Test_RAM+0xb0>
	  CLI_print("Test RAM Error zeros: A %.8lX , W %.8lX, R %.2lX\r\n",ram_st->error_address,ram_st->error_wdata,ram_st->error_rdata);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4818      	ldr	r0, [pc, #96]	; (8001928 <Test_RAM+0x10c>)
 80018c6:	f7ff fd07 	bl	80012d8 <CLI_print>
 80018ca:	e002      	b.n	80018d2 <Test_RAM+0xb6>
     else
      CLI_print("Test RAM Error zeros: OK\r\n");
 80018cc:	4817      	ldr	r0, [pc, #92]	; (800192c <Test_RAM+0x110>)
 80018ce:	f7ff fd03 	bl	80012d8 <CLI_print>
    }

    TestRAM_hashaddress(start_address, len, ram_st);	
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff ff48 	bl	800176c <TestRAM_hashaddress>
    if (printout) {
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <Test_RAM+0xec>
	if (ram_st->error_flags & TESTMEM_ERROR_BYTE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <Test_RAM+0xe6>
	  CLI_print("Test RAM Error address: A %.8lX , W %.8lX, R %.8lX\r\n",ram_st->error_address,ram_st->error_wdata,ram_st->error_rdata);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <Test_RAM+0x114>)
 80018fc:	f7ff fcec 	bl	80012d8 <CLI_print>
 8001900:	e002      	b.n	8001908 <Test_RAM+0xec>
     else
      CLI_print("Test RAM Error address: OK\r\n");
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <Test_RAM+0x118>)
 8001904:	f7ff fce8 	bl	80012d8 <CLI_print>
    }
	
    return ram_st->error_flags;	
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	080117d4 	.word	0x080117d4
 800191c:	08011808 	.word	0x08011808
 8001920:	08011824 	.word	0x08011824
 8001924:	08011858 	.word	0x08011858
 8001928:	08011874 	.word	0x08011874
 800192c:	080118a8 	.word	0x080118a8
 8001930:	080118c4 	.word	0x080118c4
 8001934:	080118fc 	.word	0x080118fc

08001938 <HAL_TIM_PeriodElapsedCallback>:
//uint16_t  audio_in_buf_mem[SAI_DMA_BUFFER_SIZE*4];
//CBuffer *audio_in_buf;  // from SAI_RX_DMA_Bufferaudio_in -> to Ethernet send
uint32_t count1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	count1++;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001948:	6013      	str	r3, [r2, #0]
	if (count1>16000) {
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001952:	d902      	bls.n	800195a <HAL_TIM_PeriodElapsedCallback+0x22>
		//CLI_print("Mix Onesec");
		count1=0;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
	}
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000520 	.word	0x20000520

0800196c <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hOutSai)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    if (hOutSai->Instance == SAI1_Block_A) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_SAI_TxCpltCallback+0x34>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10a      	bne.n	8001994 <HAL_SAI_TxCpltCallback+0x28>
    	readytxbuf = ntxbuf;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_SAI_TxCpltCallback+0x38>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_SAI_TxCpltCallback+0x3c>)
 8001984:	701a      	strb	r2, [r3, #0]
    	ntxbuf ^= 1;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_SAI_TxCpltCallback+0x38>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	f083 0301 	eor.w	r3, r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_SAI_TxCpltCallback+0x38>)
 8001992:	701a      	strb	r2, [r3, #0]
    }
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40015804 	.word	0x40015804
 80019a4:	2000051d 	.word	0x2000051d
 80019a8:	2000051c 	.word	0x2000051c

080019ac <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hOutSai)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    if (hOutSai->Instance == SAI1_Block_A) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_SAI_TxHalfCpltCallback+0x34>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10a      	bne.n	80019d4 <HAL_SAI_TxHalfCpltCallback+0x28>
    	readytxbuf = ntxbuf;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_SAI_TxHalfCpltCallback+0x38>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_SAI_TxHalfCpltCallback+0x3c>)
 80019c4:	701a      	strb	r2, [r3, #0]
    	ntxbuf ^= 1;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_SAI_TxHalfCpltCallback+0x38>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f083 0301 	eor.w	r3, r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_SAI_TxHalfCpltCallback+0x38>)
 80019d2:	701a      	strb	r2, [r3, #0]
    }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40015804 	.word	0x40015804
 80019e4:	2000051d 	.word	0x2000051d
 80019e8:	2000051c 	.word	0x2000051c

080019ec <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hInSai)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    if (hInSai->Instance == SAI1_Block_B) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_SAI_RxCpltCallback+0x34>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10a      	bne.n	8001a14 <HAL_SAI_RxCpltCallback+0x28>
    	readyrxbuf = nrxbuf;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_SAI_RxCpltCallback+0x38>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_SAI_RxCpltCallback+0x3c>)
 8001a04:	701a      	strb	r2, [r3, #0]
    	nrxbuf ^= 1;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_SAI_RxCpltCallback+0x38>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f083 0301 	eor.w	r3, r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_SAI_RxCpltCallback+0x38>)
 8001a12:	701a      	strb	r2, [r3, #0]
    }
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40015824 	.word	0x40015824
 8001a24:	20000524 	.word	0x20000524
 8001a28:	20000525 	.word	0x20000525

08001a2c <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hInSai)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    if (hInSai->Instance == SAI1_Block_B) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_SAI_RxHalfCpltCallback+0x34>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10a      	bne.n	8001a54 <HAL_SAI_RxHalfCpltCallback+0x28>
    	readyrxbuf = nrxbuf;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_SAI_RxHalfCpltCallback+0x3c>)
 8001a44:	701a      	strb	r2, [r3, #0]
    	nrxbuf ^= 1;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8001a52:	701a      	strb	r2, [r3, #0]
    }
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40015824 	.word	0x40015824
 8001a64:	20000524 	.word	0x20000524
 8001a68:	20000525 	.word	0x20000525

08001a6c <TLV320_ReadPage>:
{
  return HAL_I2C_Mem_Read(&hi2c2, TLV320AIC3254_Address, reg ,I2C_MEMADD_SIZE_8BIT,data, 1, 100);
}

uint8_t TLV320_ReadPage(uint8_t page, uint8_t reg, uint8_t *data)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af04      	add	r7, sp, #16
 8001a72:	4603      	mov	r3, r0
 8001a74:	603a      	str	r2, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	71bb      	strb	r3, [r7, #6]
  uint8_t res;
  res = HAL_I2C_Mem_Write(&hi2c2, TLV320AIC3254_Address, TLV320AIC3254_REG_PAGE_SELECT ,I2C_MEMADD_SIZE_8BIT,&page, 1, 100);
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2301      	movs	r3, #1
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2130      	movs	r1, #48	; 0x30
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <TLV320_ReadPage+0x5c>)
 8001a90:	f006 fbf8 	bl	8008284 <HAL_I2C_Mem_Write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
  if (res != HAL_OK) return res;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <TLV320_ReadPage+0x36>
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	e00d      	b.n	8001abe <TLV320_ReadPage+0x52>
  return HAL_I2C_Mem_Read(&hi2c2, TLV320AIC3254_Address, reg ,I2C_MEMADD_SIZE_8BIT,data, 1, 100);
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2130      	movs	r1, #48	; 0x30
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <TLV320_ReadPage+0x5c>)
 8001ab8:	f006 fcf8 	bl	80084ac <HAL_I2C_Mem_Read>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000075c 	.word	0x2000075c

08001acc <TLV320_WritePage>:
{
  return HAL_I2C_Mem_Write(&hi2c2, TLV320AIC3254_Address, reg ,I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
}

uint8_t TLV320_WritePage(uint8_t page, uint8_t reg, uint8_t data) 
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	71bb      	strb	r3, [r7, #6]
 8001ada:	4613      	mov	r3, r2
 8001adc:	717b      	strb	r3, [r7, #5]
  uint8_t res;
  res = HAL_I2C_Mem_Write(&hi2c2, TLV320AIC3254_Address, TLV320AIC3254_REG_PAGE_SELECT ,I2C_MEMADD_SIZE_8BIT,&page, 1, 100);
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	2200      	movs	r2, #0
 8001aee:	2130      	movs	r1, #48	; 0x30
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <TLV320_WritePage+0x5c>)
 8001af2:	f006 fbc7 	bl	8008284 <HAL_I2C_Mem_Write>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
  if (res != HAL_OK) return res;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <TLV320_WritePage+0x38>
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	e00d      	b.n	8001b20 <TLV320_WritePage+0x54>
  return HAL_I2C_Mem_Write(&hi2c2, TLV320AIC3254_Address, reg ,I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	1d7b      	adds	r3, r7, #5
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	2130      	movs	r1, #48	; 0x30
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <TLV320_WritePage+0x5c>)
 8001b1a:	f006 fbb3 	bl	8008284 <HAL_I2C_Mem_Write>
 8001b1e:	4603      	mov	r3, r0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000075c 	.word	0x2000075c

08001b2c <TLV320_WriteSq>:
   
uint8_t TLV320_WriteSq(uint8_t *data, uint16_t len) 
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
  uint8_t i,res;
  for (i = 0; i < len; i+=2) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e01d      	b.n	8001b7a <TLV320_WriteSq+0x4e>
   res = HAL_I2C_Mem_Write(&hi2c2, TLV320AIC3254_Address, data[i] ,I2C_MEMADD_SIZE_8BIT,(uint8_t *)&data[i+1], 1, 100);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b299      	uxth	r1, r3
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	2264      	movs	r2, #100	; 0x64
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	2201      	movs	r2, #1
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	2130      	movs	r1, #48	; 0x30
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <TLV320_WriteSq+0x64>)
 8001b62:	f006 fb8f 	bl	8008284 <HAL_I2C_Mem_Write>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73bb      	strb	r3, [r7, #14]
   if (res != HAL_OK) return res;
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <TLV320_WriteSq+0x48>
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	e008      	b.n	8001b86 <TLV320_WriteSq+0x5a>
  for (i = 0; i < len; i+=2) {
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	3302      	adds	r3, #2
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8dc      	bhi.n	8001b3e <TLV320_WriteSq+0x12>
  }
  return res;
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000075c 	.word	0x2000075c

08001b94 <TLV320_Reset>:
	   
uint8_t TLV320_Reset()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  uint8_t res;
  res = TLV320_WriteSq((uint8_t *)&TLV320_Reset_Seq[0], sizeof(TLV320_Reset_Seq));
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <TLV320_Reset+0x2c>)
 8001b9e:	f7ff ffc5 	bl	8001b2c <TLV320_WriteSq>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if (res != HAL_OK) return res;
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <TLV320_Reset+0x1c>
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	e003      	b.n	8001bb8 <TLV320_Reset+0x24>
  HAL_Delay(100);
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f002 fb13 	bl	80041dc <HAL_Delay>
  return res;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	08011ef0 	.word	0x08011ef0

08001bc4 <aic_init>:
  TLV320_Read(TLV320AIC3254_REG_DACFLAGS1, &flags[0]);
  return TLV320_Read(TLV320AIC3254_REG_DACFLAGS2, &flags[1]);
}

void aic_init()
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	if (TLV320_Reset()!=HAL_OK) {
 8001bc8:	f7ff ffe4 	bl	8001b94 <TLV320_Reset>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <aic_init+0x14>
	  CLI_print("Error: AIC reset");
 8001bd2:	482a      	ldr	r0, [pc, #168]	; (8001c7c <aic_init+0xb8>)
 8001bd4:	f7ff fb80 	bl	80012d8 <CLI_print>
	};

	if (TLV320_WriteSq((uint8_t *)TLV320_ClockInit_Seq, sizeof(TLV320_ClockInit_Seq))!=HAL_OK) {
 8001bd8:	2112      	movs	r1, #18
 8001bda:	4829      	ldr	r0, [pc, #164]	; (8001c80 <aic_init+0xbc>)
 8001bdc:	f7ff ffa6 	bl	8001b2c <TLV320_WriteSq>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <aic_init+0x28>
	  CLI_print("Error: AIC init");
 8001be6:	4827      	ldr	r0, [pc, #156]	; (8001c84 <aic_init+0xc0>)
 8001be8:	f7ff fb76 	bl	80012d8 <CLI_print>
	};

	if (TLV320_WriteSq((uint8_t *)TLV320_PowerUp_Seq,sizeof(TLV320_PowerUp_Seq))!=HAL_OK) {
 8001bec:	2116      	movs	r1, #22
 8001bee:	4826      	ldr	r0, [pc, #152]	; (8001c88 <aic_init+0xc4>)
 8001bf0:	f7ff ff9c 	bl	8001b2c <TLV320_WriteSq>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <aic_init+0x3c>
	  CLI_print("Error: AIC init");
 8001bfa:	4822      	ldr	r0, [pc, #136]	; (8001c84 <aic_init+0xc0>)
 8001bfc:	f7ff fb6c 	bl	80012d8 <CLI_print>
	};

	if (TLV320_WriteSq((uint8_t *)TLV320_ADCSetup_Seq,sizeof(TLV320_ADCSetup_Seq))!=HAL_OK) {
 8001c00:	2112      	movs	r1, #18
 8001c02:	4822      	ldr	r0, [pc, #136]	; (8001c8c <aic_init+0xc8>)
 8001c04:	f7ff ff92 	bl	8001b2c <TLV320_WriteSq>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <aic_init+0x50>
	  CLI_print("Error: AIC init");
 8001c0e:	481d      	ldr	r0, [pc, #116]	; (8001c84 <aic_init+0xc0>)
 8001c10:	f7ff fb62 	bl	80012d8 <CLI_print>
	};
	
	if (TLV320_WriteSq((uint8_t *)TLV320_DACSetup_Seq,sizeof(TLV320_DACSetup_Seq))!=HAL_OK) {
 8001c14:	2116      	movs	r1, #22
 8001c16:	481e      	ldr	r0, [pc, #120]	; (8001c90 <aic_init+0xcc>)
 8001c18:	f7ff ff88 	bl	8001b2c <TLV320_WriteSq>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <aic_init+0x64>
	  CLI_print("Error: AIC init");
 8001c22:	4818      	ldr	r0, [pc, #96]	; (8001c84 <aic_init+0xc0>)
 8001c24:	f7ff fb58 	bl	80012d8 <CLI_print>
//	aic_setADCMute(0);
	//TLV320_WritePage(0, TLV320AIC3254_REG_AUDIOINTERFACE3, 0x10);

	//TLV320_WritePage(0, TLV320AIC3254_REG_DAC_DSP_CR, 0x19); // DAC PRB_P25

	memset((uint8_t *)&SAI_TX_DMA_Buffer[0][0], 0, 4*SAI_DMA_BUFFER_SIZE);
 8001c28:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4819      	ldr	r0, [pc, #100]	; (8001c94 <aic_init+0xd0>)
 8001c30:	f00e fa54 	bl	80100dc <memset>
	memset((uint8_t *)&SAI_RX_DMA_Buffer[0][0], 0, 4*SAI_DMA_BUFFER_SIZE);
 8001c34:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4817      	ldr	r0, [pc, #92]	; (8001c98 <aic_init+0xd4>)
 8001c3c:	f00e fa4e 	bl	80100dc <memset>
	SAI_TX_DMA_Buffer[0][0] = 1000;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <aic_init+0xd0>)
 8001c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c46:	801a      	strh	r2, [r3, #0]

	nrxbuf = 0;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <aic_init+0xd8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
	ntxbuf = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <aic_init+0xdc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
	readyrxbuf = 0xFF;
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <aic_init+0xe0>)
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	701a      	strb	r2, [r3, #0]
	readytxbuf = 0xFF;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <aic_init+0xe4>)
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&SAI_TX_DMA_Buffer[0][0], 2*SAI_DMA_BUFFER_SIZE);
 8001c60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <aic_init+0xd0>)
 8001c66:	4811      	ldr	r0, [pc, #68]	; (8001cac <aic_init+0xe8>)
 8001c68:	f00a fd5c 	bl	800c724 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&SAI_RX_DMA_Buffer[0][0], 2*SAI_DMA_BUFFER_SIZE);
 8001c6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c70:	4909      	ldr	r1, [pc, #36]	; (8001c98 <aic_init+0xd4>)
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <aic_init+0xec>)
 8001c74:	f00a fe0c 	bl	800c890 <HAL_SAI_Receive_DMA>
	//HAL_SAI_Transmit_IT(&hsai_BlockA1, (uint8_t *)&SAI_TX_DMA_Buffer[0][0], SAI_DMA_BUFFER_SIZE);
	//HAL_SAI_Receive_IT(&hsai_BlockB1, (uint8_t *)&SAI_RX_DMA_Buffer[0][0], SAI_DMA_BUFFER_SIZE);

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0801191c 	.word	0x0801191c
 8001c80:	08011ef4 	.word	0x08011ef4
 8001c84:	08011930 	.word	0x08011930
 8001c88:	08011f08 	.word	0x08011f08
 8001c8c:	08011f20 	.word	0x08011f20
 8001c90:	08011f34 	.word	0x08011f34
 8001c94:	240000c0 	.word	0x240000c0
 8001c98:	240005c0 	.word	0x240005c0
 8001c9c:	20000524 	.word	0x20000524
 8001ca0:	2000051d 	.word	0x2000051d
 8001ca4:	20000525 	.word	0x20000525
 8001ca8:	2000051c 	.word	0x2000051c
 8001cac:	200009c8 	.word	0x200009c8
 8001cb0:	20000840 	.word	0x20000840

08001cb4 <aic_taskProcess>:

void aic_taskProcess()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
//loop
	if (readyrxbuf!=0xFF)
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <aic_taskProcess+0x80>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2bff      	cmp	r3, #255	; 0xff
 8001cbe:	d036      	beq.n	8001d2e <aic_taskProcess+0x7a>
	if (readytxbuf!=0xFF)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <aic_taskProcess+0x84>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d032      	beq.n	8001d2e <aic_taskProcess+0x7a>
	{
		if (readyrxbuf==0) {
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <aic_taskProcess+0x80>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <aic_taskProcess+0x40>
		 if (readytxbuf == 0)
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <aic_taskProcess+0x84>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <aic_taskProcess+0x32>
			memcpy((uint8_t *)&SAI_TX_DMA_Buffer[0][0], (uint8_t *)&SAI_RX_DMA_Buffer[0][0] ,SAI_DMA_BUFFER_SIZE*2);
 8001cd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001cdc:	4917      	ldr	r1, [pc, #92]	; (8001d3c <aic_taskProcess+0x88>)
 8001cde:	4818      	ldr	r0, [pc, #96]	; (8001d40 <aic_taskProcess+0x8c>)
 8001ce0:	f00e f9ee 	bl	80100c0 <memcpy>
 8001ce4:	e017      	b.n	8001d16 <aic_taskProcess+0x62>
		 else
			memcpy((uint8_t *)&SAI_TX_DMA_Buffer[1][0], (uint8_t *)&SAI_RX_DMA_Buffer[0][0] ,SAI_DMA_BUFFER_SIZE*2);
 8001ce6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001cea:	4914      	ldr	r1, [pc, #80]	; (8001d3c <aic_taskProcess+0x88>)
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <aic_taskProcess+0x90>)
 8001cee:	f00e f9e7 	bl	80100c0 <memcpy>
 8001cf2:	e010      	b.n	8001d16 <aic_taskProcess+0x62>
		}
		else {
			 if (readytxbuf == 0)
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <aic_taskProcess+0x84>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d106      	bne.n	8001d0a <aic_taskProcess+0x56>
				memcpy((uint8_t *)&SAI_TX_DMA_Buffer[0][0], (uint8_t *)&SAI_RX_DMA_Buffer[1][0] ,SAI_DMA_BUFFER_SIZE*2);
 8001cfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001d00:	4911      	ldr	r1, [pc, #68]	; (8001d48 <aic_taskProcess+0x94>)
 8001d02:	480f      	ldr	r0, [pc, #60]	; (8001d40 <aic_taskProcess+0x8c>)
 8001d04:	f00e f9dc 	bl	80100c0 <memcpy>
 8001d08:	e005      	b.n	8001d16 <aic_taskProcess+0x62>
			 else
				memcpy((uint8_t *)&SAI_TX_DMA_Buffer[1][0], (uint8_t *)&SAI_RX_DMA_Buffer[1][0] ,SAI_DMA_BUFFER_SIZE*2);
 8001d0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <aic_taskProcess+0x94>)
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <aic_taskProcess+0x90>)
 8001d12:	f00e f9d5 	bl	80100c0 <memcpy>
		}
		HAL_NVIC_DisableIRQ(SAI1_IRQn);
 8001d16:	2057      	movs	r0, #87	; 0x57
 8001d18:	f002 fbcb 	bl	80044b2 <HAL_NVIC_DisableIRQ>
		readyrxbuf = 0xFF;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <aic_taskProcess+0x80>)
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	701a      	strb	r2, [r3, #0]
		readytxbuf = 0xFF;
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <aic_taskProcess+0x84>)
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001d28:	2057      	movs	r0, #87	; 0x57
 8001d2a:	f002 fbb4 	bl	8004496 <HAL_NVIC_EnableIRQ>
	}
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000525 	.word	0x20000525
 8001d38:	2000051c 	.word	0x2000051c
 8001d3c:	240005c0 	.word	0x240005c0
 8001d40:	240000c0 	.word	0x240000c0
 8001d44:	24000340 	.word	0x24000340
 8001d48:	24000840 	.word	0x24000840

08001d4c <TLC59116F_Init>:
extern I2C_HandleTypeDef hi2c3;

void SC4BTN_EXTI_IRQHandler_Config();

int8_t TLC59116F_Init()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af04      	add	r7, sp, #16
  uint8_t i,j;
  for (i = 0; i < TLC59116F_max_address; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e028      	b.n	8001daa <TLC59116F_Init+0x5e>
   for (j = 0; j < sizeof(TLC59116F_Init_Val); j+=2) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71bb      	strb	r3, [r7, #6]
 8001d5c:	e01f      	b.n	8001d9e <TLC59116F_Init+0x52>
    if (HAL_I2C_Mem_Write(&hi2c3, TLC59116F_address[i], TLC59116F_Init_Val[j] ,
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <TLC59116F_Init+0x74>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	b299      	uxth	r1, r3
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <TLC59116F_Init+0x78>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	b29a      	uxth	r2, r3
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&TLC59116F_Init_Val[j+1], 1, 100)!=HAL_OK) return -i;
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4814      	ldr	r0, [pc, #80]	; (8001dc4 <TLC59116F_Init+0x78>)
 8001d74:	4403      	add	r3, r0
    if (HAL_I2C_Mem_Write(&hi2c3, TLC59116F_address[i], TLC59116F_Init_Val[j] ,
 8001d76:	2064      	movs	r0, #100	; 0x64
 8001d78:	9002      	str	r0, [sp, #8]
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	9001      	str	r0, [sp, #4]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2301      	movs	r3, #1
 8001d82:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <TLC59116F_Init+0x7c>)
 8001d84:	f006 fa7e 	bl	8008284 <HAL_I2C_Mem_Write>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <TLC59116F_Init+0x4c>
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&TLC59116F_Init_Val[j+1], 1, 100)!=HAL_OK) return -i;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	425b      	negs	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	e00e      	b.n	8001db6 <TLC59116F_Init+0x6a>
   for (j = 0; j < sizeof(TLC59116F_Init_Val); j+=2) {
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d9dc      	bls.n	8001d5e <TLC59116F_Init+0x12>
  for (i = 0; i < TLC59116F_max_address; i++)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	3301      	adds	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <TLC59116F_Init+0x80>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3d1      	bcc.n	8001d58 <TLC59116F_Init+0xc>
   }

  return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08011f4c 	.word	0x08011f4c
 8001dc4:	08011f5c 	.word	0x08011f5c
 8001dc8:	20000630 	.word	0x20000630
 8001dcc:	2000062e 	.word	0x2000062e

08001dd0 <MCP23017_Init>:

int8_t MCP23017_Init()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af04      	add	r7, sp, #16
  uint8_t i,j;
  for (i = 0; i < MCP23017_max_address; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	e028      	b.n	8001e2e <MCP23017_Init+0x5e>
   for (j = 0; j < sizeof(MCP23017_Init_Val); j+=2) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71bb      	strb	r3, [r7, #6]
 8001de0:	e01f      	b.n	8001e22 <MCP23017_Init+0x52>
    if (HAL_I2C_Mem_Write(&hi2c3, MCP23017_address[i], MCP23017_Init_Val[j] ,
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <MCP23017_Init+0xc8>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	b299      	uxth	r1, r3
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <MCP23017_Init+0xcc>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	b29a      	uxth	r2, r3
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&MCP23017_Init_Val[j+1], 1, 100)!=HAL_OK) return -i;
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4829      	ldr	r0, [pc, #164]	; (8001e9c <MCP23017_Init+0xcc>)
 8001df8:	4403      	add	r3, r0
    if (HAL_I2C_Mem_Write(&hi2c3, MCP23017_address[i], MCP23017_Init_Val[j] ,
 8001dfa:	2064      	movs	r0, #100	; 0x64
 8001dfc:	9002      	str	r0, [sp, #8]
 8001dfe:	2001      	movs	r0, #1
 8001e00:	9001      	str	r0, [sp, #4]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	4826      	ldr	r0, [pc, #152]	; (8001ea0 <MCP23017_Init+0xd0>)
 8001e08:	f006 fa3c 	bl	8008284 <HAL_I2C_Mem_Write>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <MCP23017_Init+0x4c>
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&MCP23017_Init_Val[j+1], 1, 100)!=HAL_OK) return -i;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	425b      	negs	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	e038      	b.n	8001e8e <MCP23017_Init+0xbe>
   for (j = 0; j < sizeof(MCP23017_Init_Val); j+=2) {
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	71bb      	strb	r3, [r7, #6]
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d9dc      	bls.n	8001de2 <MCP23017_Init+0x12>
  for (i = 0; i < MCP23017_max_address; i++)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MCP23017_Init+0xd4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	79fa      	ldrb	r2, [r7, #7]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d1      	bcc.n	8001ddc <MCP23017_Init+0xc>
   }

  if ((ui_mode == UI_mode_UI16N)||(ui_mode == UI_mode_UI32N)) { // tel number btn reg
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MCP23017_Init+0xd8>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d003      	beq.n	8001e48 <MCP23017_Init+0x78>
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MCP23017_Init+0xd8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d121      	bne.n	8001e8c <MCP23017_Init+0xbc>
   for (j = 0; j < sizeof(MCP23017_Init_Val); j+=2) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71bb      	strb	r3, [r7, #6]
 8001e4c:	e01b      	b.n	8001e86 <MCP23017_Init+0xb6>
    if (HAL_I2C_Mem_Write(&hi2c3, MCP23017_address[3], MCP23017_Init_Val[j] ,
 8001e4e:	234e      	movs	r3, #78	; 0x4e
 8001e50:	b299      	uxth	r1, r3
 8001e52:	79bb      	ldrb	r3, [r7, #6]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <MCP23017_Init+0xcc>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	b29a      	uxth	r2, r3
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&MCP23017_Init_Val[j+1], 1, 100)!=HAL_OK) return -3;
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <MCP23017_Init+0xcc>)
 8001e60:	4403      	add	r3, r0
    if (HAL_I2C_Mem_Write(&hi2c3, MCP23017_address[3], MCP23017_Init_Val[j] ,
 8001e62:	2064      	movs	r0, #100	; 0x64
 8001e64:	9002      	str	r0, [sp, #8]
 8001e66:	2001      	movs	r0, #1
 8001e68:	9001      	str	r0, [sp, #4]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <MCP23017_Init+0xd0>)
 8001e70:	f006 fa08 	bl	8008284 <HAL_I2C_Mem_Write>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <MCP23017_Init+0xb0>
    		              I2C_MEMADD_SIZE_8BIT,(uint8_t *)&MCP23017_Init_Val[j+1], 1, 100)!=HAL_OK) return -3;
 8001e7a:	f06f 0302 	mvn.w	r3, #2
 8001e7e:	e006      	b.n	8001e8e <MCP23017_Init+0xbe>
   for (j = 0; j < sizeof(MCP23017_Init_Val); j+=2) {
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	3302      	adds	r3, #2
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d9e0      	bls.n	8001e4e <MCP23017_Init+0x7e>
   }   
  }
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08011f58 	.word	0x08011f58
 8001e9c:	08011f68 	.word	0x08011f68
 8001ea0:	20000630 	.word	0x20000630
 8001ea4:	2000062d 	.word	0x2000062d
 8001ea8:	2000009d 	.word	0x2000009d

08001eac <TLC59116F_makeledval>:

uint8_t TLC59116F_makeledval(uint8_t led) 
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
   uint8_t i,res;
   res = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73bb      	strb	r3, [r7, #14]
   for (i=0; i<8; i+=2) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e013      	b.n	8001ee8 <TLC59116F_makeledval+0x3c>
     res |= (LED_val[led++] & 0x03) << i;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	71fa      	strb	r2, [r7, #7]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <TLC59116F_makeledval+0x50>)
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	b25a      	sxtb	r2, r3
 8001ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	73bb      	strb	r3, [r7, #14]
   for (i=0; i<8; i+=2) {
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b07      	cmp	r3, #7
 8001eec:	d9e8      	bls.n	8001ec0 <TLC59116F_makeledval+0x14>
   }

   return res;
 8001eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	200005b8 	.word	0x200005b8

08001f00 <TLC59116F_writeled>:

void TLC59116F_writeled(uint8_t led)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  led &= 0xFC;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = TLC59116F_makeledval(led);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ffc9 	bl	8001eac <TLC59116F_makeledval>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
  led -= LED_AB1R;
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	3b08      	subs	r3, #8
 8001f22:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c3, TLC59116F_address[led >> 4], TLC59116F_register[(led & 0x0F) >> 2] ,I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <TLC59116F_writeled+0x60>)
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	b299      	uxth	r1, r3
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	109b      	asrs	r3, r3, #2
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <TLC59116F_writeled+0x64>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2301      	movs	r3, #1
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	f107 030f 	add.w	r3, r7, #15
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	4805      	ldr	r0, [pc, #20]	; (8001f68 <TLC59116F_writeled+0x68>)
 8001f52:	f006 f997 	bl	8008284 <HAL_I2C_Mem_Write>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	08011f4c 	.word	0x08011f4c
 8001f64:	08011f54 	.word	0x08011f54
 8001f68:	20000630 	.word	0x20000630

08001f6c <MCP23017_readbuttons>:

void MCP23017_readbuttons()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af04      	add	r7, sp, #16
  uint16_t data;
  uint8_t i,j,btn_idx,res;

  btn_idx = BTN_AB1;
 8001f72:	2308      	movs	r3, #8
 8001f74:	717b      	strb	r3, [r7, #5]
  for (i = 0; i < MCP23017_max_address; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	e045      	b.n	8002008 <MCP23017_readbuttons+0x9c>
    if ((res=HAL_I2C_Mem_Read(&hi2c3, MCP23017_address[i], 0x12,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&data, 2, 100))==HAL_OK) {
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <MCP23017_readbuttons+0x134>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	b299      	uxth	r1, r3
 8001f84:	2364      	movs	r3, #100	; 0x64
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	2212      	movs	r2, #18
 8001f94:	4843      	ldr	r0, [pc, #268]	; (80020a4 <MCP23017_readbuttons+0x138>)
 8001f96:	f006 fa89 	bl	80084ac <HAL_I2C_Mem_Read>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	713b      	strb	r3, [r7, #4]
 8001f9e:	793b      	ldrb	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d129      	bne.n	8001ff8 <MCP23017_readbuttons+0x8c>
	  data = ~data;
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	807b      	strh	r3, [r7, #2]
	  for (j = 0 ; j < 16 ; j++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	71bb      	strb	r3, [r7, #6]
 8001fb0:	e01e      	b.n	8001ff0 <MCP23017_readbuttons+0x84>
	    if (BTN_val[btn_idx] != (data & 1)) {
 8001fb2:	797b      	ldrb	r3, [r7, #5]
 8001fb4:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <MCP23017_readbuttons+0x13c>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d00b      	beq.n	8001fdc <MCP23017_readbuttons+0x70>
		  BTN_val[btn_idx] = data & 1;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	f002 0201 	and.w	r2, r2, #1
 8001fce:	b2d1      	uxtb	r1, r2
 8001fd0:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <MCP23017_readbuttons+0x13c>)
 8001fd2:	54d1      	strb	r1, [r2, r3]
		  BTN_state[btn_idx] = BTN_STATE_TOGGLE;
 8001fd4:	797b      	ldrb	r3, [r7, #5]
 8001fd6:	4a35      	ldr	r2, [pc, #212]	; (80020ac <MCP23017_readbuttons+0x140>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	54d1      	strb	r1, [r2, r3]
		}
		data >>= 1;
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	807b      	strh	r3, [r7, #2]
		btn_idx++;
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	717b      	strb	r3, [r7, #5]
	  for (j = 0 ; j < 16 ; j++) {
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	3301      	adds	r3, #1
 8001fee:	71bb      	strb	r3, [r7, #6]
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	d9dd      	bls.n	8001fb2 <MCP23017_readbuttons+0x46>
 8001ff6:	e004      	b.n	8002002 <MCP23017_readbuttons+0x96>
	  }
	} else {
		CLI_print("Error BTN Res:%.2X\r\n",res);
 8001ff8:	793b      	ldrb	r3, [r7, #4]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	482c      	ldr	r0, [pc, #176]	; (80020b0 <MCP23017_readbuttons+0x144>)
 8001ffe:	f7ff f96b 	bl	80012d8 <CLI_print>
  for (i = 0; i < MCP23017_max_address; i++) {
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	3301      	adds	r3, #1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <MCP23017_readbuttons+0x148>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	79fa      	ldrb	r2, [r7, #7]
 800200e:	429a      	cmp	r2, r3
 8002010:	d3b4      	bcc.n	8001f7c <MCP23017_readbuttons+0x10>
	};
  }
  
  if ((ui_mode == UI_mode_UI16N)||(ui_mode == UI_mode_UI32N)) { // tel number btn
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <MCP23017_readbuttons+0x14c>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d003      	beq.n	8002022 <MCP23017_readbuttons+0xb6>
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <MCP23017_readbuttons+0x14c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d13a      	bne.n	8002098 <MCP23017_readbuttons+0x12c>
    if (HAL_I2C_Mem_Read(&hi2c3, MCP23017_address[3], 0x12,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&data, 2, 100)==HAL_OK) {
 8002022:	234e      	movs	r3, #78	; 0x4e
 8002024:	b299      	uxth	r1, r3
 8002026:	2364      	movs	r3, #100	; 0x64
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2302      	movs	r3, #2
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	1cbb      	adds	r3, r7, #2
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	2212      	movs	r2, #18
 8002036:	481b      	ldr	r0, [pc, #108]	; (80020a4 <MCP23017_readbuttons+0x138>)
 8002038:	f006 fa38 	bl	80084ac <HAL_I2C_Mem_Read>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d12a      	bne.n	8002098 <MCP23017_readbuttons+0x12c>
	 btn_idx = BTN_NN1;
 8002042:	2339      	movs	r3, #57	; 0x39
 8002044:	717b      	strb	r3, [r7, #5]
	 data = ~data;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	43db      	mvns	r3, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	807b      	strh	r3, [r7, #2]
	 for (j = 0 ; j < 12 ; j++) {
 800204e:	2300      	movs	r3, #0
 8002050:	71bb      	strb	r3, [r7, #6]
 8002052:	e01e      	b.n	8002092 <MCP23017_readbuttons+0x126>
	    if (BTN_val[btn_idx] != (data & 1)) {
 8002054:	797b      	ldrb	r3, [r7, #5]
 8002056:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <MCP23017_readbuttons+0x13c>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	461a      	mov	r2, r3
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	429a      	cmp	r2, r3
 8002064:	d00b      	beq.n	800207e <MCP23017_readbuttons+0x112>
		  BTN_val[btn_idx] = data & 1;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	f002 0201 	and.w	r2, r2, #1
 8002070:	b2d1      	uxtb	r1, r2
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <MCP23017_readbuttons+0x13c>)
 8002074:	54d1      	strb	r1, [r2, r3]
		  BTN_state[btn_idx] = BTN_STATE_TOGGLE;
 8002076:	797b      	ldrb	r3, [r7, #5]
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <MCP23017_readbuttons+0x140>)
 800207a:	2101      	movs	r1, #1
 800207c:	54d1      	strb	r1, [r2, r3]
		}
		data >>= 1;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	807b      	strh	r3, [r7, #2]
		btn_idx++;
 8002086:	797b      	ldrb	r3, [r7, #5]
 8002088:	3301      	adds	r3, #1
 800208a:	717b      	strb	r3, [r7, #5]
	 for (j = 0 ; j < 12 ; j++) {
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	3301      	adds	r3, #1
 8002090:	71bb      	strb	r3, [r7, #6]
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b0b      	cmp	r3, #11
 8002096:	d9dd      	bls.n	8002054 <MCP23017_readbuttons+0xe8>
	 }
	};    
  }
  
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	08011f58 	.word	0x08011f58
 80020a4:	20000630 	.word	0x20000630
 80020a8:	20000528 	.word	0x20000528
 80020ac:	20000570 	.word	0x20000570
 80020b0:	08011940 	.word	0x08011940
 80020b4:	2000062d 	.word	0x2000062d
 80020b8:	2000009d 	.word	0x2000009d

080020bc <MCP23017_readbuttonsCapture>:

void MCP23017_readbuttonsCapture()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af04      	add	r7, sp, #16
  uint16_t data;
  uint8_t i,j,btn_idx,res;

  btn_idx = BTN_AB1;
 80020c2:	2308      	movs	r3, #8
 80020c4:	717b      	strb	r3, [r7, #5]
  for (i = 0; i < MCP23017_max_address; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	e045      	b.n	8002158 <MCP23017_readbuttonsCapture+0x9c>
    if ((res=HAL_I2C_Mem_Read(&hi2c3, MCP23017_address[i], 0x10,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&data, 2, 100))==HAL_OK) {
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <MCP23017_readbuttonsCapture+0x134>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	b299      	uxth	r1, r3
 80020d4:	2364      	movs	r3, #100	; 0x64
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	2302      	movs	r3, #2
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	1cbb      	adds	r3, r7, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2301      	movs	r3, #1
 80020e2:	2210      	movs	r2, #16
 80020e4:	4843      	ldr	r0, [pc, #268]	; (80021f4 <MCP23017_readbuttonsCapture+0x138>)
 80020e6:	f006 f9e1 	bl	80084ac <HAL_I2C_Mem_Read>
 80020ea:	4603      	mov	r3, r0
 80020ec:	713b      	strb	r3, [r7, #4]
 80020ee:	793b      	ldrb	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d129      	bne.n	8002148 <MCP23017_readbuttonsCapture+0x8c>
	  data = ~data;
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	807b      	strh	r3, [r7, #2]
	  for (j = 0 ; j < 16 ; j++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	71bb      	strb	r3, [r7, #6]
 8002100:	e01e      	b.n	8002140 <MCP23017_readbuttonsCapture+0x84>
	    if (BTN_val[btn_idx] != (data & 1)) {
 8002102:	797b      	ldrb	r3, [r7, #5]
 8002104:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <MCP23017_readbuttonsCapture+0x13c>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	461a      	mov	r2, r3
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	429a      	cmp	r2, r3
 8002112:	d00b      	beq.n	800212c <MCP23017_readbuttonsCapture+0x70>
		  BTN_val[btn_idx] = data & 1;
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	797b      	ldrb	r3, [r7, #5]
 800211a:	f002 0201 	and.w	r2, r2, #1
 800211e:	b2d1      	uxtb	r1, r2
 8002120:	4a35      	ldr	r2, [pc, #212]	; (80021f8 <MCP23017_readbuttonsCapture+0x13c>)
 8002122:	54d1      	strb	r1, [r2, r3]
		  BTN_state[btn_idx] = BTN_STATE_TOGGLE;
 8002124:	797b      	ldrb	r3, [r7, #5]
 8002126:	4a35      	ldr	r2, [pc, #212]	; (80021fc <MCP23017_readbuttonsCapture+0x140>)
 8002128:	2101      	movs	r1, #1
 800212a:	54d1      	strb	r1, [r2, r3]
		}
		data >>= 1;
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	807b      	strh	r3, [r7, #2]
		btn_idx++;
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	3301      	adds	r3, #1
 8002138:	717b      	strb	r3, [r7, #5]
	  for (j = 0 ; j < 16 ; j++) {
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	3301      	adds	r3, #1
 800213e:	71bb      	strb	r3, [r7, #6]
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	d9dd      	bls.n	8002102 <MCP23017_readbuttonsCapture+0x46>
 8002146:	e004      	b.n	8002152 <MCP23017_readbuttonsCapture+0x96>
	  }
	} else {
		CLI_print("Res:%.2X\r\n",res);
 8002148:	793b      	ldrb	r3, [r7, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	482c      	ldr	r0, [pc, #176]	; (8002200 <MCP23017_readbuttonsCapture+0x144>)
 800214e:	f7ff f8c3 	bl	80012d8 <CLI_print>
  for (i = 0; i < MCP23017_max_address; i++) {
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	3301      	adds	r3, #1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <MCP23017_readbuttonsCapture+0x148>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3b4      	bcc.n	80020cc <MCP23017_readbuttonsCapture+0x10>
	};
  }

  if ((ui_mode == UI_mode_UI16N)||(ui_mode == UI_mode_UI32N)) { // tel number btn
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <MCP23017_readbuttonsCapture+0x14c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d003      	beq.n	8002172 <MCP23017_readbuttonsCapture+0xb6>
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <MCP23017_readbuttonsCapture+0x14c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d13a      	bne.n	80021e8 <MCP23017_readbuttonsCapture+0x12c>
    if (HAL_I2C_Mem_Read(&hi2c3, MCP23017_address[3], 0x10,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&data, 2, 100)==HAL_OK) {
 8002172:	234e      	movs	r3, #78	; 0x4e
 8002174:	b299      	uxth	r1, r3
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	1cbb      	adds	r3, r7, #2
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	2210      	movs	r2, #16
 8002186:	481b      	ldr	r0, [pc, #108]	; (80021f4 <MCP23017_readbuttonsCapture+0x138>)
 8002188:	f006 f990 	bl	80084ac <HAL_I2C_Mem_Read>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12a      	bne.n	80021e8 <MCP23017_readbuttonsCapture+0x12c>
	 btn_idx = BTN_NN1;
 8002192:	2339      	movs	r3, #57	; 0x39
 8002194:	717b      	strb	r3, [r7, #5]
	 data = ~data;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	43db      	mvns	r3, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	807b      	strh	r3, [r7, #2]
	 for (j = 0 ; j < 12 ; j++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	71bb      	strb	r3, [r7, #6]
 80021a2:	e01e      	b.n	80021e2 <MCP23017_readbuttonsCapture+0x126>
	    if (BTN_val[btn_idx] != (data & 1)) {
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <MCP23017_readbuttonsCapture+0x13c>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	461a      	mov	r2, r3
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d00b      	beq.n	80021ce <MCP23017_readbuttonsCapture+0x112>
		  BTN_val[btn_idx] = data & 1;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	797b      	ldrb	r3, [r7, #5]
 80021bc:	f002 0201 	and.w	r2, r2, #1
 80021c0:	b2d1      	uxtb	r1, r2
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <MCP23017_readbuttonsCapture+0x13c>)
 80021c4:	54d1      	strb	r1, [r2, r3]
		  BTN_state[btn_idx] = BTN_STATE_TOGGLE;
 80021c6:	797b      	ldrb	r3, [r7, #5]
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <MCP23017_readbuttonsCapture+0x140>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	54d1      	strb	r1, [r2, r3]
		}
		data >>= 1;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	807b      	strh	r3, [r7, #2]
		btn_idx++;
 80021d6:	797b      	ldrb	r3, [r7, #5]
 80021d8:	3301      	adds	r3, #1
 80021da:	717b      	strb	r3, [r7, #5]
	 for (j = 0 ; j < 12 ; j++) {
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	3301      	adds	r3, #1
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	2b0b      	cmp	r3, #11
 80021e6:	d9dd      	bls.n	80021a4 <MCP23017_readbuttonsCapture+0xe8>
	 }
	};
  }

}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	08011f58 	.word	0x08011f58
 80021f4:	20000630 	.word	0x20000630
 80021f8:	20000528 	.word	0x20000528
 80021fc:	20000570 	.word	0x20000570
 8002200:	08011958 	.word	0x08011958
 8002204:	2000062d 	.word	0x2000062d
 8002208:	2000009d 	.word	0x2000009d

0800220c <ui_setledstate>:

void ui_setledstate(uint8_t led, uint8_t state)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
    LED_state[led] = state;
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	492a      	ldr	r1, [pc, #168]	; (80022c8 <ui_setledstate+0xbc>)
 8002220:	79ba      	ldrb	r2, [r7, #6]
 8002222:	54ca      	strb	r2, [r1, r3]
	switch (state) {
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d820      	bhi.n	800226c <ui_setledstate+0x60>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <ui_setledstate+0x24>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	0800224b 	.word	0x0800224b
 8002238:	08002255 	.word	0x08002255
 800223c:	08002261 	.word	0x08002261
		case LED_STATE_OFF:
			LED_val[led] = LED_STATE_OFF;
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <ui_setledstate+0xc0>)
 8002244:	2100      	movs	r1, #0
 8002246:	54d1      	strb	r1, [r2, r3]
			break;
 8002248:	e010      	b.n	800226c <ui_setledstate+0x60>
		case LED_STATE_ON:
			LED_val[led] = LED_STATE_ON;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <ui_setledstate+0xc0>)
 800224e:	2101      	movs	r1, #1
 8002250:	54d1      	strb	r1, [r2, r3]
			break;
 8002252:	e00b      	b.n	800226c <ui_setledstate+0x60>
		case LED_STATE_FL1:
			LED_val[led] = LED_val_FL1;
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <ui_setledstate+0xc4>)
 8002258:	7811      	ldrb	r1, [r2, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <ui_setledstate+0xc0>)
 800225c:	54d1      	strb	r1, [r2, r3]
			break;
 800225e:	e005      	b.n	800226c <ui_setledstate+0x60>
		case LED_STATE_FL2:
			LED_val[led] = LED_val_FL2;
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <ui_setledstate+0xc8>)
 8002264:	7811      	ldrb	r1, [r2, #0]
 8002266:	4a19      	ldr	r2, [pc, #100]	; (80022cc <ui_setledstate+0xc0>)
 8002268:	54d1      	strb	r1, [r2, r3]
			break;
 800226a:	bf00      	nop
		default: ;
	};
	// обновить состояние	
	if (led == LED_TEST)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <ui_setledstate+0x7a>
		HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, LED_val[led]);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a15      	ldr	r2, [pc, #84]	; (80022cc <ui_setledstate+0xc0>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	461a      	mov	r2, r3
 800227a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227e:	4816      	ldr	r0, [pc, #88]	; (80022d8 <ui_setledstate+0xcc>)
 8002280:	f005 ff32 	bl	80080e8 <HAL_GPIO_WritePin>
	else
	if (led == LED_MKVKL) 
		HAL_GPIO_WritePin(MKVKL_UPR_GPIO_Port, MKVKL_UPR_Pin, LED_val[led]);
	else 
	    TLC59116F_writeled(led);
}
 8002284:	e01b      	b.n	80022be <ui_setledstate+0xb2>
	if (led == LED_NORMA) 
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d108      	bne.n	800229e <ui_setledstate+0x92>
		HAL_GPIO_WritePin(NORMA_UPR_GPIO_Port, NORMA_UPR_Pin, LED_val[led]);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <ui_setledstate+0xc0>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	461a      	mov	r2, r3
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	4811      	ldr	r0, [pc, #68]	; (80022dc <ui_setledstate+0xd0>)
 8002298:	f005 ff26 	bl	80080e8 <HAL_GPIO_WritePin>
}
 800229c:	e00f      	b.n	80022be <ui_setledstate+0xb2>
	if (led == LED_MKVKL) 
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d108      	bne.n	80022b6 <ui_setledstate+0xaa>
		HAL_GPIO_WritePin(MKVKL_UPR_GPIO_Port, MKVKL_UPR_Pin, LED_val[led]);
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <ui_setledstate+0xc0>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	461a      	mov	r2, r3
 80022ac:	2120      	movs	r1, #32
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <ui_setledstate+0xd4>)
 80022b0:	f005 ff1a 	bl	80080e8 <HAL_GPIO_WritePin>
}
 80022b4:	e003      	b.n	80022be <ui_setledstate+0xb2>
	    TLC59116F_writeled(led);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe21 	bl	8001f00 <TLC59116F_writeled>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200005f4 	.word	0x200005f4
 80022cc:	200005b8 	.word	0x200005b8
 80022d0:	200000a8 	.word	0x200000a8
 80022d4:	200000a9 	.word	0x200000a9
 80022d8:	58020400 	.word	0x58020400
 80022dc:	58020c00 	.word	0x58020c00
 80022e0:	58020000 	.word	0x58020000

080022e4 <ui_getledstate>:

uint8_t ui_getledstate(uint8_t led)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
   return LED_state[led];
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <ui_getledstate+0x1c>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	200005f4 	.word	0x200005f4

08002304 <ui_getbtnval>:

uint8_t ui_getbtnval(uint8_t btn) 
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
   return BTN_val[btn];
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <ui_getbtnval+0x1c>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	20000528 	.word	0x20000528

08002324 <ui_getactivebtn>:
{
   BTN_state[btn] = BTN_STATE_IDLE;
}

uint8_t ui_getactivebtn() 
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
   uint8_t idx;
   
   for (idx = 0; idx < BTN_NUM; idx++)
 800232a:	2300      	movs	r3, #0
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e00d      	b.n	800234c <ui_getactivebtn+0x28>
    if (BTN_state[idx] != BTN_STATE_IDLE) {
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <ui_getactivebtn+0x3c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <ui_getactivebtn+0x22>
	 BTN_state[idx] = BTN_STATE_IDLE;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <ui_getactivebtn+0x3c>)
 800233e:	2100      	movs	r1, #0
 8002340:	54d1      	strb	r1, [r2, r3]
	 return idx;
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	e006      	b.n	8002354 <ui_getactivebtn+0x30>
   for (idx = 0; idx < BTN_NUM; idx++)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	3301      	adds	r3, #1
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2b45      	cmp	r3, #69	; 0x45
 8002350:	d9ee      	bls.n	8002330 <ui_getactivebtn+0xc>
	}
    
   return BTN_NONE;   
 8002352:	23ff      	movs	r3, #255	; 0xff
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	20000570 	.word	0x20000570

08002364 <ui_init>:

void ui_init()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
   int8_t res;

   ui_mode = pinio_get_CFGUI();
 800236a:	f000 fa45 	bl	80027f8 <pinio_get_CFGUI>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <ui_init+0x13c>)
 8002374:	701a      	strb	r2, [r3, #0]
   switch (ui_mode) {	
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <ui_init+0x13c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d82f      	bhi.n	80023de <ui_init+0x7a>
 800237e:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <ui_init+0x20>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	08002399 	.word	0x08002399
 8002388:	080023a7 	.word	0x080023a7
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023c3 	.word	0x080023c3
 8002394:	080023d1 	.word	0x080023d1
		case UI_mode_UI16: TLC59116F_max_address = 2; MCP23017_max_address = 1; break;	//УИ-16-1
 8002398:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <ui_init+0x140>)
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <ui_init+0x144>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e022      	b.n	80023ec <ui_init+0x88>
		case UI_mode_UI32: TLC59116F_max_address = 4; MCP23017_max_address = 2; break;	//УИ-32-1
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <ui_init+0x140>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <ui_init+0x144>)
 80023ae:	2202      	movs	r2, #2
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e01b      	b.n	80023ec <ui_init+0x88>
		case UI_mode_UI48: TLC59116F_max_address = 6; MCP23017_max_address = 3; break;	//УИ-48-1
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <ui_init+0x140>)
 80023b6:	2206      	movs	r2, #6
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <ui_init+0x144>)
 80023bc:	2203      	movs	r2, #3
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e014      	b.n	80023ec <ui_init+0x88>
		case UI_mode_UI16N: TLC59116F_max_address = 2; MCP23017_max_address = 1; break;	//УИ-16Н-1
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <ui_init+0x140>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <ui_init+0x144>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e00d      	b.n	80023ec <ui_init+0x88>
		case UI_mode_UI32N: TLC59116F_max_address = 4; MCP23017_max_address = 2; break;	//УИ-32Н-1
 80023d0:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <ui_init+0x140>)
 80023d2:	2204      	movs	r2, #4
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <ui_init+0x144>)
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e006      	b.n	80023ec <ui_init+0x88>
		default: TLC59116F_max_address = 6; MCP23017_max_address = 3; break;
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <ui_init+0x140>)
 80023e0:	2206      	movs	r2, #6
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <ui_init+0x144>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	bf00      	nop
   };   
   res = TLC59116F_Init();
 80023ec:	f7ff fcae 	bl	8001d4c <TLC59116F_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
   if (res<0) CLI_print("Init TLC%i fail\r\n",-res);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da06      	bge.n	800240a <ui_init+0xa6>
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	425b      	negs	r3, r3
 8002402:	4619      	mov	r1, r3
 8002404:	4829      	ldr	r0, [pc, #164]	; (80024ac <ui_init+0x148>)
 8002406:	f7fe ff67 	bl	80012d8 <CLI_print>
   res = MCP23017_Init();
 800240a:	f7ff fce1 	bl	8001dd0 <MCP23017_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
   if (res<0) CLI_print("Init MCP%i fail\r\n",-res);
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	da06      	bge.n	8002428 <ui_init+0xc4>
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	425b      	negs	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	4823      	ldr	r0, [pc, #140]	; (80024b0 <ui_init+0x14c>)
 8002424:	f7fe ff58 	bl	80012d8 <CLI_print>

   SC4BTN_EXTI_IRQHandler_Config();
 8002428:	f000 f988 	bl	800273c <SC4BTN_EXTI_IRQHandler_Config>
   
   LED_time_FL1 = HAL_GetTick(); 
 800242c:	f001 feca 	bl	80041c4 <HAL_GetTick>
 8002430:	4603      	mov	r3, r0
 8002432:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <ui_init+0x150>)
 8002434:	6013      	str	r3, [r2, #0]
   LED_time_FL2 = HAL_GetTick(); 
 8002436:	f001 fec5 	bl	80041c4 <HAL_GetTick>
 800243a:	4603      	mov	r3, r0
 800243c:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <ui_init+0x154>)
 800243e:	6013      	str	r3, [r2, #0]
   LED_val_FL1 = 0; 
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <ui_init+0x158>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
   LED_val_FL2 = 0; 
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <ui_init+0x15c>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
   memset(LED_val,0, LED_NUM * sizeof(uint8_t)); 	  
 800244c:	2239      	movs	r2, #57	; 0x39
 800244e:	2100      	movs	r1, #0
 8002450:	481c      	ldr	r0, [pc, #112]	; (80024c4 <ui_init+0x160>)
 8002452:	f00d fe43 	bl	80100dc <memset>
   memset(LED_state,0, LED_NUM * sizeof(uint8_t)); 	  
 8002456:	2239      	movs	r2, #57	; 0x39
 8002458:	2100      	movs	r1, #0
 800245a:	481b      	ldr	r0, [pc, #108]	; (80024c8 <ui_init+0x164>)
 800245c:	f00d fe3e 	bl	80100dc <memset>
   memset(BTN_val,0, BTN_NUM * sizeof(uint8_t)); 	  
 8002460:	2246      	movs	r2, #70	; 0x46
 8002462:	2100      	movs	r1, #0
 8002464:	4819      	ldr	r0, [pc, #100]	; (80024cc <ui_init+0x168>)
 8002466:	f00d fe39 	bl	80100dc <memset>
   memset(BTN_state,0, BTN_NUM * sizeof(uint8_t)); 	 
 800246a:	2246      	movs	r2, #70	; 0x46
 800246c:	2100      	movs	r1, #0
 800246e:	4818      	ldr	r0, [pc, #96]	; (80024d0 <ui_init+0x16c>)
 8002470:	f00d fe34 	bl	80100dc <memset>
   
   ui_setledstate(LED_TEST, LED_STATE_OFF);
 8002474:	2100      	movs	r1, #0
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff fec8 	bl	800220c <ui_setledstate>
   ui_setledstate(LED_NORMA, LED_STATE_OFF);
 800247c:	2100      	movs	r1, #0
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff fec4 	bl	800220c <ui_setledstate>
   ui_setledstate(LED_MKVKL, LED_STATE_OFF);
 8002484:	2100      	movs	r1, #0
 8002486:	2002      	movs	r0, #2
 8002488:	f7ff fec0 	bl	800220c <ui_setledstate>

   MCP_needtoread = 0;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <ui_init+0x170>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
   MCP23017_readbuttons();
 8002492:	f7ff fd6b 	bl	8001f6c <MCP23017_readbuttons>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000009d 	.word	0x2000009d
 80024a4:	2000062e 	.word	0x2000062e
 80024a8:	2000062d 	.word	0x2000062d
 80024ac:	08011964 	.word	0x08011964
 80024b0:	08011978 	.word	0x08011978
 80024b4:	200000a0 	.word	0x200000a0
 80024b8:	200000a4 	.word	0x200000a4
 80024bc:	200000a8 	.word	0x200000a8
 80024c0:	200000a9 	.word	0x200000a9
 80024c4:	200005b8 	.word	0x200005b8
 80024c8:	200005f4 	.word	0x200005f4
 80024cc:	20000528 	.word	0x20000528
 80024d0:	20000570 	.word	0x20000570
 80024d4:	2000062f 	.word	0x2000062f

080024d8 <ui_updateLED>:

void ui_updateLED()
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  if (LED_state[LED_TEST] > LED_STATE_ON) 
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <ui_updateLED+0x88>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d907      	bls.n	80024f6 <ui_updateLED+0x1e>
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, LED_val[LED_TEST]);
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <ui_updateLED+0x8c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024f0:	481d      	ldr	r0, [pc, #116]	; (8002568 <ui_updateLED+0x90>)
 80024f2:	f005 fdf9 	bl	80080e8 <HAL_GPIO_WritePin>

  if (LED_state[LED_NORMA] > LED_STATE_ON) 
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <ui_updateLED+0x88>)
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d906      	bls.n	800250c <ui_updateLED+0x34>
	HAL_GPIO_WritePin(NORMA_UPR_GPIO_Port, NORMA_UPR_Pin, LED_val[LED_NORMA]);
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <ui_updateLED+0x8c>)
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	461a      	mov	r2, r3
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	4819      	ldr	r0, [pc, #100]	; (800256c <ui_updateLED+0x94>)
 8002508:	f005 fdee 	bl	80080e8 <HAL_GPIO_WritePin>

  if (LED_state[LED_MKVKL] > LED_STATE_ON) 
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <ui_updateLED+0x88>)
 800250e:	789b      	ldrb	r3, [r3, #2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d906      	bls.n	8002522 <ui_updateLED+0x4a>
	HAL_GPIO_WritePin(MKVKL_UPR_GPIO_Port, MKVKL_UPR_Pin, LED_val[LED_MKVKL]);
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <ui_updateLED+0x8c>)
 8002516:	789b      	ldrb	r3, [r3, #2]
 8002518:	461a      	mov	r2, r3
 800251a:	2120      	movs	r1, #32
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <ui_updateLED+0x98>)
 800251e:	f005 fde3 	bl	80080e8 <HAL_GPIO_WritePin>

  uint8_t i = LED_AB1R;
 8002522:	2308      	movs	r3, #8
 8002524:	71fb      	strb	r3, [r7, #7]
  while	(i<LED_NUM) {
 8002526:	e012      	b.n	800254e <ui_updateLED+0x76>
   if (LED_state[i] > LED_STATE_ON) {
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <ui_updateLED+0x88>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d90a      	bls.n	8002548 <ui_updateLED+0x70>
     TLC59116F_writeled(i);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fce3 	bl	8001f00 <TLC59116F_writeled>
	 i = (i & 0xFC) + 4; // jump to led in next register
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3304      	adds	r3, #4
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e002      	b.n	800254e <ui_updateLED+0x76>
   } else i++;
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	3301      	adds	r3, #1
 800254c:	71fb      	strb	r3, [r7, #7]
  while	(i<LED_NUM) {
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b38      	cmp	r3, #56	; 0x38
 8002552:	d9e9      	bls.n	8002528 <ui_updateLED+0x50>
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200005f4 	.word	0x200005f4
 8002564:	200005b8 	.word	0x200005b8
 8002568:	58020400 	.word	0x58020400
 800256c:	58020c00 	.word	0x58020c00
 8002570:	58020000 	.word	0x58020000

08002574 <ui_updateSC4btn>:

void ui_updateSC4btn() {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  uint8_t val;
  
  val = HAL_GPIO_ReadPin(VOL_UP_GPIO_Port, VOL_UP_Pin) ^ 1;
 800257a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257e:	4829      	ldr	r0, [pc, #164]	; (8002624 <ui_updateSC4btn+0xb0>)
 8002580:	f005 fd9a 	bl	80080b8 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	71fb      	strb	r3, [r7, #7]
  if (BTN_val[BTN_VOLUP] != val) {
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <ui_updateSC4btn+0xb4>)
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	79fa      	ldrb	r2, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d005      	beq.n	80025a2 <ui_updateSC4btn+0x2e>
	  BTN_val[BTN_VOLUP] = val;
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <ui_updateSC4btn+0xb4>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	7053      	strb	r3, [r2, #1]
	  BTN_state[BTN_VOLUP] = BTN_STATE_TOGGLE;
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <ui_updateSC4btn+0xb8>)
 800259e:	2201      	movs	r2, #1
 80025a0:	705a      	strb	r2, [r3, #1]
  }

  val = HAL_GPIO_ReadPin(VOL_DOWN_GPIO_Port, VOL_DOWN_Pin) ^ 1;
 80025a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a6:	481f      	ldr	r0, [pc, #124]	; (8002624 <ui_updateSC4btn+0xb0>)
 80025a8:	f005 fd86 	bl	80080b8 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f083 0301 	eor.w	r3, r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]
  if (BTN_val[BTN_VOLDN] != val) {
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <ui_updateSC4btn+0xb4>)
 80025b6:	789b      	ldrb	r3, [r3, #2]
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d005      	beq.n	80025ca <ui_updateSC4btn+0x56>
	  BTN_val[BTN_VOLDN] = val;
 80025be:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <ui_updateSC4btn+0xb4>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	7093      	strb	r3, [r2, #2]
	  BTN_state[BTN_VOLDN] = BTN_STATE_TOGGLE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <ui_updateSC4btn+0xb8>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	709a      	strb	r2, [r3, #2]
  }

  val = HAL_GPIO_ReadPin(SENS_UP_GPIO_Port, SENS_UP_Pin) ^ 1;
 80025ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ce:	4815      	ldr	r0, [pc, #84]	; (8002624 <ui_updateSC4btn+0xb0>)
 80025d0:	f005 fd72 	bl	80080b8 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
  if (BTN_val[BTN_MICUP] != val) {
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <ui_updateSC4btn+0xb4>)
 80025de:	78db      	ldrb	r3, [r3, #3]
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d005      	beq.n	80025f2 <ui_updateSC4btn+0x7e>
	  BTN_val[BTN_MICUP] = val;
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <ui_updateSC4btn+0xb4>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	70d3      	strb	r3, [r2, #3]
	  BTN_state[BTN_MICUP] = BTN_STATE_TOGGLE;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <ui_updateSC4btn+0xb8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	70da      	strb	r2, [r3, #3]
  }

  val = HAL_GPIO_ReadPin(SENS_DOWN_GPIO_Port, SENS_DOWN_Pin) ^ 1;
 80025f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f6:	480b      	ldr	r0, [pc, #44]	; (8002624 <ui_updateSC4btn+0xb0>)
 80025f8:	f005 fd5e 	bl	80080b8 <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
  if (BTN_val[BTN_MICDN] != val) {
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <ui_updateSC4btn+0xb4>)
 8002606:	791b      	ldrb	r3, [r3, #4]
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d005      	beq.n	800261a <ui_updateSC4btn+0xa6>
	  BTN_val[BTN_MICDN] = val;
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <ui_updateSC4btn+0xb4>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	7113      	strb	r3, [r2, #4]
	  BTN_state[BTN_MICDN] = BTN_STATE_TOGGLE;
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <ui_updateSC4btn+0xb8>)
 8002616:	2201      	movs	r2, #1
 8002618:	711a      	strb	r2, [r3, #4]
  }
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	58020000 	.word	0x58020000
 8002628:	20000528 	.word	0x20000528
 800262c:	20000570 	.word	0x20000570

08002630 <ui_task>:

void ui_task()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  uint8_t i, need_update_led;
  
  // update led state
  need_update_led = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	71bb      	strb	r3, [r7, #6]

  if ((HAL_GetTick() - LED_time_FL1) > LED_PERIOD_FL1) {
 800263a:	f001 fdc3 	bl	80041c4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <ui_task+0xf0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800264a:	d926      	bls.n	800269a <ui_task+0x6a>
   LED_val_FL1 ^= 1;
 800264c:	4b35      	ldr	r3, [pc, #212]	; (8002724 <ui_task+0xf4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <ui_task+0xf4>)
 8002658:	701a      	strb	r2, [r3, #0]
   LED_time_FL1 = HAL_GetTick(); 
 800265a:	f001 fdb3 	bl	80041c4 <HAL_GetTick>
 800265e:	4603      	mov	r3, r0
 8002660:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <ui_task+0xf0>)
 8002662:	6013      	str	r3, [r2, #0]
   for (i = 0; i < LED_NUM; i++) if (LED_state[i] == LED_STATE_FL1) { LED_val[i] = LED_val_FL1; need_update_led = 1;}
 8002664:	2300      	movs	r3, #0
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	e00e      	b.n	8002688 <ui_task+0x58>
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <ui_task+0xf8>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d106      	bne.n	8002682 <ui_task+0x52>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <ui_task+0xf4>)
 8002678:	7811      	ldrb	r1, [r2, #0]
 800267a:	4a2c      	ldr	r2, [pc, #176]	; (800272c <ui_task+0xfc>)
 800267c:	54d1      	strb	r1, [r2, r3]
 800267e:	2301      	movs	r3, #1
 8002680:	71bb      	strb	r3, [r7, #6]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	3301      	adds	r3, #1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b38      	cmp	r3, #56	; 0x38
 800268c:	d9ed      	bls.n	800266a <ui_task+0x3a>
   if (!MCP_needtoread) MCP23017_readbuttons();
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <ui_task+0x100>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <ui_task+0x6a>
 8002696:	f7ff fc69 	bl	8001f6c <MCP23017_readbuttons>
  }

  if ((HAL_GetTick() - LED_time_FL2) > LED_PERIOD_FL2) {
 800269a:	f001 fd93 	bl	80041c4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <ui_task+0x104>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2bfa      	cmp	r3, #250	; 0xfa
 80026a8:	d920      	bls.n	80026ec <ui_task+0xbc>
   LED_val_FL2 ^= 1;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <ui_task+0x108>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <ui_task+0x108>)
 80026b6:	701a      	strb	r2, [r3, #0]
   LED_time_FL2 = HAL_GetTick(); 
 80026b8:	f001 fd84 	bl	80041c4 <HAL_GetTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <ui_task+0x104>)
 80026c0:	6013      	str	r3, [r2, #0]
   for (i = 0; i < LED_NUM; i++) if (LED_state[i] == LED_STATE_FL2) { LED_val[i] = LED_val_FL2; need_update_led = 1;}
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	e00e      	b.n	80026e6 <ui_task+0xb6>
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <ui_task+0xf8>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d106      	bne.n	80026e0 <ui_task+0xb0>
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <ui_task+0x108>)
 80026d6:	7811      	ldrb	r1, [r2, #0]
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <ui_task+0xfc>)
 80026da:	54d1      	strb	r1, [r2, r3]
 80026dc:	2301      	movs	r3, #1
 80026de:	71bb      	strb	r3, [r7, #6]
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	3301      	adds	r3, #1
 80026e4:	71fb      	strb	r3, [r7, #7]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b38      	cmp	r3, #56	; 0x38
 80026ea:	d9ed      	bls.n	80026c8 <ui_task+0x98>
  }

  // update SC4 button state
  ui_updateSC4btn();
 80026ec:	f7ff ff42 	bl	8002574 <ui_updateSC4btn>

  if (MCP_needtoread) { // was btn int
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <ui_task+0x100>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <ui_task+0xd2>
	  MCP23017_readbuttonsCapture();
 80026f8:	f7ff fce0 	bl	80020bc <MCP23017_readbuttonsCapture>
	  MCP_needtoread = 0;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <ui_task+0x100>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
  }
  
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002702:	2028      	movs	r0, #40	; 0x28
 8002704:	f001 fed5 	bl	80044b2 <HAL_NVIC_DisableIRQ>
  if (need_update_led) ui_updateLED();  // write updated leds
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <ui_task+0xe2>
 800270e:	f7ff fee3 	bl	80024d8 <ui_updateLED>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002712:	2028      	movs	r0, #40	; 0x28
 8002714:	f001 febf 	bl	8004496 <HAL_NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	200000a0 	.word	0x200000a0
 8002724:	200000a8 	.word	0x200000a8
 8002728:	200005f4 	.word	0x200005f4
 800272c:	200005b8 	.word	0x200005b8
 8002730:	2000062f 	.word	0x2000062f
 8002734:	200000a4 	.word	0x200000a4
 8002738:	200000a9 	.word	0x200000a9

0800273c <SC4BTN_EXTI_IRQHandler_Config>:

// Настройка прерывания кнопок
void SC4BTN_EXTI_IRQHandler_Config() {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;
  //настройка вывода
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <SC4BTN_EXTI_IRQHandler_Config+0x5c>)
 8002744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = TEST_BUT_Pin;
 800274a:	2320      	movs	r3, #32
 800274c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TEST_BUT_GPIO_Port, &GPIO_InitStructure);
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <SC4BTN_EXTI_IRQHandler_Config+0x60>)
 8002754:	f005 fb00 	bl	8007d58 <HAL_GPIO_Init>
  //set interrupt for EXTI5
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 8, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2108      	movs	r1, #8
 800275c:	2017      	movs	r0, #23
 800275e:	f001 fe80 	bl	8004462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002762:	2017      	movs	r0, #23
 8002764:	f001 fe97 	bl	8004496 <HAL_NVIC_EnableIRQ>
  
//  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <SC4BTN_EXTI_IRQHandler_Config+0x64>)
 800276a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 800276c:	2301      	movs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = INT_BUT_Pin;
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(INT_BUT_GPIO_Port, &GPIO_InitStructure);
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	480a      	ldr	r0, [pc, #40]	; (80027a4 <SC4BTN_EXTI_IRQHandler_Config+0x68>)
 800277c:	f005 faec 	bl	8007d58 <HAL_GPIO_Init>
  //set interrupt for EXTI12
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	2108      	movs	r1, #8
 8002784:	2028      	movs	r0, #40	; 0x28
 8002786:	f001 fe6c 	bl	8004462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800278a:	2028      	movs	r0, #40	; 0x28
 800278c:	f001 fe83 	bl	8004496 <HAL_NVIC_EnableIRQ>
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	11310000 	.word	0x11310000
 800279c:	58020400 	.word	0x58020400
 80027a0:	11110000 	.word	0x11110000
 80027a4:	58020800 	.word	0x58020800

080027a8 <EXTI9_5_IRQHandler>:

// TEST button interrupt
void EXTI9_5_IRQHandler() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  BTN_state[BTN_TEST] = BTN_STATE_TOGGLE;
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <EXTI9_5_IRQHandler+0x28>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
  BTN_val[BTN_TEST] = HAL_GPIO_ReadPin(TEST_BUT_GPIO_Port, TEST_BUT_Pin) ^ 1;
 80027b2:	2120      	movs	r1, #32
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <EXTI9_5_IRQHandler+0x2c>)
 80027b6:	f005 fc7f 	bl	80080b8 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <EXTI9_5_IRQHandler+0x30>)
 80027c4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(TEST_BUT_Pin);
 80027c6:	2020      	movs	r0, #32
 80027c8:	f005 fca7 	bl	800811a <HAL_GPIO_EXTI_IRQHandler>
}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000570 	.word	0x20000570
 80027d4:	58020400 	.word	0x58020400
 80027d8:	20000528 	.word	0x20000528

080027dc <EXTI15_10_IRQHandler>:

// UI buttons interrupt
void EXTI15_10_IRQHandler() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
//  MCP23017_readbuttons();
  MCP_needtoread = 1;
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <EXTI15_10_IRQHandler+0x18>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(INT_BUT_Pin);
 80027e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027ea:	f005 fc96 	bl	800811a <HAL_GPIO_EXTI_IRQHandler>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000062f 	.word	0x2000062f

080027f8 <pinio_get_CFGUI>:
{
  // nothing to do yet
}

uint8_t pinio_get_CFGUI()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(CFG_UI0_GPIO_Port, CFG_UI0_Pin)==GPIO_PIN_SET)
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	4812      	ldr	r0, [pc, #72]	; (8002850 <pinio_get_CFGUI+0x58>)
 8002806:	f005 fc57 	bl	80080b8 <HAL_GPIO_ReadPin>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d103      	bne.n	8002818 <pinio_get_CFGUI+0x20>
	  res |= 1;
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(CFG_UI1_GPIO_Port, CFG_UI1_Pin)==GPIO_PIN_SET)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	480d      	ldr	r0, [pc, #52]	; (8002850 <pinio_get_CFGUI+0x58>)
 800281c:	f005 fc4c 	bl	80080b8 <HAL_GPIO_ReadPin>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d103      	bne.n	800282e <pinio_get_CFGUI+0x36>
	  res |= 2;
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(CFG_UI2_GPIO_Port, CFG_UI2_Pin)==GPIO_PIN_SET)
 800282e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002832:	4807      	ldr	r0, [pc, #28]	; (8002850 <pinio_get_CFGUI+0x58>)
 8002834:	f005 fc40 	bl	80080b8 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d103      	bne.n	8002846 <pinio_get_CFGUI+0x4e>
	  res |= 4;
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	71fb      	strb	r3, [r7, #7]

  return res;
 8002846:	79fb      	ldrb	r3, [r7, #7]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58020800 	.word	0x58020800

08002854 <pinio_set_UPR_SP>:

void pinio_set_UPR_SP(uint8_t state)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if (state == UPR_STATE_OFF)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <pinio_set_UPR_SP+0x1c>
   HAL_GPIO_WritePin(UPR1_SP_GPIO_Port, UPR1_SP_Pin, GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	2108      	movs	r1, #8
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <pinio_set_UPR_SP+0x34>)
 800286a:	f005 fc3d 	bl	80080e8 <HAL_GPIO_WritePin>
  else
  if (state == UPR_STATE_ON)
   HAL_GPIO_WritePin(UPR1_SP_GPIO_Port, UPR1_SP_Pin, GPIO_PIN_RESET);
}
 800286e:	e007      	b.n	8002880 <pinio_set_UPR_SP+0x2c>
  if (state == UPR_STATE_ON)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <pinio_set_UPR_SP+0x2c>
   HAL_GPIO_WritePin(UPR1_SP_GPIO_Port, UPR1_SP_Pin, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	2108      	movs	r1, #8
 800287a:	4803      	ldr	r0, [pc, #12]	; (8002888 <pinio_set_UPR_SP+0x34>)
 800287c:	f005 fc34 	bl	80080e8 <HAL_GPIO_WritePin>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	58020000 	.word	0x58020000

0800288c <pinio_set_UPR_FAN>:

// only SC4 rev1
void pinio_set_UPR_FAN(uint8_t state)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if (state == UPR_STATE_ON)
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <pinio_set_UPR_FAN+0x1c>
   HAL_GPIO_WritePin(UPR2_FAN_GPIO_Port, UPR2_FAN_Pin, GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	2110      	movs	r1, #16
 80028a0:	4807      	ldr	r0, [pc, #28]	; (80028c0 <pinio_set_UPR_FAN+0x34>)
 80028a2:	f005 fc21 	bl	80080e8 <HAL_GPIO_WritePin>
  else
  if (state == UPR_STATE_OFF)
   HAL_GPIO_WritePin(UPR2_FAN_GPIO_Port, UPR2_FAN_Pin, GPIO_PIN_RESET);
}
 80028a6:	e007      	b.n	80028b8 <pinio_set_UPR_FAN+0x2c>
  if (state == UPR_STATE_OFF)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d104      	bne.n	80028b8 <pinio_set_UPR_FAN+0x2c>
   HAL_GPIO_WritePin(UPR2_FAN_GPIO_Port, UPR2_FAN_Pin, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2110      	movs	r1, #16
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <pinio_set_UPR_FAN+0x34>)
 80028b4:	f005 fc18 	bl	80080e8 <HAL_GPIO_WritePin>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58020000 	.word	0x58020000

080028c4 <pinio_set_UPR_RELE>:

void pinio_set_UPR_RELE(uint8_t state)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if (state == UPR_STATE_OFF)
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <pinio_set_UPR_RELE+0x1c>
   HAL_GPIO_WritePin(RELE_UPR_GPIO_Port, RELE_UPR_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2140      	movs	r1, #64	; 0x40
 80028d8:	4807      	ldr	r0, [pc, #28]	; (80028f8 <pinio_set_UPR_RELE+0x34>)
 80028da:	f005 fc05 	bl	80080e8 <HAL_GPIO_WritePin>
  else
  if (state == UPR_STATE_ON)
   HAL_GPIO_WritePin(RELE_UPR_GPIO_Port, RELE_UPR_Pin, GPIO_PIN_RESET);
}
 80028de:	e007      	b.n	80028f0 <pinio_set_UPR_RELE+0x2c>
  if (state == UPR_STATE_ON)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <pinio_set_UPR_RELE+0x2c>
   HAL_GPIO_WritePin(RELE_UPR_GPIO_Port, RELE_UPR_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	4803      	ldr	r0, [pc, #12]	; (80028f8 <pinio_set_UPR_RELE+0x34>)
 80028ec:	f005 fbfc 	bl	80080e8 <HAL_GPIO_WritePin>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58020000 	.word	0x58020000

080028fc <pinio_getstate_DET_PHONE>:
  return HAL_GPIO_ReadPin(DET_48V_GPIO_Port, DET_48V_Pin) ^ 1;
}

// only SC4 rev1, SC4 rev2 = DET_MIC
uint8_t pinio_getstate_DET_PHONE()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  uint8_t val = HAL_GPIO_ReadPin(UPR_PHONE_GPIO_Port, UPR_PHONE_Pin) ^ 1;
 8002902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002906:	480d      	ldr	r0, [pc, #52]	; (800293c <pinio_getstate_DET_PHONE+0x40>)
 8002908:	f005 fbd6 	bl	80080b8 <HAL_GPIO_ReadPin>
 800290c:	4603      	mov	r3, r0
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	71fb      	strb	r3, [r7, #7]
  if (val != valDET_PHONE) {
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <pinio_getstate_DET_PHONE+0x44>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	429a      	cmp	r2, r3
 800291c:	d009      	beq.n	8002932 <pinio_getstate_DET_PHONE+0x36>
   valDET_PHONE = val; 
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <pinio_getstate_DET_PHONE+0x44>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	7013      	strb	r3, [r2, #0]
   if (val) return DET_STATE_ON;
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <pinio_getstate_DET_PHONE+0x32>
 800292a:	2301      	movs	r3, #1
 800292c:	e002      	b.n	8002934 <pinio_getstate_DET_PHONE+0x38>
   else return DET_STATE_OFF;
 800292e:	2302      	movs	r3, #2
 8002930:	e000      	b.n	8002934 <pinio_getstate_DET_PHONE+0x38>
  }
  else return DET_STATE_IDLE;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58020800 	.word	0x58020800
 8002940:	200000aa 	.word	0x200000aa

08002944 <pinio_getval_DET_PHONE>:

// only SC4 rev1, SC4 rev2 = DET_MIC
uint8_t pinio_getval_DET_PHONE()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(UPR_PHONE_GPIO_Port, UPR_PHONE_Pin) ^ 1;
 8002948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <pinio_getval_DET_PHONE+0x1c>)
 800294e:	f005 fbb3 	bl	80080b8 <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
}
 800295a:	4618      	mov	r0, r3
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	58020800 	.word	0x58020800

08002964 <pinio_getstate_DET_MIC>:

// SC4 rev1 from port, SC4 rev2 from AIC
uint8_t pinio_getstate_DET_MIC()
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint8_t val = HAL_GPIO_ReadPin(UPR_MIC2_GPIO_Port, UPR_MIC2_Pin) ^ 1;
 800296a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <pinio_getstate_DET_MIC+0x40>)
 8002970:	f005 fba2 	bl	80080b8 <HAL_GPIO_ReadPin>
 8002974:	4603      	mov	r3, r0
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	71fb      	strb	r3, [r7, #7]
  if (val != valDET_MIC) {
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <pinio_getstate_DET_MIC+0x44>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d009      	beq.n	800299a <pinio_getstate_DET_MIC+0x36>
   valDET_MIC = val; 
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <pinio_getstate_DET_MIC+0x44>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	7013      	strb	r3, [r2, #0]
   if (val) return DET_STATE_ON;
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <pinio_getstate_DET_MIC+0x32>
 8002992:	2301      	movs	r3, #1
 8002994:	e002      	b.n	800299c <pinio_getstate_DET_MIC+0x38>
   else return DET_STATE_OFF;
 8002996:	2302      	movs	r3, #2
 8002998:	e000      	b.n	800299c <pinio_getstate_DET_MIC+0x38>
  }
  else return DET_STATE_IDLE;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58020800 	.word	0x58020800
 80029a8:	200000ab 	.word	0x200000ab

080029ac <pinio_getval_DET_MIC>:

// SC4 rev1 from port, SC4 rev2 from AIC
uint8_t pinio_getval_DET_MIC()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(UPR_MIC2_GPIO_Port, UPR_MIC2_Pin) ^ 1;
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <pinio_getval_DET_MIC+0x1c>)
 80029b6:	f005 fb7f 	bl	80080b8 <HAL_GPIO_ReadPin>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	58020800 	.word	0x58020800

080029cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d2:	f001 fb71 	bl	80040b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d6:	f000 f88d 	bl	8002af4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029da:	f000 f919 	bl	8002c10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029de:	f000 fbd7 	bl	8003190 <MX_GPIO_Init>
  MX_DMA_Init();
 80029e2:	f000 fb49 	bl	8003078 <MX_DMA_Init>
  MX_ETH_Init();
 80029e6:	f000 f93f 	bl	8002c68 <MX_ETH_Init>
  MX_FMC_Init();
 80029ea:	f000 fb6d 	bl	80030c8 <MX_FMC_Init>
  MX_I2C1_Init();
 80029ee:	f000 f987 	bl	8002d00 <MX_I2C1_Init>
  MX_I2C2_Init();
 80029f2:	f000 f9c5 	bl	8002d80 <MX_I2C2_Init>
  MX_I2C3_Init();
 80029f6:	f000 fa03 	bl	8002e00 <MX_I2C3_Init>
  MX_SAI1_Init();
 80029fa:	f000 fa41 	bl	8002e80 <MX_SAI1_Init>
  MX_UART7_Init();
 80029fe:	f000 faed 	bl	8002fdc <MX_UART7_Init>
  MX_TIM3_Init();
 8002a02:	f000 fa9d 	bl	8002f40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //CODEC_loopback_init();

  cfg_ui = pinio_get_CFGUI();
 8002a06:	f7ff fef7 	bl	80027f8 <pinio_get_CFGUI>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <main+0x10c>)
 8002a10:	701a      	strb	r2, [r3, #0]

  printf("\033[32;1mHello World\r\n");
 8002a12:	4832      	ldr	r0, [pc, #200]	; (8002adc <main+0x110>)
 8002a14:	f00d fbf0 	bl	80101f8 <puts>
  printf("CFG_UI = %.2X\r\n", cfg_ui);
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <main+0x10c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4830      	ldr	r0, [pc, #192]	; (8002ae0 <main+0x114>)
 8002a20:	f00d fb64 	bl	80100ec <iprintf>
  loop_cnt = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint8_t TEMP_io[8];
  uint32_t TEMP_eth;

  ui_init();
 8002a28:	f7ff fc9c 	bl	8002364 <ui_init>

  //__HAL_RCC_GPIOH_CLK_ENABLE();
  //__HAL_RCC_GPIOC_CLK_ENABLE();
  //I2C_Init();

  CLI_init();
 8002a2c:	f7fe fc34 	bl	8001298 <CLI_init>
  Test_Init();
 8002a30:	f7fe fb1c 	bl	800106c <Test_Init>

  aic_init();
 8002a34:	f7ff f8c6 	bl	8001bc4 <aic_init>

  ui_setledstate(LED_TEST, LED_STATE_FL1);
 8002a38:	2102      	movs	r1, #2
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff fbe6 	bl	800220c <ui_setledstate>
  ui_setledstate(LED_NORMA, LED_STATE_FL2);
 8002a40:	2103      	movs	r1, #3
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fbe2 	bl	800220c <ui_setledstate>
  ui_setledstate(LED_MKVKL, LED_STATE_FL1);
 8002a48:	2102      	movs	r1, #2
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7ff fbde 	bl	800220c <ui_setledstate>

  pinio_set_UPR_SP(UPR_STATE_OFF);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f7ff feff 	bl	8002854 <pinio_set_UPR_SP>
  pinio_set_UPR_FAN(UPR_STATE_OFF);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff ff18 	bl	800288c <pinio_set_UPR_FAN>
  pinio_set_UPR_RELE(UPR_STATE_OFF);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff ff31 	bl	80028c4 <pinio_set_UPR_RELE>

  HAL_TIM_Base_Start_IT(&htim3);
 8002a62:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <main+0x118>)
 8002a64:	f00a fc9a 	bl	800d39c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  CLI_uart_task();
 8002a68:	f7fe fc74 	bl	8001354 <CLI_uart_task>

	  ui_task();
 8002a6c:	f7ff fde0 	bl	8002630 <ui_task>

	  Test_Task();
 8002a70:	f7fe fb1c 	bl	80010ac <Test_Task>

	  aic_taskProcess();
 8002a74:	f7ff f91e 	bl	8001cb4 <aic_taskProcess>

	  while ((TEMP_io[0]=ui_getactivebtn())!=BTN_NONE) {
 8002a78:	e00b      	b.n	8002a92 <main+0xc6>
		  CLI_print("BTN %.2X %.2X\r\n",TEMP_io[0],ui_getbtnval(TEMP_io[0]));
 8002a7a:	783b      	ldrb	r3, [r7, #0]
 8002a7c:	461c      	mov	r4, r3
 8002a7e:	783b      	ldrb	r3, [r7, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc3f 	bl	8002304 <ui_getbtnval>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <main+0x11c>)
 8002a8e:	f7fe fc23 	bl	80012d8 <CLI_print>
	  while ((TEMP_io[0]=ui_getactivebtn())!=BTN_NONE) {
 8002a92:	f7ff fc47 	bl	8002324 <ui_getactivebtn>
 8002a96:	4603      	mov	r3, r0
 8002a98:	703b      	strb	r3, [r7, #0]
 8002a9a:	783b      	ldrb	r3, [r7, #0]
 8002a9c:	2bff      	cmp	r3, #255	; 0xff
 8002a9e:	d1ec      	bne.n	8002a7a <main+0xae>
	  }

	  if (pinio_getstate_DET_PHONE()!=DET_STATE_IDLE)
 8002aa0:	f7ff ff2c 	bl	80028fc <pinio_getstate_DET_PHONE>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <main+0xec>
	    CLI_print("UPR_PHONE %i\r\n",pinio_getval_DET_PHONE());
 8002aaa:	f7ff ff4b 	bl	8002944 <pinio_getval_DET_PHONE>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480e      	ldr	r0, [pc, #56]	; (8002aec <main+0x120>)
 8002ab4:	f7fe fc10 	bl	80012d8 <CLI_print>

	  if (pinio_getstate_DET_MIC()!=DET_STATE_IDLE)
 8002ab8:	f7ff ff54 	bl	8002964 <pinio_getstate_DET_MIC>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <main+0x104>
	    CLI_print("UPR_MIC %i\r\n",pinio_getval_DET_MIC());
 8002ac2:	f7ff ff73 	bl	80029ac <pinio_getval_DET_MIC>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4809      	ldr	r0, [pc, #36]	; (8002af0 <main+0x124>)
 8002acc:	f7fe fc04 	bl	80012d8 <CLI_print>

	  //CLI_print("--------------\r\nWHILE LOOP %lu\r\n",loop_cnt);
	  //CLI_print_lev(0, "--------------\r\nWHILE LOOP %lu\r\n",loop_cnt);
	  loop_cnt++;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  {
 8002ad6:	e7c7      	b.n	8002a68 <main+0x9c>
 8002ad8:	2000070c 	.word	0x2000070c
 8002adc:	0801198c 	.word	0x0801198c
 8002ae0:	080119a0 	.word	0x080119a0
 8002ae4:	200007f4 	.word	0x200007f4
 8002ae8:	080119b0 	.word	0x080119b0
 8002aec:	080119c0 	.word	0x080119c0
 8002af0:	080119d0 	.word	0x080119d0

08002af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b09c      	sub	sp, #112	; 0x70
 8002af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	224c      	movs	r2, #76	; 0x4c
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00d faea 	bl	80100dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00d fae4 	bl	80100dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002b14:	2002      	movs	r0, #2
 8002b16:	f006 f8b1 	bl	8008c7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <SystemClock_Config+0x110>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4a38      	ldr	r2, [pc, #224]	; (8002c04 <SystemClock_Config+0x110>)
 8002b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b28:	6193      	str	r3, [r2, #24]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <SystemClock_Config+0x110>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <SystemClock_Config+0x114>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <SystemClock_Config+0x114>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <SystemClock_Config+0x114>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b4c:	bf00      	nop
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <SystemClock_Config+0x110>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	d1f8      	bne.n	8002b4e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <SystemClock_Config+0x118>)
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <SystemClock_Config+0x118>)
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b76:	2302      	movs	r3, #2
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8002b7e:	230a      	movs	r3, #10
 8002b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 384;
 8002b82:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8002b90:	2304      	movs	r3, #4
 8002b92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002b94:	2304      	movs	r3, #4
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f006 f8a3 	bl	8008cf0 <HAL_RCC_OscConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002bb0:	f000 fc0a 	bl	80033c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb4:	233f      	movs	r3, #63	; 0x3f
 8002bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002bc4:	2340      	movs	r3, #64	; 0x40
 8002bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002bc8:	2340      	movs	r3, #64	; 0x40
 8002bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002bd2:	2340      	movs	r3, #64	; 0x40
 8002bd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2104      	movs	r1, #4
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f006 fc98 	bl	8009510 <HAL_RCC_ClockConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002be6:	f000 fbef 	bl	80033c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002bea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bee:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f006 fe42 	bl	800987c <HAL_RCC_MCOConfig>
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002bf8:	f006 feaa 	bl	8009950 <HAL_RCC_EnableCSS>
}
 8002bfc:	bf00      	nop
 8002bfe:	3770      	adds	r7, #112	; 0x70
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	58024800 	.word	0x58024800
 8002c08:	58000400 	.word	0x58000400
 8002c0c:	58024400 	.word	0x58024400

08002c10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b0      	sub	sp, #192	; 0xc0
 8002c14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	22bc      	movs	r2, #188	; 0xbc
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00d fa5d 	bl	80100dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c26:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8002c28:	230a      	movs	r3, #10
 8002c2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8002c2c:	2350      	movs	r3, #80	; 0x50
 8002c2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 98;
 8002c30:	2362      	movs	r3, #98	; 0x62
 8002c32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002c3c:	2340      	movs	r3, #64	; 0x40
 8002c3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2307;
 8002c44:	f640 1303 	movw	r3, #2307	; 0x903
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	4618      	mov	r0, r3
 8002c52:	f007 f87f 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8002c5c:	f000 fbb4 	bl	80033c8 <Error_Handler>
  }
}
 8002c60:	bf00      	nop
 8002c62:	37c0      	adds	r7, #192	; 0xc0
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <MX_ETH_Init+0x84>)
 8002c70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x30;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c74:	2230      	movs	r2, #48	; 0x30
 8002c76:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x31;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c7a:	2231      	movs	r2, #49	; 0x31
 8002c7c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x32;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c80:	2232      	movs	r2, #50	; 0x32
 8002c82:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <MX_ETH_Init+0x88>)
 8002c9a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <MX_ETH_Init+0x8c>)
 8002ca6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <MX_ETH_Init+0x90>)
 8002cac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002cb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002cb4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002cb6:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_ETH_Init+0x80>)
 8002cb8:	f004 fa5c 	bl	8007174 <HAL_ETH_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002cc2:	f000 fb81 	bl	80033c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002cc6:	2234      	movs	r2, #52	; 0x34
 8002cc8:	2100      	movs	r1, #0
 8002cca:	480c      	ldr	r0, [pc, #48]	; (8002cfc <MX_ETH_Init+0x94>)
 8002ccc:	f00d fa06 	bl	80100dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <MX_ETH_Init+0x94>)
 8002cd2:	2221      	movs	r2, #33	; 0x21
 8002cd4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_ETH_Init+0x94>)
 8002cd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cdc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <MX_ETH_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000a60 	.word	0x20000a60
 8002cec:	40028000 	.word	0x40028000
 8002cf0:	200000ac 	.word	0x200000ac
 8002cf4:	24000060 	.word	0x24000060
 8002cf8:	24000000 	.word	0x24000000
 8002cfc:	20000ae8 	.word	0x20000ae8

08002d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <MX_I2C1_Init+0x78>)
 8002d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <MX_I2C1_Init+0x7c>)
 8002d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d3c:	f005 fa12 	bl	8008164 <HAL_I2C_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d46:	f000 fb3f 	bl	80033c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4809      	ldr	r0, [pc, #36]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d4e:	f005 fefd 	bl	8008b4c <HAL_I2CEx_ConfigAnalogFilter>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d58:	f000 fb36 	bl	80033c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_I2C1_Init+0x74>)
 8002d60:	f005 ff3f 	bl	8008be2 <HAL_I2CEx_ConfigDigitalFilter>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d6a:	f000 fb2d 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000710 	.word	0x20000710
 8002d78:	40005400 	.word	0x40005400
 8002d7c:	307075b1 	.word	0x307075b1

08002d80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <MX_I2C2_Init+0x78>)
 8002d88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <MX_I2C2_Init+0x7c>)
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dba:	480e      	ldr	r0, [pc, #56]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002dbc:	f005 f9d2 	bl	8008164 <HAL_I2C_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002dc6:	f000 faff 	bl	80033c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002dce:	f005 febd 	bl	8008b4c <HAL_I2CEx_ConfigAnalogFilter>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002dd8:	f000 faf6 	bl	80033c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_I2C2_Init+0x74>)
 8002de0:	f005 feff 	bl	8008be2 <HAL_I2CEx_ConfigDigitalFilter>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002dea:	f000 faed 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000075c 	.word	0x2000075c
 8002df8:	40005800 	.word	0x40005800
 8002dfc:	307075b1 	.word	0x307075b1

08002e00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_Init 1 */
//  hi2c3.Init.Timing = 0x0024C3C7;
//	hi2c3.Init.Timing = 0x00300B29;

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e06:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <MX_I2C3_Init+0x78>)
 8002e08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <MX_I2C3_Init+0x7c>)
 8002e0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e3a:	480e      	ldr	r0, [pc, #56]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e3c:	f005 f992 	bl	8008164 <HAL_I2C_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002e46:	f000 fabf 	bl	80033c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e4e:	f005 fe7d 	bl	8008b4c <HAL_I2CEx_ConfigAnalogFilter>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002e58:	f000 fab6 	bl	80033c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_I2C3_Init+0x74>)
 8002e60:	f005 febf 	bl	8008be2 <HAL_I2CEx_ConfigDigitalFilter>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002e6a:	f000 faad 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000630 	.word	0x20000630
 8002e78:	40005c00 	.word	0x40005c00
 8002e7c:	307075b1 	.word	0x307075b1

08002e80 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002e86:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <MX_SAI1_Init+0xb4>)
 8002e88:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002e9c:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002eaa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002eae:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002ec8:	2302      	movs	r3, #2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4818      	ldr	r0, [pc, #96]	; (8002f30 <MX_SAI1_Init+0xb0>)
 8002ed0:	f009 f8c6 	bl	800c060 <HAL_SAI_InitProtocol>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002eda:	f000 fa75 	bl	80033c8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002ee0:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <MX_SAI1_Init+0xbc>)
 8002ee2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002f14:	2302      	movs	r3, #2
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <MX_SAI1_Init+0xb8>)
 8002f1c:	f009 f8a0 	bl	800c060 <HAL_SAI_InitProtocol>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8002f26:	f000 fa4f 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200009c8 	.word	0x200009c8
 8002f34:	40015804 	.word	0x40015804
 8002f38:	20000840 	.word	0x20000840
 8002f3c:	40015824 	.word	0x40015824

08002f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <MX_TIM3_Init+0x98>)
 8002f62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15000;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f72:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002f76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f84:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f86:	f00a f9b1 	bl	800d2ec <HAL_TIM_Base_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f90:	f000 fa1a 	bl	80033c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002fa2:	f00a fb8b 	bl	800d6bc <HAL_TIM_ConfigClockSource>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002fac:	f000 fa0c 	bl	80033c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002fbe:	f00a fdd1 	bl	800db64 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002fc8:	f000 f9fe 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fcc:	bf00      	nop
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200007f4 	.word	0x200007f4
 8002fd8:	40000400 	.word	0x40000400

08002fdc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <MX_UART7_Init+0x94>)
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <MX_UART7_Init+0x98>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <MX_UART7_Init+0x94>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <MX_UART7_Init+0x94>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <MX_UART7_Init+0x94>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <MX_UART7_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <MX_UART7_Init+0x94>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <MX_UART7_Init+0x94>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <MX_UART7_Init+0x94>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <MX_UART7_Init+0x94>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MX_UART7_Init+0x94>)
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <MX_UART7_Init+0x94>)
 8003020:	2200      	movs	r2, #0
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003024:	4812      	ldr	r0, [pc, #72]	; (8003070 <MX_UART7_Init+0x94>)
 8003026:	f00a fe43 	bl	800dcb0 <HAL_UART_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003030:	f000 f9ca 	bl	80033c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8003034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <MX_UART7_Init+0x94>)
 800303a:	f00c fdee 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8003044:	f000 f9c0 	bl	80033c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8003048:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <MX_UART7_Init+0x94>)
 800304e:	f00c fe22 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8003058:	f000 f9b6 	bl	80033c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <MX_UART7_Init+0x94>)
 800305e:	f00c fda1 	bl	800fba4 <HAL_UARTEx_EnableFifoMode>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8003068:	f000 f9ae 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000067c 	.word	0x2000067c
 8003074:	40007800 	.word	0x40007800

08003078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <MX_DMA_Init+0x4c>)
 8003080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <MX_DMA_Init+0x4c>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <MX_DMA_Init+0x4c>)
 8003090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	200b      	movs	r0, #11
 80030a2:	f001 f9de 	bl	8004462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80030a6:	200b      	movs	r0, #11
 80030a8:	f001 f9f5 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	200c      	movs	r0, #12
 80030b2:	f001 f9d6 	bl	8004462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030b6:	200c      	movs	r0, #12
 80030b8:	f001 f9ed 	bl	8004496 <HAL_NVIC_EnableIRQ>

}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	58024400 	.word	0x58024400

080030c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
 80030dc:	615a      	str	r2, [r3, #20]
 80030de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <MX_FMC_Init+0xbc>)
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <MX_FMC_Init+0xc0>)
 80030e4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <MX_FMC_Init+0xbc>)
 80030e8:	4a28      	ldr	r2, [pc, #160]	; (800318c <MX_FMC_Init+0xc4>)
 80030ea:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <MX_FMC_Init+0xbc>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <MX_FMC_Init+0xbc>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80030f8:	4b22      	ldr	r3, [pc, #136]	; (8003184 <MX_FMC_Init+0xbc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <MX_FMC_Init+0xbc>)
 8003100:	2220      	movs	r2, #32
 8003102:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <MX_FMC_Init+0xbc>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <MX_FMC_Init+0xbc>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_FMC_Init+0xbc>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <MX_FMC_Init+0xbc>)
 8003118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <MX_FMC_Init+0xbc>)
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <MX_FMC_Init+0xbc>)
 8003126:	2200      	movs	r2, #0
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <MX_FMC_Init+0xbc>)
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_FMC_Init+0xbc>)
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MX_FMC_Init+0xbc>)
 8003138:	2200      	movs	r2, #0
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_FMC_Init+0xbc>)
 800313e:	2200      	movs	r2, #0
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <MX_FMC_Init+0xbc>)
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003148:	230f      	movs	r3, #15
 800314a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800314c:	230f      	movs	r3, #15
 800314e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003150:	23ff      	movs	r3, #255	; 0xff
 8003152:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003154:	230f      	movs	r3, #15
 8003156:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003158:	2310      	movs	r3, #16
 800315a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800315c:	2311      	movs	r3, #17
 800315e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2200      	movs	r2, #0
 8003168:	4619      	mov	r1, r3
 800316a:	4806      	ldr	r0, [pc, #24]	; (8003184 <MX_FMC_Init+0xbc>)
 800316c:	f00a f86e 	bl	800d24c <HAL_SRAM_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8003176:	f000 f927 	bl	80033c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800317a:	bf00      	nop
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200007a8 	.word	0x200007a8
 8003188:	52004000 	.word	0x52004000
 800318c:	52004104 	.word	0x52004104

08003190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a6:	4b83      	ldr	r3, [pc, #524]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	4a81      	ldr	r2, [pc, #516]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031e2:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <MX_GPIO_Init+0x224>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003206:	4a6b      	ldr	r2, [pc, #428]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003210:	4b68      	ldr	r3, [pc, #416]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003224:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b5d      	ldr	r3, [pc, #372]	; (80033b4 <MX_GPIO_Init+0x224>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <MX_GPIO_Init+0x224>)
 800324e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <MX_GPIO_Init+0x224>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003260:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326a:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <MX_GPIO_Init+0x224>)
 800326c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003278:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <MX_GPIO_Init+0x224>)
 800327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327e:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <MX_GPIO_Init+0x224>)
 800328a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <MX_GPIO_Init+0x224>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329c:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <MX_GPIO_Init+0x224>)
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <MX_GPIO_Init+0x224>)
 80032a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UPR1_SP_Pin|MKVKL_UPR_Pin, GPIO_PIN_RESET);
 80032b4:	2200      	movs	r2, #0
 80032b6:	2128      	movs	r1, #40	; 0x28
 80032b8:	483f      	ldr	r0, [pc, #252]	; (80033b8 <MX_GPIO_Init+0x228>)
 80032ba:	f004 ff15 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UPR2_FAN_Pin|RELE_UPR_Pin, GPIO_PIN_SET);
 80032be:	2201      	movs	r2, #1
 80032c0:	2150      	movs	r1, #80	; 0x50
 80032c2:	483d      	ldr	r0, [pc, #244]	; (80033b8 <MX_GPIO_Init+0x228>)
 80032c4:	f004 ff10 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POW_DOWN_GPIO_Port, POW_DOWN_Pin, GPIO_PIN_SET);
 80032c8:	2201      	movs	r2, #1
 80032ca:	2104      	movs	r1, #4
 80032cc:	483b      	ldr	r0, [pc, #236]	; (80033bc <MX_GPIO_Init+0x22c>)
 80032ce:	f004 ff0b 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NORMA_UPR_GPIO_Port, NORMA_UPR_Pin, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	483a      	ldr	r0, [pc, #232]	; (80033c0 <MX_GPIO_Init+0x230>)
 80032d8:	f004 ff06 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e2:	4836      	ldr	r0, [pc, #216]	; (80033bc <MX_GPIO_Init+0x22c>)
 80032e4:	f004 ff00 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DET_48V_Pin UPR_PHONE_Pin UPR_MIC2_Pin CFG_UI0_Pin
                           CFG_UI1_Pin CFG_UI2_Pin INT_BUT_Pin */
  GPIO_InitStruct.Pin = DET_48V_Pin|UPR_PHONE_Pin|UPR_MIC2_Pin|CFG_UI0_Pin
 80032e8:	f24f 13c0 	movw	r3, #61888	; 0xf1c0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |CFG_UI1_Pin|CFG_UI2_Pin|INT_BUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f2:	2301      	movs	r3, #1
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fa:	4619      	mov	r1, r3
 80032fc:	4831      	ldr	r0, [pc, #196]	; (80033c4 <MX_GPIO_Init+0x234>)
 80032fe:	f004 fd2b 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPR1_SP_Pin UPR2_FAN_Pin MKVKL_UPR_Pin RELE_UPR_Pin */
  GPIO_InitStruct.Pin = UPR1_SP_Pin|UPR2_FAN_Pin|MKVKL_UPR_Pin|RELE_UPR_Pin;
 8003302:	2378      	movs	r3, #120	; 0x78
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003306:	2301      	movs	r3, #1
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330a:	2301      	movs	r3, #1
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	4827      	ldr	r0, [pc, #156]	; (80033b8 <MX_GPIO_Init+0x228>)
 800331a:	f004 fd1d 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : POW_DOWN_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = POW_DOWN_Pin|TEST_LED_Pin;
 800331e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003324:	2301      	movs	r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	4821      	ldr	r0, [pc, #132]	; (80033bc <MX_GPIO_Init+0x22c>)
 8003338:	f004 fd0e 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800333c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003346:	2301      	movs	r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800334e:	2300      	movs	r3, #0
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003356:	4619      	mov	r1, r3
 8003358:	4817      	ldr	r0, [pc, #92]	; (80033b8 <MX_GPIO_Init+0x228>)
 800335a:	f004 fcfd 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOL_UP_Pin VOL_DOWN_Pin SENS_UP_Pin SENS_DOWN_Pin */
  GPIO_InitStruct.Pin = VOL_UP_Pin|VOL_DOWN_Pin|SENS_UP_Pin|SENS_DOWN_Pin;
 800335e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003368:	2301      	movs	r3, #1
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003370:	4619      	mov	r1, r3
 8003372:	4811      	ldr	r0, [pc, #68]	; (80033b8 <MX_GPIO_Init+0x228>)
 8003374:	f004 fcf0 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : NORMA_UPR_Pin */
  GPIO_InitStruct.Pin = NORMA_UPR_Pin;
 8003378:	2340      	movs	r3, #64	; 0x40
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337c:	2301      	movs	r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003380:	2301      	movs	r3, #1
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NORMA_UPR_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	4619      	mov	r1, r3
 800338e:	480c      	ldr	r0, [pc, #48]	; (80033c0 <MX_GPIO_Init+0x230>)
 8003390:	f004 fce2 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_BUT_Pin */
  GPIO_InitStruct.Pin = TEST_BUT_Pin;
 8003394:	2320      	movs	r3, #32
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339c:	2301      	movs	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEST_BUT_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	4619      	mov	r1, r3
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_GPIO_Init+0x22c>)
 80033a8:	f004 fcd6 	bl	8007d58 <HAL_GPIO_Init>

}
 80033ac:	bf00      	nop
 80033ae:	3738      	adds	r7, #56	; 0x38
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024400 	.word	0x58024400
 80033b8:	58020000 	.word	0x58020000
 80033bc:	58020400 	.word	0x58020400
 80033c0:	58020c00 	.word	0x58020c00
 80033c4:	58020800 	.word	0x58020800

080033c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033cc:	b672      	cpsid	i
}
 80033ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <Error_Handler+0x8>
	...

080033d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_MspInit+0x30>)
 80033dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_MspInit+0x30>)
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_MspInit+0x30>)
 80033ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	58024400 	.word	0x58024400

08003408 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a60      	ldr	r2, [pc, #384]	; (80035a8 <HAL_ETH_MspInit+0x1a0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 80ba 	bne.w	80035a0 <HAL_ETH_MspInit+0x198>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800342e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003432:	4a5e      	ldr	r2, [pc, #376]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 8003434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003438:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800343e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800344c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003450:	4a56      	ldr	r2, [pc, #344]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003456:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800345c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800346a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800346e:	4a4f      	ldr	r2, [pc, #316]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800347a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 8003488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348c:	4a47      	ldr	r2, [pc, #284]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003496:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 8003498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034aa:	4a40      	ldr	r2, [pc, #256]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c8:	4a38      	ldr	r2, [pc, #224]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	4a31      	ldr	r2, [pc, #196]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_ETH_MspInit+0x1a4>)
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80034fe:	233e      	movs	r3, #62	; 0x3e
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800350e:	230b      	movs	r3, #11
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003516:	4619      	mov	r1, r3
 8003518:	4825      	ldr	r0, [pc, #148]	; (80035b0 <HAL_ETH_MspInit+0x1a8>)
 800351a:	f004 fc1d 	bl	8007d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800351e:	2387      	movs	r3, #135	; 0x87
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800352e:	230b      	movs	r3, #11
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003536:	4619      	mov	r1, r3
 8003538:	481e      	ldr	r0, [pc, #120]	; (80035b4 <HAL_ETH_MspInit+0x1ac>)
 800353a:	f004 fc0d 	bl	8007d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800353e:	2308      	movs	r3, #8
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800354e:	230b      	movs	r3, #11
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	4817      	ldr	r0, [pc, #92]	; (80035b8 <HAL_ETH_MspInit+0x1b0>)
 800355a:	f004 fbfd 	bl	8007d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800355e:	f643 5303 	movw	r3, #15619	; 0x3d03
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003570:	230b      	movs	r3, #11
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003578:	4619      	mov	r1, r3
 800357a:	4810      	ldr	r0, [pc, #64]	; (80035bc <HAL_ETH_MspInit+0x1b4>)
 800357c:	f004 fbec 	bl	8007d58 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2101      	movs	r1, #1
 8003584:	203d      	movs	r0, #61	; 0x3d
 8003586:	f000 ff6c 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800358a:	203d      	movs	r0, #61	; 0x3d
 800358c:	f000 ff83 	bl	8004496 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 1, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2101      	movs	r1, #1
 8003594:	203e      	movs	r0, #62	; 0x3e
 8003596:	f000 ff64 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800359a:	203e      	movs	r0, #62	; 0x3e
 800359c:	f000 ff7b 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3738      	adds	r7, #56	; 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40028000 	.word	0x40028000
 80035ac:	58024400 	.word	0x58024400
 80035b0:	58020800 	.word	0x58020800
 80035b4:	58020000 	.word	0x58020000
 80035b8:	58021c00 	.word	0x58021c00
 80035bc:	58020400 	.word	0x58020400

080035c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0be      	sub	sp, #248	; 0xf8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035dc:	22bc      	movs	r2, #188	; 0xbc
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00c fd7b 	bl	80100dc <memset>
  if(hi2c->Instance==I2C1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a83      	ldr	r2, [pc, #524]	; (80037f8 <HAL_I2C_MspInit+0x238>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d142      	bne.n	8003676 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035f0:	2308      	movs	r3, #8
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035fe:	4618      	mov	r0, r3
 8003600:	f006 fba8 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800360a:	f7ff fedd 	bl	80033c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003614:	4a79      	ldr	r2, [pc, #484]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800361e:	4b77      	ldr	r3, [pc, #476]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800362c:	23c0      	movs	r3, #192	; 0xc0
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003632:	2312      	movs	r3, #18
 8003634:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003638:	2301      	movs	r3, #1
 800363a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363e:	2302      	movs	r3, #2
 8003640:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003644:	2304      	movs	r3, #4
 8003646:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800364e:	4619      	mov	r1, r3
 8003650:	486b      	ldr	r0, [pc, #428]	; (8003800 <HAL_I2C_MspInit+0x240>)
 8003652:	f004 fb81 	bl	8007d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003656:	4b69      	ldr	r3, [pc, #420]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365c:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 800365e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003674:	e0bb      	b.n	80037ee <HAL_I2C_MspInit+0x22e>
  else if(hi2c->Instance==I2C2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a62      	ldr	r2, [pc, #392]	; (8003804 <HAL_I2C_MspInit+0x244>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d142      	bne.n	8003706 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003680:	2308      	movs	r3, #8
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368e:	4618      	mov	r0, r3
 8003690:	f006 fb60 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_MspInit+0xde>
      Error_Handler();
 800369a:	f7ff fe95 	bl	80033c8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800369e:	4b57      	ldr	r3, [pc, #348]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036bc:	2330      	movs	r3, #48	; 0x30
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c2:	2312      	movs	r3, #18
 80036c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036d4:	2304      	movs	r3, #4
 80036d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036de:	4619      	mov	r1, r3
 80036e0:	4849      	ldr	r0, [pc, #292]	; (8003808 <HAL_I2C_MspInit+0x248>)
 80036e2:	f004 fb39 	bl	8007d58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036e6:	4b45      	ldr	r3, [pc, #276]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ec:	4a43      	ldr	r2, [pc, #268]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80036f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	69bb      	ldr	r3, [r7, #24]
}
 8003704:	e073      	b.n	80037ee <HAL_I2C_MspInit+0x22e>
  else if(hi2c->Instance==I2C3)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <HAL_I2C_MspInit+0x24c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d16e      	bne.n	80037ee <HAL_I2C_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003710:	2308      	movs	r3, #8
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800371a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800371e:	4618      	mov	r0, r3
 8003720:	f006 fb18 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_MspInit+0x16e>
      Error_Handler();
 800372a:	f7ff fe4d 	bl	80033c8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	4a31      	ldr	r2, [pc, #196]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003770:	2312      	movs	r3, #18
 8003772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003776:	2301      	movs	r3, #1
 8003778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	2303      	movs	r3, #3
 800377e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003782:	2304      	movs	r3, #4
 8003784:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003788:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800378c:	4619      	mov	r1, r3
 800378e:	481e      	ldr	r0, [pc, #120]	; (8003808 <HAL_I2C_MspInit+0x248>)
 8003790:	f004 fae2 	bl	8007d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379c:	2312      	movs	r3, #18
 800379e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037ae:	2304      	movs	r3, #4
 80037b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4815      	ldr	r0, [pc, #84]	; (8003810 <HAL_I2C_MspInit+0x250>)
 80037bc:	f004 facc 	bl	8007d58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c6:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_I2C_MspInit+0x23c>)
 80037d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 1, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2101      	movs	r1, #1
 80037e2:	2048      	movs	r0, #72	; 0x48
 80037e4:	f000 fe3d 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80037e8:	2048      	movs	r0, #72	; 0x48
 80037ea:	f000 fe54 	bl	8004496 <HAL_NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	37f8      	adds	r7, #248	; 0xf8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40005400 	.word	0x40005400
 80037fc:	58024400 	.word	0x58024400
 8003800:	58020400 	.word	0x58020400
 8003804:	40005800 	.word	0x40005800
 8003808:	58021c00 	.word	0x58021c00
 800380c:	40005c00 	.word	0x40005c00
 8003810:	58020800 	.word	0x58020800

08003814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <HAL_TIM_Base_MspInit+0x48>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d116      	bne.n	8003854 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382c:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 8003838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2105      	movs	r1, #5
 8003848:	201d      	movs	r0, #29
 800384a:	f000 fe0a 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800384e:	201d      	movs	r0, #29
 8003850:	f000 fe21 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40000400 	.word	0x40000400
 8003860:	58024400 	.word	0x58024400

08003864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0b8      	sub	sp, #224	; 0xe0
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	22bc      	movs	r2, #188	; 0xbc
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f00c fc29 	bl	80100dc <memset>
  if(huart->Instance==UART7)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_UART_MspInit+0xcc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d149      	bne.n	8003928 <HAL_UART_MspInit+0xc4>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003894:	2302      	movs	r3, #2
 8003896:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389e:	f107 0310 	add.w	r3, r7, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 fa56 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038ae:	f7ff fd8b 	bl	80033c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_UART_MspInit+0xd0>)
 80038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038ee:	23c0      	movs	r3, #192	; 0xc0
 80038f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003906:	2307      	movs	r3, #7
 8003908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800390c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003910:	4619      	mov	r1, r3
 8003912:	4809      	ldr	r0, [pc, #36]	; (8003938 <HAL_UART_MspInit+0xd4>)
 8003914:	f004 fa20 	bl	8007d58 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 8, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	2108      	movs	r1, #8
 800391c:	2052      	movs	r0, #82	; 0x52
 800391e:	f000 fda0 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003922:	2052      	movs	r0, #82	; 0x52
 8003924:	f000 fdb7 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003928:	bf00      	nop
 800392a:	37e0      	adds	r7, #224	; 0xe0
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40007800 	.word	0x40007800
 8003934:	58024400 	.word	0x58024400
 8003938:	58021400 	.word	0x58021400

0800393c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800393c:	b580      	push	{r7, lr}
 800393e:	b0b6      	sub	sp, #216	; 0xd8
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003942:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003952:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_FMC_MspInit+0x180>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 80ac 	bne.w	8003ab4 <HAL_FMC_MspInit+0x178>
    return;
  }
  FMC_Initialized = 1;
 800395c:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_FMC_MspInit+0x180>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	22bc      	movs	r2, #188	; 0xbc
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f00c fbb6 	bl	80100dc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003974:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8003976:	2301      	movs	r3, #1
 8003978:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f006 f9e8 	bl	8009d54 <HAL_RCCEx_PeriphCLKConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800398a:	f7ff fd1d 	bl	80033c8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800398e:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_FMC_MspInit+0x184>)
 8003990:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003994:	4a4a      	ldr	r2, [pc, #296]	; (8003ac0 <HAL_FMC_MspInit+0x184>)
 8003996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800399a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800399e:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_FMC_MspInit+0x184>)
 80039a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80039a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
  PI4   ------> FMC_NBL2
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80039ac:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80039b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039c6:	230c      	movs	r3, #12
 80039c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039d0:	4619      	mov	r1, r3
 80039d2:	483c      	ldr	r0, [pc, #240]	; (8003ac4 <HAL_FMC_MspInit+0x188>)
 80039d4:	f004 f9c0 	bl	8007d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80039d8:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80039dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f2:	230c      	movs	r3, #12
 80039f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4832      	ldr	r0, [pc, #200]	; (8003ac8 <HAL_FMC_MspInit+0x18c>)
 8003a00:	f004 f9aa 	bl	8007d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a04:	233f      	movs	r3, #63	; 0x3f
 8003a06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4828      	ldr	r0, [pc, #160]	; (8003acc <HAL_FMC_MspInit+0x190>)
 8003a2a:	f004 f995 	bl	8007d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003a2e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a52:	4619      	mov	r1, r3
 8003a54:	481e      	ldr	r0, [pc, #120]	; (8003ad0 <HAL_FMC_MspInit+0x194>)
 8003a56:	f004 f97f 	bl	8007d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a5a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a74:	230c      	movs	r3, #12
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4814      	ldr	r0, [pc, #80]	; (8003ad4 <HAL_FMC_MspInit+0x198>)
 8003a82:	f004 f969 	bl	8007d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a86:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	480a      	ldr	r0, [pc, #40]	; (8003ad8 <HAL_FMC_MspInit+0x19c>)
 8003aae:	f004 f953 	bl	8007d58 <HAL_GPIO_Init>
 8003ab2:	e000      	b.n	8003ab6 <HAL_FMC_MspInit+0x17a>
    return;
 8003ab4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ab6:	37d8      	adds	r7, #216	; 0xd8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200000b4 	.word	0x200000b4
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	58022000 	.word	0x58022000
 8003ac8:	58021400 	.word	0x58021400
 8003acc:	58021800 	.word	0x58021800
 8003ad0:	58021000 	.word	0x58021000
 8003ad4:	58021c00 	.word	0x58021c00
 8003ad8:	58020c00 	.word	0x58020c00

08003adc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ae4:	f7ff ff2a 	bl	800393c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_SAI_MspInit+0x1f0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d172      	bne.n	8003be8 <HAL_SAI_MspInit+0xf8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003b02:	4b78      	ldr	r3, [pc, #480]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003b0a:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b10:	4a75      	ldr	r2, [pc, #468]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	2057      	movs	r0, #87	; 0x57
 8003b2e:	f000 fc98 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8003b32:	2057      	movs	r0, #87	; 0x57
 8003b34:	f000 fcaf 	bl	8004496 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003b40:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003b42:	2374      	movs	r3, #116	; 0x74
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003b52:	2306      	movs	r3, #6
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4863      	ldr	r0, [pc, #396]	; (8003cec <HAL_SAI_MspInit+0x1fc>)
 8003b5e:	f004 f8fb 	bl	8007d58 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b64:	4a63      	ldr	r2, [pc, #396]	; (8003cf4 <HAL_SAI_MspInit+0x204>)
 8003b66:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b6a:	2257      	movs	r2, #87	; 0x57
 8003b6c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b6e:	4b60      	ldr	r3, [pc, #384]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b70:	2240      	movs	r2, #64	; 0x40
 8003b72:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b80:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b82:	4b5b      	ldr	r3, [pc, #364]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b88:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b8a:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b90:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003b92:	4b57      	ldr	r3, [pc, #348]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b98:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003b9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ba0:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ba2:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003baa:	2203      	movs	r2, #3
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_INC8;
 8003bae:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003bbc:	484c      	ldr	r0, [pc, #304]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bbe:	f000 fc93 	bl	80044e8 <HAL_DMA_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8003bc8:	f7ff fbfe 	bl	80033c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003bd4:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a44      	ldr	r2, [pc, #272]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003be2:	4a43      	ldr	r2, [pc, #268]	; (8003cf0 <HAL_SAI_MspInit+0x200>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_SAI_MspInit+0x208>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d172      	bne.n	8003cd8 <HAL_SAI_MspInit+0x1e8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003bf2:	4b3c      	ldr	r3, [pc, #240]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_SAI_MspInit+0x138>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003c02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <HAL_SAI_MspInit+0x1f8>)
 8003c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	2057      	movs	r0, #87	; 0x57
 8003c1e:	f000 fc20 	bl	8004462 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8003c22:	2057      	movs	r0, #87	; 0x57
 8003c24:	f000 fc37 	bl	8004496 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_SAI_MspInit+0x1f4>)
 8003c30:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c32:	2308      	movs	r3, #8
 8003c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003c42:	2306      	movs	r3, #6
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4827      	ldr	r0, [pc, #156]	; (8003cec <HAL_SAI_MspInit+0x1fc>)
 8003c4e:	f004 f883 	bl	8007d58 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <HAL_SAI_MspInit+0x210>)
 8003c56:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c5a:	2258      	movs	r2, #88	; 0x58
 8003c5c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c70:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c78:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c80:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c88:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c90:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c94:	2204      	movs	r2, #4
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_INC8;
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003cac:	4813      	ldr	r0, [pc, #76]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003cae:	f000 fc1b 	bl	80044e8 <HAL_DMA_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_SAI_MspInit+0x1cc>
    {
      Error_Handler();
 8003cb8:	f7ff fb86 	bl	80033c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_SAI_MspInit+0x20c>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40015804 	.word	0x40015804
 8003ce4:	200000b8 	.word	0x200000b8
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	58021000 	.word	0x58021000
 8003cf0:	200008d8 	.word	0x200008d8
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40015824 	.word	0x40015824
 8003cfc:	20000950 	.word	0x20000950
 8003d00:	40020028 	.word	0x40020028

08003d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003d08:	f006 f808 	bl	8009d1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <NMI_Handler+0x8>

08003d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <BusFault_Handler+0x4>

08003d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <UsageFault_Handler+0x4>

08003d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 fa22 	bl	800419c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <DMA1_Stream0_IRQHandler+0x10>)
 8003d62:	f001 fee9 	bl	8005b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200008d8 	.word	0x200008d8

08003d70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <DMA1_Stream1_IRQHandler+0x10>)
 8003d76:	f001 fedf 	bl	8005b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000950 	.word	0x20000950

08003d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <TIM3_IRQHandler+0x10>)
 8003d8a:	f009 fb77 	bl	800d47c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200007f4 	.word	0x200007f4

08003d98 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <ETH_IRQHandler+0x10>)
 8003d9e:	f003 fac3 	bl	8007328 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000a60 	.word	0x20000a60

08003dac <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <ETH_WKUP_IRQHandler+0x10>)
 8003db2:	f003 fab9 	bl	8007328 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000a60 	.word	0x20000a60

08003dc0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <I2C3_EV_IRQHandler+0x10>)
 8003dc6:	f004 fc8b 	bl	80086e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000630 	.word	0x20000630

08003dd4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <UART7_IRQHandler+0x10>)
 8003dda:	f00a f923 	bl	800e024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000067c 	.word	0x2000067c

08003de8 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8003dec:	4803      	ldr	r0, [pc, #12]	; (8003dfc <SAI1_IRQHandler+0x14>)
 8003dee:	f008 fde3 	bl	800c9b8 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8003df2:	4803      	ldr	r0, [pc, #12]	; (8003e00 <SAI1_IRQHandler+0x18>)
 8003df4:	f008 fde0 	bl	800c9b8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200009c8 	.word	0x200009c8
 8003e00:	20000840 	.word	0x20000840

08003e04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e00a      	b.n	8003e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e16:	f7fd fa27 	bl	8001268 <__io_getchar>
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	b2ca      	uxtb	r2, r1
 8003e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	dbf0      	blt.n	8003e16 <_read+0x12>
	}

return len;
 8003e34:	687b      	ldr	r3, [r7, #4]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e009      	b.n	8003e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	60ba      	str	r2, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd f9ed 	bl	8001238 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3301      	adds	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dbf1      	blt.n	8003e50 <_write+0x12>
	}
	return len;
 8003e6c:	687b      	ldr	r3, [r7, #4]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_close>:

int _close(int file)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_isatty>:

int _isatty(int file)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
	return 0;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <_sbrk+0x5c>)
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <_sbrk+0x60>)
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <_sbrk+0x64>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <_sbrk+0x64>)
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <_sbrk+0x68>)
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <_sbrk+0x64>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d207      	bcs.n	8003f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f10:	f00c f8ac 	bl	801006c <__errno>
 8003f14:	4603      	mov	r3, r0
 8003f16:	220c      	movs	r2, #12
 8003f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	e009      	b.n	8003f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <_sbrk+0x64>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <_sbrk+0x64>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <_sbrk+0x64>)
 8003f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20020000 	.word	0x20020000
 8003f40:	00000400 	.word	0x00000400
 8003f44:	200000bc 	.word	0x200000bc
 8003f48:	20000b30 	.word	0x20000b30

08003f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <SystemInit+0xec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	4a38      	ldr	r2, [pc, #224]	; (8004038 <SystemInit+0xec>)
 8003f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <SystemInit+0xf0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d807      	bhi.n	8003f7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <SystemInit+0xf0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 030f 	bic.w	r3, r3, #15
 8003f74:	4a31      	ldr	r2, [pc, #196]	; (800403c <SystemInit+0xf0>)
 8003f76:	f043 0307 	orr.w	r3, r3, #7
 8003f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <SystemInit+0xf4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <SystemInit+0xf4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <SystemInit+0xf4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <SystemInit+0xf4>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	492b      	ldr	r1, [pc, #172]	; (8004040 <SystemInit+0xf4>)
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <SystemInit+0xf8>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <SystemInit+0xf0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <SystemInit+0xf0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 030f 	bic.w	r3, r3, #15
 8003fae:	4a23      	ldr	r2, [pc, #140]	; (800403c <SystemInit+0xf0>)
 8003fb0:	f043 0307 	orr.w	r3, r3, #7
 8003fb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <SystemInit+0xf4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <SystemInit+0xf4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <SystemInit+0xf4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <SystemInit+0xf4>)
 8003fca:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <SystemInit+0xfc>)
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <SystemInit+0xf4>)
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <SystemInit+0x100>)
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <SystemInit+0xf4>)
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <SystemInit+0x104>)
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <SystemInit+0xf4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <SystemInit+0xf4>)
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <SystemInit+0x104>)
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <SystemInit+0xf4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <SystemInit+0xf4>)
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <SystemInit+0x104>)
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <SystemInit+0xf4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <SystemInit+0xf4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <SystemInit+0xf4>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <SystemInit+0xf4>)
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <SystemInit+0x108>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <SystemInit+0x10c>)
 8004010:	4013      	ands	r3, r2
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004016:	d202      	bcs.n	800401e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004018:	4b10      	ldr	r3, [pc, #64]	; (800405c <SystemInit+0x110>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <SystemInit+0x114>)
 8004020:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004024:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <SystemInit+0xec>)
 8004028:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800402c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	52002000 	.word	0x52002000
 8004040:	58024400 	.word	0x58024400
 8004044:	eaf6ed7f 	.word	0xeaf6ed7f
 8004048:	02020200 	.word	0x02020200
 800404c:	01ff0000 	.word	0x01ff0000
 8004050:	01010280 	.word	0x01010280
 8004054:	5c001000 	.word	0x5c001000
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	51008108 	.word	0x51008108
 8004060:	52004000 	.word	0x52004000

08004064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800409c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004068:	f7ff ff70 	bl	8003f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800406c:	480c      	ldr	r0, [pc, #48]	; (80040a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800406e:	490d      	ldr	r1, [pc, #52]	; (80040a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004074:	e002      	b.n	800407c <LoopCopyDataInit>

08004076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800407a:	3304      	adds	r3, #4

0800407c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800407c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800407e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004080:	d3f9      	bcc.n	8004076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004084:	4c0a      	ldr	r4, [pc, #40]	; (80040b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004088:	e001      	b.n	800408e <LoopFillZerobss>

0800408a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800408a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800408c:	3204      	adds	r2, #4

0800408e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800408e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004090:	d3fb      	bcc.n	800408a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004092:	f00b fff1 	bl	8010078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004096:	f7fe fc99 	bl	80029cc <main>
  bx  lr
 800409a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800409c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80040a8:	0801205c 	.word	0x0801205c
  ldr r2, =_sbss
 80040ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80040b0:	20000b30 	.word	0x20000b30

080040b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b4:	e7fe      	b.n	80040b4 <ADC3_IRQHandler>
	...

080040b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040be:	2003      	movs	r0, #3
 80040c0:	f000 f9c4 	bl	800444c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040c4:	f005 fc54 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_Init+0x68>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4913      	ldr	r1, [pc, #76]	; (8004124 <HAL_Init+0x6c>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_Init+0x68>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <HAL_Init+0x6c>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_Init+0x70>)
 80040fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <HAL_Init+0x74>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004102:	2000      	movs	r0, #0
 8004104:	f000 f814 	bl	8004130 <HAL_InitTick>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e002      	b.n	8004118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004112:	f7ff f95f 	bl	80033d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	58024400 	.word	0x58024400
 8004124:	08011f74 	.word	0x08011f74
 8004128:	20000004 	.word	0x20000004
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_InitTick+0x60>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e021      	b.n	8004188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_InitTick+0x64>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_InitTick+0x60>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	4619      	mov	r1, r3
 800414e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004152:	fbb3 f3f1 	udiv	r3, r3, r1
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f9b7 	bl	80044ce <HAL_SYSTICK_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e00e      	b.n	8004188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d80a      	bhi.n	8004186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004170:	2200      	movs	r2, #0
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	f000 f973 	bl	8004462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800417c:	4a06      	ldr	r2, [pc, #24]	; (8004198 <HAL_InitTick+0x68>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000000c 	.word	0x2000000c
 8004194:	20000000 	.word	0x20000000
 8004198:	20000008 	.word	0x20000008

0800419c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_IncTick+0x20>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_IncTick+0x24>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <HAL_IncTick+0x24>)
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2000000c 	.word	0x2000000c
 80041c0:	20000b1c 	.word	0x20000b1c

080041c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_GetTick+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000b1c 	.word	0x20000b1c

080041dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7ff ffee 	bl	80041c4 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d005      	beq.n	8004202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_Delay+0x44>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004202:	bf00      	nop
 8004204:	f7ff ffde 	bl	80041c4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	429a      	cmp	r2, r3
 8004212:	d8f7      	bhi.n	8004204 <HAL_Delay+0x28>
  {
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_GetREVID+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0c1b      	lsrs	r3, r3, #16
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	5c001000 	.word	0x5c001000

0800423c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800424c:	4904      	ldr	r1, [pc, #16]	; (8004260 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	58000400 	.word	0x58000400

08004264 <__NVIC_SetPriorityGrouping>:
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004292:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60d3      	str	r3, [r2, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00
 80042a8:	05fa0000 	.word	0x05fa0000

080042ac <__NVIC_GetPriorityGrouping>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_EnableIRQ>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0b      	blt.n	80042f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <__NVIC_EnableIRQ+0x38>)
 80042e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_DisableIRQ>:
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800430e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	db12      	blt.n	800433c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	490a      	ldr	r1, [pc, #40]	; (8004348 <__NVIC_DisableIRQ+0x44>)
 800431e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2001      	movs	r0, #1
 8004326:	fa00 f202 	lsl.w	r2, r0, r2
 800432a:	3320      	adds	r3, #32
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004330:	f3bf 8f4f 	dsb	sy
}
 8004334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004336:	f3bf 8f6f 	isb	sy
}
 800433a:	bf00      	nop
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100

0800434c <__NVIC_SetPriority>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	6039      	str	r1, [r7, #0]
 8004356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	db0a      	blt.n	8004376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	490c      	ldr	r1, [pc, #48]	; (8004398 <__NVIC_SetPriority+0x4c>)
 8004366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	440b      	add	r3, r1
 8004370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004374:	e00a      	b.n	800438c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <__NVIC_SetPriority+0x50>)
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	3b04      	subs	r3, #4
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	440b      	add	r3, r1
 800438a:	761a      	strb	r2, [r3, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <NVIC_EncodePriority>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f1c3 0307 	rsb	r3, r3, #7
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf28      	it	cs
 80043be:	2304      	movcs	r3, #4
 80043c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d902      	bls.n	80043d0 <NVIC_EncodePriority+0x30>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3b03      	subs	r3, #3
 80043ce:	e000      	b.n	80043d2 <NVIC_EncodePriority+0x32>
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	401a      	ands	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43d9      	mvns	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	4313      	orrs	r3, r2
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004418:	d301      	bcc.n	800441e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800441a:	2301      	movs	r3, #1
 800441c:	e00f      	b.n	800443e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <SysTick_Config+0x40>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004426:	210f      	movs	r1, #15
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f7ff ff8e 	bl	800434c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Config+0x40>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <SysTick_Config+0x40>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff05 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004470:	f7ff ff1c 	bl	80042ac <__NVIC_GetPriorityGrouping>
 8004474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff ff90 	bl	80043a0 <NVIC_EncodePriority>
 8004480:	4602      	mov	r2, r0
 8004482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff5f 	bl	800434c <__NVIC_SetPriority>
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff0f 	bl	80042c8 <__NVIC_EnableIRQ>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff1f 	bl	8004304 <__NVIC_DisableIRQ>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ff96 	bl	8004408 <SysTick_Config>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff fe68 	bl	80041c4 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e316      	b.n	8004b2e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <HAL_DMA_Init+0x1b8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04a      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <HAL_DMA_Init+0x1bc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d045      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a63      	ldr	r2, [pc, #396]	; (80046a8 <HAL_DMA_Init+0x1c0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d040      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a62      	ldr	r2, [pc, #392]	; (80046ac <HAL_DMA_Init+0x1c4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d03b      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a60      	ldr	r2, [pc, #384]	; (80046b0 <HAL_DMA_Init+0x1c8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d036      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5f      	ldr	r2, [pc, #380]	; (80046b4 <HAL_DMA_Init+0x1cc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d031      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5d      	ldr	r2, [pc, #372]	; (80046b8 <HAL_DMA_Init+0x1d0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5c      	ldr	r2, [pc, #368]	; (80046bc <HAL_DMA_Init+0x1d4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d027      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a5a      	ldr	r2, [pc, #360]	; (80046c0 <HAL_DMA_Init+0x1d8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a59      	ldr	r2, [pc, #356]	; (80046c4 <HAL_DMA_Init+0x1dc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a57      	ldr	r2, [pc, #348]	; (80046c8 <HAL_DMA_Init+0x1e0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_DMA_Init+0x1e4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a54      	ldr	r2, [pc, #336]	; (80046d0 <HAL_DMA_Init+0x1e8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a53      	ldr	r2, [pc, #332]	; (80046d4 <HAL_DMA_Init+0x1ec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a51      	ldr	r2, [pc, #324]	; (80046d8 <HAL_DMA_Init+0x1f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_Init+0xb8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a50      	ldr	r2, [pc, #320]	; (80046dc <HAL_DMA_Init+0x1f4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_DMA_Init+0xbc>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_DMA_Init+0xbe>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 813b 	beq.w	8004822 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a37      	ldr	r2, [pc, #220]	; (80046a0 <HAL_DMA_Init+0x1b8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04a      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a36      	ldr	r2, [pc, #216]	; (80046a4 <HAL_DMA_Init+0x1bc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d045      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <HAL_DMA_Init+0x1c0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d040      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a33      	ldr	r2, [pc, #204]	; (80046ac <HAL_DMA_Init+0x1c4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d03b      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a31      	ldr	r2, [pc, #196]	; (80046b0 <HAL_DMA_Init+0x1c8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d036      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <HAL_DMA_Init+0x1cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d031      	beq.n	800465c <HAL_DMA_Init+0x174>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2e      	ldr	r2, [pc, #184]	; (80046b8 <HAL_DMA_Init+0x1d0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d02c      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2d      	ldr	r2, [pc, #180]	; (80046bc <HAL_DMA_Init+0x1d4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d027      	beq.n	800465c <HAL_DMA_Init+0x174>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <HAL_DMA_Init+0x1d8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d022      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <HAL_DMA_Init+0x1dc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d01d      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a28      	ldr	r2, [pc, #160]	; (80046c8 <HAL_DMA_Init+0x1e0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_DMA_Init+0x174>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a27      	ldr	r2, [pc, #156]	; (80046cc <HAL_DMA_Init+0x1e4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <HAL_DMA_Init+0x1e8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_DMA_Init+0x174>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <HAL_DMA_Init+0x1ec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <HAL_DMA_Init+0x1f0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_DMA_Init+0x174>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_DMA_Init+0x1f4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <HAL_DMA_Init+0x186>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e007      	b.n	800467e <HAL_DMA_Init+0x196>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800467e:	e02f      	b.n	80046e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004680:	f7ff fda0 	bl	80041c4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b05      	cmp	r3, #5
 800468c:	d928      	bls.n	80046e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e246      	b.n	8004b2e <HAL_DMA_Init+0x646>
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1c8      	bne.n	8004680 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4b83      	ldr	r3, [pc, #524]	; (8004908 <HAL_DMA_Init+0x420>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004706:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004712:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b04      	cmp	r3, #4
 8004732:	d107      	bne.n	8004744 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004744:	4b71      	ldr	r3, [pc, #452]	; (800490c <HAL_DMA_Init+0x424>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b71      	ldr	r3, [pc, #452]	; (8004910 <HAL_DMA_Init+0x428>)
 800474a:	4013      	ands	r3, r2
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004750:	d328      	bcc.n	80047a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b28      	cmp	r3, #40	; 0x28
 8004758:	d903      	bls.n	8004762 <HAL_DMA_Init+0x27a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b2e      	cmp	r3, #46	; 0x2e
 8004760:	d917      	bls.n	8004792 <HAL_DMA_Init+0x2aa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b3e      	cmp	r3, #62	; 0x3e
 8004768:	d903      	bls.n	8004772 <HAL_DMA_Init+0x28a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b42      	cmp	r3, #66	; 0x42
 8004770:	d90f      	bls.n	8004792 <HAL_DMA_Init+0x2aa>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b46      	cmp	r3, #70	; 0x46
 8004778:	d903      	bls.n	8004782 <HAL_DMA_Init+0x29a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b48      	cmp	r3, #72	; 0x48
 8004780:	d907      	bls.n	8004792 <HAL_DMA_Init+0x2aa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b4e      	cmp	r3, #78	; 0x4e
 8004788:	d905      	bls.n	8004796 <HAL_DMA_Init+0x2ae>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b52      	cmp	r3, #82	; 0x52
 8004790:	d801      	bhi.n	8004796 <HAL_DMA_Init+0x2ae>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_DMA_Init+0x2b0>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0307 	bic.w	r3, r3, #7
 80047ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d117      	bne.n	80047fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f002 fb3d 	bl	8006e60 <DMA_CheckFifoParam>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e197      	b.n	8004b2e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f002 fa78 	bl	8006cfc <DMA_CalcBaseAndBitshift>
 800480c:	4603      	mov	r3, r0
 800480e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	223f      	movs	r2, #63	; 0x3f
 800481a:	409a      	lsls	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	e0cd      	b.n	80049be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <HAL_DMA_Init+0x42c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a39      	ldr	r2, [pc, #228]	; (8004918 <HAL_DMA_Init+0x430>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a38      	ldr	r2, [pc, #224]	; (800491c <HAL_DMA_Init+0x434>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a36      	ldr	r2, [pc, #216]	; (8004920 <HAL_DMA_Init+0x438>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a35      	ldr	r2, [pc, #212]	; (8004924 <HAL_DMA_Init+0x43c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a33      	ldr	r2, [pc, #204]	; (8004928 <HAL_DMA_Init+0x440>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_DMA_Init+0x444>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_DMA_Init+0x38a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	; (8004930 <HAL_DMA_Init+0x448>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_DMA_Init+0x38e>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_DMA_Init+0x390>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8097 	beq.w	80049ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_DMA_Init+0x42c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d021      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_DMA_Init+0x430>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01c      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <HAL_DMA_Init+0x434>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d017      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_DMA_Init+0x438>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d012      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_DMA_Init+0x43c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00d      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_DMA_Init+0x440>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d008      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_DMA_Init+0x444>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <HAL_DMA_Init+0x3e4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_DMA_Init+0x448>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_DMA_Init+0x44c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d020      	beq.n	8004938 <HAL_DMA_Init+0x450>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d102      	bne.n	8004904 <HAL_DMA_Init+0x41c>
 80048fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004902:	e01a      	b.n	800493a <HAL_DMA_Init+0x452>
 8004904:	2300      	movs	r3, #0
 8004906:	e018      	b.n	800493a <HAL_DMA_Init+0x452>
 8004908:	fe10803f 	.word	0xfe10803f
 800490c:	5c001000 	.word	0x5c001000
 8004910:	ffff0000 	.word	0xffff0000
 8004914:	58025408 	.word	0x58025408
 8004918:	5802541c 	.word	0x5802541c
 800491c:	58025430 	.word	0x58025430
 8004920:	58025444 	.word	0x58025444
 8004924:	58025458 	.word	0x58025458
 8004928:	5802546c 	.word	0x5802546c
 800492c:	58025480 	.word	0x58025480
 8004930:	58025494 	.word	0x58025494
 8004934:	fffe000f 	.word	0xfffe000f
 8004938:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004968:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	4b6e      	ldr	r3, [pc, #440]	; (8004b38 <HAL_DMA_Init+0x650>)
 8004980:	4413      	add	r3, r2
 8004982:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_DMA_Init+0x654>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f002 f9b3 	bl	8006cfc <DMA_CalcBaseAndBitshift>
 8004996:	4603      	mov	r3, r0
 8004998:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e008      	b.n	80049be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2203      	movs	r2, #3
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0b7      	b.n	8004b2e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5f      	ldr	r2, [pc, #380]	; (8004b40 <HAL_DMA_Init+0x658>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d072      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a5d      	ldr	r2, [pc, #372]	; (8004b44 <HAL_DMA_Init+0x65c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d06d      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a5c      	ldr	r2, [pc, #368]	; (8004b48 <HAL_DMA_Init+0x660>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d068      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a5a      	ldr	r2, [pc, #360]	; (8004b4c <HAL_DMA_Init+0x664>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d063      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a59      	ldr	r2, [pc, #356]	; (8004b50 <HAL_DMA_Init+0x668>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d05e      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a57      	ldr	r2, [pc, #348]	; (8004b54 <HAL_DMA_Init+0x66c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d059      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a56      	ldr	r2, [pc, #344]	; (8004b58 <HAL_DMA_Init+0x670>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d054      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a54      	ldr	r2, [pc, #336]	; (8004b5c <HAL_DMA_Init+0x674>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d04f      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a53      	ldr	r2, [pc, #332]	; (8004b60 <HAL_DMA_Init+0x678>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d04a      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a51      	ldr	r2, [pc, #324]	; (8004b64 <HAL_DMA_Init+0x67c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d045      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a50      	ldr	r2, [pc, #320]	; (8004b68 <HAL_DMA_Init+0x680>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d040      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a4e      	ldr	r2, [pc, #312]	; (8004b6c <HAL_DMA_Init+0x684>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d03b      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a4d      	ldr	r2, [pc, #308]	; (8004b70 <HAL_DMA_Init+0x688>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d036      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a4b      	ldr	r2, [pc, #300]	; (8004b74 <HAL_DMA_Init+0x68c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_DMA_Init+0x690>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d02c      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_DMA_Init+0x694>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d027      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a47      	ldr	r2, [pc, #284]	; (8004b80 <HAL_DMA_Init+0x698>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a45      	ldr	r2, [pc, #276]	; (8004b84 <HAL_DMA_Init+0x69c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01d      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a44      	ldr	r2, [pc, #272]	; (8004b88 <HAL_DMA_Init+0x6a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <HAL_DMA_Init+0x6a4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a41      	ldr	r2, [pc, #260]	; (8004b90 <HAL_DMA_Init+0x6a8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3f      	ldr	r2, [pc, #252]	; (8004b94 <HAL_DMA_Init+0x6ac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3e      	ldr	r2, [pc, #248]	; (8004b98 <HAL_DMA_Init+0x6b0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_DMA_Init+0x5c6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a3c      	ldr	r2, [pc, #240]	; (8004b9c <HAL_DMA_Init+0x6b4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_DMA_Init+0x5ca>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_DMA_Init+0x5cc>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d032      	beq.n	8004b1e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f002 fa4d 	bl	8006f58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d102      	bne.n	8004acc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ae0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_DMA_Init+0x624>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d80c      	bhi.n	8004b0c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f002 faca 	bl	800708c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	e008      	b.n	8004b1e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	a7fdabf8 	.word	0xa7fdabf8
 8004b3c:	cccccccd 	.word	0xcccccccd
 8004b40:	40020010 	.word	0x40020010
 8004b44:	40020028 	.word	0x40020028
 8004b48:	40020040 	.word	0x40020040
 8004b4c:	40020058 	.word	0x40020058
 8004b50:	40020070 	.word	0x40020070
 8004b54:	40020088 	.word	0x40020088
 8004b58:	400200a0 	.word	0x400200a0
 8004b5c:	400200b8 	.word	0x400200b8
 8004b60:	40020410 	.word	0x40020410
 8004b64:	40020428 	.word	0x40020428
 8004b68:	40020440 	.word	0x40020440
 8004b6c:	40020458 	.word	0x40020458
 8004b70:	40020470 	.word	0x40020470
 8004b74:	40020488 	.word	0x40020488
 8004b78:	400204a0 	.word	0x400204a0
 8004b7c:	400204b8 	.word	0x400204b8
 8004b80:	58025408 	.word	0x58025408
 8004b84:	5802541c 	.word	0x5802541c
 8004b88:	58025430 	.word	0x58025430
 8004b8c:	58025444 	.word	0x58025444
 8004b90:	58025458 	.word	0x58025458
 8004b94:	5802546c 	.word	0x5802546c
 8004b98:	58025480 	.word	0x58025480
 8004b9c:	58025494 	.word	0x58025494

08004ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e226      	b.n	800500a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_DMA_Start_IT+0x2a>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e21f      	b.n	800500a <HAL_DMA_Start_IT+0x46a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	f040 820a 	bne.w	8004ff4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a68      	ldr	r2, [pc, #416]	; (8004d94 <HAL_DMA_Start_IT+0x1f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d04a      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a66      	ldr	r2, [pc, #408]	; (8004d98 <HAL_DMA_Start_IT+0x1f8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d045      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_DMA_Start_IT+0x1fc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d040      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a63      	ldr	r2, [pc, #396]	; (8004da0 <HAL_DMA_Start_IT+0x200>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d03b      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a62      	ldr	r2, [pc, #392]	; (8004da4 <HAL_DMA_Start_IT+0x204>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_DMA_Start_IT+0x208>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5f      	ldr	r2, [pc, #380]	; (8004dac <HAL_DMA_Start_IT+0x20c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02c      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5d      	ldr	r2, [pc, #372]	; (8004db0 <HAL_DMA_Start_IT+0x210>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a5c      	ldr	r2, [pc, #368]	; (8004db4 <HAL_DMA_Start_IT+0x214>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5a      	ldr	r2, [pc, #360]	; (8004db8 <HAL_DMA_Start_IT+0x218>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a59      	ldr	r2, [pc, #356]	; (8004dbc <HAL_DMA_Start_IT+0x21c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a57      	ldr	r2, [pc, #348]	; (8004dc0 <HAL_DMA_Start_IT+0x220>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a56      	ldr	r2, [pc, #344]	; (8004dc4 <HAL_DMA_Start_IT+0x224>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a54      	ldr	r2, [pc, #336]	; (8004dc8 <HAL_DMA_Start_IT+0x228>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a53      	ldr	r2, [pc, #332]	; (8004dcc <HAL_DMA_Start_IT+0x22c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a51      	ldr	r2, [pc, #324]	; (8004dd0 <HAL_DMA_Start_IT+0x230>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <HAL_DMA_Start_IT+0x100>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e007      	b.n	8004cb0 <HAL_DMA_Start_IT+0x110>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 fe74 	bl	80069a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a34      	ldr	r2, [pc, #208]	; (8004d94 <HAL_DMA_Start_IT+0x1f4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d04a      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <HAL_DMA_Start_IT+0x1f8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d045      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a31      	ldr	r2, [pc, #196]	; (8004d9c <HAL_DMA_Start_IT+0x1fc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d040      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_DMA_Start_IT+0x200>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d03b      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	; (8004da4 <HAL_DMA_Start_IT+0x204>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d036      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <HAL_DMA_Start_IT+0x208>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d031      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	; (8004dac <HAL_DMA_Start_IT+0x20c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02c      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_DMA_Start_IT+0x210>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d027      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_DMA_Start_IT+0x214>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <HAL_DMA_Start_IT+0x218>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <HAL_DMA_Start_IT+0x21c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <HAL_DMA_Start_IT+0x220>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_DMA_Start_IT+0x224>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_DMA_Start_IT+0x228>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_DMA_Start_IT+0x22c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_DMA_Start_IT+0x1bc>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_DMA_Start_IT+0x230>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_DMA_Start_IT+0x1c0>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_DMA_Start_IT+0x1c2>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d036      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 021e 	bic.w	r2, r3, #30
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0216 	orr.w	r2, r2, #22
 8004d78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d03e      	beq.n	8004e00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0208 	orr.w	r2, r2, #8
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e035      	b.n	8004e00 <HAL_DMA_Start_IT+0x260>
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 020e 	bic.w	r2, r3, #14
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 020a 	orr.w	r2, r2, #10
 8004de6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0204 	orr.w	r2, r2, #4
 8004dfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a83      	ldr	r2, [pc, #524]	; (8005014 <HAL_DMA_Start_IT+0x474>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d072      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a82      	ldr	r2, [pc, #520]	; (8005018 <HAL_DMA_Start_IT+0x478>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d06d      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a80      	ldr	r2, [pc, #512]	; (800501c <HAL_DMA_Start_IT+0x47c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d068      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7f      	ldr	r2, [pc, #508]	; (8005020 <HAL_DMA_Start_IT+0x480>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d063      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7d      	ldr	r2, [pc, #500]	; (8005024 <HAL_DMA_Start_IT+0x484>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d05e      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a7c      	ldr	r2, [pc, #496]	; (8005028 <HAL_DMA_Start_IT+0x488>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d059      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a7a      	ldr	r2, [pc, #488]	; (800502c <HAL_DMA_Start_IT+0x48c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d054      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a79      	ldr	r2, [pc, #484]	; (8005030 <HAL_DMA_Start_IT+0x490>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04f      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a77      	ldr	r2, [pc, #476]	; (8005034 <HAL_DMA_Start_IT+0x494>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d04a      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a76      	ldr	r2, [pc, #472]	; (8005038 <HAL_DMA_Start_IT+0x498>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d045      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a74      	ldr	r2, [pc, #464]	; (800503c <HAL_DMA_Start_IT+0x49c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d040      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a73      	ldr	r2, [pc, #460]	; (8005040 <HAL_DMA_Start_IT+0x4a0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d03b      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a71      	ldr	r2, [pc, #452]	; (8005044 <HAL_DMA_Start_IT+0x4a4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d036      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a70      	ldr	r2, [pc, #448]	; (8005048 <HAL_DMA_Start_IT+0x4a8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d031      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6e      	ldr	r2, [pc, #440]	; (800504c <HAL_DMA_Start_IT+0x4ac>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d02c      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6d      	ldr	r2, [pc, #436]	; (8005050 <HAL_DMA_Start_IT+0x4b0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d027      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6b      	ldr	r2, [pc, #428]	; (8005054 <HAL_DMA_Start_IT+0x4b4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d022      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6a      	ldr	r2, [pc, #424]	; (8005058 <HAL_DMA_Start_IT+0x4b8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <HAL_DMA_Start_IT+0x4bc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d018      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a67      	ldr	r2, [pc, #412]	; (8005060 <HAL_DMA_Start_IT+0x4c0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a65      	ldr	r2, [pc, #404]	; (8005064 <HAL_DMA_Start_IT+0x4c4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a64      	ldr	r2, [pc, #400]	; (8005068 <HAL_DMA_Start_IT+0x4c8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a62      	ldr	r2, [pc, #392]	; (800506c <HAL_DMA_Start_IT+0x4cc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x350>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_DMA_Start_IT+0x4d0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_DMA_Start_IT+0x354>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_Start_IT+0x356>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01a      	beq.n	8004f30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a37      	ldr	r2, [pc, #220]	; (8005014 <HAL_DMA_Start_IT+0x474>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04a      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a36      	ldr	r2, [pc, #216]	; (8005018 <HAL_DMA_Start_IT+0x478>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d045      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a34      	ldr	r2, [pc, #208]	; (800501c <HAL_DMA_Start_IT+0x47c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d040      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a33      	ldr	r2, [pc, #204]	; (8005020 <HAL_DMA_Start_IT+0x480>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d03b      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a31      	ldr	r2, [pc, #196]	; (8005024 <HAL_DMA_Start_IT+0x484>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d036      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a30      	ldr	r2, [pc, #192]	; (8005028 <HAL_DMA_Start_IT+0x488>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d031      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2e      	ldr	r2, [pc, #184]	; (800502c <HAL_DMA_Start_IT+0x48c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02c      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2d      	ldr	r2, [pc, #180]	; (8005030 <HAL_DMA_Start_IT+0x490>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d027      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <HAL_DMA_Start_IT+0x494>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <HAL_DMA_Start_IT+0x498>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d01d      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a28      	ldr	r2, [pc, #160]	; (800503c <HAL_DMA_Start_IT+0x49c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a27      	ldr	r2, [pc, #156]	; (8005040 <HAL_DMA_Start_IT+0x4a0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a25      	ldr	r2, [pc, #148]	; (8005044 <HAL_DMA_Start_IT+0x4a4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <HAL_DMA_Start_IT+0x4a8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	; (800504c <HAL_DMA_Start_IT+0x4ac>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x430>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a21      	ldr	r2, [pc, #132]	; (8005050 <HAL_DMA_Start_IT+0x4b0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <HAL_DMA_Start_IT+0x442>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e012      	b.n	8005008 <HAL_DMA_Start_IT+0x468>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e009      	b.n	8005008 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40020010 	.word	0x40020010
 8005018:	40020028 	.word	0x40020028
 800501c:	40020040 	.word	0x40020040
 8005020:	40020058 	.word	0x40020058
 8005024:	40020070 	.word	0x40020070
 8005028:	40020088 	.word	0x40020088
 800502c:	400200a0 	.word	0x400200a0
 8005030:	400200b8 	.word	0x400200b8
 8005034:	40020410 	.word	0x40020410
 8005038:	40020428 	.word	0x40020428
 800503c:	40020440 	.word	0x40020440
 8005040:	40020458 	.word	0x40020458
 8005044:	40020470 	.word	0x40020470
 8005048:	40020488 	.word	0x40020488
 800504c:	400204a0 	.word	0x400204a0
 8005050:	400204b8 	.word	0x400204b8
 8005054:	58025408 	.word	0x58025408
 8005058:	5802541c 	.word	0x5802541c
 800505c:	58025430 	.word	0x58025430
 8005060:	58025444 	.word	0x58025444
 8005064:	58025458 	.word	0x58025458
 8005068:	5802546c 	.word	0x5802546c
 800506c:	58025480 	.word	0x58025480
 8005070:	58025494 	.word	0x58025494

08005074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800507c:	f7ff f8a2 	bl	80041c4 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2dc      	b.n	8005646 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d008      	beq.n	80050aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e2cd      	b.n	8005646 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a76      	ldr	r2, [pc, #472]	; (8005288 <HAL_DMA_Abort+0x214>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a74      	ldr	r2, [pc, #464]	; (800528c <HAL_DMA_Abort+0x218>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a73      	ldr	r2, [pc, #460]	; (8005290 <HAL_DMA_Abort+0x21c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a71      	ldr	r2, [pc, #452]	; (8005294 <HAL_DMA_Abort+0x220>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a70      	ldr	r2, [pc, #448]	; (8005298 <HAL_DMA_Abort+0x224>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6e      	ldr	r2, [pc, #440]	; (800529c <HAL_DMA_Abort+0x228>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <HAL_DMA_Abort+0x22c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6b      	ldr	r2, [pc, #428]	; (80052a4 <HAL_DMA_Abort+0x230>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6a      	ldr	r2, [pc, #424]	; (80052a8 <HAL_DMA_Abort+0x234>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a68      	ldr	r2, [pc, #416]	; (80052ac <HAL_DMA_Abort+0x238>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_DMA_Abort+0x23c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a65      	ldr	r2, [pc, #404]	; (80052b4 <HAL_DMA_Abort+0x240>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a64      	ldr	r2, [pc, #400]	; (80052b8 <HAL_DMA_Abort+0x244>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a62      	ldr	r2, [pc, #392]	; (80052bc <HAL_DMA_Abort+0x248>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a61      	ldr	r2, [pc, #388]	; (80052c0 <HAL_DMA_Abort+0x24c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Abort+0xd6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5f      	ldr	r2, [pc, #380]	; (80052c4 <HAL_DMA_Abort+0x250>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_DMA_Abort+0xda>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_DMA_Abort+0xdc>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 021e 	bic.w	r2, r2, #30
 8005162:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005172:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e00a      	b.n	8005192 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 020e 	bic.w	r2, r2, #14
 800518a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <HAL_DMA_Abort+0x214>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d072      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3a      	ldr	r2, [pc, #232]	; (800528c <HAL_DMA_Abort+0x218>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d06d      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a39      	ldr	r2, [pc, #228]	; (8005290 <HAL_DMA_Abort+0x21c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d068      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a37      	ldr	r2, [pc, #220]	; (8005294 <HAL_DMA_Abort+0x220>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d063      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a36      	ldr	r2, [pc, #216]	; (8005298 <HAL_DMA_Abort+0x224>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d05e      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a34      	ldr	r2, [pc, #208]	; (800529c <HAL_DMA_Abort+0x228>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d059      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <HAL_DMA_Abort+0x22c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d054      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a31      	ldr	r2, [pc, #196]	; (80052a4 <HAL_DMA_Abort+0x230>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04f      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <HAL_DMA_Abort+0x234>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d04a      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2e      	ldr	r2, [pc, #184]	; (80052ac <HAL_DMA_Abort+0x238>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d045      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a2d      	ldr	r2, [pc, #180]	; (80052b0 <HAL_DMA_Abort+0x23c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d040      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2b      	ldr	r2, [pc, #172]	; (80052b4 <HAL_DMA_Abort+0x240>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d03b      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <HAL_DMA_Abort+0x244>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d036      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a28      	ldr	r2, [pc, #160]	; (80052bc <HAL_DMA_Abort+0x248>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d031      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <HAL_DMA_Abort+0x24c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d02c      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <HAL_DMA_Abort+0x250>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_DMA_Abort+0x254>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_DMA_Abort+0x258>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_DMA_Abort+0x25c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_DMA_Abort+0x260>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_DMA_Abort+0x264>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_DMA_Abort+0x268>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_DMA_Abort+0x26c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_DMA_Abort+0x20e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_DMA_Abort+0x270>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d132      	bne.n	80052e8 <HAL_DMA_Abort+0x274>
 8005282:	2301      	movs	r3, #1
 8005284:	e031      	b.n	80052ea <HAL_DMA_Abort+0x276>
 8005286:	bf00      	nop
 8005288:	40020010 	.word	0x40020010
 800528c:	40020028 	.word	0x40020028
 8005290:	40020040 	.word	0x40020040
 8005294:	40020058 	.word	0x40020058
 8005298:	40020070 	.word	0x40020070
 800529c:	40020088 	.word	0x40020088
 80052a0:	400200a0 	.word	0x400200a0
 80052a4:	400200b8 	.word	0x400200b8
 80052a8:	40020410 	.word	0x40020410
 80052ac:	40020428 	.word	0x40020428
 80052b0:	40020440 	.word	0x40020440
 80052b4:	40020458 	.word	0x40020458
 80052b8:	40020470 	.word	0x40020470
 80052bc:	40020488 	.word	0x40020488
 80052c0:	400204a0 	.word	0x400204a0
 80052c4:	400204b8 	.word	0x400204b8
 80052c8:	58025408 	.word	0x58025408
 80052cc:	5802541c 	.word	0x5802541c
 80052d0:	58025430 	.word	0x58025430
 80052d4:	58025444 	.word	0x58025444
 80052d8:	58025458 	.word	0x58025458
 80052dc:	5802546c 	.word	0x5802546c
 80052e0:	58025480 	.word	0x58025480
 80052e4:	58025494 	.word	0x58025494
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a6d      	ldr	r2, [pc, #436]	; (80054b8 <HAL_DMA_Abort+0x444>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d04a      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6b      	ldr	r2, [pc, #428]	; (80054bc <HAL_DMA_Abort+0x448>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d045      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_DMA_Abort+0x44c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d040      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a68      	ldr	r2, [pc, #416]	; (80054c4 <HAL_DMA_Abort+0x450>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d03b      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <HAL_DMA_Abort+0x454>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d036      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a65      	ldr	r2, [pc, #404]	; (80054cc <HAL_DMA_Abort+0x458>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a64      	ldr	r2, [pc, #400]	; (80054d0 <HAL_DMA_Abort+0x45c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d02c      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a62      	ldr	r2, [pc, #392]	; (80054d4 <HAL_DMA_Abort+0x460>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d027      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a61      	ldr	r2, [pc, #388]	; (80054d8 <HAL_DMA_Abort+0x464>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a5f      	ldr	r2, [pc, #380]	; (80054dc <HAL_DMA_Abort+0x468>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01d      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5e      	ldr	r2, [pc, #376]	; (80054e0 <HAL_DMA_Abort+0x46c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5c      	ldr	r2, [pc, #368]	; (80054e4 <HAL_DMA_Abort+0x470>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5b      	ldr	r2, [pc, #364]	; (80054e8 <HAL_DMA_Abort+0x474>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a59      	ldr	r2, [pc, #356]	; (80054ec <HAL_DMA_Abort+0x478>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a58      	ldr	r2, [pc, #352]	; (80054f0 <HAL_DMA_Abort+0x47c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_DMA_Abort+0x32a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a56      	ldr	r2, [pc, #344]	; (80054f4 <HAL_DMA_Abort+0x480>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <HAL_DMA_Abort+0x33c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e007      	b.n	80053c0 <HAL_DMA_Abort+0x34c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0201 	bic.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053c0:	e013      	b.n	80053ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053c2:	f7fe feff 	bl	80041c4 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d90c      	bls.n	80053ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2203      	movs	r2, #3
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e12d      	b.n	8005646 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <HAL_DMA_Abort+0x444>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	; (80054bc <HAL_DMA_Abort+0x448>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2c      	ldr	r2, [pc, #176]	; (80054c0 <HAL_DMA_Abort+0x44c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <HAL_DMA_Abort+0x450>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_DMA_Abort+0x454>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <HAL_DMA_Abort+0x458>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <HAL_DMA_Abort+0x45c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_DMA_Abort+0x460>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <HAL_DMA_Abort+0x464>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_DMA_Abort+0x468>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_DMA_Abort+0x46c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <HAL_DMA_Abort+0x470>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <HAL_DMA_Abort+0x474>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_DMA_Abort+0x478>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <HAL_DMA_Abort+0x47c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_Abort+0x422>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_DMA_Abort+0x480>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_DMA_Abort+0x426>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_DMA_Abort+0x428>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02b      	beq.n	80054f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	223f      	movs	r2, #63	; 0x3f
 80054b0:	409a      	lsls	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
 80054b6:	e02a      	b.n	800550e <HAL_DMA_Abort+0x49a>
 80054b8:	40020010 	.word	0x40020010
 80054bc:	40020028 	.word	0x40020028
 80054c0:	40020040 	.word	0x40020040
 80054c4:	40020058 	.word	0x40020058
 80054c8:	40020070 	.word	0x40020070
 80054cc:	40020088 	.word	0x40020088
 80054d0:	400200a0 	.word	0x400200a0
 80054d4:	400200b8 	.word	0x400200b8
 80054d8:	40020410 	.word	0x40020410
 80054dc:	40020428 	.word	0x40020428
 80054e0:	40020440 	.word	0x40020440
 80054e4:	40020458 	.word	0x40020458
 80054e8:	40020470 	.word	0x40020470
 80054ec:	40020488 	.word	0x40020488
 80054f0:	400204a0 	.word	0x400204a0
 80054f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2201      	movs	r2, #1
 8005508:	409a      	lsls	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4f      	ldr	r2, [pc, #316]	; (8005650 <HAL_DMA_Abort+0x5dc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d072      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a4d      	ldr	r2, [pc, #308]	; (8005654 <HAL_DMA_Abort+0x5e0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d06d      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4c      	ldr	r2, [pc, #304]	; (8005658 <HAL_DMA_Abort+0x5e4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d068      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4a      	ldr	r2, [pc, #296]	; (800565c <HAL_DMA_Abort+0x5e8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d063      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a49      	ldr	r2, [pc, #292]	; (8005660 <HAL_DMA_Abort+0x5ec>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d05e      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a47      	ldr	r2, [pc, #284]	; (8005664 <HAL_DMA_Abort+0x5f0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d059      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a46      	ldr	r2, [pc, #280]	; (8005668 <HAL_DMA_Abort+0x5f4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d054      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a44      	ldr	r2, [pc, #272]	; (800566c <HAL_DMA_Abort+0x5f8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d04f      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a43      	ldr	r2, [pc, #268]	; (8005670 <HAL_DMA_Abort+0x5fc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d04a      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a41      	ldr	r2, [pc, #260]	; (8005674 <HAL_DMA_Abort+0x600>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d045      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a40      	ldr	r2, [pc, #256]	; (8005678 <HAL_DMA_Abort+0x604>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d040      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3e      	ldr	r2, [pc, #248]	; (800567c <HAL_DMA_Abort+0x608>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3d      	ldr	r2, [pc, #244]	; (8005680 <HAL_DMA_Abort+0x60c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d036      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <HAL_DMA_Abort+0x610>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d031      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3a      	ldr	r2, [pc, #232]	; (8005688 <HAL_DMA_Abort+0x614>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d02c      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a38      	ldr	r2, [pc, #224]	; (800568c <HAL_DMA_Abort+0x618>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d027      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a37      	ldr	r2, [pc, #220]	; (8005690 <HAL_DMA_Abort+0x61c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a35      	ldr	r2, [pc, #212]	; (8005694 <HAL_DMA_Abort+0x620>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a34      	ldr	r2, [pc, #208]	; (8005698 <HAL_DMA_Abort+0x624>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a32      	ldr	r2, [pc, #200]	; (800569c <HAL_DMA_Abort+0x628>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a31      	ldr	r2, [pc, #196]	; (80056a0 <HAL_DMA_Abort+0x62c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2f      	ldr	r2, [pc, #188]	; (80056a4 <HAL_DMA_Abort+0x630>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2e      	ldr	r2, [pc, #184]	; (80056a8 <HAL_DMA_Abort+0x634>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_DMA_Abort+0x58a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <HAL_DMA_Abort+0x638>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_DMA_Abort+0x58e>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_DMA_Abort+0x590>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005610:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005628:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005632:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8
 8005690:	58025408 	.word	0x58025408
 8005694:	5802541c 	.word	0x5802541c
 8005698:	58025430 	.word	0x58025430
 800569c:	58025444 	.word	0x58025444
 80056a0:	58025458 	.word	0x58025458
 80056a4:	5802546c 	.word	0x5802546c
 80056a8:	58025480 	.word	0x58025480
 80056ac:	58025494 	.word	0x58025494

080056b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e205      	b.n	8005ace <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e1fa      	b.n	8005ace <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a8c      	ldr	r2, [pc, #560]	; (8005910 <HAL_DMA_Abort_IT+0x260>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04a      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a8b      	ldr	r2, [pc, #556]	; (8005914 <HAL_DMA_Abort_IT+0x264>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d045      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a89      	ldr	r2, [pc, #548]	; (8005918 <HAL_DMA_Abort_IT+0x268>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a88      	ldr	r2, [pc, #544]	; (800591c <HAL_DMA_Abort_IT+0x26c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03b      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a86      	ldr	r2, [pc, #536]	; (8005920 <HAL_DMA_Abort_IT+0x270>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d036      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a85      	ldr	r2, [pc, #532]	; (8005924 <HAL_DMA_Abort_IT+0x274>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d031      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a83      	ldr	r2, [pc, #524]	; (8005928 <HAL_DMA_Abort_IT+0x278>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a82      	ldr	r2, [pc, #520]	; (800592c <HAL_DMA_Abort_IT+0x27c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d027      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a80      	ldr	r2, [pc, #512]	; (8005930 <HAL_DMA_Abort_IT+0x280>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a7f      	ldr	r2, [pc, #508]	; (8005934 <HAL_DMA_Abort_IT+0x284>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a7d      	ldr	r2, [pc, #500]	; (8005938 <HAL_DMA_Abort_IT+0x288>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a7c      	ldr	r2, [pc, #496]	; (800593c <HAL_DMA_Abort_IT+0x28c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a7a      	ldr	r2, [pc, #488]	; (8005940 <HAL_DMA_Abort_IT+0x290>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a79      	ldr	r2, [pc, #484]	; (8005944 <HAL_DMA_Abort_IT+0x294>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a77      	ldr	r2, [pc, #476]	; (8005948 <HAL_DMA_Abort_IT+0x298>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Abort_IT+0xc8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a76      	ldr	r2, [pc, #472]	; (800594c <HAL_DMA_Abort_IT+0x29c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_DMA_Abort_IT+0xcc>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_DMA_Abort_IT+0xce>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d065      	beq.n	800584e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a60      	ldr	r2, [pc, #384]	; (8005910 <HAL_DMA_Abort_IT+0x260>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5e      	ldr	r2, [pc, #376]	; (8005914 <HAL_DMA_Abort_IT+0x264>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <HAL_DMA_Abort_IT+0x268>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5b      	ldr	r2, [pc, #364]	; (800591c <HAL_DMA_Abort_IT+0x26c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5a      	ldr	r2, [pc, #360]	; (8005920 <HAL_DMA_Abort_IT+0x270>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_DMA_Abort_IT+0x274>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a57      	ldr	r2, [pc, #348]	; (8005928 <HAL_DMA_Abort_IT+0x278>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a55      	ldr	r2, [pc, #340]	; (800592c <HAL_DMA_Abort_IT+0x27c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a54      	ldr	r2, [pc, #336]	; (8005930 <HAL_DMA_Abort_IT+0x280>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a52      	ldr	r2, [pc, #328]	; (8005934 <HAL_DMA_Abort_IT+0x284>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a51      	ldr	r2, [pc, #324]	; (8005938 <HAL_DMA_Abort_IT+0x288>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a4f      	ldr	r2, [pc, #316]	; (800593c <HAL_DMA_Abort_IT+0x28c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4e      	ldr	r2, [pc, #312]	; (8005940 <HAL_DMA_Abort_IT+0x290>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a4c      	ldr	r2, [pc, #304]	; (8005944 <HAL_DMA_Abort_IT+0x294>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a4b      	ldr	r2, [pc, #300]	; (8005948 <HAL_DMA_Abort_IT+0x298>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_Abort_IT+0x17a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a49      	ldr	r2, [pc, #292]	; (800594c <HAL_DMA_Abort_IT+0x29c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <HAL_DMA_Abort_IT+0x18c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e147      	b.n	8005acc <HAL_DMA_Abort_IT+0x41c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e13e      	b.n	8005acc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 020e 	bic.w	r2, r2, #14
 800585c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <HAL_DMA_Abort_IT+0x260>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d04a      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a29      	ldr	r2, [pc, #164]	; (8005914 <HAL_DMA_Abort_IT+0x264>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d045      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a28      	ldr	r2, [pc, #160]	; (8005918 <HAL_DMA_Abort_IT+0x268>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d040      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a26      	ldr	r2, [pc, #152]	; (800591c <HAL_DMA_Abort_IT+0x26c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d03b      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a25      	ldr	r2, [pc, #148]	; (8005920 <HAL_DMA_Abort_IT+0x270>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d036      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a23      	ldr	r2, [pc, #140]	; (8005924 <HAL_DMA_Abort_IT+0x274>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d031      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_DMA_Abort_IT+0x278>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d02c      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a20      	ldr	r2, [pc, #128]	; (800592c <HAL_DMA_Abort_IT+0x27c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d027      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_DMA_Abort_IT+0x280>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_DMA_Abort_IT+0x284>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01d      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_DMA_Abort_IT+0x288>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1a      	ldr	r2, [pc, #104]	; (800593c <HAL_DMA_Abort_IT+0x28c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <HAL_DMA_Abort_IT+0x290>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_DMA_Abort_IT+0x294>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a16      	ldr	r2, [pc, #88]	; (8005948 <HAL_DMA_Abort_IT+0x298>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_DMA_Abort_IT+0x24e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a14      	ldr	r2, [pc, #80]	; (800594c <HAL_DMA_Abort_IT+0x29c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d128      	bne.n	8005950 <HAL_DMA_Abort_IT+0x2a0>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0201 	bic.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e027      	b.n	8005960 <HAL_DMA_Abort_IT+0x2b0>
 8005910:	40020010 	.word	0x40020010
 8005914:	40020028 	.word	0x40020028
 8005918:	40020040 	.word	0x40020040
 800591c:	40020058 	.word	0x40020058
 8005920:	40020070 	.word	0x40020070
 8005924:	40020088 	.word	0x40020088
 8005928:	400200a0 	.word	0x400200a0
 800592c:	400200b8 	.word	0x400200b8
 8005930:	40020410 	.word	0x40020410
 8005934:	40020428 	.word	0x40020428
 8005938:	40020440 	.word	0x40020440
 800593c:	40020458 	.word	0x40020458
 8005940:	40020470 	.word	0x40020470
 8005944:	40020488 	.word	0x40020488
 8005948:	400204a0 	.word	0x400204a0
 800594c:	400204b8 	.word	0x400204b8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5c      	ldr	r2, [pc, #368]	; (8005ad8 <HAL_DMA_Abort_IT+0x428>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d072      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5b      	ldr	r2, [pc, #364]	; (8005adc <HAL_DMA_Abort_IT+0x42c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d06d      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a59      	ldr	r2, [pc, #356]	; (8005ae0 <HAL_DMA_Abort_IT+0x430>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d068      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a58      	ldr	r2, [pc, #352]	; (8005ae4 <HAL_DMA_Abort_IT+0x434>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d063      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <HAL_DMA_Abort_IT+0x438>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d05e      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a55      	ldr	r2, [pc, #340]	; (8005aec <HAL_DMA_Abort_IT+0x43c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d059      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a53      	ldr	r2, [pc, #332]	; (8005af0 <HAL_DMA_Abort_IT+0x440>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d054      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a52      	ldr	r2, [pc, #328]	; (8005af4 <HAL_DMA_Abort_IT+0x444>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d04f      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a50      	ldr	r2, [pc, #320]	; (8005af8 <HAL_DMA_Abort_IT+0x448>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <HAL_DMA_Abort_IT+0x44c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a4d      	ldr	r2, [pc, #308]	; (8005b00 <HAL_DMA_Abort_IT+0x450>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4c      	ldr	r2, [pc, #304]	; (8005b04 <HAL_DMA_Abort_IT+0x454>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a4a      	ldr	r2, [pc, #296]	; (8005b08 <HAL_DMA_Abort_IT+0x458>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a49      	ldr	r2, [pc, #292]	; (8005b0c <HAL_DMA_Abort_IT+0x45c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a47      	ldr	r2, [pc, #284]	; (8005b10 <HAL_DMA_Abort_IT+0x460>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a46      	ldr	r2, [pc, #280]	; (8005b14 <HAL_DMA_Abort_IT+0x464>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a44      	ldr	r2, [pc, #272]	; (8005b18 <HAL_DMA_Abort_IT+0x468>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a43      	ldr	r2, [pc, #268]	; (8005b1c <HAL_DMA_Abort_IT+0x46c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a41      	ldr	r2, [pc, #260]	; (8005b20 <HAL_DMA_Abort_IT+0x470>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <HAL_DMA_Abort_IT+0x474>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	; (8005b28 <HAL_DMA_Abort_IT+0x478>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3d      	ldr	r2, [pc, #244]	; (8005b2c <HAL_DMA_Abort_IT+0x47c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <HAL_DMA_Abort_IT+0x480>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x3a0>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a3a      	ldr	r2, [pc, #232]	; (8005b34 <HAL_DMA_Abort_IT+0x484>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Abort_IT+0x3a4>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <HAL_DMA_Abort_IT+0x3a6>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d028      	beq.n	8005aac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2201      	movs	r2, #1
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aaa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	58025408 	.word	0x58025408
 8005b1c:	5802541c 	.word	0x5802541c
 8005b20:	58025430 	.word	0x58025430
 8005b24:	58025444 	.word	0x58025444
 8005b28:	58025458 	.word	0x58025458
 8005b2c:	5802546c 	.word	0x5802546c
 8005b30:	58025480 	.word	0x58025480
 8005b34:	58025494 	.word	0x58025494

08005b38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b44:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <HAL_DMA_IRQHandler+0x1ac>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a67      	ldr	r2, [pc, #412]	; (8005ce8 <HAL_DMA_IRQHandler+0x1b0>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a9b      	lsrs	r3, r3, #10
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5f      	ldr	r2, [pc, #380]	; (8005cec <HAL_DMA_IRQHandler+0x1b4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d04a      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d045      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5c      	ldr	r2, [pc, #368]	; (8005cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d040      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a5a      	ldr	r2, [pc, #360]	; (8005cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d03b      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a59      	ldr	r2, [pc, #356]	; (8005cfc <HAL_DMA_IRQHandler+0x1c4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d036      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <HAL_DMA_IRQHandler+0x1c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d031      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a56      	ldr	r2, [pc, #344]	; (8005d04 <HAL_DMA_IRQHandler+0x1cc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d02c      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a54      	ldr	r2, [pc, #336]	; (8005d08 <HAL_DMA_IRQHandler+0x1d0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d027      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a53      	ldr	r2, [pc, #332]	; (8005d0c <HAL_DMA_IRQHandler+0x1d4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a51      	ldr	r2, [pc, #324]	; (8005d10 <HAL_DMA_IRQHandler+0x1d8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a50      	ldr	r2, [pc, #320]	; (8005d14 <HAL_DMA_IRQHandler+0x1dc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a4e      	ldr	r2, [pc, #312]	; (8005d18 <HAL_DMA_IRQHandler+0x1e0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a4d      	ldr	r2, [pc, #308]	; (8005d1c <HAL_DMA_IRQHandler+0x1e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <HAL_DMA_IRQHandler+0x1e8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <HAL_DMA_IRQHandler+0x1ec>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xd2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a48      	ldr	r2, [pc, #288]	; (8005d28 <HAL_DMA_IRQHandler+0x1f0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d101      	bne.n	8005c0e <HAL_DMA_IRQHandler+0xd6>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_DMA_IRQHandler+0xd8>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 842b 	beq.w	800646c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2208      	movs	r2, #8
 8005c20:	409a      	lsls	r2, r3
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80a2 	beq.w	8005d70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <HAL_DMA_IRQHandler+0x1b4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d04a      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d045      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d040      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	; (8005cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d03b      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <HAL_DMA_IRQHandler+0x1c4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d036      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <HAL_DMA_IRQHandler+0x1c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d031      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_DMA_IRQHandler+0x1cc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02c      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <HAL_DMA_IRQHandler+0x1d0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d027      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <HAL_DMA_IRQHandler+0x1d4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d022      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <HAL_DMA_IRQHandler+0x1d8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d01d      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <HAL_DMA_IRQHandler+0x1dc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <HAL_DMA_IRQHandler+0x1e0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_DMA_IRQHandler+0x1e4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <HAL_DMA_IRQHandler+0x1e8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <HAL_DMA_IRQHandler+0x1ec>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x194>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <HAL_DMA_IRQHandler+0x1f0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d12f      	bne.n	8005d2c <HAL_DMA_IRQHandler+0x1f4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf14      	ite	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	2300      	moveq	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	e02e      	b.n	8005d40 <HAL_DMA_IRQHandler+0x208>
 8005ce2:	bf00      	nop
 8005ce4:	20000000 	.word	0x20000000
 8005ce8:	1b4e81b5 	.word	0x1b4e81b5
 8005cec:	40020010 	.word	0x40020010
 8005cf0:	40020028 	.word	0x40020028
 8005cf4:	40020040 	.word	0x40020040
 8005cf8:	40020058 	.word	0x40020058
 8005cfc:	40020070 	.word	0x40020070
 8005d00:	40020088 	.word	0x40020088
 8005d04:	400200a0 	.word	0x400200a0
 8005d08:	400200b8 	.word	0x400200b8
 8005d0c:	40020410 	.word	0x40020410
 8005d10:	40020428 	.word	0x40020428
 8005d14:	40020440 	.word	0x40020440
 8005d18:	40020458 	.word	0x40020458
 8005d1c:	40020470 	.word	0x40020470
 8005d20:	40020488 	.word	0x40020488
 8005d24:	400204a0 	.word	0x400204a0
 8005d28:	400204b8 	.word	0x400204b8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0204 	bic.w	r2, r2, #4
 8005d52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f043 0201 	orr.w	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06e      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <HAL_DMA_IRQHandler+0x3f8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d04a      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a67      	ldr	r2, [pc, #412]	; (8005f34 <HAL_DMA_IRQHandler+0x3fc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d045      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a66      	ldr	r2, [pc, #408]	; (8005f38 <HAL_DMA_IRQHandler+0x400>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d040      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a64      	ldr	r2, [pc, #400]	; (8005f3c <HAL_DMA_IRQHandler+0x404>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d03b      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a63      	ldr	r2, [pc, #396]	; (8005f40 <HAL_DMA_IRQHandler+0x408>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d036      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a61      	ldr	r2, [pc, #388]	; (8005f44 <HAL_DMA_IRQHandler+0x40c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d031      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a60      	ldr	r2, [pc, #384]	; (8005f48 <HAL_DMA_IRQHandler+0x410>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d02c      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a5e      	ldr	r2, [pc, #376]	; (8005f4c <HAL_DMA_IRQHandler+0x414>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d027      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a5d      	ldr	r2, [pc, #372]	; (8005f50 <HAL_DMA_IRQHandler+0x418>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d022      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5b      	ldr	r2, [pc, #364]	; (8005f54 <HAL_DMA_IRQHandler+0x41c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01d      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5a      	ldr	r2, [pc, #360]	; (8005f58 <HAL_DMA_IRQHandler+0x420>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_DMA_IRQHandler+0x424>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a57      	ldr	r2, [pc, #348]	; (8005f60 <HAL_DMA_IRQHandler+0x428>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a55      	ldr	r2, [pc, #340]	; (8005f64 <HAL_DMA_IRQHandler+0x42c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a54      	ldr	r2, [pc, #336]	; (8005f68 <HAL_DMA_IRQHandler+0x430>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x2ee>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a52      	ldr	r2, [pc, #328]	; (8005f6c <HAL_DMA_IRQHandler+0x434>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d10a      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x304>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e003      	b.n	8005e44 <HAL_DMA_IRQHandler+0x30c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2201      	movs	r2, #1
 8005e52:	409a      	lsls	r2, r3
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f043 0202 	orr.w	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 808f 	beq.w	8005f98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_DMA_IRQHandler+0x3f8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <HAL_DMA_IRQHandler+0x3fc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <HAL_DMA_IRQHandler+0x400>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <HAL_DMA_IRQHandler+0x404>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <HAL_DMA_IRQHandler+0x408>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <HAL_DMA_IRQHandler+0x40c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a23      	ldr	r2, [pc, #140]	; (8005f48 <HAL_DMA_IRQHandler+0x410>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_DMA_IRQHandler+0x414>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <HAL_DMA_IRQHandler+0x418>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <HAL_DMA_IRQHandler+0x41c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	; (8005f58 <HAL_DMA_IRQHandler+0x420>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <HAL_DMA_IRQHandler+0x424>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <HAL_DMA_IRQHandler+0x428>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <HAL_DMA_IRQHandler+0x42c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <HAL_DMA_IRQHandler+0x430>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x3e2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <HAL_DMA_IRQHandler+0x434>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d12a      	bne.n	8005f70 <HAL_DMA_IRQHandler+0x438>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e023      	b.n	8005f78 <HAL_DMA_IRQHandler+0x440>
 8005f30:	40020010 	.word	0x40020010
 8005f34:	40020028 	.word	0x40020028
 8005f38:	40020040 	.word	0x40020040
 8005f3c:	40020058 	.word	0x40020058
 8005f40:	40020070 	.word	0x40020070
 8005f44:	40020088 	.word	0x40020088
 8005f48:	400200a0 	.word	0x400200a0
 8005f4c:	400200b8 	.word	0x400200b8
 8005f50:	40020410 	.word	0x40020410
 8005f54:	40020428 	.word	0x40020428
 8005f58:	40020440 	.word	0x40020440
 8005f5c:	40020458 	.word	0x40020458
 8005f60:	40020470 	.word	0x40020470
 8005f64:	40020488 	.word	0x40020488
 8005f68:	400204a0 	.word	0x400204a0
 8005f6c:	400204b8 	.word	0x400204b8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2204      	movs	r2, #4
 8005f86:	409a      	lsls	r2, r3
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f043 0204 	orr.w	r2, r3, #4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80a6 	beq.w	80060fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a85      	ldr	r2, [pc, #532]	; (80061c8 <HAL_DMA_IRQHandler+0x690>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d04a      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a83      	ldr	r2, [pc, #524]	; (80061cc <HAL_DMA_IRQHandler+0x694>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d045      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a82      	ldr	r2, [pc, #520]	; (80061d0 <HAL_DMA_IRQHandler+0x698>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d040      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a80      	ldr	r2, [pc, #512]	; (80061d4 <HAL_DMA_IRQHandler+0x69c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d03b      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a7f      	ldr	r2, [pc, #508]	; (80061d8 <HAL_DMA_IRQHandler+0x6a0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d036      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7d      	ldr	r2, [pc, #500]	; (80061dc <HAL_DMA_IRQHandler+0x6a4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d031      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7c      	ldr	r2, [pc, #496]	; (80061e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d02c      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_DMA_IRQHandler+0x6ac>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d027      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a79      	ldr	r2, [pc, #484]	; (80061e8 <HAL_DMA_IRQHandler+0x6b0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d022      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a77      	ldr	r2, [pc, #476]	; (80061ec <HAL_DMA_IRQHandler+0x6b4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01d      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a76      	ldr	r2, [pc, #472]	; (80061f0 <HAL_DMA_IRQHandler+0x6b8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	; (80061f4 <HAL_DMA_IRQHandler+0x6bc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	; (80061f8 <HAL_DMA_IRQHandler+0x6c0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a71      	ldr	r2, [pc, #452]	; (80061fc <HAL_DMA_IRQHandler+0x6c4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a70      	ldr	r2, [pc, #448]	; (8006200 <HAL_DMA_IRQHandler+0x6c8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_DMA_IRQHandler+0x516>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	; (8006204 <HAL_DMA_IRQHandler+0x6cc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10a      	bne.n	8006064 <HAL_DMA_IRQHandler+0x52c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e009      	b.n	8006078 <HAL_DMA_IRQHandler+0x540>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d03e      	beq.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2210      	movs	r2, #16
 8006086:	409a      	lsls	r2, r3
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d108      	bne.n	80060ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d024      	beq.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
 80060b8:	e01f      	b.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01b      	beq.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
 80060ca:	e016      	b.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0208 	bic.w	r2, r2, #8
 80060e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	2220      	movs	r2, #32
 8006104:	409a      	lsls	r2, r3
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8110 	beq.w	8006330 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <HAL_DMA_IRQHandler+0x690>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d04a      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <HAL_DMA_IRQHandler+0x694>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d045      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a29      	ldr	r2, [pc, #164]	; (80061d0 <HAL_DMA_IRQHandler+0x698>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d040      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <HAL_DMA_IRQHandler+0x69c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d03b      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_DMA_IRQHandler+0x6a0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d036      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_DMA_IRQHandler+0x6a4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d031      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a23      	ldr	r2, [pc, #140]	; (80061e0 <HAL_DMA_IRQHandler+0x6a8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d02c      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_DMA_IRQHandler+0x6ac>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d027      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <HAL_DMA_IRQHandler+0x6b0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d022      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <HAL_DMA_IRQHandler+0x6b4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d01d      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_DMA_IRQHandler+0x6b8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1c      	ldr	r2, [pc, #112]	; (80061f4 <HAL_DMA_IRQHandler+0x6bc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_DMA_IRQHandler+0x6c0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a19      	ldr	r2, [pc, #100]	; (80061fc <HAL_DMA_IRQHandler+0x6c4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a17      	ldr	r2, [pc, #92]	; (8006200 <HAL_DMA_IRQHandler+0x6c8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x678>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a16      	ldr	r2, [pc, #88]	; (8006204 <HAL_DMA_IRQHandler+0x6cc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d12b      	bne.n	8006208 <HAL_DMA_IRQHandler+0x6d0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e02a      	b.n	800621c <HAL_DMA_IRQHandler+0x6e4>
 80061c6:	bf00      	nop
 80061c8:	40020010 	.word	0x40020010
 80061cc:	40020028 	.word	0x40020028
 80061d0:	40020040 	.word	0x40020040
 80061d4:	40020058 	.word	0x40020058
 80061d8:	40020070 	.word	0x40020070
 80061dc:	40020088 	.word	0x40020088
 80061e0:	400200a0 	.word	0x400200a0
 80061e4:	400200b8 	.word	0x400200b8
 80061e8:	40020410 	.word	0x40020410
 80061ec:	40020428 	.word	0x40020428
 80061f0:	40020440 	.word	0x40020440
 80061f4:	40020458 	.word	0x40020458
 80061f8:	40020470 	.word	0x40020470
 80061fc:	40020488 	.word	0x40020488
 8006200:	400204a0 	.word	0x400204a0
 8006204:	400204b8 	.word	0x400204b8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8087 	beq.w	8006330 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2220      	movs	r2, #32
 800622c:	409a      	lsls	r2, r3
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b04      	cmp	r3, #4
 800623c:	d139      	bne.n	80062b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0216 	bic.w	r2, r2, #22
 800624c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800625c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_DMA_IRQHandler+0x736>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0208 	bic.w	r2, r2, #8
 800627c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	223f      	movs	r2, #63	; 0x3f
 8006288:	409a      	lsls	r2, r3
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 834a 	beq.w	800693c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
          }
          return;
 80062b0:	e344      	b.n	800693c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d018      	beq.n	80062f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d02c      	beq.n	8006330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
 80062de:	e027      	b.n	8006330 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d023      	beq.n	8006330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
 80062f0:	e01e      	b.n	8006330 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0210 	bic.w	r2, r2, #16
 800630e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8306 	beq.w	8006946 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8088 	beq.w	8006458 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a7a      	ldr	r2, [pc, #488]	; (8006540 <HAL_DMA_IRQHandler+0xa08>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a79      	ldr	r2, [pc, #484]	; (8006544 <HAL_DMA_IRQHandler+0xa0c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a77      	ldr	r2, [pc, #476]	; (8006548 <HAL_DMA_IRQHandler+0xa10>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a76      	ldr	r2, [pc, #472]	; (800654c <HAL_DMA_IRQHandler+0xa14>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a74      	ldr	r2, [pc, #464]	; (8006550 <HAL_DMA_IRQHandler+0xa18>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a73      	ldr	r2, [pc, #460]	; (8006554 <HAL_DMA_IRQHandler+0xa1c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a71      	ldr	r2, [pc, #452]	; (8006558 <HAL_DMA_IRQHandler+0xa20>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a70      	ldr	r2, [pc, #448]	; (800655c <HAL_DMA_IRQHandler+0xa24>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a6e      	ldr	r2, [pc, #440]	; (8006560 <HAL_DMA_IRQHandler+0xa28>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a6d      	ldr	r2, [pc, #436]	; (8006564 <HAL_DMA_IRQHandler+0xa2c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6b      	ldr	r2, [pc, #428]	; (8006568 <HAL_DMA_IRQHandler+0xa30>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6a      	ldr	r2, [pc, #424]	; (800656c <HAL_DMA_IRQHandler+0xa34>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a68      	ldr	r2, [pc, #416]	; (8006570 <HAL_DMA_IRQHandler+0xa38>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a67      	ldr	r2, [pc, #412]	; (8006574 <HAL_DMA_IRQHandler+0xa3c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a65      	ldr	r2, [pc, #404]	; (8006578 <HAL_DMA_IRQHandler+0xa40>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x8b8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a64      	ldr	r2, [pc, #400]	; (800657c <HAL_DMA_IRQHandler+0xa44>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_DMA_IRQHandler+0x8ca>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e007      	b.n	8006412 <HAL_DMA_IRQHandler+0x8da>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	429a      	cmp	r2, r3
 800641c:	d307      	bcc.n	800642e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f2      	bne.n	8006412 <HAL_DMA_IRQHandler+0x8da>
 800642c:	e000      	b.n	8006430 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800642e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800644e:	e003      	b.n	8006458 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8272 	beq.w	8006946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
 800646a:	e26c      	b.n	8006946 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a43      	ldr	r2, [pc, #268]	; (8006580 <HAL_DMA_IRQHandler+0xa48>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a42      	ldr	r2, [pc, #264]	; (8006584 <HAL_DMA_IRQHandler+0xa4c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a40      	ldr	r2, [pc, #256]	; (8006588 <HAL_DMA_IRQHandler+0xa50>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3f      	ldr	r2, [pc, #252]	; (800658c <HAL_DMA_IRQHandler+0xa54>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3d      	ldr	r2, [pc, #244]	; (8006590 <HAL_DMA_IRQHandler+0xa58>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a3c      	ldr	r2, [pc, #240]	; (8006594 <HAL_DMA_IRQHandler+0xa5c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3a      	ldr	r2, [pc, #232]	; (8006598 <HAL_DMA_IRQHandler+0xa60>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_DMA_IRQHandler+0x984>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a39      	ldr	r2, [pc, #228]	; (800659c <HAL_DMA_IRQHandler+0xa64>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x988>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_DMA_IRQHandler+0x98a>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 823f 	beq.w	8006946 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2204      	movs	r2, #4
 80064da:	409a      	lsls	r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80cd 	beq.w	8006680 <HAL_DMA_IRQHandler+0xb48>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80c7 	beq.w	8006680 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2204      	movs	r2, #4
 80064fc:	409a      	lsls	r2, r3
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d049      	beq.n	80065a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8210 	beq.w	8006940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006528:	e20a      	b.n	8006940 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8206 	beq.w	8006940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800653c:	e200      	b.n	8006940 <HAL_DMA_IRQHandler+0xe08>
 800653e:	bf00      	nop
 8006540:	40020010 	.word	0x40020010
 8006544:	40020028 	.word	0x40020028
 8006548:	40020040 	.word	0x40020040
 800654c:	40020058 	.word	0x40020058
 8006550:	40020070 	.word	0x40020070
 8006554:	40020088 	.word	0x40020088
 8006558:	400200a0 	.word	0x400200a0
 800655c:	400200b8 	.word	0x400200b8
 8006560:	40020410 	.word	0x40020410
 8006564:	40020428 	.word	0x40020428
 8006568:	40020440 	.word	0x40020440
 800656c:	40020458 	.word	0x40020458
 8006570:	40020470 	.word	0x40020470
 8006574:	40020488 	.word	0x40020488
 8006578:	400204a0 	.word	0x400204a0
 800657c:	400204b8 	.word	0x400204b8
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d160      	bne.n	800666c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a8c      	ldr	r2, [pc, #560]	; (80067e0 <HAL_DMA_IRQHandler+0xca8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d04a      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a8a      	ldr	r2, [pc, #552]	; (80067e4 <HAL_DMA_IRQHandler+0xcac>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d045      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a89      	ldr	r2, [pc, #548]	; (80067e8 <HAL_DMA_IRQHandler+0xcb0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d040      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a87      	ldr	r2, [pc, #540]	; (80067ec <HAL_DMA_IRQHandler+0xcb4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d03b      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a86      	ldr	r2, [pc, #536]	; (80067f0 <HAL_DMA_IRQHandler+0xcb8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d036      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a84      	ldr	r2, [pc, #528]	; (80067f4 <HAL_DMA_IRQHandler+0xcbc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d031      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a83      	ldr	r2, [pc, #524]	; (80067f8 <HAL_DMA_IRQHandler+0xcc0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d02c      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a81      	ldr	r2, [pc, #516]	; (80067fc <HAL_DMA_IRQHandler+0xcc4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d027      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a80      	ldr	r2, [pc, #512]	; (8006800 <HAL_DMA_IRQHandler+0xcc8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d022      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a7e      	ldr	r2, [pc, #504]	; (8006804 <HAL_DMA_IRQHandler+0xccc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01d      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7d      	ldr	r2, [pc, #500]	; (8006808 <HAL_DMA_IRQHandler+0xcd0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d018      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a7b      	ldr	r2, [pc, #492]	; (800680c <HAL_DMA_IRQHandler+0xcd4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a7a      	ldr	r2, [pc, #488]	; (8006810 <HAL_DMA_IRQHandler+0xcd8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00e      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a78      	ldr	r2, [pc, #480]	; (8006814 <HAL_DMA_IRQHandler+0xcdc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d009      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a77      	ldr	r2, [pc, #476]	; (8006818 <HAL_DMA_IRQHandler+0xce0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_DMA_IRQHandler+0xb12>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a75      	ldr	r2, [pc, #468]	; (800681c <HAL_DMA_IRQHandler+0xce4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <HAL_DMA_IRQHandler+0xb24>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0208 	bic.w	r2, r2, #8
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e007      	b.n	800666c <HAL_DMA_IRQHandler+0xb34>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0204 	bic.w	r2, r2, #4
 800666a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8165 	beq.w	8006940 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800667e:	e15f      	b.n	8006940 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2202      	movs	r2, #2
 800668a:	409a      	lsls	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80c5 	beq.w	8006820 <HAL_DMA_IRQHandler+0xce8>
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80bf 	beq.w	8006820 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	2202      	movs	r2, #2
 80066ac:	409a      	lsls	r2, r3
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 813a 	beq.w	8006944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066d8:	e134      	b.n	8006944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8130 	beq.w	8006944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066ec:	e12a      	b.n	8006944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d168      	bne.n	80067ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a38      	ldr	r2, [pc, #224]	; (80067e0 <HAL_DMA_IRQHandler+0xca8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d04a      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a37      	ldr	r2, [pc, #220]	; (80067e4 <HAL_DMA_IRQHandler+0xcac>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d045      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <HAL_DMA_IRQHandler+0xcb0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d040      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a34      	ldr	r2, [pc, #208]	; (80067ec <HAL_DMA_IRQHandler+0xcb4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d03b      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <HAL_DMA_IRQHandler+0xcb8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d036      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <HAL_DMA_IRQHandler+0xcbc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d031      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <HAL_DMA_IRQHandler+0xcc0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d02c      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <HAL_DMA_IRQHandler+0xcc4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d027      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <HAL_DMA_IRQHandler+0xcc8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2b      	ldr	r2, [pc, #172]	; (8006804 <HAL_DMA_IRQHandler+0xccc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01d      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <HAL_DMA_IRQHandler+0xcd0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <HAL_DMA_IRQHandler+0xcd4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a26      	ldr	r2, [pc, #152]	; (8006810 <HAL_DMA_IRQHandler+0xcd8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <HAL_DMA_IRQHandler+0xcdc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a23      	ldr	r2, [pc, #140]	; (8006818 <HAL_DMA_IRQHandler+0xce0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_DMA_IRQHandler+0xc60>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a22      	ldr	r2, [pc, #136]	; (800681c <HAL_DMA_IRQHandler+0xce4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d108      	bne.n	80067aa <HAL_DMA_IRQHandler+0xc72>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0214 	bic.w	r2, r2, #20
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e007      	b.n	80067ba <HAL_DMA_IRQHandler+0xc82>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 020a 	bic.w	r2, r2, #10
 80067b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 80b8 	beq.w	8006944 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067dc:	e0b2      	b.n	8006944 <HAL_DMA_IRQHandler+0xe0c>
 80067de:	bf00      	nop
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2208      	movs	r2, #8
 800682a:	409a      	lsls	r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8088 	beq.w	8006946 <HAL_DMA_IRQHandler+0xe0e>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8082 	beq.w	8006946 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a41      	ldr	r2, [pc, #260]	; (800694c <HAL_DMA_IRQHandler+0xe14>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d04a      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a3f      	ldr	r2, [pc, #252]	; (8006950 <HAL_DMA_IRQHandler+0xe18>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d045      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a3e      	ldr	r2, [pc, #248]	; (8006954 <HAL_DMA_IRQHandler+0xe1c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d040      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a3c      	ldr	r2, [pc, #240]	; (8006958 <HAL_DMA_IRQHandler+0xe20>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d03b      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a3b      	ldr	r2, [pc, #236]	; (800695c <HAL_DMA_IRQHandler+0xe24>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d036      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a39      	ldr	r2, [pc, #228]	; (8006960 <HAL_DMA_IRQHandler+0xe28>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d031      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a38      	ldr	r2, [pc, #224]	; (8006964 <HAL_DMA_IRQHandler+0xe2c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d02c      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a36      	ldr	r2, [pc, #216]	; (8006968 <HAL_DMA_IRQHandler+0xe30>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d027      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a35      	ldr	r2, [pc, #212]	; (800696c <HAL_DMA_IRQHandler+0xe34>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d022      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a33      	ldr	r2, [pc, #204]	; (8006970 <HAL_DMA_IRQHandler+0xe38>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01d      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a32      	ldr	r2, [pc, #200]	; (8006974 <HAL_DMA_IRQHandler+0xe3c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a30      	ldr	r2, [pc, #192]	; (8006978 <HAL_DMA_IRQHandler+0xe40>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2f      	ldr	r2, [pc, #188]	; (800697c <HAL_DMA_IRQHandler+0xe44>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2d      	ldr	r2, [pc, #180]	; (8006980 <HAL_DMA_IRQHandler+0xe48>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <HAL_DMA_IRQHandler+0xe4c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xdaa>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <HAL_DMA_IRQHandler+0xe50>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d108      	bne.n	80068f4 <HAL_DMA_IRQHandler+0xdbc>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 021c 	bic.w	r2, r2, #28
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e007      	b.n	8006904 <HAL_DMA_IRQHandler+0xdcc>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 020e 	bic.w	r2, r2, #14
 8006902:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
 800693a:	e004      	b.n	8006946 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006944:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006946:	3728      	adds	r7, #40	; 0x28
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40020010 	.word	0x40020010
 8006950:	40020028 	.word	0x40020028
 8006954:	40020040 	.word	0x40020040
 8006958:	40020058 	.word	0x40020058
 800695c:	40020070 	.word	0x40020070
 8006960:	40020088 	.word	0x40020088
 8006964:	400200a0 	.word	0x400200a0
 8006968:	400200b8 	.word	0x400200b8
 800696c:	40020410 	.word	0x40020410
 8006970:	40020428 	.word	0x40020428
 8006974:	40020440 	.word	0x40020440
 8006978:	40020458 	.word	0x40020458
 800697c:	40020470 	.word	0x40020470
 8006980:	40020488 	.word	0x40020488
 8006984:	400204a0 	.word	0x400204a0
 8006988:	400204b8 	.word	0x400204b8

0800698c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a84      	ldr	r2, [pc, #528]	; (8006bd4 <DMA_SetConfig+0x230>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d072      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a82      	ldr	r2, [pc, #520]	; (8006bd8 <DMA_SetConfig+0x234>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d06d      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a81      	ldr	r2, [pc, #516]	; (8006bdc <DMA_SetConfig+0x238>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d068      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a7f      	ldr	r2, [pc, #508]	; (8006be0 <DMA_SetConfig+0x23c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d063      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a7e      	ldr	r2, [pc, #504]	; (8006be4 <DMA_SetConfig+0x240>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d05e      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a7c      	ldr	r2, [pc, #496]	; (8006be8 <DMA_SetConfig+0x244>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d059      	beq.n	8006aae <DMA_SetConfig+0x10a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a7b      	ldr	r2, [pc, #492]	; (8006bec <DMA_SetConfig+0x248>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d054      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <DMA_SetConfig+0x24c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d04f      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a78      	ldr	r2, [pc, #480]	; (8006bf4 <DMA_SetConfig+0x250>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d04a      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <DMA_SetConfig+0x254>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d045      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a75      	ldr	r2, [pc, #468]	; (8006bfc <DMA_SetConfig+0x258>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d040      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a73      	ldr	r2, [pc, #460]	; (8006c00 <DMA_SetConfig+0x25c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d03b      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a72      	ldr	r2, [pc, #456]	; (8006c04 <DMA_SetConfig+0x260>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d036      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a70      	ldr	r2, [pc, #448]	; (8006c08 <DMA_SetConfig+0x264>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d031      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a6f      	ldr	r2, [pc, #444]	; (8006c0c <DMA_SetConfig+0x268>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d02c      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a6d      	ldr	r2, [pc, #436]	; (8006c10 <DMA_SetConfig+0x26c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a6c      	ldr	r2, [pc, #432]	; (8006c14 <DMA_SetConfig+0x270>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a6a      	ldr	r2, [pc, #424]	; (8006c18 <DMA_SetConfig+0x274>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a69      	ldr	r2, [pc, #420]	; (8006c1c <DMA_SetConfig+0x278>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a67      	ldr	r2, [pc, #412]	; (8006c20 <DMA_SetConfig+0x27c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a66      	ldr	r2, [pc, #408]	; (8006c24 <DMA_SetConfig+0x280>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a64      	ldr	r2, [pc, #400]	; (8006c28 <DMA_SetConfig+0x284>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a63      	ldr	r2, [pc, #396]	; (8006c2c <DMA_SetConfig+0x288>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <DMA_SetConfig+0x10a>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a61      	ldr	r2, [pc, #388]	; (8006c30 <DMA_SetConfig+0x28c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d101      	bne.n	8006ab2 <DMA_SetConfig+0x10e>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <DMA_SetConfig+0x110>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00d      	beq.n	8006ad4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ac0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ad2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a3e      	ldr	r2, [pc, #248]	; (8006bd4 <DMA_SetConfig+0x230>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d04a      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a3d      	ldr	r2, [pc, #244]	; (8006bd8 <DMA_SetConfig+0x234>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d045      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a3b      	ldr	r2, [pc, #236]	; (8006bdc <DMA_SetConfig+0x238>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d040      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a3a      	ldr	r2, [pc, #232]	; (8006be0 <DMA_SetConfig+0x23c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d03b      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a38      	ldr	r2, [pc, #224]	; (8006be4 <DMA_SetConfig+0x240>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d036      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a37      	ldr	r2, [pc, #220]	; (8006be8 <DMA_SetConfig+0x244>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d031      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a35      	ldr	r2, [pc, #212]	; (8006bec <DMA_SetConfig+0x248>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d02c      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a34      	ldr	r2, [pc, #208]	; (8006bf0 <DMA_SetConfig+0x24c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d027      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a32      	ldr	r2, [pc, #200]	; (8006bf4 <DMA_SetConfig+0x250>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d022      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a31      	ldr	r2, [pc, #196]	; (8006bf8 <DMA_SetConfig+0x254>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d01d      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2f      	ldr	r2, [pc, #188]	; (8006bfc <DMA_SetConfig+0x258>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d018      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2e      	ldr	r2, [pc, #184]	; (8006c00 <DMA_SetConfig+0x25c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d013      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <DMA_SetConfig+0x260>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00e      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2b      	ldr	r2, [pc, #172]	; (8006c08 <DMA_SetConfig+0x264>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d009      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <DMA_SetConfig+0x268>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <DMA_SetConfig+0x1d0>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <DMA_SetConfig+0x26c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d101      	bne.n	8006b78 <DMA_SetConfig+0x1d4>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <DMA_SetConfig+0x1d6>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d05a      	beq.n	8006c34 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	223f      	movs	r2, #63	; 0x3f
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d108      	bne.n	8006bc0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bbe:	e087      	b.n	8006cd0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]
}
 8006bd0:	e07e      	b.n	8006cd0 <DMA_SetConfig+0x32c>
 8006bd2:	bf00      	nop
 8006bd4:	40020010 	.word	0x40020010
 8006bd8:	40020028 	.word	0x40020028
 8006bdc:	40020040 	.word	0x40020040
 8006be0:	40020058 	.word	0x40020058
 8006be4:	40020070 	.word	0x40020070
 8006be8:	40020088 	.word	0x40020088
 8006bec:	400200a0 	.word	0x400200a0
 8006bf0:	400200b8 	.word	0x400200b8
 8006bf4:	40020410 	.word	0x40020410
 8006bf8:	40020428 	.word	0x40020428
 8006bfc:	40020440 	.word	0x40020440
 8006c00:	40020458 	.word	0x40020458
 8006c04:	40020470 	.word	0x40020470
 8006c08:	40020488 	.word	0x40020488
 8006c0c:	400204a0 	.word	0x400204a0
 8006c10:	400204b8 	.word	0x400204b8
 8006c14:	58025408 	.word	0x58025408
 8006c18:	5802541c 	.word	0x5802541c
 8006c1c:	58025430 	.word	0x58025430
 8006c20:	58025444 	.word	0x58025444
 8006c24:	58025458 	.word	0x58025458
 8006c28:	5802546c 	.word	0x5802546c
 8006c2c:	58025480 	.word	0x58025480
 8006c30:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a28      	ldr	r2, [pc, #160]	; (8006cdc <DMA_SetConfig+0x338>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a27      	ldr	r2, [pc, #156]	; (8006ce0 <DMA_SetConfig+0x33c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d01d      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a25      	ldr	r2, [pc, #148]	; (8006ce4 <DMA_SetConfig+0x340>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <DMA_SetConfig+0x344>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a22      	ldr	r2, [pc, #136]	; (8006cec <DMA_SetConfig+0x348>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a21      	ldr	r2, [pc, #132]	; (8006cf0 <DMA_SetConfig+0x34c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <DMA_SetConfig+0x350>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <DMA_SetConfig+0x2e0>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <DMA_SetConfig+0x354>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d101      	bne.n	8006c88 <DMA_SetConfig+0x2e4>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e000      	b.n	8006c8a <DMA_SetConfig+0x2e6>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d020      	beq.n	8006cd0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	2201      	movs	r2, #1
 8006c98:	409a      	lsls	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d108      	bne.n	8006cc0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	60da      	str	r2, [r3, #12]
}
 8006cbe:	e007      	b.n	8006cd0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	58025408 	.word	0x58025408
 8006ce0:	5802541c 	.word	0x5802541c
 8006ce4:	58025430 	.word	0x58025430
 8006ce8:	58025444 	.word	0x58025444
 8006cec:	58025458 	.word	0x58025458
 8006cf0:	5802546c 	.word	0x5802546c
 8006cf4:	58025480 	.word	0x58025480
 8006cf8:	58025494 	.word	0x58025494

08006cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a42      	ldr	r2, [pc, #264]	; (8006e14 <DMA_CalcBaseAndBitshift+0x118>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d04a      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a41      	ldr	r2, [pc, #260]	; (8006e18 <DMA_CalcBaseAndBitshift+0x11c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d045      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a3f      	ldr	r2, [pc, #252]	; (8006e1c <DMA_CalcBaseAndBitshift+0x120>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d040      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3e      	ldr	r2, [pc, #248]	; (8006e20 <DMA_CalcBaseAndBitshift+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d03b      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <DMA_CalcBaseAndBitshift+0x128>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d036      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <DMA_CalcBaseAndBitshift+0x12c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d031      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a39      	ldr	r2, [pc, #228]	; (8006e2c <DMA_CalcBaseAndBitshift+0x130>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d02c      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a38      	ldr	r2, [pc, #224]	; (8006e30 <DMA_CalcBaseAndBitshift+0x134>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d027      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a36      	ldr	r2, [pc, #216]	; (8006e34 <DMA_CalcBaseAndBitshift+0x138>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d01d      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <DMA_CalcBaseAndBitshift+0x140>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a32      	ldr	r2, [pc, #200]	; (8006e40 <DMA_CalcBaseAndBitshift+0x144>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <DMA_CalcBaseAndBitshift+0x148>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <DMA_CalcBaseAndBitshift+0x14c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <DMA_CalcBaseAndBitshift+0x150>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <DMA_CalcBaseAndBitshift+0x154>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <DMA_CalcBaseAndBitshift+0xac>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <DMA_CalcBaseAndBitshift+0xae>
 8006da8:	2300      	movs	r3, #0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d024      	beq.n	8006df8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	3b10      	subs	r3, #16
 8006db6:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <DMA_CalcBaseAndBitshift+0x158>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	091b      	lsrs	r3, r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <DMA_CalcBaseAndBitshift+0x15c>)
 8006dc8:	5cd3      	ldrb	r3, [r2, r3]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d908      	bls.n	8006de8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <DMA_CalcBaseAndBitshift+0x160>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	659a      	str	r2, [r3, #88]	; 0x58
 8006de6:	e00d      	b.n	8006e04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <DMA_CalcBaseAndBitshift+0x160>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6593      	str	r3, [r2, #88]	; 0x58
 8006df6:	e005      	b.n	8006e04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40020010 	.word	0x40020010
 8006e18:	40020028 	.word	0x40020028
 8006e1c:	40020040 	.word	0x40020040
 8006e20:	40020058 	.word	0x40020058
 8006e24:	40020070 	.word	0x40020070
 8006e28:	40020088 	.word	0x40020088
 8006e2c:	400200a0 	.word	0x400200a0
 8006e30:	400200b8 	.word	0x400200b8
 8006e34:	40020410 	.word	0x40020410
 8006e38:	40020428 	.word	0x40020428
 8006e3c:	40020440 	.word	0x40020440
 8006e40:	40020458 	.word	0x40020458
 8006e44:	40020470 	.word	0x40020470
 8006e48:	40020488 	.word	0x40020488
 8006e4c:	400204a0 	.word	0x400204a0
 8006e50:	400204b8 	.word	0x400204b8
 8006e54:	aaaaaaab 	.word	0xaaaaaaab
 8006e58:	08011f84 	.word	0x08011f84
 8006e5c:	fffffc00 	.word	0xfffffc00

08006e60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d120      	bne.n	8006eb6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d858      	bhi.n	8006f2e <DMA_CheckFifoParam+0xce>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <DMA_CheckFifoParam+0x24>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006ea7 	.word	0x08006ea7
 8006e8c:	08006e95 	.word	0x08006e95
 8006e90:	08006f2f 	.word	0x08006f2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d048      	beq.n	8006f32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ea4:	e045      	b.n	8006f32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eae:	d142      	bne.n	8006f36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006eb4:	e03f      	b.n	8006f36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebe:	d123      	bne.n	8006f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d838      	bhi.n	8006f3a <DMA_CheckFifoParam+0xda>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <DMA_CheckFifoParam+0x70>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee1 	.word	0x08006ee1
 8006ed4:	08006ee7 	.word	0x08006ee7
 8006ed8:	08006ee1 	.word	0x08006ee1
 8006edc:	08006ef9 	.word	0x08006ef9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
        break;
 8006ee4:	e030      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d025      	beq.n	8006f3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ef6:	e022      	b.n	8006f3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f00:	d11f      	bne.n	8006f42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f06:	e01c      	b.n	8006f42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d902      	bls.n	8006f16 <DMA_CheckFifoParam+0xb6>
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d003      	beq.n	8006f1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f14:	e018      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
        break;
 8006f1a:	e015      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00e      	beq.n	8006f46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e00b      	b.n	8006f46 <DMA_CheckFifoParam+0xe6>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e00a      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        break;
 8006f32:	bf00      	nop
 8006f34:	e008      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        break;
 8006f36:	bf00      	nop
 8006f38:	e006      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        break;
 8006f3a:	bf00      	nop
 8006f3c:	e004      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
        break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <DMA_CheckFifoParam+0xe8>
    break;
 8006f46:	bf00      	nop
    }
  }

  return status;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop

08006f58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d022      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a36      	ldr	r2, [pc, #216]	; (8007050 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01d      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a35      	ldr	r2, [pc, #212]	; (8007054 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d018      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a33      	ldr	r2, [pc, #204]	; (8007058 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d013      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a32      	ldr	r2, [pc, #200]	; (800705c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00e      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a30      	ldr	r2, [pc, #192]	; (8007060 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d101      	bne.n	8006fba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3b08      	subs	r3, #8
 8006fc8:	4a28      	ldr	r2, [pc, #160]	; (800706c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4b26      	ldr	r3, [pc, #152]	; (8007070 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a24      	ldr	r2, [pc, #144]	; (8007074 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006fe4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2201      	movs	r2, #1
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006ff4:	e024      	b.n	8007040 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3b10      	subs	r3, #16
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4a1c      	ldr	r2, [pc, #112]	; (800707c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d806      	bhi.n	800701e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d902      	bls.n	800701e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3308      	adds	r3, #8
 800701c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a16      	ldr	r2, [pc, #88]	; (8007088 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007030:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2201      	movs	r2, #1
 800703a:	409a      	lsls	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	58025408 	.word	0x58025408
 8007050:	5802541c 	.word	0x5802541c
 8007054:	58025430 	.word	0x58025430
 8007058:	58025444 	.word	0x58025444
 800705c:	58025458 	.word	0x58025458
 8007060:	5802546c 	.word	0x5802546c
 8007064:	58025480 	.word	0x58025480
 8007068:	58025494 	.word	0x58025494
 800706c:	cccccccd 	.word	0xcccccccd
 8007070:	16009600 	.word	0x16009600
 8007074:	58025880 	.word	0x58025880
 8007078:	aaaaaaab 	.word	0xaaaaaaab
 800707c:	400204b8 	.word	0x400204b8
 8007080:	4002040f 	.word	0x4002040f
 8007084:	10008200 	.word	0x10008200
 8007088:	40020880 	.word	0x40020880

0800708c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04a      	beq.n	8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d847      	bhi.n	8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d022      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d01d      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d101      	bne.n	80070fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80070fc:	2300      	movs	r3, #0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a15      	ldr	r2, [pc, #84]	; (8007168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007114:	671a      	str	r2, [r3, #112]	; 0x70
 8007116:	e009      	b.n	800712c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800712a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b01      	subs	r3, #1
 8007130:	2201      	movs	r2, #1
 8007132:	409a      	lsls	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	58025408 	.word	0x58025408
 8007148:	5802541c 	.word	0x5802541c
 800714c:	58025430 	.word	0x58025430
 8007150:	58025444 	.word	0x58025444
 8007154:	58025458 	.word	0x58025458
 8007158:	5802546c 	.word	0x5802546c
 800715c:	58025480 	.word	0x58025480
 8007160:	58025494 	.word	0x58025494
 8007164:	1600963f 	.word	0x1600963f
 8007168:	58025940 	.word	0x58025940
 800716c:	1000823f 	.word	0x1000823f
 8007170:	40020940 	.word	0x40020940

08007174 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e0c6      	b.n	8007314 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fc f93a 	bl	8003408 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2223      	movs	r2, #35	; 0x23
 8007198:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800719a:	4b60      	ldr	r3, [pc, #384]	; (800731c <HAL_ETH_Init+0x1a8>)
 800719c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a0:	4a5e      	ldr	r2, [pc, #376]	; (800731c <HAL_ETH_Init+0x1a8>)
 80071a2:	f043 0302 	orr.w	r3, r3, #2
 80071a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071aa:	4b5c      	ldr	r3, [pc, #368]	; (800731c <HAL_ETH_Init+0x1a8>)
 80071ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7a1b      	ldrb	r3, [r3, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80071c0:	2000      	movs	r0, #0
 80071c2:	f7fd f83b 	bl	800423c <HAL_SYSCFG_ETHInterfaceSelect>
 80071c6:	e003      	b.n	80071d0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80071c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80071cc:	f7fd f836 	bl	800423c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071e8:	f7fc ffec 	bl	80041c4 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80071ee:	e00f      	b.n	8007210 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80071f0:	f7fc ffe8 	bl	80041c4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071fe:	d907      	bls.n	8007210 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	22e0      	movs	r2, #224	; 0xe0
 800720a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e081      	b.n	8007314 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fc9c 	bl	8007b60 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007228:	f002 fd1c 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 800722c:	4603      	mov	r3, r0
 800722e:	4a3c      	ldr	r2, [pc, #240]	; (8007320 <HAL_ETH_Init+0x1ac>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	0c9a      	lsrs	r2, r3, #18
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3a01      	subs	r2, #1
 800723c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbef 	bl	8007a24 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800725c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007260:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	22e0      	movs	r2, #224	; 0xe0
 8007278:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e04a      	b.n	8007314 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	f241 1308 	movw	r3, #4360	; 0x1108
 8007286:	4413      	add	r3, r2
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <HAL_ETH_Init+0x1b0>)
 800728c:	4013      	ands	r3, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6952      	ldr	r2, [r2, #20]
 8007292:	0052      	lsls	r2, r2, #1
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	6809      	ldr	r1, [r1, #0]
 8007298:	431a      	orrs	r2, r3
 800729a:	f241 1308 	movw	r3, #4360	; 0x1108
 800729e:	440b      	add	r3, r1
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcb4 	bl	8007c10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fcf8 	bl	8007c9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	3305      	adds	r3, #5
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	021a      	lsls	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	4619      	mov	r1, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	3303      	adds	r3, #3
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	061a      	lsls	r2, r3, #24
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	3302      	adds	r3, #2
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	3301      	adds	r3, #1
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80072ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80072fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80072fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2210      	movs	r2, #16
 800730a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2210      	movs	r2, #16
 8007310:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	58024400 	.word	0x58024400
 8007320:	431bde83 	.word	0x431bde83
 8007324:	ffff8001 	.word	0xffff8001

08007328 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d113      	bne.n	800736a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	f241 1334 	movw	r3, #4404	; 0x1134
 800734a:	4413      	add	r3, r2
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d109      	bne.n	800736a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f8de 	bl	8007518 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007364:	f248 0240 	movw	r2, #32832	; 0x8040
 8007368:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b01      	cmp	r3, #1
 800737a:	d113      	bne.n	80073a4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	f241 1334 	movw	r3, #4404	; 0x1134
 8007384:	4413      	add	r3, r2
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d109      	bne.n	80073a4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8b7 	bl	8007504 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800739e:	f248 0201 	movw	r2, #32769	; 0x8001
 80073a2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073b6:	d149      	bne.n	800744c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f241 1334 	movw	r3, #4404	; 0x1134
 80073c0:	4413      	add	r3, r2
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073cc:	d13e      	bne.n	800744c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d2:	f043 0208 	orr.w	r2, r3, #8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ec:	d11b      	bne.n	8007426 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f241 1302 	movw	r3, #4354	; 0x1102
 80073fc:	4013      	ands	r3, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	f241 1334 	movw	r3, #4404	; 0x1134
 800740a:	4413      	add	r3, r2
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6811      	ldr	r1, [r2, #0]
 8007412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007416:	f241 1334 	movw	r3, #4404	; 0x1134
 800741a:	440b      	add	r3, r1
 800741c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	22e0      	movs	r2, #224	; 0xe0
 8007422:	66da      	str	r2, [r3, #108]	; 0x6c
 8007424:	e00f      	b.n	8007446 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007440:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8007444:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f870 	bl	800752c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007454:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007458:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800745c:	d10e      	bne.n	800747c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	22e0      	movs	r2, #224	; 0xe0
 800746e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f865 	bl	8007540 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b10      	cmp	r3, #16
 800748a:	d10f      	bne.n	80074ac <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007494:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f858 	bl	8007554 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d10f      	bne.n	80074dc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80074c4:	f003 020f 	and.w	r2, r3, #15
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f84a 	bl	8007568 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <HAL_ETH_IRQHandler+0x1d8>)
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <HAL_ETH_IRQHandler+0x1d8>)
 80074ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f843 	bl	800757c <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	58000080 	.word	0x58000080

08007504 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e03e      	b.n	8007630 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075ba:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	055b      	lsls	r3, r3, #21
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	041b      	lsls	r3, r3, #16
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f043 030c 	orr.w	r3, r3, #12
 80075de:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80075f2:	f7fc fde7 	bl	80041c4 <HAL_GetTick>
 80075f6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80075f8:	e009      	b.n	800760e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80075fa:	f7fc fde3 	bl	80041c4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007608:	d901      	bls.n	800760e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e010      	b.n	8007630 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1ed      	bne.n	80075fa <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007626:	b29b      	uxth	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e03c      	b.n	80076d4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007662:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	055b      	lsls	r3, r3, #21
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	041b      	lsls	r3, r3, #16
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 030c 	bic.w	r3, r3, #12
 8007686:	f043 0304 	orr.w	r3, r3, #4
 800768a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f043 0301 	orr.w	r3, r3, #1
 8007692:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	b29a      	uxth	r2, r3
 8007698:	4b10      	ldr	r3, [pc, #64]	; (80076dc <HAL_ETH_WritePHYRegister+0xa4>)
 800769a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800769e:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <HAL_ETH_WritePHYRegister+0xa4>)
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80076a6:	f7fc fd8d 	bl	80041c4 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80076ac:	e009      	b.n	80076c2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80076ae:	f7fc fd89 	bl	80041c4 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076bc:	d901      	bls.n	80076c2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e008      	b.n	80076d4 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1ed      	bne.n	80076ae <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40028000 	.word	0x40028000

080076e0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80076f2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80076fa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	7b1b      	ldrb	r3, [r3, #12]
 8007700:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007702:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	7b5b      	ldrb	r3, [r3, #13]
 8007708:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800770a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	7b9b      	ldrb	r3, [r3, #14]
 8007710:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007712:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7bdb      	ldrb	r3, [r3, #15]
 8007718:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800771a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	2a00      	cmp	r2, #0
 8007722:	d102      	bne.n	800772a <ETH_SetMACConfig+0x4a>
 8007724:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007728:	e000      	b.n	800772c <ETH_SetMACConfig+0x4c>
 800772a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800772c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	7c52      	ldrb	r2, [r2, #17]
 8007732:	2a00      	cmp	r2, #0
 8007734:	d102      	bne.n	800773c <ETH_SetMACConfig+0x5c>
 8007736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800773a:	e000      	b.n	800773e <ETH_SetMACConfig+0x5e>
 800773c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800773e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	7c9b      	ldrb	r3, [r3, #18]
 8007744:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007746:	431a      	orrs	r2, r3
                                macconf->Speed |
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800774c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8007752:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	7f1b      	ldrb	r3, [r3, #28]
 8007758:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800775a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	7f5b      	ldrb	r3, [r3, #29]
 8007760:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007762:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	7f92      	ldrb	r2, [r2, #30]
 8007768:	2a00      	cmp	r2, #0
 800776a:	d102      	bne.n	8007772 <ETH_SetMACConfig+0x92>
 800776c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007770:	e000      	b.n	8007774 <ETH_SetMACConfig+0x94>
 8007772:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007774:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	7fdb      	ldrb	r3, [r3, #31]
 800777a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800777c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007784:	2a00      	cmp	r2, #0
 8007786:	d102      	bne.n	800778e <ETH_SetMACConfig+0xae>
 8007788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800778c:	e000      	b.n	8007790 <ETH_SetMACConfig+0xb0>
 800778e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007790:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007796:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800779e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80077a0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b56      	ldr	r3, [pc, #344]	; (800790c <ETH_SetMACConfig+0x22c>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	68f9      	ldr	r1, [r7, #12]
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80077cc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077d4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80077d6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077de:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80077e0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	d102      	bne.n	80077f2 <ETH_SetMACConfig+0x112>
 80077ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077f0:	e000      	b.n	80077f4 <ETH_SetMACConfig+0x114>
 80077f2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80077f4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	4b42      	ldr	r3, [pc, #264]	; (8007910 <ETH_SetMACConfig+0x230>)
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	68f9      	ldr	r1, [r7, #12]
 800780e:	430b      	orrs	r3, r1
 8007810:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007818:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <ETH_SetMACConfig+0x234>)
 800782a:	4013      	ands	r3, r2
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	430b      	orrs	r3, r1
 8007834:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800783c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007842:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800784a:	2a00      	cmp	r2, #0
 800784c:	d101      	bne.n	8007852 <ETH_SetMACConfig+0x172>
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	e000      	b.n	8007854 <ETH_SetMACConfig+0x174>
 8007852:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007854:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007866:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800786a:	4013      	ands	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	430b      	orrs	r3, r1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800787c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007884:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007892:	f023 0103 	bic.w	r1, r3, #3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	430a      	orrs	r2, r1
 800789e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80078aa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	d101      	bne.n	80078ce <ETH_SetMACConfig+0x1ee>
 80078ca:	2240      	movs	r2, #64	; 0x40
 80078cc:	e000      	b.n	80078d0 <ETH_SetMACConfig+0x1f0>
 80078ce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80078d0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80078d8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80078da:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80078e2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80078f0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	00048083 	.word	0x00048083
 8007910:	c0f88000 	.word	0xc0f88000
 8007914:	fffffef0 	.word	0xfffffef0

08007918 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b38      	ldr	r3, [pc, #224]	; (8007a10 <ETH_SetDMAConfig+0xf8>)
 800792e:	4013      	ands	r3, r2
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	6809      	ldr	r1, [r1, #0]
 8007938:	431a      	orrs	r2, r3
 800793a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800793e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800794a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	7b1b      	ldrb	r3, [r3, #12]
 8007950:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	f241 0304 	movw	r3, #4100	; 0x1004
 800795e:	4413      	add	r3, r2
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <ETH_SetDMAConfig+0xfc>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6811      	ldr	r1, [r2, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	431a      	orrs	r2, r3
 800796e:	f241 0304 	movw	r3, #4100	; 0x1004
 8007972:	440b      	add	r3, r1
 8007974:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	7b5b      	ldrb	r3, [r3, #13]
 800797a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4b22      	ldr	r3, [pc, #136]	; (8007a18 <ETH_SetDMAConfig+0x100>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6811      	ldr	r1, [r2, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	431a      	orrs	r2, r3
 800799a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800799e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	7d1b      	ldrb	r3, [r3, #20]
 80079a8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80079aa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	7f5b      	ldrb	r3, [r3, #29]
 80079b0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	f241 1304 	movw	r3, #4356	; 0x1104
 80079be:	4413      	add	r3, r2
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <ETH_SetDMAConfig+0x104>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6811      	ldr	r1, [r2, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80079d2:	440b      	add	r3, r1
 80079d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	7f1b      	ldrb	r3, [r3, #28]
 80079da:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	f241 1308 	movw	r3, #4360	; 0x1108
 80079ec:	4413      	add	r3, r2
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <ETH_SetDMAConfig+0x108>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6811      	ldr	r1, [r2, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	f241 1308 	movw	r3, #4360	; 0x1108
 8007a00:	440b      	add	r3, r1
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	ffff87fd 	.word	0xffff87fd
 8007a14:	ffff2ffe 	.word	0xffff2ffe
 8007a18:	fffec000 	.word	0xfffec000
 8007a1c:	ffc0efef 	.word	0xffc0efef
 8007a20:	7fc0ffff 	.word	0x7fc0ffff

08007a24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b0a4      	sub	sp, #144	; 0x90
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007a32:	2300      	movs	r3, #0
 8007a34:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007a7c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007abc:	2320      	movs	r3, #32
 8007abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007ace:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ad8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007afe:	2300      	movs	r3, #0
 8007b00:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fde6 	bl	80076e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007b14:	2301      	movs	r3, #1
 8007b16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007b2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007b38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007b44:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fee1 	bl	8007918 <ETH_SetDMAConfig>
}
 8007b56:	bf00      	nop
 8007b58:	3790      	adds	r7, #144	; 0x90
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007b7a:	f002 f873 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 8007b7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a1e      	ldr	r2, [pc, #120]	; (8007bfc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d908      	bls.n	8007b9a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d804      	bhi.n	8007b9a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e027      	b.n	8007bea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d908      	bls.n	8007bb4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d204      	bcs.n	8007bb4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e01a      	b.n	8007bea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d303      	bcc.n	8007bc4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a12      	ldr	r2, [pc, #72]	; (8007c08 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d911      	bls.n	8007be8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4a10      	ldr	r2, [pc, #64]	; (8007c08 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d908      	bls.n	8007bde <ETH_MAC_MDIO_ClkConfig+0x7e>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d804      	bhi.n	8007bde <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e005      	b.n	8007bea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e000      	b.n	8007bea <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007be8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	01312cff 	.word	0x01312cff
 8007c00:	02160ebf 	.word	0x02160ebf
 8007c04:	03938700 	.word	0x03938700
 8007c08:	05f5e0ff 	.word	0x05f5e0ff
 8007c0c:	08f0d17f 	.word	0x08f0d17f

08007c10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e01d      	b.n	8007c5a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68d9      	ldr	r1, [r3, #12]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4613      	mov	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4413      	add	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	440b      	add	r3, r1
 8007c2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	3206      	adds	r2, #6
 8007c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d9de      	bls.n	8007c1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	f241 132c 	movw	r3, #4396	; 0x112c
 8007c6e:	4413      	add	r3, r2
 8007c70:	2203      	movs	r2, #3
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68d9      	ldr	r1, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f241 1314 	movw	r3, #4372	; 0x1114
 8007c80:	4413      	add	r3, r2
 8007c82:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e024      	b.n	8007cf6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6919      	ldr	r1, [r3, #16]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4413      	add	r3, r2
 8007cb8:	00db      	lsls	r3, r3, #3
 8007cba:	440b      	add	r3, r1
 8007cbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3310      	adds	r3, #16
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d9d7      	bls.n	8007cac <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	f241 1330 	movw	r3, #4400	; 0x1130
 8007d22:	4413      	add	r3, r2
 8007d24:	2203      	movs	r2, #3
 8007d26:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6919      	ldr	r1, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	f241 131c 	movw	r3, #4380	; 0x111c
 8007d34:	4413      	add	r3, r2
 8007d36:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f241 1328 	movw	r3, #4392	; 0x1128
 8007d48:	4413      	add	r3, r2
 8007d4a:	6019      	str	r1, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b089      	sub	sp, #36	; 0x24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d66:	4b89      	ldr	r3, [pc, #548]	; (8007f8c <HAL_GPIO_Init+0x234>)
 8007d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d6a:	e194      	b.n	8008096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	2101      	movs	r1, #1
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	4013      	ands	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8186 	beq.w	8008090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d00b      	beq.n	8007da4 <HAL_GPIO_Init+0x4c>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d007      	beq.n	8007da4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d98:	2b11      	cmp	r3, #17
 8007d9a:	d003      	beq.n	8007da4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b12      	cmp	r3, #18
 8007da2:	d130      	bne.n	8007e06 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	2203      	movs	r2, #3
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	43db      	mvns	r3, r3
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4013      	ands	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dda:	2201      	movs	r2, #1
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4013      	ands	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	091b      	lsrs	r3, r3, #4
 8007df0:	f003 0201 	and.w	r2, r3, #1
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	2203      	movs	r2, #3
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	43db      	mvns	r3, r3
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d003      	beq.n	8007e46 <HAL_GPIO_Init+0xee>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b12      	cmp	r3, #18
 8007e44:	d123      	bne.n	8007e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	08da      	lsrs	r2, r3, #3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3208      	adds	r2, #8
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4013      	ands	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	08da      	lsrs	r2, r3, #3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3208      	adds	r2, #8
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	2203      	movs	r2, #3
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0203 	and.w	r2, r3, #3
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80e0 	beq.w	8008090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ed0:	4b2f      	ldr	r3, [pc, #188]	; (8007f90 <HAL_GPIO_Init+0x238>)
 8007ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ed6:	4a2e      	ldr	r2, [pc, #184]	; (8007f90 <HAL_GPIO_Init+0x238>)
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	; (8007f90 <HAL_GPIO_Init+0x238>)
 8007ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eee:	4a29      	ldr	r2, [pc, #164]	; (8007f94 <HAL_GPIO_Init+0x23c>)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	089b      	lsrs	r3, r3, #2
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	220f      	movs	r2, #15
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a20      	ldr	r2, [pc, #128]	; (8007f98 <HAL_GPIO_Init+0x240>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d052      	beq.n	8007fc0 <HAL_GPIO_Init+0x268>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <HAL_GPIO_Init+0x244>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d031      	beq.n	8007f86 <HAL_GPIO_Init+0x22e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <HAL_GPIO_Init+0x248>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d02b      	beq.n	8007f82 <HAL_GPIO_Init+0x22a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <HAL_GPIO_Init+0x24c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d025      	beq.n	8007f7e <HAL_GPIO_Init+0x226>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1c      	ldr	r2, [pc, #112]	; (8007fa8 <HAL_GPIO_Init+0x250>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01f      	beq.n	8007f7a <HAL_GPIO_Init+0x222>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1b      	ldr	r2, [pc, #108]	; (8007fac <HAL_GPIO_Init+0x254>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d019      	beq.n	8007f76 <HAL_GPIO_Init+0x21e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <HAL_GPIO_Init+0x258>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <HAL_GPIO_Init+0x21a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <HAL_GPIO_Init+0x25c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00d      	beq.n	8007f6e <HAL_GPIO_Init+0x216>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <HAL_GPIO_Init+0x260>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <HAL_GPIO_Init+0x212>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <HAL_GPIO_Init+0x264>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d101      	bne.n	8007f66 <HAL_GPIO_Init+0x20e>
 8007f62:	2309      	movs	r3, #9
 8007f64:	e02d      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f66:	230a      	movs	r3, #10
 8007f68:	e02b      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f6a:	2308      	movs	r3, #8
 8007f6c:	e029      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f6e:	2307      	movs	r3, #7
 8007f70:	e027      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f72:	2306      	movs	r3, #6
 8007f74:	e025      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f76:	2305      	movs	r3, #5
 8007f78:	e023      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	e021      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e01f      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e01d      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e01b      	b.n	8007fc2 <HAL_GPIO_Init+0x26a>
 8007f8a:	bf00      	nop
 8007f8c:	58000080 	.word	0x58000080
 8007f90:	58024400 	.word	0x58024400
 8007f94:	58000400 	.word	0x58000400
 8007f98:	58020000 	.word	0x58020000
 8007f9c:	58020400 	.word	0x58020400
 8007fa0:	58020800 	.word	0x58020800
 8007fa4:	58020c00 	.word	0x58020c00
 8007fa8:	58021000 	.word	0x58021000
 8007fac:	58021400 	.word	0x58021400
 8007fb0:	58021800 	.word	0x58021800
 8007fb4:	58021c00 	.word	0x58021c00
 8007fb8:	58022000 	.word	0x58022000
 8007fbc:	58022400 	.word	0x58022400
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	f002 0203 	and.w	r2, r2, #3
 8007fc8:	0092      	lsls	r2, r2, #2
 8007fca:	4093      	lsls	r3, r2
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fd2:	4938      	ldr	r1, [pc, #224]	; (80080b4 <HAL_GPIO_Init+0x35c>)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	089b      	lsrs	r3, r3, #2
 8007fd8:	3302      	adds	r3, #2
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	4013      	ands	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	43db      	mvns	r3, r3
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	4013      	ands	r3, r2
 8008018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	43db      	mvns	r3, r3
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	4013      	ands	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800805a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	43db      	mvns	r3, r3
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4013      	ands	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f47f ae63 	bne.w	8007d6c <HAL_GPIO_Init+0x14>
  }
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	3724      	adds	r7, #36	; 0x24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	58000400 	.word	0x58000400

080080b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	887b      	ldrh	r3, [r7, #2]
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
 80080d4:	e001      	b.n	80080da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	807b      	strh	r3, [r7, #2]
 80080f4:	4613      	mov	r3, r2
 80080f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080f8:	787b      	ldrb	r3, [r7, #1]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080fe:	887a      	ldrh	r2, [r7, #2]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008104:	e003      	b.n	800810e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008106:	887b      	ldrh	r3, [r7, #2]
 8008108:	041a      	lsls	r2, r3, #16
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	619a      	str	r2, [r3, #24]
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008128:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d008      	beq.n	8008146 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 f804 	bl	800814e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	4603      	mov	r3, r0
 8008156:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e07f      	b.n	8008276 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb fa18 	bl	80035c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2224      	movs	r2, #36	; 0x24
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0201 	bic.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d107      	bne.n	80081de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	e006      	b.n	80081ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d104      	bne.n	80081fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6859      	ldr	r1, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <HAL_I2C_Init+0x11c>)
 800820a:	430b      	orrs	r3, r1
 800820c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800821c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	ea42 0103 	orr.w	r1, r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	021a      	lsls	r2, r3, #8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69d9      	ldr	r1, [r3, #28]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1a      	ldr	r2, [r3, #32]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	02008000 	.word	0x02008000

08008284 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	461a      	mov	r2, r3
 8008292:	4603      	mov	r3, r0
 8008294:	817b      	strh	r3, [r7, #10]
 8008296:	460b      	mov	r3, r1
 8008298:	813b      	strh	r3, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	f040 80f9 	bne.w	800849e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_I2C_Mem_Write+0x34>
 80082b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d105      	bne.n	80082c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e0ed      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_I2C_Mem_Write+0x4e>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e0e6      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082da:	f7fb ff73 	bl	80041c4 <HAL_GetTick>
 80082de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2319      	movs	r3, #25
 80082e6:	2201      	movs	r2, #1
 80082e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fadd 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0d1      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2221      	movs	r2, #33	; 0x21
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a3a      	ldr	r2, [r7, #32]
 8008316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800831c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008324:	88f8      	ldrh	r0, [r7, #6]
 8008326:	893a      	ldrh	r2, [r7, #8]
 8008328:	8979      	ldrh	r1, [r7, #10]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4603      	mov	r3, r0
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f9ed 	bl	8008714 <I2C_RequestMemoryWrite>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e0a9      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008350:	b29b      	uxth	r3, r3
 8008352:	2bff      	cmp	r3, #255	; 0xff
 8008354:	d90e      	bls.n	8008374 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008360:	b2da      	uxtb	r2, r3
 8008362:	8979      	ldrh	r1, [r7, #10]
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fbbf 	bl	8008af0 <I2C_TransferConfig>
 8008372:	e00f      	b.n	8008394 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008382:	b2da      	uxtb	r2, r3
 8008384:	8979      	ldrh	r1, [r7, #10]
 8008386:	2300      	movs	r3, #0
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fbae 	bl	8008af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fac7 	bl	800892c <I2C_WaitOnTXISFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e07b      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d034      	beq.n	800844c <HAL_I2C_Mem_Write+0x1c8>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d130      	bne.n	800844c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	2200      	movs	r2, #0
 80083f2:	2180      	movs	r1, #128	; 0x80
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fa59 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e04d      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	2bff      	cmp	r3, #255	; 0xff
 800840c:	d90e      	bls.n	800842c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	22ff      	movs	r2, #255	; 0xff
 8008412:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008418:	b2da      	uxtb	r2, r3
 800841a:	8979      	ldrh	r1, [r7, #10]
 800841c:	2300      	movs	r3, #0
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fb63 	bl	8008af0 <I2C_TransferConfig>
 800842a:	e00f      	b.n	800844c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843a:	b2da      	uxtb	r2, r3
 800843c:	8979      	ldrh	r1, [r7, #10]
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fb52 	bl	8008af0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d19e      	bne.n	8008394 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 faa6 	bl	80089ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e01a      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2220      	movs	r2, #32
 8008470:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6859      	ldr	r1, [r3, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <HAL_I2C_Mem_Write+0x224>)
 800847e:	400b      	ands	r3, r1
 8008480:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
  }
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	fe00e800 	.word	0xfe00e800

080084ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	4608      	mov	r0, r1
 80084b6:	4611      	mov	r1, r2
 80084b8:	461a      	mov	r2, r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	817b      	strh	r3, [r7, #10]
 80084be:	460b      	mov	r3, r1
 80084c0:	813b      	strh	r3, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	f040 80fd 	bne.w	80086ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <HAL_I2C_Mem_Read+0x34>
 80084da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d105      	bne.n	80084ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0f1      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_I2C_Mem_Read+0x4e>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e0ea      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008502:	f7fb fe5f 	bl	80041c4 <HAL_GetTick>
 8008506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	2319      	movs	r3, #25
 800850e:	2201      	movs	r2, #1
 8008510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f9c9 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0d5      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2222      	movs	r2, #34	; 0x22
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2240      	movs	r2, #64	; 0x40
 8008530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a3a      	ldr	r2, [r7, #32]
 800853e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800854c:	88f8      	ldrh	r0, [r7, #6]
 800854e:	893a      	ldrh	r2, [r7, #8]
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4603      	mov	r3, r0
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 f92d 	bl	80087bc <I2C_RequestMemoryRead>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e0ad      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008578:	b29b      	uxth	r3, r3
 800857a:	2bff      	cmp	r3, #255	; 0xff
 800857c:	d90e      	bls.n	800859c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	22ff      	movs	r2, #255	; 0xff
 8008582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008588:	b2da      	uxtb	r2, r3
 800858a:	8979      	ldrh	r1, [r7, #10]
 800858c:	4b52      	ldr	r3, [pc, #328]	; (80086d8 <HAL_I2C_Mem_Read+0x22c>)
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 faab 	bl	8008af0 <I2C_TransferConfig>
 800859a:	e00f      	b.n	80085bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	8979      	ldrh	r1, [r7, #10]
 80085ae:	4b4a      	ldr	r3, [pc, #296]	; (80086d8 <HAL_I2C_Mem_Read+0x22c>)
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 fa9a 	bl	8008af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	2200      	movs	r2, #0
 80085c4:	2104      	movs	r1, #4
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f970 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e07c      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d034      	beq.n	800867c <HAL_I2C_Mem_Read+0x1d0>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d130      	bne.n	800867c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	2200      	movs	r2, #0
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f941 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e04d      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2bff      	cmp	r3, #255	; 0xff
 800863c:	d90e      	bls.n	800865c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	22ff      	movs	r2, #255	; 0xff
 8008642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008648:	b2da      	uxtb	r2, r3
 800864a:	8979      	ldrh	r1, [r7, #10]
 800864c:	2300      	movs	r3, #0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fa4b 	bl	8008af0 <I2C_TransferConfig>
 800865a:	e00f      	b.n	800867c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866a:	b2da      	uxtb	r2, r3
 800866c:	8979      	ldrh	r1, [r7, #10]
 800866e:	2300      	movs	r3, #0
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 fa3a 	bl	8008af0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d19a      	bne.n	80085bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f98e 	bl	80089ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e01a      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2220      	movs	r2, #32
 80086a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6859      	ldr	r1, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <HAL_I2C_Mem_Read+0x230>)
 80086ae:	400b      	ands	r3, r1
 80086b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e000      	b.n	80086d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80086ce:	2302      	movs	r3, #2
  }
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	80002400 	.word	0x80002400
 80086dc:	fe00e800 	.word	0xfe00e800

080086e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
  }
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	4608      	mov	r0, r1
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4603      	mov	r3, r0
 8008724:	817b      	strh	r3, [r7, #10]
 8008726:	460b      	mov	r3, r1
 8008728:	813b      	strh	r3, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	8979      	ldrh	r1, [r7, #10]
 8008734:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <I2C_RequestMemoryWrite+0xa4>)
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f9d7 	bl	8008af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 f8f0 	bl	800892c <I2C_WaitOnTXISFlagUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e02c      	b.n	80087b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d105      	bne.n	8008768 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800875c:	893b      	ldrh	r3, [r7, #8]
 800875e:	b2da      	uxtb	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	629a      	str	r2, [r3, #40]	; 0x28
 8008766:	e015      	b.n	8008794 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008768:	893b      	ldrh	r3, [r7, #8]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	b29b      	uxth	r3, r3
 800876e:	b2da      	uxtb	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f8d6 	bl	800892c <I2C_WaitOnTXISFlagUntilTimeout>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e012      	b.n	80087b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	b2da      	uxtb	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2200      	movs	r2, #0
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f884 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	80002000 	.word	0x80002000

080087bc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	817b      	strh	r3, [r7, #10]
 80087ce:	460b      	mov	r3, r1
 80087d0:	813b      	strh	r3, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	8979      	ldrh	r1, [r7, #10]
 80087dc:	4b20      	ldr	r3, [pc, #128]	; (8008860 <I2C_RequestMemoryRead+0xa4>)
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	2300      	movs	r3, #0
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f984 	bl	8008af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	69b9      	ldr	r1, [r7, #24]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f89d 	bl	800892c <I2C_WaitOnTXISFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e02c      	b.n	8008856 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d105      	bne.n	800880e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008802:	893b      	ldrh	r3, [r7, #8]
 8008804:	b2da      	uxtb	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	629a      	str	r2, [r3, #40]	; 0x28
 800880c:	e015      	b.n	800883a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800880e:	893b      	ldrh	r3, [r7, #8]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	b29b      	uxth	r3, r3
 8008814:	b2da      	uxtb	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	69b9      	ldr	r1, [r7, #24]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f883 	bl	800892c <I2C_WaitOnTXISFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e012      	b.n	8008856 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008830:	893b      	ldrh	r3, [r7, #8]
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2200      	movs	r2, #0
 8008842:	2140      	movs	r1, #64	; 0x40
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f831 	bl	80088ac <I2C_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	80002000 	.word	0x80002000

08008864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b02      	cmp	r3, #2
 8008878:	d103      	bne.n	8008882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b01      	cmp	r3, #1
 800888e:	d007      	beq.n	80088a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	619a      	str	r2, [r3, #24]
  }
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	4613      	mov	r3, r2
 80088ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088bc:	e022      	b.n	8008904 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d01e      	beq.n	8008904 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c6:	f7fb fc7d 	bl	80041c4 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d302      	bcc.n	80088dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d113      	bne.n	8008904 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e0:	f043 0220 	orr.w	r2, r3, #32
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e00f      	b.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699a      	ldr	r2, [r3, #24]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	4013      	ands	r3, r2
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	429a      	cmp	r2, r3
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	429a      	cmp	r2, r3
 8008920:	d0cd      	beq.n	80088be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008938:	e02c      	b.n	8008994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f870 	bl	8008a24 <I2C_IsAcknowledgeFailed>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e02a      	b.n	80089a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d01e      	beq.n	8008994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008956:	f7fb fc35 	bl	80041c4 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d113      	bne.n	8008994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e007      	b.n	80089a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d1cb      	bne.n	800893a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b8:	e028      	b.n	8008a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f830 	bl	8008a24 <I2C_IsAcknowledgeFailed>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e026      	b.n	8008a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ce:	f7fb fbf9 	bl	80041c4 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d302      	bcc.n	80089e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d113      	bne.n	8008a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e8:	f043 0220 	orr.w	r2, r3, #32
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e007      	b.n	8008a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d1cf      	bne.n	80089ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f003 0310 	and.w	r3, r3, #16
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d151      	bne.n	8008ae2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a3e:	e022      	b.n	8008a86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d01e      	beq.n	8008a86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a48:	f7fb fbbc 	bl	80041c4 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d302      	bcc.n	8008a5e <I2C_IsAcknowledgeFailed+0x3a>
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d113      	bne.n	8008a86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e02e      	b.n	8008ae4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d1d5      	bne.n	8008a40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2210      	movs	r2, #16
 8008a9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff fedd 	bl	8008864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6859      	ldr	r1, [r3, #4]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <I2C_IsAcknowledgeFailed+0xc8>)
 8008ab6:	400b      	ands	r3, r1
 8008ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	f043 0204 	orr.w	r2, r3, #4
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	fe00e800 	.word	0xfe00e800

08008af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	817b      	strh	r3, [r7, #10]
 8008afe:	4613      	mov	r3, r2
 8008b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	0d5b      	lsrs	r3, r3, #21
 8008b0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b10:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <I2C_TransferConfig+0x58>)
 8008b12:	430b      	orrs	r3, r1
 8008b14:	43db      	mvns	r3, r3
 8008b16:	ea02 0103 	and.w	r1, r2, r3
 8008b1a:	897b      	ldrh	r3, [r7, #10]
 8008b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008b20:	7a7b      	ldrb	r3, [r7, #9]
 8008b22:	041b      	lsls	r3, r3, #16
 8008b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	431a      	orrs	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	03ff63ff 	.word	0x03ff63ff

08008b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d138      	bne.n	8008bd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e032      	b.n	8008bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2224      	movs	r2, #36	; 0x24
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0201 	orr.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e000      	b.n	8008bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bd4:	2302      	movs	r3, #2
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d139      	bne.n	8008c6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e033      	b.n	8008c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2224      	movs	r2, #36	; 0x24
 8008c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0201 	bic.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e000      	b.n	8008c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c6c:	2302      	movs	r3, #2
  }
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
	...

08008c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c84:	4b19      	ldr	r3, [pc, #100]	; (8008cec <HAL_PWREx_ConfigSupply+0x70>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d00a      	beq.n	8008ca6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c90:	4b16      	ldr	r3, [pc, #88]	; (8008cec <HAL_PWREx_ConfigSupply+0x70>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d001      	beq.n	8008ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e01f      	b.n	8008ce2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e01d      	b.n	8008ce2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ca6:	4b11      	ldr	r3, [pc, #68]	; (8008cec <HAL_PWREx_ConfigSupply+0x70>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f023 0207 	bic.w	r2, r3, #7
 8008cae:	490f      	ldr	r1, [pc, #60]	; (8008cec <HAL_PWREx_ConfigSupply+0x70>)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008cb6:	f7fb fa85 	bl	80041c4 <HAL_GetTick>
 8008cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cbc:	e009      	b.n	8008cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cbe:	f7fb fa81 	bl	80041c4 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ccc:	d901      	bls.n	8008cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e007      	b.n	8008ce2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <HAL_PWREx_ConfigSupply+0x70>)
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cde:	d1ee      	bne.n	8008cbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	58024800 	.word	0x58024800

08008cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08c      	sub	sp, #48	; 0x30
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e3ff      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 8087 	beq.w	8008e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d10:	4b99      	ldr	r3, [pc, #612]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d1a:	4b97      	ldr	r3, [pc, #604]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d007      	beq.n	8008d36 <HAL_RCC_OscConfig+0x46>
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2b18      	cmp	r3, #24
 8008d2a:	d110      	bne.n	8008d4e <HAL_RCC_OscConfig+0x5e>
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d10b      	bne.n	8008d4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d36:	4b90      	ldr	r3, [pc, #576]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d06c      	beq.n	8008e1c <HAL_RCC_OscConfig+0x12c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d168      	bne.n	8008e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e3d9      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d56:	d106      	bne.n	8008d66 <HAL_RCC_OscConfig+0x76>
 8008d58:	4b87      	ldr	r3, [pc, #540]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a86      	ldr	r2, [pc, #536]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	e02e      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd4>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x98>
 8008d6e:	4b82      	ldr	r3, [pc, #520]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a81      	ldr	r2, [pc, #516]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	4b7f      	ldr	r3, [pc, #508]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7e      	ldr	r2, [pc, #504]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	e01d      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd4>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d90:	d10c      	bne.n	8008dac <HAL_RCC_OscConfig+0xbc>
 8008d92:	4b79      	ldr	r3, [pc, #484]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a78      	ldr	r2, [pc, #480]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	4b76      	ldr	r3, [pc, #472]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a75      	ldr	r2, [pc, #468]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e00b      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd4>
 8008dac:	4b72      	ldr	r3, [pc, #456]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a71      	ldr	r2, [pc, #452]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	4b6f      	ldr	r3, [pc, #444]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a6e      	ldr	r2, [pc, #440]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d013      	beq.n	8008df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dcc:	f7fb f9fa 	bl	80041c4 <HAL_GetTick>
 8008dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dd2:	e008      	b.n	8008de6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dd4:	f7fb f9f6 	bl	80041c4 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b64      	cmp	r3, #100	; 0x64
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e38d      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008de6:	4b64      	ldr	r3, [pc, #400]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0f0      	beq.n	8008dd4 <HAL_RCC_OscConfig+0xe4>
 8008df2:	e014      	b.n	8008e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df4:	f7fb f9e6 	bl	80041c4 <HAL_GetTick>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dfc:	f7fb f9e2 	bl	80041c4 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	; 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e379      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e0e:	4b5a      	ldr	r3, [pc, #360]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f0      	bne.n	8008dfc <HAL_RCC_OscConfig+0x10c>
 8008e1a:	e000      	b.n	8008e1e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80ae 	beq.w	8008f88 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e2c:	4b52      	ldr	r3, [pc, #328]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e36:	4b50      	ldr	r3, [pc, #320]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <HAL_RCC_OscConfig+0x162>
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	2b18      	cmp	r3, #24
 8008e46:	d13a      	bne.n	8008ebe <HAL_RCC_OscConfig+0x1ce>
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d135      	bne.n	8008ebe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e52:	4b49      	ldr	r3, [pc, #292]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <HAL_RCC_OscConfig+0x17a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e34b      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e6a:	f7fb f9db 	bl	8004224 <HAL_GetREVID>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d817      	bhi.n	8008ea8 <HAL_RCC_OscConfig+0x1b8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d108      	bne.n	8008e92 <HAL_RCC_OscConfig+0x1a2>
 8008e80:	4b3d      	ldr	r3, [pc, #244]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e88:	4a3b      	ldr	r2, [pc, #236]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e90:	e07a      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e92:	4b39      	ldr	r3, [pc, #228]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	031b      	lsls	r3, r3, #12
 8008ea0:	4935      	ldr	r1, [pc, #212]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ea6:	e06f      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ea8:	4b33      	ldr	r3, [pc, #204]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	061b      	lsls	r3, r3, #24
 8008eb6:	4930      	ldr	r1, [pc, #192]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ebc:	e064      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d045      	beq.n	8008f52 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ec6:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f023 0219 	bic.w	r2, r3, #25
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	4929      	ldr	r1, [pc, #164]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7fb f974 	bl	80041c4 <HAL_GetTick>
 8008edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ee0:	f7fb f970 	bl	80041c4 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e307      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ef2:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0f0      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008efe:	f7fb f991 	bl	8004224 <HAL_GetREVID>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d817      	bhi.n	8008f3c <HAL_RCC_OscConfig+0x24c>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b40      	cmp	r3, #64	; 0x40
 8008f12:	d108      	bne.n	8008f26 <HAL_RCC_OscConfig+0x236>
 8008f14:	4b18      	ldr	r3, [pc, #96]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f1c:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f22:	6053      	str	r3, [r2, #4]
 8008f24:	e030      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	031b      	lsls	r3, r3, #12
 8008f34:	4910      	ldr	r1, [pc, #64]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	604b      	str	r3, [r1, #4]
 8008f3a:	e025      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
 8008f3c:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	061b      	lsls	r3, r3, #24
 8008f4a:	490b      	ldr	r1, [pc, #44]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	604b      	str	r3, [r1, #4]
 8008f50:	e01a      	b.n	8008f88 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f52:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a08      	ldr	r2, [pc, #32]	; (8008f78 <HAL_RCC_OscConfig+0x288>)
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5e:	f7fb f931 	bl	80041c4 <HAL_GetTick>
 8008f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f64:	e00a      	b.n	8008f7c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f66:	f7fb f92d 	bl	80041c4 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d903      	bls.n	8008f7c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e2c4      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
 8008f78:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f7c:	4ba4      	ldr	r3, [pc, #656]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ee      	bne.n	8008f66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a9 	beq.w	80090e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f96:	4b9e      	ldr	r3, [pc, #632]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fa0:	4b9b      	ldr	r3, [pc, #620]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d007      	beq.n	8008fbc <HAL_RCC_OscConfig+0x2cc>
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b18      	cmp	r3, #24
 8008fb0:	d13a      	bne.n	8009028 <HAL_RCC_OscConfig+0x338>
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d135      	bne.n	8009028 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fbc:	4b94      	ldr	r3, [pc, #592]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x2e4>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	2b80      	cmp	r3, #128	; 0x80
 8008fce:	d001      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e296      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fd4:	f7fb f926 	bl	8004224 <HAL_GetREVID>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d817      	bhi.n	8009012 <HAL_RCC_OscConfig+0x322>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d108      	bne.n	8008ffc <HAL_RCC_OscConfig+0x30c>
 8008fea:	4b89      	ldr	r3, [pc, #548]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ff2:	4a87      	ldr	r2, [pc, #540]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ffa:	e075      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ffc:	4b84      	ldr	r3, [pc, #528]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	069b      	lsls	r3, r3, #26
 800900a:	4981      	ldr	r1, [pc, #516]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009010:	e06a      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009012:	4b7f      	ldr	r3, [pc, #508]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	061b      	lsls	r3, r3, #24
 8009020:	497b      	ldr	r1, [pc, #492]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009022:	4313      	orrs	r3, r2
 8009024:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009026:	e05f      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d042      	beq.n	80090b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009030:	4b77      	ldr	r3, [pc, #476]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a76      	ldr	r2, [pc, #472]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800903c:	f7fb f8c2 	bl	80041c4 <HAL_GetTick>
 8009040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009042:	e008      	b.n	8009056 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009044:	f7fb f8be 	bl	80041c4 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e255      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009056:	4b6e      	ldr	r3, [pc, #440]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0f0      	beq.n	8009044 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009062:	f7fb f8df 	bl	8004224 <HAL_GetREVID>
 8009066:	4603      	mov	r3, r0
 8009068:	f241 0203 	movw	r2, #4099	; 0x1003
 800906c:	4293      	cmp	r3, r2
 800906e:	d817      	bhi.n	80090a0 <HAL_RCC_OscConfig+0x3b0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	2b20      	cmp	r3, #32
 8009076:	d108      	bne.n	800908a <HAL_RCC_OscConfig+0x39a>
 8009078:	4b65      	ldr	r3, [pc, #404]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009080:	4a63      	ldr	r2, [pc, #396]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e02e      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
 800908a:	4b61      	ldr	r3, [pc, #388]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	069b      	lsls	r3, r3, #26
 8009098:	495d      	ldr	r1, [pc, #372]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800909a:	4313      	orrs	r3, r2
 800909c:	604b      	str	r3, [r1, #4]
 800909e:	e023      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
 80090a0:	4b5b      	ldr	r3, [pc, #364]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	061b      	lsls	r3, r3, #24
 80090ae:	4958      	ldr	r1, [pc, #352]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60cb      	str	r3, [r1, #12]
 80090b4:	e018      	b.n	80090e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090b6:	4b56      	ldr	r3, [pc, #344]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a55      	ldr	r2, [pc, #340]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c2:	f7fb f87f 	bl	80041c4 <HAL_GetTick>
 80090c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090ca:	f7fb f87b 	bl	80041c4 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e212      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090dc:	4b4c      	ldr	r3, [pc, #304]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1f0      	bne.n	80090ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d036      	beq.n	8009162 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d019      	beq.n	8009130 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090fc:	4b44      	ldr	r3, [pc, #272]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80090fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009100:	4a43      	ldr	r2, [pc, #268]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009108:	f7fb f85c 	bl	80041c4 <HAL_GetTick>
 800910c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009110:	f7fb f858 	bl	80041c4 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e1ef      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009122:	4b3b      	ldr	r3, [pc, #236]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0f0      	beq.n	8009110 <HAL_RCC_OscConfig+0x420>
 800912e:	e018      	b.n	8009162 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009130:	4b37      	ldr	r3, [pc, #220]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009134:	4a36      	ldr	r2, [pc, #216]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009136:	f023 0301 	bic.w	r3, r3, #1
 800913a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913c:	f7fb f842 	bl	80041c4 <HAL_GetTick>
 8009140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009142:	e008      	b.n	8009156 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009144:	f7fb f83e 	bl	80041c4 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b02      	cmp	r3, #2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e1d5      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009156:	4b2e      	ldr	r3, [pc, #184]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f0      	bne.n	8009144 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d036      	beq.n	80091dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d019      	beq.n	80091aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009176:	4b26      	ldr	r3, [pc, #152]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a25      	ldr	r2, [pc, #148]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800917c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009182:	f7fb f81f 	bl	80041c4 <HAL_GetTick>
 8009186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009188:	e008      	b.n	800919c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800918a:	f7fb f81b 	bl	80041c4 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d901      	bls.n	800919c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e1b2      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800919c:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0f0      	beq.n	800918a <HAL_RCC_OscConfig+0x49a>
 80091a8:	e018      	b.n	80091dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091aa:	4b19      	ldr	r3, [pc, #100]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a18      	ldr	r2, [pc, #96]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80091b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091b6:	f7fb f805 	bl	80041c4 <HAL_GetTick>
 80091ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091be:	f7fb f801 	bl	80041c4 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e198      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <HAL_RCC_OscConfig+0x520>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8085 	beq.w	80092f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091ea:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <HAL_RCC_OscConfig+0x524>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a09      	ldr	r2, [pc, #36]	; (8009214 <HAL_RCC_OscConfig+0x524>)
 80091f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091f6:	f7fa ffe5 	bl	80041c4 <HAL_GetTick>
 80091fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091fc:	e00c      	b.n	8009218 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091fe:	f7fa ffe1 	bl	80041c4 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b64      	cmp	r3, #100	; 0x64
 800920a:	d905      	bls.n	8009218 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e178      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
 8009210:	58024400 	.word	0x58024400
 8009214:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009218:	4b96      	ldr	r3, [pc, #600]	; (8009474 <HAL_RCC_OscConfig+0x784>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0ec      	beq.n	80091fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d106      	bne.n	800923a <HAL_RCC_OscConfig+0x54a>
 800922c:	4b92      	ldr	r3, [pc, #584]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009230:	4a91      	ldr	r2, [pc, #580]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	6713      	str	r3, [r2, #112]	; 0x70
 8009238:	e02d      	b.n	8009296 <HAL_RCC_OscConfig+0x5a6>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10c      	bne.n	800925c <HAL_RCC_OscConfig+0x56c>
 8009242:	4b8d      	ldr	r3, [pc, #564]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	4a8c      	ldr	r2, [pc, #560]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6713      	str	r3, [r2, #112]	; 0x70
 800924e:	4b8a      	ldr	r3, [pc, #552]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	4a89      	ldr	r2, [pc, #548]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009254:	f023 0304 	bic.w	r3, r3, #4
 8009258:	6713      	str	r3, [r2, #112]	; 0x70
 800925a:	e01c      	b.n	8009296 <HAL_RCC_OscConfig+0x5a6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b05      	cmp	r3, #5
 8009262:	d10c      	bne.n	800927e <HAL_RCC_OscConfig+0x58e>
 8009264:	4b84      	ldr	r3, [pc, #528]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009268:	4a83      	ldr	r2, [pc, #524]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800926a:	f043 0304 	orr.w	r3, r3, #4
 800926e:	6713      	str	r3, [r2, #112]	; 0x70
 8009270:	4b81      	ldr	r3, [pc, #516]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009274:	4a80      	ldr	r2, [pc, #512]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	6713      	str	r3, [r2, #112]	; 0x70
 800927c:	e00b      	b.n	8009296 <HAL_RCC_OscConfig+0x5a6>
 800927e:	4b7e      	ldr	r3, [pc, #504]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	4a7d      	ldr	r2, [pc, #500]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	6713      	str	r3, [r2, #112]	; 0x70
 800928a:	4b7b      	ldr	r3, [pc, #492]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	4a7a      	ldr	r2, [pc, #488]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009290:	f023 0304 	bic.w	r3, r3, #4
 8009294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d015      	beq.n	80092ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929e:	f7fa ff91 	bl	80041c4 <HAL_GetTick>
 80092a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092a4:	e00a      	b.n	80092bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092a6:	f7fa ff8d 	bl	80041c4 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e122      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092bc:	4b6e      	ldr	r3, [pc, #440]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80092be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0ee      	beq.n	80092a6 <HAL_RCC_OscConfig+0x5b6>
 80092c8:	e014      	b.n	80092f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ca:	f7fa ff7b 	bl	80041c4 <HAL_GetTick>
 80092ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092d0:	e00a      	b.n	80092e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092d2:	f7fa ff77 	bl	80041c4 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e10c      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092e8:	4b63      	ldr	r3, [pc, #396]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80092ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1ee      	bne.n	80092d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8101 	beq.w	8009500 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092fe:	4b5e      	ldr	r3, [pc, #376]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009306:	2b18      	cmp	r3, #24
 8009308:	f000 80bc 	beq.w	8009484 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b02      	cmp	r3, #2
 8009312:	f040 8095 	bne.w	8009440 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009316:	4b58      	ldr	r3, [pc, #352]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a57      	ldr	r2, [pc, #348]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800931c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009322:	f7fa ff4f 	bl	80041c4 <HAL_GetTick>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800932a:	f7fa ff4b 	bl	80041c4 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e0e2      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800933c:	4b4e      	ldr	r3, [pc, #312]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f0      	bne.n	800932a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009348:	4b4b      	ldr	r3, [pc, #300]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800934a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800934c:	4b4b      	ldr	r3, [pc, #300]	; (800947c <HAL_RCC_OscConfig+0x78c>)
 800934e:	4013      	ands	r3, r2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009358:	0112      	lsls	r2, r2, #4
 800935a:	430a      	orrs	r2, r1
 800935c:	4946      	ldr	r1, [pc, #280]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800935e:	4313      	orrs	r3, r2
 8009360:	628b      	str	r3, [r1, #40]	; 0x28
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	3b01      	subs	r3, #1
 8009368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	3b01      	subs	r3, #1
 8009372:	025b      	lsls	r3, r3, #9
 8009374:	b29b      	uxth	r3, r3
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	3b01      	subs	r3, #1
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	3b01      	subs	r3, #1
 800938c:	061b      	lsls	r3, r3, #24
 800938e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009392:	4939      	ldr	r1, [pc, #228]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009394:	4313      	orrs	r3, r2
 8009396:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009398:	4b37      	ldr	r3, [pc, #220]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	4a36      	ldr	r2, [pc, #216]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800939e:	f023 0301 	bic.w	r3, r3, #1
 80093a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093a4:	4b34      	ldr	r3, [pc, #208]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <HAL_RCC_OscConfig+0x790>)
 80093aa:	4013      	ands	r3, r2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093b0:	00d2      	lsls	r2, r2, #3
 80093b2:	4931      	ldr	r1, [pc, #196]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093b8:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	f023 020c 	bic.w	r2, r3, #12
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	492c      	ldr	r1, [pc, #176]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093ca:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	f023 0202 	bic.w	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d6:	4928      	ldr	r1, [pc, #160]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093dc:	4b26      	ldr	r3, [pc, #152]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	4a25      	ldr	r2, [pc, #148]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	4a22      	ldr	r2, [pc, #136]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093f4:	4b20      	ldr	r3, [pc, #128]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	4a1f      	ldr	r2, [pc, #124]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 80093fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009400:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a1c      	ldr	r2, [pc, #112]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a19      	ldr	r2, [pc, #100]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009418:	f7fa fed4 	bl	80041c4 <HAL_GetTick>
 800941c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800941e:	e008      	b.n	8009432 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009420:	f7fa fed0 	bl	80041c4 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e067      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f0      	beq.n	8009420 <HAL_RCC_OscConfig+0x730>
 800943e:	e05f      	b.n	8009500 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0c      	ldr	r2, [pc, #48]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944c:	f7fa feba 	bl	80041c4 <HAL_GetTick>
 8009450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009454:	f7fa feb6 	bl	80041c4 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e04d      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <HAL_RCC_OscConfig+0x788>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0x764>
 8009472:	e045      	b.n	8009500 <HAL_RCC_OscConfig+0x810>
 8009474:	58024800 	.word	0x58024800
 8009478:	58024400 	.word	0x58024400
 800947c:	fffffc0c 	.word	0xfffffc0c
 8009480:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009484:	4b21      	ldr	r3, [pc, #132]	; (800950c <HAL_RCC_OscConfig+0x81c>)
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800948a:	4b20      	ldr	r3, [pc, #128]	; (800950c <HAL_RCC_OscConfig+0x81c>)
 800948c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b01      	cmp	r3, #1
 8009496:	d031      	beq.n	80094fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f003 0203 	and.w	r2, r3, #3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d12a      	bne.n	80094fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d122      	bne.n	80094fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d11a      	bne.n	80094fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	0a5b      	lsrs	r3, r3, #9
 80094ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d111      	bne.n	80094fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d108      	bne.n	80094fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d001      	beq.n	8009500 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3730      	adds	r7, #48	; 0x30
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	58024400 	.word	0x58024400

08009510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e19c      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009524:	4b8a      	ldr	r3, [pc, #552]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d910      	bls.n	8009554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009532:	4b87      	ldr	r3, [pc, #540]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f023 020f 	bic.w	r2, r3, #15
 800953a:	4985      	ldr	r1, [pc, #532]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009542:	4b83      	ldr	r3, [pc, #524]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d001      	beq.n	8009554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e184      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d010      	beq.n	8009582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	4b7b      	ldr	r3, [pc, #492]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800956c:	429a      	cmp	r2, r3
 800956e:	d908      	bls.n	8009582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009570:	4b78      	ldr	r3, [pc, #480]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	4975      	ldr	r1, [pc, #468]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 800957e:	4313      	orrs	r3, r2
 8009580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d010      	beq.n	80095b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695a      	ldr	r2, [r3, #20]
 8009592:	4b70      	ldr	r3, [pc, #448]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800959a:	429a      	cmp	r2, r3
 800959c:	d908      	bls.n	80095b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800959e:	4b6d      	ldr	r3, [pc, #436]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	496a      	ldr	r1, [pc, #424]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	4b64      	ldr	r3, [pc, #400]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d908      	bls.n	80095de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095cc:	4b61      	ldr	r3, [pc, #388]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	495e      	ldr	r1, [pc, #376]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69da      	ldr	r2, [r3, #28]
 80095ee:	4b59      	ldr	r3, [pc, #356]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d908      	bls.n	800960c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095fa:	4b56      	ldr	r3, [pc, #344]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	4953      	ldr	r1, [pc, #332]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009608:	4313      	orrs	r3, r2
 800960a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	4b4d      	ldr	r3, [pc, #308]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	429a      	cmp	r2, r3
 8009626:	d908      	bls.n	800963a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009628:	4b4a      	ldr	r3, [pc, #296]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f023 020f 	bic.w	r2, r3, #15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	4947      	ldr	r1, [pc, #284]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009636:	4313      	orrs	r3, r2
 8009638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d055      	beq.n	80096f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009646:	4b43      	ldr	r3, [pc, #268]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	4940      	ldr	r1, [pc, #256]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009654:	4313      	orrs	r3, r2
 8009656:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d107      	bne.n	8009670 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009660:	4b3c      	ldr	r3, [pc, #240]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d121      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e0f6      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2b03      	cmp	r3, #3
 8009676:	d107      	bne.n	8009688 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009678:	4b36      	ldr	r3, [pc, #216]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d115      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e0ea      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d107      	bne.n	80096a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009690:	4b30      	ldr	r3, [pc, #192]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0de      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a0:	4b2c      	ldr	r3, [pc, #176]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0d6      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096b0:	4b28      	ldr	r3, [pc, #160]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f023 0207 	bic.w	r2, r3, #7
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4925      	ldr	r1, [pc, #148]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c2:	f7fa fd7f 	bl	80041c4 <HAL_GetTick>
 80096c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c8:	e00a      	b.n	80096e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ca:	f7fa fd7b 	bl	80041c4 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e0be      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e0:	4b1c      	ldr	r3, [pc, #112]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d1eb      	bne.n	80096ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	429a      	cmp	r2, r3
 800970c:	d208      	bcs.n	8009720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800970e:	4b11      	ldr	r3, [pc, #68]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f023 020f 	bic.w	r2, r3, #15
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	490e      	ldr	r1, [pc, #56]	; (8009754 <HAL_RCC_ClockConfig+0x244>)
 800971c:	4313      	orrs	r3, r2
 800971e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009720:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 030f 	and.w	r3, r3, #15
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d214      	bcs.n	8009758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800972e:	4b08      	ldr	r3, [pc, #32]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f023 020f 	bic.w	r2, r3, #15
 8009736:	4906      	ldr	r1, [pc, #24]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	4313      	orrs	r3, r2
 800973c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <HAL_RCC_ClockConfig+0x240>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d005      	beq.n	8009758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e086      	b.n	800985e <HAL_RCC_ClockConfig+0x34e>
 8009750:	52002000 	.word	0x52002000
 8009754:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d010      	beq.n	8009786 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	4b3f      	ldr	r3, [pc, #252]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009770:	429a      	cmp	r2, r3
 8009772:	d208      	bcs.n	8009786 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009774:	4b3c      	ldr	r3, [pc, #240]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	4939      	ldr	r1, [pc, #228]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009782:	4313      	orrs	r3, r2
 8009784:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d010      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	695a      	ldr	r2, [r3, #20]
 8009796:	4b34      	ldr	r3, [pc, #208]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800979e:	429a      	cmp	r2, r3
 80097a0:	d208      	bcs.n	80097b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097a2:	4b31      	ldr	r3, [pc, #196]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	492e      	ldr	r1, [pc, #184]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d010      	beq.n	80097e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	4b28      	ldr	r3, [pc, #160]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d208      	bcs.n	80097e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097d0:	4b25      	ldr	r3, [pc, #148]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	4922      	ldr	r1, [pc, #136]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d010      	beq.n	8009810 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69da      	ldr	r2, [r3, #28]
 80097f2:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d208      	bcs.n	8009810 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	4917      	ldr	r1, [pc, #92]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 800980c:	4313      	orrs	r3, r2
 800980e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009810:	f000 f8ae 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 8009814:	4602      	mov	r2, r0
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	4912      	ldr	r1, [pc, #72]	; (800986c <HAL_RCC_ClockConfig+0x35c>)
 8009822:	5ccb      	ldrb	r3, [r1, r3]
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800982e:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <HAL_RCC_ClockConfig+0x358>)
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	4a0d      	ldr	r2, [pc, #52]	; (800986c <HAL_RCC_ClockConfig+0x35c>)
 8009838:	5cd3      	ldrb	r3, [r2, r3]
 800983a:	f003 031f 	and.w	r3, r3, #31
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	fa22 f303 	lsr.w	r3, r2, r3
 8009844:	4a0a      	ldr	r2, [pc, #40]	; (8009870 <HAL_RCC_ClockConfig+0x360>)
 8009846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009848:	4a0a      	ldr	r2, [pc, #40]	; (8009874 <HAL_RCC_ClockConfig+0x364>)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800984e:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <HAL_RCC_ClockConfig+0x368>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f7fa fc6c 	bl	8004130 <HAL_InitTick>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	58024400 	.word	0x58024400
 800986c:	08011f74 	.word	0x08011f74
 8009870:	20000004 	.word	0x20000004
 8009874:	20000000 	.word	0x20000000
 8009878:	20000008 	.word	0x20000008

0800987c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08c      	sub	sp, #48	; 0x30
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d12a      	bne.n	80098e4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800988e:	4b2d      	ldr	r3, [pc, #180]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 8009890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009894:	4a2b      	ldr	r2, [pc, #172]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 8009896:	f043 0301 	orr.w	r3, r3, #1
 800989a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800989e:	4b29      	ldr	r3, [pc, #164]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80098ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b2:	2302      	movs	r3, #2
 80098b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098b6:	2303      	movs	r3, #3
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80098be:	2300      	movs	r3, #0
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80098c2:	f107 031c 	add.w	r3, r7, #28
 80098c6:	4619      	mov	r1, r3
 80098c8:	481f      	ldr	r0, [pc, #124]	; (8009948 <HAL_RCC_MCOConfig+0xcc>)
 80098ca:	f7fe fa45 	bl	8007d58 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80098ce:	4b1d      	ldr	r3, [pc, #116]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	430b      	orrs	r3, r1
 80098dc:	4919      	ldr	r1, [pc, #100]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80098e2:	e02a      	b.n	800993a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80098e4:	4b17      	ldr	r3, [pc, #92]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ea:	4a16      	ldr	r2, [pc, #88]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098ec:	f043 0304 	orr.w	r3, r3, #4
 80098f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098f4:	4b13      	ldr	r3, [pc, #76]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 80098f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009908:	2302      	movs	r3, #2
 800990a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800990c:	2303      	movs	r3, #3
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009910:	2300      	movs	r3, #0
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009914:	2300      	movs	r3, #0
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009918:	f107 031c 	add.w	r3, r7, #28
 800991c:	4619      	mov	r1, r3
 800991e:	480b      	ldr	r0, [pc, #44]	; (800994c <HAL_RCC_MCOConfig+0xd0>)
 8009920:	f7fe fa1a 	bl	8007d58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	01d9      	lsls	r1, r3, #7
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	430b      	orrs	r3, r1
 8009934:	4903      	ldr	r1, [pc, #12]	; (8009944 <HAL_RCC_MCOConfig+0xc8>)
 8009936:	4313      	orrs	r3, r2
 8009938:	610b      	str	r3, [r1, #16]
}
 800993a:	bf00      	nop
 800993c:	3730      	adds	r7, #48	; 0x30
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
 8009948:	58020000 	.word	0x58020000
 800994c:	58020800 	.word	0x58020800

08009950 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009950:	b480      	push	{r7}
 8009952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <HAL_RCC_EnableCSS+0x1c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a04      	ldr	r2, [pc, #16]	; (800996c <HAL_RCC_EnableCSS+0x1c>)
 800995a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800995e:	6013      	str	r3, [r2, #0]
}
 8009960:	bf00      	nop
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	58024400 	.word	0x58024400

08009970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009970:	b480      	push	{r7}
 8009972:	b089      	sub	sp, #36	; 0x24
 8009974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009976:	4bb3      	ldr	r3, [pc, #716]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997e:	2b18      	cmp	r3, #24
 8009980:	f200 8155 	bhi.w	8009c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8009984:	a201      	add	r2, pc, #4	; (adr r2, 800998c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	080099f1 	.word	0x080099f1
 8009990:	08009c2f 	.word	0x08009c2f
 8009994:	08009c2f 	.word	0x08009c2f
 8009998:	08009c2f 	.word	0x08009c2f
 800999c:	08009c2f 	.word	0x08009c2f
 80099a0:	08009c2f 	.word	0x08009c2f
 80099a4:	08009c2f 	.word	0x08009c2f
 80099a8:	08009c2f 	.word	0x08009c2f
 80099ac:	08009a17 	.word	0x08009a17
 80099b0:	08009c2f 	.word	0x08009c2f
 80099b4:	08009c2f 	.word	0x08009c2f
 80099b8:	08009c2f 	.word	0x08009c2f
 80099bc:	08009c2f 	.word	0x08009c2f
 80099c0:	08009c2f 	.word	0x08009c2f
 80099c4:	08009c2f 	.word	0x08009c2f
 80099c8:	08009c2f 	.word	0x08009c2f
 80099cc:	08009a1d 	.word	0x08009a1d
 80099d0:	08009c2f 	.word	0x08009c2f
 80099d4:	08009c2f 	.word	0x08009c2f
 80099d8:	08009c2f 	.word	0x08009c2f
 80099dc:	08009c2f 	.word	0x08009c2f
 80099e0:	08009c2f 	.word	0x08009c2f
 80099e4:	08009c2f 	.word	0x08009c2f
 80099e8:	08009c2f 	.word	0x08009c2f
 80099ec:	08009a23 	.word	0x08009a23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099f0:	4b94      	ldr	r3, [pc, #592]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099fc:	4b91      	ldr	r3, [pc, #580]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	08db      	lsrs	r3, r3, #3
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	4a90      	ldr	r2, [pc, #576]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
 8009a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a0e:	e111      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a10:	4b8d      	ldr	r3, [pc, #564]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a12:	61bb      	str	r3, [r7, #24]
    break;
 8009a14:	e10e      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a16:	4b8d      	ldr	r3, [pc, #564]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a18:	61bb      	str	r3, [r7, #24]
    break;
 8009a1a:	e10b      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a1c:	4b8c      	ldr	r3, [pc, #560]	; (8009c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a1e:	61bb      	str	r3, [r7, #24]
    break;
 8009a20:	e108      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a22:	4b88      	ldr	r3, [pc, #544]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a2c:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	091b      	lsrs	r3, r3, #4
 8009a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a38:	4b82      	ldr	r3, [pc, #520]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a42:	4b80      	ldr	r3, [pc, #512]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80e1 	beq.w	8009c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	f000 8083 	beq.w	8009b74 <HAL_RCC_GetSysClockFreq+0x204>
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f200 80a1 	bhi.w	8009bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <HAL_RCC_GetSysClockFreq+0x114>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d056      	beq.n	8009b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a82:	e099      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a84:	4b6f      	ldr	r3, [pc, #444]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02d      	beq.n	8009aec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a90:	4b6c      	ldr	r3, [pc, #432]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a6b      	ldr	r2, [pc, #428]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b62      	ldr	r3, [pc, #392]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ace:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009aea:	e087      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b51      	ldr	r3, [pc, #324]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e065      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b40      	ldr	r3, [pc, #256]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e043      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	e021      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009bfc:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	0a5b      	lsrs	r3, r3, #9
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	3301      	adds	r3, #1
 8009c08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c20:	ee17 3a90 	vmov	r3, s15
 8009c24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c26:	e005      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]
    break;
 8009c2c:	e002      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c30:	61bb      	str	r3, [r7, #24]
    break;
 8009c32:	bf00      	nop
  }

  return sysclockfreq;
 8009c34:	69bb      	ldr	r3, [r7, #24]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	03d09000 	.word	0x03d09000
 8009c4c:	003d0900 	.word	0x003d0900
 8009c50:	017d7840 	.word	0x017d7840
 8009c54:	46000000 	.word	0x46000000
 8009c58:	4c742400 	.word	0x4c742400
 8009c5c:	4a742400 	.word	0x4a742400
 8009c60:	4bbebc20 	.word	0x4bbebc20

08009c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c6a:	f7ff fe81 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	0a1b      	lsrs	r3, r3, #8
 8009c76:	f003 030f 	and.w	r3, r3, #15
 8009c7a:	490f      	ldr	r1, [pc, #60]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c7c:	5ccb      	ldrb	r3, [r1, r3]
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	fa22 f303 	lsr.w	r3, r2, r3
 8009c86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9e:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009ca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ca2:	4a07      	ldr	r2, [pc, #28]	; (8009cc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009caa:	681b      	ldr	r3, [r3, #0]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	08011f74 	.word	0x08011f74
 8009cbc:	20000004 	.word	0x20000004
 8009cc0:	20000000 	.word	0x20000000

08009cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009cc8:	f7ff ffcc 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	091b      	lsrs	r3, r3, #4
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cda:	5ccb      	ldrb	r3, [r1, r3]
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	58024400 	.word	0x58024400
 8009cec:	08011f74 	.word	0x08011f74

08009cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009cf4:	f7ff ffb6 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4904      	ldr	r1, [pc, #16]	; (8009d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	58024400 	.word	0x58024400
 8009d18:	08011f74 	.word	0x08011f74

08009d1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009d20:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2c:	d105      	bne.n	8009d3a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8009d2e:	f000 f809 	bl	8009d44 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009d32:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d38:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8009d3a:	bf00      	nop
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	58024400 	.word	0x58024400

08009d44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d60:	2300      	movs	r3, #0
 8009d62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d03f      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d78:	d02a      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d7e:	d824      	bhi.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d84:	d018      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d8a:	d81e      	bhi.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d94:	d007      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009d96:	e018      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d98:	4bab      	ldr	r3, [pc, #684]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	4aaa      	ldr	r2, [pc, #680]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009da4:	e015      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3304      	adds	r3, #4
 8009daa:	2102      	movs	r1, #2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 fff3 	bl	800bd98 <RCCEx_PLL2_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009db6:	e00c      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3324      	adds	r3, #36	; 0x24
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 f89c 	bl	800befc <RCCEx_PLL3_Config>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dc8:	e003      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dce:	e000      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009dd8:	4b9b      	ldr	r3, [pc, #620]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009de4:	4998      	ldr	r1, [pc, #608]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	650b      	str	r3, [r1, #80]	; 0x50
 8009dea:	e001      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d03d      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d826      	bhi.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e21 	.word	0x08009e21
 8009e10:	08009e2f 	.word	0x08009e2f
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	08009e59 	.word	0x08009e59
 8009e1c:	08009e59 	.word	0x08009e59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e20:	4b89      	ldr	r3, [pc, #548]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	4a88      	ldr	r2, [pc, #544]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e2c:	e015      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 ffaf 	bl	800bd98 <RCCEx_PLL2_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e3e:	e00c      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3324      	adds	r3, #36	; 0x24
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f002 f858 	bl	800befc <RCCEx_PLL3_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	75fb      	strb	r3, [r7, #23]
      break;
 8009e56:	e000      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d109      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e60:	4b79      	ldr	r3, [pc, #484]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e64:	f023 0207 	bic.w	r2, r3, #7
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6c:	4976      	ldr	r1, [pc, #472]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	650b      	str	r3, [r1, #80]	; 0x50
 8009e72:	e001      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d042      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e8c:	d02b      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e92:	d825      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e94:	2bc0      	cmp	r3, #192	; 0xc0
 8009e96:	d028      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009e98:	2bc0      	cmp	r3, #192	; 0xc0
 8009e9a:	d821      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e9c:	2b80      	cmp	r3, #128	; 0x80
 8009e9e:	d016      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d81d      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d007      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009eac:	e018      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eae:	4b66      	ldr	r3, [pc, #408]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	4a65      	ldr	r2, [pc, #404]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009eba:	e017      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 ff68 	bl	800bd98 <RCCEx_PLL2_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ecc:	e00e      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3324      	adds	r3, #36	; 0x24
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f002 f811 	bl	800befc <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ede:	e005      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	e002      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e000      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ef2:	4b55      	ldr	r3, [pc, #340]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efe:	4952      	ldr	r1, [pc, #328]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	650b      	str	r3, [r1, #80]	; 0x50
 8009f04:	e001      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d049      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f20:	d030      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f26:	d82a      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f2c:	d02c      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f32:	d824      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f38:	d018      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f3e:	d81e      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f48:	d007      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f4a:	e018      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4c:	4b3e      	ldr	r3, [pc, #248]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	4a3d      	ldr	r2, [pc, #244]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f58:	e017      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	2100      	movs	r1, #0
 8009f60:	4618      	mov	r0, r3
 8009f62:	f001 ff19 	bl	800bd98 <RCCEx_PLL2_Config>
 8009f66:	4603      	mov	r3, r0
 8009f68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f6a:	e00e      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3324      	adds	r3, #36	; 0x24
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 ffc2 	bl	800befc <RCCEx_PLL3_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f7c:	e005      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	75fb      	strb	r3, [r7, #23]
      break;
 8009f82:	e002      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f90:	4b2d      	ldr	r3, [pc, #180]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f9e:	492a      	ldr	r1, [pc, #168]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8009fa4:	e001      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d04c      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fc0:	d030      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fc6:	d82a      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fcc:	d02c      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fd2:	d824      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fd8:	d018      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fde:	d81e      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fe8:	d007      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009fea:	e018      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fec:	4b16      	ldr	r3, [pc, #88]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	4a15      	ldr	r2, [pc, #84]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ff8:	e017      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f001 fec9 	bl	800bd98 <RCCEx_PLL2_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a00a:	e00e      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3324      	adds	r3, #36	; 0x24
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f001 ff72 	bl	800befc <RCCEx_PLL3_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a01c:	e005      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]
      break;
 800a022:	e002      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10d      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a034:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a03e:	4902      	ldr	r1, [pc, #8]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a040:	4313      	orrs	r3, r2
 800a042:	658b      	str	r3, [r1, #88]	; 0x58
 800a044:	e004      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a046:	bf00      	nop
 800a048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d032      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a060:	2b30      	cmp	r3, #48	; 0x30
 800a062:	d01c      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a064:	2b30      	cmp	r3, #48	; 0x30
 800a066:	d817      	bhi.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d00c      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	d813      	bhi.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d016      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a074:	2b10      	cmp	r3, #16
 800a076:	d10f      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a078:	4baf      	ldr	r3, [pc, #700]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	4aae      	ldr	r2, [pc, #696]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a084:	e00e      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3304      	adds	r3, #4
 800a08a:	2102      	movs	r1, #2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 fe83 	bl	800bd98 <RCCEx_PLL2_Config>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a096:	e005      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	75fb      	strb	r3, [r7, #23]
      break;
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a0a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a0aa:	4ba3      	ldr	r3, [pc, #652]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0b6:	49a0      	ldr	r1, [pc, #640]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0bc:	e001      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d047      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d6:	d030      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a0d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0dc:	d82a      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0e2:	d02c      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a0e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0e8:	d824      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ee:	d018      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f4:	d81e      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fe:	d007      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a100:	e018      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a102:	4b8d      	ldr	r3, [pc, #564]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	4a8c      	ldr	r2, [pc, #560]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a10c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a10e:	e017      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	2100      	movs	r1, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f001 fe3e 	bl	800bd98 <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a120:	e00e      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3324      	adds	r3, #36	; 0x24
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 fee7 	bl	800befc <RCCEx_PLL3_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a132:	e005      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
      break;
 800a138:	e002      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a13e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a146:	4b7c      	ldr	r3, [pc, #496]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a152:	4979      	ldr	r1, [pc, #484]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a154:	4313      	orrs	r3, r2
 800a156:	650b      	str	r3, [r1, #80]	; 0x50
 800a158:	e001      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d049      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a16e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a172:	d02e      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a178:	d828      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a17a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a17e:	d02a      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a180:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a184:	d822      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a186:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a18a:	d026      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a18c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a190:	d81c      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a196:	d010      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a19c:	d816      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01d      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1a6:	d111      	bne.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 fdf2 	bl	800bd98 <RCCEx_PLL2_Config>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1b8:	e012      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3324      	adds	r3, #36	; 0x24
 800a1be:	2101      	movs	r1, #1
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f001 fe9b 	bl	800befc <RCCEx_PLL3_Config>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1ca:	e009      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e004      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1d6:	bf00      	nop
 800a1d8:	e002      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1e6:	4b54      	ldr	r3, [pc, #336]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f2:	4951      	ldr	r1, [pc, #324]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	650b      	str	r3, [r1, #80]	; 0x50
 800a1f8:	e001      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d04b      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a214:	d02e      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a21a:	d828      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a220:	d02a      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a226:	d822      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a22c:	d026      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a22e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a232:	d81c      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a238:	d010      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23e:	d816      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01d      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a248:	d111      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3304      	adds	r3, #4
 800a24e:	2101      	movs	r1, #1
 800a250:	4618      	mov	r0, r3
 800a252:	f001 fda1 	bl	800bd98 <RCCEx_PLL2_Config>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a25a:	e012      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3324      	adds	r3, #36	; 0x24
 800a260:	2101      	movs	r1, #1
 800a262:	4618      	mov	r0, r3
 800a264:	f001 fe4a 	bl	800befc <RCCEx_PLL3_Config>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a26c:	e009      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	75fb      	strb	r3, [r7, #23]
      break;
 800a272:	e006      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a274:	bf00      	nop
 800a276:	e004      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a278:	bf00      	nop
 800a27a:	e002      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a27c:	bf00      	nop
 800a27e:	e000      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a280:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a288:	4b2b      	ldr	r3, [pc, #172]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a296:	4928      	ldr	r1, [pc, #160]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	658b      	str	r3, [r1, #88]	; 0x58
 800a29c:	e001      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d02f      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b6:	d00e      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2bc:	d814      	bhi.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d015      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a2c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2c6:	d10f      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	4a1a      	ldr	r2, [pc, #104]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2d4:	e00c      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	2101      	movs	r1, #1
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f001 fd5b 	bl	800bd98 <RCCEx_PLL2_Config>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2e6:	e003      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ec:	e000      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d109      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2f6:	4b10      	ldr	r3, [pc, #64]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a302:	490d      	ldr	r1, [pc, #52]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a304:	4313      	orrs	r3, r2
 800a306:	650b      	str	r3, [r1, #80]	; 0x50
 800a308:	e001      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d033      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d81c      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a322:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a363 	.word	0x0800a363
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a34b 	.word	0x0800a34b
 800a334:	0800a363 	.word	0x0800a363
 800a338:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a33c:	4bb8      	ldr	r3, [pc, #736]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4ab7      	ldr	r2, [pc, #732]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a348:	e00c      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3304      	adds	r3, #4
 800a34e:	2102      	movs	r1, #2
 800a350:	4618      	mov	r0, r3
 800a352:	f001 fd21 	bl	800bd98 <RCCEx_PLL2_Config>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a35a:	e003      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	75fb      	strb	r3, [r7, #23]
      break;
 800a360:	e000      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a362:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d109      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a36a:	4bad      	ldr	r3, [pc, #692]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	f023 0203 	bic.w	r2, r3, #3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a376:	49aa      	ldr	r1, [pc, #680]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a37c:	e001      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 8086 	beq.w	800a49c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a390:	4ba4      	ldr	r3, [pc, #656]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4aa3      	ldr	r2, [pc, #652]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a39a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a39c:	f7f9 ff12 	bl	80041c4 <HAL_GetTick>
 800a3a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3a2:	e009      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3a4:	f7f9 ff0e 	bl	80041c4 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b64      	cmp	r3, #100	; 0x64
 800a3b0:	d902      	bls.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	75fb      	strb	r3, [r7, #23]
        break;
 800a3b6:	e005      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3b8:	4b9a      	ldr	r3, [pc, #616]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0ef      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d166      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3ca:	4b95      	ldr	r3, [pc, #596]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3d4:	4053      	eors	r3, r2
 800a3d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d013      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3de:	4b90      	ldr	r3, [pc, #576]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3e8:	4b8d      	ldr	r3, [pc, #564]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ec:	4a8c      	ldr	r2, [pc, #560]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3f4:	4b8a      	ldr	r3, [pc, #552]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f8:	4a89      	ldr	r2, [pc, #548]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a400:	4a87      	ldr	r2, [pc, #540]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a410:	d115      	bne.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a412:	f7f9 fed7 	bl	80041c4 <HAL_GetTick>
 800a416:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a418:	e00b      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a41a:	f7f9 fed3 	bl	80041c4 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	f241 3288 	movw	r2, #5000	; 0x1388
 800a428:	4293      	cmp	r3, r2
 800a42a:	d902      	bls.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	75fb      	strb	r3, [r7, #23]
            break;
 800a430:	e005      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a432:	4b7b      	ldr	r3, [pc, #492]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0ed      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d126      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a44a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a44e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a452:	d10d      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a454:	4b72      	ldr	r3, [pc, #456]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a462:	0919      	lsrs	r1, r3, #4
 800a464:	4b70      	ldr	r3, [pc, #448]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a466:	400b      	ands	r3, r1
 800a468:	496d      	ldr	r1, [pc, #436]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	610b      	str	r3, [r1, #16]
 800a46e:	e005      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a470:	4b6b      	ldr	r3, [pc, #428]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	4a6a      	ldr	r2, [pc, #424]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a476:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a47a:	6113      	str	r3, [r2, #16]
 800a47c:	4b68      	ldr	r3, [pc, #416]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a47e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a48a:	4965      	ldr	r1, [pc, #404]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	670b      	str	r3, [r1, #112]	; 0x70
 800a490:	e004      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	75bb      	strb	r3, [r7, #22]
 800a496:	e001      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d07e      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ac:	2b28      	cmp	r3, #40	; 0x28
 800a4ae:	d867      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a587 	.word	0x0800a587
 800a4bc:	0800a581 	.word	0x0800a581
 800a4c0:	0800a581 	.word	0x0800a581
 800a4c4:	0800a581 	.word	0x0800a581
 800a4c8:	0800a581 	.word	0x0800a581
 800a4cc:	0800a581 	.word	0x0800a581
 800a4d0:	0800a581 	.word	0x0800a581
 800a4d4:	0800a581 	.word	0x0800a581
 800a4d8:	0800a55d 	.word	0x0800a55d
 800a4dc:	0800a581 	.word	0x0800a581
 800a4e0:	0800a581 	.word	0x0800a581
 800a4e4:	0800a581 	.word	0x0800a581
 800a4e8:	0800a581 	.word	0x0800a581
 800a4ec:	0800a581 	.word	0x0800a581
 800a4f0:	0800a581 	.word	0x0800a581
 800a4f4:	0800a581 	.word	0x0800a581
 800a4f8:	0800a56f 	.word	0x0800a56f
 800a4fc:	0800a581 	.word	0x0800a581
 800a500:	0800a581 	.word	0x0800a581
 800a504:	0800a581 	.word	0x0800a581
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a581 	.word	0x0800a581
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a587 	.word	0x0800a587
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a581 	.word	0x0800a581
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a587 	.word	0x0800a587
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a581 	.word	0x0800a581
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a581 	.word	0x0800a581
 800a550:	0800a581 	.word	0x0800a581
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a587 	.word	0x0800a587
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	2101      	movs	r1, #1
 800a562:	4618      	mov	r0, r3
 800a564:	f001 fc18 	bl	800bd98 <RCCEx_PLL2_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a56c:	e00c      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3324      	adds	r3, #36	; 0x24
 800a572:	2101      	movs	r1, #1
 800a574:	4618      	mov	r0, r3
 800a576:	f001 fcc1 	bl	800befc <RCCEx_PLL3_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a57e:	e003      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	75fb      	strb	r3, [r7, #23]
      break;
 800a584:	e000      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a586:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a58e:	4b24      	ldr	r3, [pc, #144]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a59a:	4921      	ldr	r1, [pc, #132]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	654b      	str	r3, [r1, #84]	; 0x54
 800a5a0:	e001      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d03e      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d820      	bhi.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a603 	.word	0x0800a603
 800a5c4:	0800a5d9 	.word	0x0800a5d9
 800a5c8:	0800a5eb 	.word	0x0800a5eb
 800a5cc:	0800a603 	.word	0x0800a603
 800a5d0:	0800a603 	.word	0x0800a603
 800a5d4:	0800a603 	.word	0x0800a603
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	2101      	movs	r1, #1
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fbda 	bl	800bd98 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5e8:	e00c      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3324      	adds	r3, #36	; 0x24
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fc83 	bl	800befc <RCCEx_PLL3_Config>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5fa:	e003      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a600:	e000      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a602:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d110      	bne.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a60a:	4b05      	ldr	r3, [pc, #20]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60e:	f023 0207 	bic.w	r2, r3, #7
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a616:	4902      	ldr	r1, [pc, #8]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	654b      	str	r3, [r1, #84]	; 0x54
 800a61c:	e008      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a61e:	bf00      	nop
 800a620:	58024400 	.word	0x58024400
 800a624:	58024800 	.word	0x58024800
 800a628:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d039      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a642:	2b05      	cmp	r3, #5
 800a644:	d820      	bhi.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a646:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a68f 	.word	0x0800a68f
 800a650:	0800a665 	.word	0x0800a665
 800a654:	0800a677 	.word	0x0800a677
 800a658:	0800a68f 	.word	0x0800a68f
 800a65c:	0800a68f 	.word	0x0800a68f
 800a660:	0800a68f 	.word	0x0800a68f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3304      	adds	r3, #4
 800a668:	2101      	movs	r1, #1
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fb94 	bl	800bd98 <RCCEx_PLL2_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a674:	e00c      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3324      	adds	r3, #36	; 0x24
 800a67a:	2101      	movs	r1, #1
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 fc3d 	bl	800befc <RCCEx_PLL3_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	75fb      	strb	r3, [r7, #23]
      break;
 800a68c:	e000      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a68e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a696:	4bb7      	ldr	r3, [pc, #732]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69a:	f023 0207 	bic.w	r2, r3, #7
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a4:	49b3      	ldr	r1, [pc, #716]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a6aa:	e001      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d04b      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6c6:	d02e      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6cc:	d828      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d2:	d02a      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d8:	d822      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6de:	d026      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a6e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6e4:	d81c      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ea:	d010      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f0:	d816      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d01d      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a6f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6fa:	d111      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	2100      	movs	r1, #0
 800a702:	4618      	mov	r0, r3
 800a704:	f001 fb48 	bl	800bd98 <RCCEx_PLL2_Config>
 800a708:	4603      	mov	r3, r0
 800a70a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a70c:	e012      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3324      	adds	r3, #36	; 0x24
 800a712:	2102      	movs	r1, #2
 800a714:	4618      	mov	r0, r3
 800a716:	f001 fbf1 	bl	800befc <RCCEx_PLL3_Config>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a71e:	e009      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	75fb      	strb	r3, [r7, #23]
      break;
 800a724:	e006      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a726:	bf00      	nop
 800a728:	e004      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a72a:	bf00      	nop
 800a72c:	e002      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a72e:	bf00      	nop
 800a730:	e000      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a732:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a73a:	4b8e      	ldr	r3, [pc, #568]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a748:	498a      	ldr	r1, [pc, #552]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	654b      	str	r3, [r1, #84]	; 0x54
 800a74e:	e001      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d04b      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a766:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a76a:	d02e      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a76c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a770:	d828      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a776:	d02a      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77c:	d822      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a77e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a782:	d026      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a788:	d81c      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a78e:	d010      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a794:	d816      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01d      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a79a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a79e:	d111      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f001 faf6 	bl	800bd98 <RCCEx_PLL2_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7b0:	e012      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3324      	adds	r3, #36	; 0x24
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fb9f 	bl	800befc <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7c2:	e009      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c8:	e006      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7ca:	bf00      	nop
 800a7cc:	e004      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7ce:	bf00      	nop
 800a7d0:	e002      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7d2:	bf00      	nop
 800a7d4:	e000      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7de:	4b65      	ldr	r3, [pc, #404]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7ec:	4961      	ldr	r1, [pc, #388]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a7f2:	e001      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a800:	2b00      	cmp	r3, #0
 800a802:	d04b      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a80a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a80e:	d02e      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a810:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a814:	d828      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a81a:	d02a      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a81c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a820:	d822      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a822:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a826:	d026      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a828:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a82c:	d81c      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a82e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a832:	d010      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a838:	d816      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01d      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a83e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a842:	d111      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3304      	adds	r3, #4
 800a848:	2100      	movs	r1, #0
 800a84a:	4618      	mov	r0, r3
 800a84c:	f001 faa4 	bl	800bd98 <RCCEx_PLL2_Config>
 800a850:	4603      	mov	r3, r0
 800a852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a854:	e012      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	2102      	movs	r1, #2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fb4d 	bl	800befc <RCCEx_PLL3_Config>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a866:	e009      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	e006      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a86e:	bf00      	nop
 800a870:	e004      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a872:	bf00      	nop
 800a874:	e002      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a876:	bf00      	nop
 800a878:	e000      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a87a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10a      	bne.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a882:	4b3c      	ldr	r3, [pc, #240]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a890:	4938      	ldr	r1, [pc, #224]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a892:	4313      	orrs	r3, r2
 800a894:	658b      	str	r3, [r1, #88]	; 0x58
 800a896:	e001      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0308 	and.w	r3, r3, #8
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01a      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b2:	d10a      	bne.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3324      	adds	r3, #36	; 0x24
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fb1e 	bl	800befc <RCCEx_PLL3_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a8ca:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8d8:	4926      	ldr	r1, [pc, #152]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0310 	and.w	r3, r3, #16
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01a      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f4:	d10a      	bne.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3324      	adds	r3, #36	; 0x24
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fafd 	bl	800befc <RCCEx_PLL3_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a90c:	4b19      	ldr	r3, [pc, #100]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a91a:	4916      	ldr	r1, [pc, #88]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d036      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a936:	d01f      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a93c:	d817      	bhi.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a946:	d009      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a948:	e011      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3304      	adds	r3, #4
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f001 fa21 	bl	800bd98 <RCCEx_PLL2_Config>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a95a:	e00e      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	2102      	movs	r1, #2
 800a962:	4618      	mov	r0, r3
 800a964:	f001 faca 	bl	800befc <RCCEx_PLL3_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a96c:	e005      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]
      break;
 800a972:	e002      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a974:	58024400 	.word	0x58024400
      break;
 800a978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a980:	4b93      	ldr	r3, [pc, #588]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a98e:	4990      	ldr	r1, [pc, #576]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a990:	4313      	orrs	r3, r2
 800a992:	658b      	str	r3, [r1, #88]	; 0x58
 800a994:	e001      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d033      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9b0:	d01c      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a9b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9b6:	d816      	bhi.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a9b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9bc:	d003      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a9be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c2:	d007      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a9c4:	e00f      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c6:	4b82      	ldr	r3, [pc, #520]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	4a81      	ldr	r2, [pc, #516]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9d2:	e00c      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	2101      	movs	r1, #1
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 fa8e 	bl	800befc <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9e4:	e003      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ea:	e000      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a9ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9f4:	4b76      	ldr	r3, [pc, #472]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa02:	4973      	ldr	r1, [pc, #460]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	654b      	str	r3, [r1, #84]	; 0x54
 800aa08:	e001      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d029      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aa22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa26:	d007      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800aa28:	e00f      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa2a:	4b69      	ldr	r3, [pc, #420]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	4a68      	ldr	r2, [pc, #416]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa36:	e00b      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	2102      	movs	r1, #2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 f9aa 	bl	800bd98 <RCCEx_PLL2_Config>
 800aa44:	4603      	mov	r3, r0
 800aa46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa48:	e002      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa56:	4b5e      	ldr	r3, [pc, #376]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa62:	495b      	ldr	r1, [pc, #364]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa68:	e001      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3324      	adds	r3, #36	; 0x24
 800aa7e:	2102      	movs	r1, #2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f001 fa3b 	bl	800befc <RCCEx_PLL3_Config>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d030      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaa4:	d017      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800aaa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaaa:	d811      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aaac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab0:	d013      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800aab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab6:	d80b      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d010      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800aabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac0:	d106      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac2:	4b43      	ldr	r3, [pc, #268]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	4a42      	ldr	r2, [pc, #264]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aacc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aace:	e007      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
      break;
 800aad4:	e004      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aad6:	bf00      	nop
 800aad8:	e002      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aada:	bf00      	nop
 800aadc:	e000      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aade:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aae6:	4b3a      	ldr	r3, [pc, #232]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaf2:	4937      	ldr	r1, [pc, #220]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	654b      	str	r3, [r1, #84]	; 0x54
 800aaf8:	e001      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d008      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab0a:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab16:	492e      	ldr	r1, [pc, #184]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d009      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ab28:	4b29      	ldr	r3, [pc, #164]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab36:	4926      	ldr	r1, [pc, #152]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d008      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab48:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab54:	491e      	ldr	r1, [pc, #120]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00d      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab66:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	4a19      	ldr	r2, [pc, #100]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab70:	6113      	str	r3, [r2, #16]
 800ab72:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab7c:	4914      	ldr	r1, [pc, #80]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da08      	bge.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab8a:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab96:	490e      	ldr	r1, [pc, #56]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d009      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aba8:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb6:	4906      	ldr	r1, [pc, #24]	; (800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800abbc:	7dbb      	ldrb	r3, [r7, #22]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	58024400 	.word	0x58024400

0800abd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b090      	sub	sp, #64	; 0x40
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe2:	f040 8095 	bne.w	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800abe6:	4bae      	ldr	r3, [pc, #696]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800abe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	633b      	str	r3, [r7, #48]	; 0x30
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	f200 8088 	bhi.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac15 	.word	0x0800ac15
 800ac04:	0800ac3d 	.word	0x0800ac3d
 800ac08:	0800ac65 	.word	0x0800ac65
 800ac0c:	0800ad01 	.word	0x0800ad01
 800ac10:	0800ac8d 	.word	0x0800ac8d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac14:	4ba2      	ldr	r3, [pc, #648]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac20:	d108      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 ff64 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac30:	f000 bc95 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac38:	f000 bc91 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac3c:	4b98      	ldr	r3, [pc, #608]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac48:	d108      	bne.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac4a:	f107 0318 	add.w	r3, r7, #24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fca8 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac58:	f000 bc81 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac60:	f000 bc7d 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac64:	4b8e      	ldr	r3, [pc, #568]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac70:	d108      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac72:	f107 030c 	add.w	r3, r7, #12
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fde8 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac80:	f000 bc6d 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac88:	f000 bc69 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac8c:	4b84      	ldr	r3, [pc, #528]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac96:	4b82      	ldr	r3, [pc, #520]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d10c      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d109      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aca8:	4b7d      	ldr	r3, [pc, #500]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	08db      	lsrs	r3, r3, #3
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	4a7c      	ldr	r2, [pc, #496]	; (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800acb4:	fa22 f303 	lsr.w	r3, r2, r3
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acba:	e01f      	b.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acbc:	4b78      	ldr	r3, [pc, #480]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc8:	d106      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800acca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800accc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acd0:	d102      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acd2:	4b75      	ldr	r3, [pc, #468]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd6:	e011      	b.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acd8:	4b71      	ldr	r3, [pc, #452]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ace4:	d106      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800ace6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acec:	d102      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acee:	4b6f      	ldr	r3, [pc, #444]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf2:	e003      	b.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800acf8:	f000 bc31 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800acfc:	f000 bc2f 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad00:	4b6b      	ldr	r3, [pc, #428]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad04:	f000 bc2b 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad0c:	f000 bc27 	b.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad16:	f040 8095 	bne.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ad1a:	4b61      	ldr	r3, [pc, #388]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad2a:	d04d      	beq.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad32:	f200 8084 	bhi.w	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	2bc0      	cmp	r3, #192	; 0xc0
 800ad3a:	d07d      	beq.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ad40:	d87d      	bhi.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	2b80      	cmp	r3, #128	; 0x80
 800ad46:	d02d      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	2b80      	cmp	r3, #128	; 0x80
 800ad4c:	d877      	bhi.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	2b40      	cmp	r3, #64	; 0x40
 800ad58:	d012      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ad5a:	e070      	b.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad5c:	4b50      	ldr	r3, [pc, #320]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad68:	d107      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fec0 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad78:	e3f1      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad7e:	e3ee      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad80:	4b47      	ldr	r3, [pc, #284]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8e:	f107 0318 	add.w	r3, r7, #24
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fc06 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad9c:	e3df      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada2:	e3dc      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ada4:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb0:	d107      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fd48 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adc0:	e3cd      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc6:	e3ca      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adc8:	4b35      	ldr	r3, [pc, #212]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800add0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800add2:	4b33      	ldr	r3, [pc, #204]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0304 	and.w	r3, r3, #4
 800adda:	2b04      	cmp	r3, #4
 800addc:	d10c      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d109      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ade4:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	4a2d      	ldr	r2, [pc, #180]	; (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf6:	e01e      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adf8:	4b29      	ldr	r3, [pc, #164]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae04:	d106      	bne.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ae06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae0c:	d102      	bne.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae0e:	4b26      	ldr	r3, [pc, #152]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae12:	e010      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae14:	4b22      	ldr	r3, [pc, #136]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae20:	d106      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d102      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae2a:	4b20      	ldr	r3, [pc, #128]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ae2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae2e:	e002      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae34:	e393      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae36:	e392      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae38:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ae3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae3c:	e38f      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae42:	e38c      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae4a:	f040 80a7 	bne.w	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800ae4e:	4b14      	ldr	r3, [pc, #80]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ae56:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae5e:	d05f      	beq.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae66:	f200 8096 	bhi.w	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae70:	f000 808e 	beq.w	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae7a:	f200 808c 	bhi.w	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae84:	d03a      	beq.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae8c:	f200 8083 	bhi.w	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00e      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae9c:	d01c      	beq.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800ae9e:	e07a      	b.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800aea0:	58024400 	.word	0x58024400
 800aea4:	03d09000 	.word	0x03d09000
 800aea8:	003d0900 	.word	0x003d0900
 800aeac:	017d7840 	.word	0x017d7840
 800aeb0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeb4:	4baa      	ldr	r3, [pc, #680]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec0:	d107      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fe14 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aed0:	e345      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed6:	e342      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aed8:	4ba1      	ldr	r3, [pc, #644]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aee4:	d107      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee6:	f107 0318 	add.w	r3, r7, #24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fb5a 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aef4:	e333      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aefa:	e330      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aefc:	4b98      	ldr	r3, [pc, #608]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af08:	d107      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af0a:	f107 030c 	add.w	r3, r7, #12
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fc9c 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af18:	e321      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af1e:	e31e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af20:	4b8f      	ldr	r3, [pc, #572]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af28:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af2a:	4b8d      	ldr	r3, [pc, #564]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0304 	and.w	r3, r3, #4
 800af32:	2b04      	cmp	r3, #4
 800af34:	d10c      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d109      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af3c:	4b88      	ldr	r3, [pc, #544]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	08db      	lsrs	r3, r3, #3
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	4a87      	ldr	r2, [pc, #540]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800af48:	fa22 f303 	lsr.w	r3, r2, r3
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af4e:	e01e      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af50:	4b83      	ldr	r3, [pc, #524]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5c:	d106      	bne.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af64:	d102      	bne.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af66:	4b80      	ldr	r3, [pc, #512]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6a:	e010      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af6c:	4b7c      	ldr	r3, [pc, #496]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af78:	d106      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af80:	d102      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af82:	4b7a      	ldr	r3, [pc, #488]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800af84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af86:	e002      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af8c:	e2e7      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af8e:	e2e6      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af90:	4b77      	ldr	r3, [pc, #476]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af94:	e2e3      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af9a:	e2e0      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afa2:	f040 809c 	bne.w	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800afa6:	4b6e      	ldr	r3, [pc, #440]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afaa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800afae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afb6:	d054      	beq.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afbe:	f200 808b 	bhi.w	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afc8:	f000 8083 	beq.w	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afd2:	f200 8081 	bhi.w	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afdc:	d02f      	beq.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe4:	d878      	bhi.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d004      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aff2:	d012      	beq.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800aff4:	e070      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aff6:	4b5a      	ldr	r3, [pc, #360]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b002:	d107      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fd73 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b012:	e2a4      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b018:	e2a1      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b01a:	4b51      	ldr	r3, [pc, #324]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b026:	d107      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b028:	f107 0318 	add.w	r3, r7, #24
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fab9 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b036:	e292      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b03c:	e28f      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b03e:	4b48      	ldr	r3, [pc, #288]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b04a:	d107      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b04c:	f107 030c 	add.w	r3, r7, #12
 800b050:	4618      	mov	r0, r3
 800b052:	f000 fbfb 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b05a:	e280      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b05c:	2300      	movs	r3, #0
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b060:	e27d      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b062:	4b3f      	ldr	r3, [pc, #252]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b06a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b06c:	4b3c      	ldr	r3, [pc, #240]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b04      	cmp	r3, #4
 800b076:	d10c      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b07e:	4b38      	ldr	r3, [pc, #224]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	08db      	lsrs	r3, r3, #3
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	4a36      	ldr	r2, [pc, #216]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b08a:	fa22 f303 	lsr.w	r3, r2, r3
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b090:	e01e      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b092:	4b33      	ldr	r3, [pc, #204]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b09e:	d106      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0a6:	d102      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0a8:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ac:	e010      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0ae:	4b2c      	ldr	r3, [pc, #176]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ba:	d106      	bne.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c2:	d102      	bne.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0c4:	4b29      	ldr	r3, [pc, #164]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c8:	e002      	b.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b0ce:	e246      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0d0:	e245      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0d2:	4b27      	ldr	r3, [pc, #156]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0d6:	e242      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0dc:	e23f      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e4:	f040 80a8 	bne.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b0e8:	4b1d      	ldr	r3, [pc, #116]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b0f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0f8:	d060      	beq.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b100:	f200 8097 	bhi.w	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b10a:	f000 808f 	beq.w	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b114:	f200 808d 	bhi.w	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b11e:	d03b      	beq.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b126:	f200 8084 	bhi.w	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d004      	beq.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b136:	d01d      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b138:	e07b      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b146:	d107      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 fcd1 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b156:	e202      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b15c:	e1ff      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b15e:	bf00      	nop
 800b160:	58024400 	.word	0x58024400
 800b164:	03d09000 	.word	0x03d09000
 800b168:	003d0900 	.word	0x003d0900
 800b16c:	017d7840 	.word	0x017d7840
 800b170:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b174:	4ba3      	ldr	r3, [pc, #652]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b17c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b180:	d107      	bne.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b182:	f107 0318 	add.w	r3, r7, #24
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fa0c 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b190:	e1e5      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b196:	e1e2      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b198:	4b9a      	ldr	r3, [pc, #616]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1a4:	d107      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1a6:	f107 030c 	add.w	r3, r7, #12
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fb4e 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1b4:	e1d3      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1ba:	e1d0      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1bc:	4b91      	ldr	r3, [pc, #580]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1c6:	4b8f      	ldr	r3, [pc, #572]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d10c      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1d8:	4b8a      	ldr	r3, [pc, #552]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	08db      	lsrs	r3, r3, #3
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	4a89      	ldr	r2, [pc, #548]	; (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ea:	e01e      	b.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1ec:	4b85      	ldr	r3, [pc, #532]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f8:	d106      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b200:	d102      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b202:	4b82      	ldr	r3, [pc, #520]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b206:	e010      	b.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b208:	4b7e      	ldr	r3, [pc, #504]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b214:	d106      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21c:	d102      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b21e:	4b7c      	ldr	r3, [pc, #496]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b222:	e002      	b.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b228:	e199      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b22a:	e198      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b22c:	4b79      	ldr	r3, [pc, #484]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b230:	e195      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b236:	e192      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b23e:	d173      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b240:	4b70      	ldr	r3, [pc, #448]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b248:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b250:	d02f      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b258:	d863      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d004      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b266:	d012      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b268:	e05b      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b26a:	4b66      	ldr	r3, [pc, #408]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b276:	d107      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b278:	f107 0318 	add.w	r3, r7, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f991 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b286:	e16a      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b28c:	e167      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28e:	4b5d      	ldr	r3, [pc, #372]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29a:	d107      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fad3 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2aa:	e158      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2b0:	e155      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2b2:	4b54      	ldr	r3, [pc, #336]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2bc:	4b51      	ldr	r3, [pc, #324]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d10c      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2ce:	4b4d      	ldr	r3, [pc, #308]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	08db      	lsrs	r3, r3, #3
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	4a4b      	ldr	r2, [pc, #300]	; (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	e01e      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e2:	4b48      	ldr	r3, [pc, #288]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ee:	d106      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f6:	d102      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2f8:	4b44      	ldr	r3, [pc, #272]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fc:	e010      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2fe:	4b41      	ldr	r3, [pc, #260]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30a:	d106      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b312:	d102      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b314:	4b3e      	ldr	r3, [pc, #248]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b318:	e002      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b31e:	e11e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b320:	e11d      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b326:	e11a      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b32e:	d133      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b330:	4b34      	ldr	r3, [pc, #208]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b338:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d004      	beq.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b346:	d012      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b348:	e023      	b.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b34a:	4b2e      	ldr	r3, [pc, #184]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b356:	d107      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fbc9 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b366:	e0fa      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b36c:	e0f7      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b36e:	4b25      	ldr	r3, [pc, #148]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b37a:	d107      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b37c:	f107 0318 	add.w	r3, r7, #24
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f90f 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b38a:	e0e8      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b390:	e0e5      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b396:	e0e2      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b39e:	f040 808f 	bne.w	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b3a2:	4b18      	ldr	r3, [pc, #96]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b3aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3b2:	d075      	beq.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3ba:	d87e      	bhi.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c2:	d060      	beq.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ca:	d876      	bhi.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3d2:	d045      	beq.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3da:	d86e      	bhi.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e2:	d02b      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ea:	d866      	bhi.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f8:	d00e      	beq.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b3fa:	e05e      	b.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b3fc:	f000 f8bc 	bl	800b578 <HAL_RCCEx_GetD3PCLK1Freq>
 800b400:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b402:	e0ac      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b404:	58024400 	.word	0x58024400
 800b408:	03d09000 	.word	0x03d09000
 800b40c:	003d0900 	.word	0x003d0900
 800b410:	017d7840 	.word	0x017d7840
 800b414:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b418:	4b53      	ldr	r3, [pc, #332]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b424:	d107      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b426:	f107 0318 	add.w	r3, r7, #24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 f8ba 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b434:	e093      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b43a:	e090      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b43c:	4b4a      	ldr	r3, [pc, #296]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b448:	d107      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b44a:	f107 030c 	add.w	r3, r7, #12
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f9fc 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b458:	e081      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b45e:	e07e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b460:	4b41      	ldr	r3, [pc, #260]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d109      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b46c:	4b3e      	ldr	r3, [pc, #248]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	4a3d      	ldr	r2, [pc, #244]	; (800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b478:	fa22 f303 	lsr.w	r3, r2, r3
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b47e:	e06e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b484:	e06b      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b486:	4b38      	ldr	r3, [pc, #224]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b492:	d102      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b494:	4b36      	ldr	r3, [pc, #216]	; (800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b498:	e061      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49e:	e05e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4a0:	4b31      	ldr	r3, [pc, #196]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ac:	d102      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b4ae:	4b31      	ldr	r3, [pc, #196]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4b2:	e054      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b8:	e051      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4be:	e04e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c6:	d148      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b4c8:	4b27      	ldr	r3, [pc, #156]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4d8:	d02a      	beq.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e0:	d838      	bhi.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d004      	beq.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ee:	d00d      	beq.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b4f0:	e030      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4f2:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4fe:	d102      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b500:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b504:	e02b      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b50a:	e028      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b50c:	4b16      	ldr	r3, [pc, #88]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b518:	d107      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b51a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fae8 	bl	800baf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b528:	e019      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b52e:	e016      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b530:	4b0d      	ldr	r3, [pc, #52]	; (800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b53c:	d107      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53e:	f107 0318 	add.w	r3, r7, #24
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f82e 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b54c:	e007      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b552:	e004      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b558:	e001      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b560:	4618      	mov	r0, r3
 800b562:	3740      	adds	r7, #64	; 0x40
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	58024400 	.word	0x58024400
 800b56c:	03d09000 	.word	0x03d09000
 800b570:	003d0900 	.word	0x003d0900
 800b574:	017d7840 	.word	0x017d7840

0800b578 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b57c:	f7fe fb72 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 800b580:	4602      	mov	r2, r0
 800b582:	4b06      	ldr	r3, [pc, #24]	; (800b59c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	091b      	lsrs	r3, r3, #4
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	4904      	ldr	r1, [pc, #16]	; (800b5a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b58e:	5ccb      	ldrb	r3, [r1, r3]
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b598:	4618      	mov	r0, r3
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	58024400 	.word	0x58024400
 800b5a0:	08011f74 	.word	0x08011f74

0800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b089      	sub	sp, #36	; 0x24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5ac:	4ba1      	ldr	r3, [pc, #644]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b0:	f003 0303 	and.w	r3, r3, #3
 800b5b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b5b6:	4b9f      	ldr	r3, [pc, #636]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ba:	0b1b      	lsrs	r3, r3, #12
 800b5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b5c2:	4b9c      	ldr	r3, [pc, #624]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	091b      	lsrs	r3, r3, #4
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b5ce:	4b99      	ldr	r3, [pc, #612]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d2:	08db      	lsrs	r3, r3, #3
 800b5d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	fb02 f303 	mul.w	r3, r2, r3
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8111 	beq.w	800b814 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	f000 8083 	beq.w	800b700 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	f200 80a1 	bhi.w	800b744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d056      	beq.n	800b6bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b60e:	e099      	b.n	800b744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b610:	4b88      	ldr	r3, [pc, #544]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0320 	and.w	r3, r3, #32
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d02d      	beq.n	800b678 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b61c:	4b85      	ldr	r3, [pc, #532]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	08db      	lsrs	r3, r3, #3
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	4a84      	ldr	r2, [pc, #528]	; (800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b628:	fa22 f303 	lsr.w	r3, r2, r3
 800b62c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b646:	4b7b      	ldr	r3, [pc, #492]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b656:	ed97 6a03 	vldr	s12, [r7, #12]
 800b65a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b672:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b676:	e087      	b.n	800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b682:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b68a:	4b6a      	ldr	r3, [pc, #424]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b69e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6ba:	e065      	b.n	800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ce:	4b59      	ldr	r3, [pc, #356]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6fe:	e043      	b.n	800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b712:	4b48      	ldr	r3, [pc, #288]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71a:	ee07 3a90 	vmov	s15, r3
 800b71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b722:	ed97 6a03 	vldr	s12, [r7, #12]
 800b726:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b742:	e021      	b.n	800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b756:	4b37      	ldr	r3, [pc, #220]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75e:	ee07 3a90 	vmov	s15, r3
 800b762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b766:	ed97 6a03 	vldr	s12, [r7, #12]
 800b76a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b786:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b788:	4b2a      	ldr	r3, [pc, #168]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	0a5b      	lsrs	r3, r3, #9
 800b78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b79e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ae:	ee17 2a90 	vmov	r2, s15
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b7b6:	4b1f      	ldr	r3, [pc, #124]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	0c1b      	lsrs	r3, r3, #16
 800b7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c0:	ee07 3a90 	vmov	s15, r3
 800b7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7dc:	ee17 2a90 	vmov	r2, s15
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b7e4:	4b13      	ldr	r3, [pc, #76]	; (800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	0e1b      	lsrs	r3, r3, #24
 800b7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ee:	ee07 3a90 	vmov	s15, r3
 800b7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b80a:	ee17 2a90 	vmov	r2, s15
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b812:	e008      	b.n	800b826 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	609a      	str	r2, [r3, #8]
}
 800b826:	bf00      	nop
 800b828:	3724      	adds	r7, #36	; 0x24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	58024400 	.word	0x58024400
 800b838:	03d09000 	.word	0x03d09000
 800b83c:	46000000 	.word	0x46000000
 800b840:	4c742400 	.word	0x4c742400
 800b844:	4a742400 	.word	0x4a742400
 800b848:	4bbebc20 	.word	0x4bbebc20

0800b84c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b089      	sub	sp, #36	; 0x24
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b854:	4ba1      	ldr	r3, [pc, #644]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b858:	f003 0303 	and.w	r3, r3, #3
 800b85c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b85e:	4b9f      	ldr	r3, [pc, #636]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b862:	0d1b      	lsrs	r3, r3, #20
 800b864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b868:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b86a:	4b9c      	ldr	r3, [pc, #624]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b876:	4b99      	ldr	r3, [pc, #612]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	08db      	lsrs	r3, r3, #3
 800b87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	fb02 f303 	mul.w	r3, r2, r3
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8111 	beq.w	800babc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	f000 8083 	beq.w	800b9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	f200 80a1 	bhi.w	800b9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d056      	beq.n	800b964 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8b6:	e099      	b.n	800b9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8b8:	4b88      	ldr	r3, [pc, #544]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02d      	beq.n	800b920 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8c4:	4b85      	ldr	r3, [pc, #532]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	08db      	lsrs	r3, r3, #3
 800b8ca:	f003 0303 	and.w	r3, r3, #3
 800b8ce:	4a84      	ldr	r2, [pc, #528]	; (800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	ee07 3a90 	vmov	s15, r3
 800b8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ee:	4b7b      	ldr	r3, [pc, #492]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b902:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b91e:	e087      	b.n	800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b932:	4b6a      	ldr	r3, [pc, #424]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93a:	ee07 3a90 	vmov	s15, r3
 800b93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b942:	ed97 6a03 	vldr	s12, [r7, #12]
 800b946:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b962:	e065      	b.n	800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800baec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b976:	4b59      	ldr	r3, [pc, #356]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b986:	ed97 6a03 	vldr	s12, [r7, #12]
 800b98a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9a6:	e043      	b.n	800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ba:	4b48      	ldr	r3, [pc, #288]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c2:	ee07 3a90 	vmov	s15, r3
 800b9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9ea:	e021      	b.n	800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800baec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fe:	4b37      	ldr	r3, [pc, #220]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba06:	ee07 3a90 	vmov	s15, r3
 800ba0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ba30:	4b2a      	ldr	r3, [pc, #168]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	0a5b      	lsrs	r3, r3, #9
 800ba36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba56:	ee17 2a90 	vmov	r2, s15
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ba5e:	4b1f      	ldr	r3, [pc, #124]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	0c1b      	lsrs	r3, r3, #16
 800ba64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba68:	ee07 3a90 	vmov	s15, r3
 800ba6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba84:	ee17 2a90 	vmov	r2, s15
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ba8c:	4b13      	ldr	r3, [pc, #76]	; (800badc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	0e1b      	lsrs	r3, r3, #24
 800ba92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800baaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bab2:	ee17 2a90 	vmov	r2, s15
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800baba:	e008      	b.n	800bace <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	609a      	str	r2, [r3, #8]
}
 800bace:	bf00      	nop
 800bad0:	3724      	adds	r7, #36	; 0x24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	58024400 	.word	0x58024400
 800bae0:	03d09000 	.word	0x03d09000
 800bae4:	46000000 	.word	0x46000000
 800bae8:	4c742400 	.word	0x4c742400
 800baec:	4a742400 	.word	0x4a742400
 800baf0:	4bbebc20 	.word	0x4bbebc20

0800baf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b089      	sub	sp, #36	; 0x24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bafc:	4ba0      	ldr	r3, [pc, #640]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb00:	f003 0303 	and.w	r3, r3, #3
 800bb04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bb06:	4b9e      	ldr	r3, [pc, #632]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0a:	091b      	lsrs	r3, r3, #4
 800bb0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb12:	4b9b      	ldr	r3, [pc, #620]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bb1c:	4b98      	ldr	r3, [pc, #608]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb20:	08db      	lsrs	r3, r3, #3
 800bb22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	fb02 f303 	mul.w	r3, r2, r3
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 8111 	beq.w	800bd62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	f000 8083 	beq.w	800bc4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	f200 80a1 	bhi.w	800bc92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d056      	beq.n	800bc0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb5c:	e099      	b.n	800bc92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb5e:	4b88      	ldr	r3, [pc, #544]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d02d      	beq.n	800bbc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb6a:	4b85      	ldr	r3, [pc, #532]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	08db      	lsrs	r3, r3, #3
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	4a83      	ldr	r2, [pc, #524]	; (800bd84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb76:	fa22 f303 	lsr.w	r3, r2, r3
 800bb7a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb94:	4b7a      	ldr	r3, [pc, #488]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9c:	ee07 3a90 	vmov	s15, r3
 800bba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bba8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bbc4:	e087      	b.n	800bcd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd8:	4b69      	ldr	r3, [pc, #420]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe0:	ee07 3a90 	vmov	s15, r3
 800bbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc08:	e065      	b.n	800bcd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1c:	4b58      	ldr	r3, [pc, #352]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc24:	ee07 3a90 	vmov	s15, r3
 800bc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc30:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc4c:	e043      	b.n	800bcd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc60:	4b47      	ldr	r3, [pc, #284]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc68:	ee07 3a90 	vmov	s15, r3
 800bc6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc70:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc74:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc90:	e021      	b.n	800bcd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	ee07 3a90 	vmov	s15, r3
 800bc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca4:	4b36      	ldr	r3, [pc, #216]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcac:	ee07 3a90 	vmov	s15, r3
 800bcb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bcd6:	4b2a      	ldr	r3, [pc, #168]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	0a5b      	lsrs	r3, r3, #9
 800bcdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcfc:	ee17 2a90 	vmov	r2, s15
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bd04:	4b1e      	ldr	r3, [pc, #120]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd08:	0c1b      	lsrs	r3, r3, #16
 800bd0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd2a:	ee17 2a90 	vmov	r2, s15
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bd32:	4b13      	ldr	r3, [pc, #76]	; (800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd36:	0e1b      	lsrs	r3, r3, #24
 800bd38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd3c:	ee07 3a90 	vmov	s15, r3
 800bd40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd58:	ee17 2a90 	vmov	r2, s15
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd60:	e008      	b.n	800bd74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	609a      	str	r2, [r3, #8]
}
 800bd74:	bf00      	nop
 800bd76:	3724      	adds	r7, #36	; 0x24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	58024400 	.word	0x58024400
 800bd84:	03d09000 	.word	0x03d09000
 800bd88:	46000000 	.word	0x46000000
 800bd8c:	4c742400 	.word	0x4c742400
 800bd90:	4a742400 	.word	0x4a742400
 800bd94:	4bbebc20 	.word	0x4bbebc20

0800bd98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bda6:	4b53      	ldr	r3, [pc, #332]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdaa:	f003 0303 	and.w	r3, r3, #3
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d101      	bne.n	800bdb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e099      	b.n	800beea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bdb6:	4b4f      	ldr	r3, [pc, #316]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a4e      	ldr	r2, [pc, #312]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bdbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdc2:	f7f8 f9ff 	bl	80041c4 <HAL_GetTick>
 800bdc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdc8:	e008      	b.n	800bddc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bdca:	f7f8 f9fb 	bl	80041c4 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d901      	bls.n	800bddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e086      	b.n	800beea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bddc:	4b45      	ldr	r3, [pc, #276]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f0      	bne.n	800bdca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bde8:	4b42      	ldr	r3, [pc, #264]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	031b      	lsls	r3, r3, #12
 800bdf6:	493f      	ldr	r1, [pc, #252]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	628b      	str	r3, [r1, #40]	; 0x28
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	3b01      	subs	r3, #1
 800be02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	025b      	lsls	r3, r3, #9
 800be0e:	b29b      	uxth	r3, r3
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	3b01      	subs	r3, #1
 800be18:	041b      	lsls	r3, r3, #16
 800be1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be1e:	431a      	orrs	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	3b01      	subs	r3, #1
 800be26:	061b      	lsls	r3, r3, #24
 800be28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be2c:	4931      	ldr	r1, [pc, #196]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be32:	4b30      	ldr	r3, [pc, #192]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	492d      	ldr	r1, [pc, #180]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be40:	4313      	orrs	r3, r2
 800be42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be44:	4b2b      	ldr	r3, [pc, #172]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	f023 0220 	bic.w	r2, r3, #32
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	4928      	ldr	r1, [pc, #160]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be52:	4313      	orrs	r3, r2
 800be54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be56:	4b27      	ldr	r3, [pc, #156]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	4a26      	ldr	r2, [pc, #152]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be5c:	f023 0310 	bic.w	r3, r3, #16
 800be60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be62:	4b24      	ldr	r3, [pc, #144]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be66:	4b24      	ldr	r3, [pc, #144]	; (800bef8 <RCCEx_PLL2_Config+0x160>)
 800be68:	4013      	ands	r3, r2
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	69d2      	ldr	r2, [r2, #28]
 800be6e:	00d2      	lsls	r2, r2, #3
 800be70:	4920      	ldr	r1, [pc, #128]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be72:	4313      	orrs	r3, r2
 800be74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be76:	4b1f      	ldr	r3, [pc, #124]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	4a1e      	ldr	r2, [pc, #120]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be7c:	f043 0310 	orr.w	r3, r3, #16
 800be80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be88:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	4a19      	ldr	r2, [pc, #100]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be94:	e00f      	b.n	800beb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d106      	bne.n	800beaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be9c:	4b15      	ldr	r3, [pc, #84]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	4a14      	ldr	r2, [pc, #80]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bea8:	e005      	b.n	800beb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800beaa:	4b12      	ldr	r3, [pc, #72]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	4a11      	ldr	r2, [pc, #68]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800beb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800beb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800beb6:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a0e      	ldr	r2, [pc, #56]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bec2:	f7f8 f97f 	bl	80041c4 <HAL_GetTick>
 800bec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bec8:	e008      	b.n	800bedc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800beca:	f7f8 f97b 	bl	80041c4 <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d901      	bls.n	800bedc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e006      	b.n	800beea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <RCCEx_PLL2_Config+0x15c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0f0      	beq.n	800beca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	58024400 	.word	0x58024400
 800bef8:	ffff0007 	.word	0xffff0007

0800befc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf0a:	4b53      	ldr	r3, [pc, #332]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	f003 0303 	and.w	r3, r3, #3
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d101      	bne.n	800bf1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e099      	b.n	800c04e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf1a:	4b4f      	ldr	r3, [pc, #316]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a4e      	ldr	r2, [pc, #312]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf26:	f7f8 f94d 	bl	80041c4 <HAL_GetTick>
 800bf2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf2c:	e008      	b.n	800bf40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bf2e:	f7f8 f949 	bl	80041c4 <HAL_GetTick>
 800bf32:	4602      	mov	r2, r0
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d901      	bls.n	800bf40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e086      	b.n	800c04e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf40:	4b45      	ldr	r3, [pc, #276]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1f0      	bne.n	800bf2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf4c:	4b42      	ldr	r3, [pc, #264]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	051b      	lsls	r3, r3, #20
 800bf5a:	493f      	ldr	r1, [pc, #252]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	628b      	str	r3, [r1, #40]	; 0x28
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	025b      	lsls	r3, r3, #9
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	431a      	orrs	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	041b      	lsls	r3, r3, #16
 800bf7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf82:	431a      	orrs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	061b      	lsls	r3, r3, #24
 800bf8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf90:	4931      	ldr	r1, [pc, #196]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf96:	4b30      	ldr	r3, [pc, #192]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	492d      	ldr	r1, [pc, #180]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfa8:	4b2b      	ldr	r3, [pc, #172]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	4928      	ldr	r1, [pc, #160]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfba:	4b27      	ldr	r3, [pc, #156]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	4a26      	ldr	r2, [pc, #152]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfc6:	4b24      	ldr	r3, [pc, #144]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfca:	4b24      	ldr	r3, [pc, #144]	; (800c05c <RCCEx_PLL3_Config+0x160>)
 800bfcc:	4013      	ands	r3, r2
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	69d2      	ldr	r2, [r2, #28]
 800bfd2:	00d2      	lsls	r2, r2, #3
 800bfd4:	4920      	ldr	r1, [pc, #128]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bfda:	4b1f      	ldr	r3, [pc, #124]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	4a1e      	ldr	r2, [pc, #120]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d106      	bne.n	800bffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfec:	4b1a      	ldr	r3, [pc, #104]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	4a19      	ldr	r2, [pc, #100]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800bff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bff8:	e00f      	b.n	800c01a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d106      	bne.n	800c00e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c000:	4b15      	ldr	r3, [pc, #84]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	4a14      	ldr	r2, [pc, #80]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c00a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c00c:	e005      	b.n	800c01a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c012:	4a11      	ldr	r2, [pc, #68]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c018:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c01a:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a0e      	ldr	r2, [pc, #56]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c026:	f7f8 f8cd 	bl	80041c4 <HAL_GetTick>
 800c02a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c02c:	e008      	b.n	800c040 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c02e:	f7f8 f8c9 	bl	80041c4 <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d901      	bls.n	800c040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e006      	b.n	800c04e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <RCCEx_PLL3_Config+0x15c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0f0      	beq.n	800c02e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	58024400 	.word	0x58024400
 800c05c:	ffff0007 	.word	0xffff0007

0800c060 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d904      	bls.n	800c07e <HAL_SAI_InitProtocol+0x1e>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	3b03      	subs	r3, #3
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d812      	bhi.n	800c0a2 <HAL_SAI_InitProtocol+0x42>
 800c07c:	e008      	b.n	800c090 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 fe59 	bl	800cd3c <SAI_InitI2S>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
      break;
 800c08e:	e00b      	b.n	800c0a8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 ff02 	bl	800cea0 <SAI_InitPCM>
 800c09c:	4603      	mov	r3, r0
 800c09e:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a0:	e002      	b.n	800c0a8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a6:	bf00      	nop
  }

  if (status == HAL_OK)
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d104      	bne.n	800c0b8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f000 f808 	bl	800c0c4 <HAL_SAI_Init>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3718      	adds	r7, #24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08a      	sub	sp, #40	; 0x28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e283      	b.n	800c5de <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c0d6:	f7f8 f8a5 	bl	8004224 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d113      	bne.n	800c10c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a94      	ldr	r2, [pc, #592]	; (800c33c <HAL_SAI_Init+0x278>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d004      	beq.n	800c0f8 <HAL_SAI_Init+0x34>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a93      	ldr	r2, [pc, #588]	; (800c340 <HAL_SAI_Init+0x27c>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d107      	bne.n	800c108 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d103      	bne.n	800c108 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e268      	b.n	800c5de <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a8a      	ldr	r2, [pc, #552]	; (800c33c <HAL_SAI_Init+0x278>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d004      	beq.n	800c120 <HAL_SAI_Init+0x5c>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a8a      	ldr	r2, [pc, #552]	; (800c344 <HAL_SAI_Init+0x280>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d102      	bne.n	800c126 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800c120:	4b89      	ldr	r3, [pc, #548]	; (800c348 <HAL_SAI_Init+0x284>)
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	e028      	b.n	800c178 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a88      	ldr	r2, [pc, #544]	; (800c34c <HAL_SAI_Init+0x288>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d004      	beq.n	800c13a <HAL_SAI_Init+0x76>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a86      	ldr	r2, [pc, #536]	; (800c350 <HAL_SAI_Init+0x28c>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d102      	bne.n	800c140 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800c13a:	4b86      	ldr	r3, [pc, #536]	; (800c354 <HAL_SAI_Init+0x290>)
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	e01b      	b.n	800c178 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a84      	ldr	r2, [pc, #528]	; (800c358 <HAL_SAI_Init+0x294>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d004      	beq.n	800c154 <HAL_SAI_Init+0x90>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a83      	ldr	r2, [pc, #524]	; (800c35c <HAL_SAI_Init+0x298>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d102      	bne.n	800c15a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800c154:	4b82      	ldr	r3, [pc, #520]	; (800c360 <HAL_SAI_Init+0x29c>)
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	e00e      	b.n	800c178 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a78      	ldr	r2, [pc, #480]	; (800c340 <HAL_SAI_Init+0x27c>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d004      	beq.n	800c16e <HAL_SAI_Init+0xaa>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a7e      	ldr	r2, [pc, #504]	; (800c364 <HAL_SAI_Init+0x2a0>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d102      	bne.n	800c174 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800c16e:	4b7e      	ldr	r3, [pc, #504]	; (800c368 <HAL_SAI_Init+0x2a4>)
 800c170:	61bb      	str	r3, [r7, #24]
 800c172:	e001      	b.n	800c178 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e232      	b.n	800c5de <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7f7 fcaf 	bl	8003af0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 ff3e 	bl	800d014 <SAI_Disable>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e21d      	b.n	800c5de <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d00c      	beq.n	800c1cc <HAL_SAI_Init+0x108>
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d80d      	bhi.n	800c1d2 <HAL_SAI_Init+0x10e>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <HAL_SAI_Init+0xfc>
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d003      	beq.n	800c1c6 <HAL_SAI_Init+0x102>
 800c1be:	e008      	b.n	800c1d2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c1c4:	e008      	b.n	800c1d8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c1c6:	2310      	movs	r3, #16
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c1ca:	e005      	b.n	800c1d8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c1cc:	2320      	movs	r3, #32
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c1d0:	e002      	b.n	800c1d8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c1d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	2b05      	cmp	r3, #5
 800c1de:	d832      	bhi.n	800c246 <HAL_SAI_Init+0x182>
 800c1e0:	a201      	add	r2, pc, #4	; (adr r2, 800c1e8 <HAL_SAI_Init+0x124>)
 800c1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e6:	bf00      	nop
 800c1e8:	0800c201 	.word	0x0800c201
 800c1ec:	0800c207 	.word	0x0800c207
 800c1f0:	0800c20f 	.word	0x0800c20f
 800c1f4:	0800c217 	.word	0x0800c217
 800c1f8:	0800c227 	.word	0x0800c227
 800c1fc:	0800c237 	.word	0x0800c237
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	61fb      	str	r3, [r7, #28]
      break;
 800c204:	e022      	b.n	800c24c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c20a:	61fb      	str	r3, [r7, #28]
      break;
 800c20c:	e01e      	b.n	800c24c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c20e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c212:	61fb      	str	r3, [r7, #28]
      break;
 800c214:	e01a      	b.n	800c24c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c21a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	f043 0301 	orr.w	r3, r3, #1
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c224:	e012      	b.n	800c24c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c22a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	f043 0302 	orr.w	r3, r3, #2
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c234:	e00a      	b.n	800c24c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c23a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	f043 0303 	orr.w	r3, r3, #3
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c244:	e002      	b.n	800c24c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	61fb      	str	r3, [r7, #28]
      break;
 800c24a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c250:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 80ba 	beq.w	800c3d0 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a35      	ldr	r2, [pc, #212]	; (800c33c <HAL_SAI_Init+0x278>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d004      	beq.n	800c274 <HAL_SAI_Init+0x1b0>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a35      	ldr	r2, [pc, #212]	; (800c344 <HAL_SAI_Init+0x280>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d104      	bne.n	800c27e <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c274:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c278:	f7fe fcac 	bl	800abd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c27c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a32      	ldr	r2, [pc, #200]	; (800c34c <HAL_SAI_Init+0x288>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d004      	beq.n	800c292 <HAL_SAI_Init+0x1ce>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a30      	ldr	r2, [pc, #192]	; (800c350 <HAL_SAI_Init+0x28c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d104      	bne.n	800c29c <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c292:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c296:	f7fe fc9d 	bl	800abd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c29a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a2d      	ldr	r2, [pc, #180]	; (800c358 <HAL_SAI_Init+0x294>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <HAL_SAI_Init+0x1ec>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a2c      	ldr	r2, [pc, #176]	; (800c35c <HAL_SAI_Init+0x298>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d104      	bne.n	800c2ba <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800c2b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c2b4:	f7fe fc8e 	bl	800abd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2b8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a20      	ldr	r2, [pc, #128]	; (800c340 <HAL_SAI_Init+0x27c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d104      	bne.n	800c2ce <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800c2c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c2c8:	f7fe fc84 	bl	800abd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2cc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a24      	ldr	r2, [pc, #144]	; (800c364 <HAL_SAI_Init+0x2a0>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d104      	bne.n	800c2e2 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800c2d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c2dc:	f7fe fc7a 	bl	800abd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2e0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c2ea:	d120      	bne.n	800c32e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d102      	bne.n	800c2fa <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800c2f4:	2340      	movs	r3, #64	; 0x40
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	e00a      	b.n	800c310 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	d103      	bne.n	800c30a <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800c302:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	e002      	b.n	800c310 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	4613      	mov	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	4619      	mov	r1, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	fbb1 f3f3 	udiv	r3, r1, r3
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	e02f      	b.n	800c38e <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c336:	d119      	bne.n	800c36c <HAL_SAI_Init+0x2a8>
 800c338:	2302      	movs	r3, #2
 800c33a:	e018      	b.n	800c36e <HAL_SAI_Init+0x2aa>
 800c33c:	40015804 	.word	0x40015804
 800c340:	58005404 	.word	0x58005404
 800c344:	40015824 	.word	0x40015824
 800c348:	40015800 	.word	0x40015800
 800c34c:	40015c04 	.word	0x40015c04
 800c350:	40015c24 	.word	0x40015c24
 800c354:	40015c00 	.word	0x40015c00
 800c358:	40016004 	.word	0x40016004
 800c35c:	40016024 	.word	0x40016024
 800c360:	40016000 	.word	0x40016000
 800c364:	58005424 	.word	0x58005424
 800c368:	58005400 	.word	0x58005400
 800c36c:	2301      	movs	r3, #1
 800c36e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4613      	mov	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	4619      	mov	r1, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	fb02 f303 	mul.w	r3, r2, r3
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	fbb1 f3f3 	udiv	r3, r1, r3
 800c38c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	4a95      	ldr	r2, [pc, #596]	; (800c5e8 <HAL_SAI_Init+0x524>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	08da      	lsrs	r2, r3, #3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800c39c:	6939      	ldr	r1, [r7, #16]
 800c39e:	4b92      	ldr	r3, [pc, #584]	; (800c5e8 <HAL_SAI_Init+0x524>)
 800c3a0:	fba3 2301 	umull	r2, r3, r3, r1
 800c3a4:	08da      	lsrs	r2, r3, #3
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	1aca      	subs	r2, r1, r3
 800c3b0:	2a08      	cmp	r2, #8
 800c3b2:	d904      	bls.n	800c3be <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d104      	bne.n	800c3d0 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ca:	085a      	lsrs	r2, r3, #1
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d003      	beq.n	800c3e0 <HAL_SAI_Init+0x31c>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d109      	bne.n	800c3f4 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d101      	bne.n	800c3ec <HAL_SAI_Init+0x328>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	e001      	b.n	800c3f0 <HAL_SAI_Init+0x32c>
 800c3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3f0:	623b      	str	r3, [r7, #32]
 800c3f2:	e008      	b.n	800c406 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d102      	bne.n	800c402 <HAL_SAI_Init+0x33e>
 800c3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c400:	e000      	b.n	800c404 <HAL_SAI_Init+0x340>
 800c402:	2300      	movs	r3, #0
 800c404:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c406:	f7f7 ff0d 	bl	8004224 <HAL_GetREVID>
 800c40a:	4603      	mov	r3, r0
 800c40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c410:	d331      	bcc.n	800c476 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	4b73      	ldr	r3, [pc, #460]	; (800c5ec <HAL_SAI_Init+0x528>)
 800c41e:	400b      	ands	r3, r1
 800c420:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6819      	ldr	r1, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c430:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c436:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43c:	431a      	orrs	r2, r3
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c44a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c456:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	051b      	lsls	r3, r3, #20
 800c45e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c464:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	e02d      	b.n	800c4d2 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6819      	ldr	r1, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	4b5b      	ldr	r3, [pc, #364]	; (800c5f0 <HAL_SAI_Init+0x52c>)
 800c482:	400b      	ands	r3, r1
 800c484:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6819      	ldr	r1, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685a      	ldr	r2, [r3, #4]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c494:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c49a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c4ae:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4ba:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	051b      	lsls	r3, r3, #20
 800c4c2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c4c8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	6859      	ldr	r1, [r3, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	4b45      	ldr	r3, [pc, #276]	; (800c5f4 <HAL_SAI_Init+0x530>)
 800c4de:	400b      	ands	r3, r1
 800c4e0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6859      	ldr	r1, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69da      	ldr	r2, [r3, #28]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f6:	431a      	orrs	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6899      	ldr	r1, [r3, #8]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <HAL_SAI_Init+0x534>)
 800c50c:	400b      	ands	r3, r1
 800c50e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6899      	ldr	r1, [r3, #8]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c520:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800c526:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800c52c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c532:	3b01      	subs	r3, #1
 800c534:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c536:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	430a      	orrs	r2, r1
 800c53e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68d9      	ldr	r1, [r3, #12]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c54e:	400b      	ands	r3, r1
 800c550:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68d9      	ldr	r1, [r3, #12]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c560:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c566:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c568:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56e:	3b01      	subs	r3, #1
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	430a      	orrs	r2, r1
 800c57a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a1e      	ldr	r2, [pc, #120]	; (800c5fc <HAL_SAI_Init+0x538>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d004      	beq.n	800c590 <HAL_SAI_Init+0x4cc>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a1d      	ldr	r2, [pc, #116]	; (800c600 <HAL_SAI_Init+0x53c>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d119      	bne.n	800c5c4 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c594:	f023 0201 	bic.w	r2, r3, #1
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d10e      	bne.n	800c5c4 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5bc:	f043 0201 	orr.w	r2, r3, #1
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3728      	adds	r7, #40	; 0x28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	cccccccd 	.word	0xcccccccd
 800c5ec:	f005c010 	.word	0xf005c010
 800c5f0:	f805c010 	.word	0xf805c010
 800c5f4:	ffff1ff0 	.word	0xffff1ff0
 800c5f8:	fff88000 	.word	0xfff88000
 800c5fc:	40015804 	.word	0x40015804
 800c600:	58005404 	.word	0x58005404

0800c604 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c616:	2b01      	cmp	r3, #1
 800c618:	d101      	bne.n	800c61e <HAL_SAI_Abort+0x1a>
 800c61a:	2302      	movs	r3, #2
 800c61c:	e07d      	b.n	800c71a <HAL_SAI_Abort+0x116>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c634:	d14f      	bne.n	800c6d6 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c644:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b12      	cmp	r3, #18
 800c650:	d11d      	bne.n	800c68e <HAL_SAI_Abort+0x8a>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d018      	beq.n	800c68e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c662:	4618      	mov	r0, r3
 800c664:	f7f8 fd06 	bl	8005074 <HAL_DMA_Abort>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00f      	beq.n	800c68e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c676:	2b80      	cmp	r3, #128	; 0x80
 800c678:	d009      	beq.n	800c68e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b22      	cmp	r3, #34	; 0x22
 800c698:	d11d      	bne.n	800c6d6 <HAL_SAI_Abort+0xd2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d018      	beq.n	800c6d6 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f8 fce2 	bl	8005074 <HAL_DMA_Abort>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00f      	beq.n	800c6d6 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6be:	2b80      	cmp	r3, #128	; 0x80
 800c6c0:	d009      	beq.n	800c6d6 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e6:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fc93 	bl	800d014 <SAI_Disable>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f042 0208 	orr.w	r2, r2, #8
 800c706:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
	...

0800c724 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	4613      	mov	r3, r2
 800c730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c732:	f7f7 fd47 	bl	80041c4 <HAL_GetTick>
 800c736:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <HAL_SAI_Transmit_DMA+0x20>
 800c73e:	88fb      	ldrh	r3, [r7, #6]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e098      	b.n	800c87a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b01      	cmp	r3, #1
 800c752:	f040 8091 	bne.w	800c878 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_SAI_Transmit_DMA+0x40>
 800c760:	2302      	movs	r3, #2
 800c762:	e08a      	b.n	800c87a <HAL_SAI_Transmit_DMA+0x156>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	88fa      	ldrh	r2, [r7, #6]
 800c776:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	88fa      	ldrh	r2, [r7, #6]
 800c77e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2212      	movs	r2, #18
 800c78e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c798:	4a3a      	ldr	r2, [pc, #232]	; (800c884 <HAL_SAI_Transmit_DMA+0x160>)
 800c79a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7a2:	4a39      	ldr	r2, [pc, #228]	; (800c888 <HAL_SAI_Transmit_DMA+0x164>)
 800c7a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ac:	4a37      	ldr	r2, [pc, #220]	; (800c88c <HAL_SAI_Transmit_DMA+0x168>)
 800c7ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	331c      	adds	r3, #28
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c7d4:	f7f8 f9e4 	bl	8004ba0 <HAL_DMA_Start_IT>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e047      	b.n	800c87a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 fbd9 	bl	800cfa4 <SAI_InterruptFlag>
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	691a      	ldr	r2, [r3, #16]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c810:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c812:	e015      	b.n	800c840 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c814:	f7f7 fcd6 	bl	80041c4 <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c822:	d90d      	bls.n	800c840 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c82a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e01c      	b.n	800c87a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0e2      	beq.n	800c814 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d107      	bne.n	800c86c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c86a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	e000      	b.n	800c87a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800c878:	2302      	movs	r3, #2
  }
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	0800d0e9 	.word	0x0800d0e9
 800c888:	0800d089 	.word	0x0800d089
 800c88c:	0800d181 	.word	0x0800d181

0800c890 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	4613      	mov	r3, r2
 800c89c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <HAL_SAI_Receive_DMA+0x1a>
 800c8a4:	88fb      	ldrh	r3, [r7, #6]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e079      	b.n	800c9a2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d172      	bne.n	800c9a0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d101      	bne.n	800c8c8 <HAL_SAI_Receive_DMA+0x38>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	e06c      	b.n	800c9a2 <HAL_SAI_Receive_DMA+0x112>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	88fa      	ldrh	r2, [r7, #6]
 800c8da:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	88fa      	ldrh	r2, [r7, #6]
 800c8e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2222      	movs	r2, #34	; 0x22
 800c8f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8fc:	4a2b      	ldr	r2, [pc, #172]	; (800c9ac <HAL_SAI_Receive_DMA+0x11c>)
 800c8fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c906:	4a2a      	ldr	r2, [pc, #168]	; (800c9b0 <HAL_SAI_Receive_DMA+0x120>)
 800c908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c910:	4a28      	ldr	r2, [pc, #160]	; (800c9b4 <HAL_SAI_Receive_DMA+0x124>)
 800c912:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c91a:	2200      	movs	r2, #0
 800c91c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	331c      	adds	r3, #28
 800c92a:	4619      	mov	r1, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c930:	461a      	mov	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c938:	f7f8 f932 	bl	8004ba0 <HAL_DMA_Start_IT>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d005      	beq.n	800c94e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e029      	b.n	800c9a2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c94e:	2100      	movs	r1, #0
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f000 fb27 	bl	800cfa4 <SAI_InterruptFlag>
 800c956:	4601      	mov	r1, r0
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691a      	ldr	r2, [r3, #16]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	430a      	orrs	r2, r1
 800c964:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c974:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d107      	bne.n	800c994 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c992:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	e000      	b.n	800c9a2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800c9a0:	2302      	movs	r3, #2
  }
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	0800d165 	.word	0x0800d165
 800c9b0:	0800d105 	.word	0x0800d105
 800c9b4:	0800d181 	.word	0x0800d181

0800c9b8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 81a7 	beq.w	800cd1c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f003 0308 	and.w	r3, r3, #8
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00a      	beq.n	800ca06 <HAL_SAI_IRQHandler+0x4e>
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f003 0308 	and.w	r3, r3, #8
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d005      	beq.n	800ca06 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	4798      	blx	r3
 800ca04:	e18a      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01e      	beq.n	800ca4e <HAL_SAI_IRQHandler+0x96>
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d019      	beq.n	800ca4e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b22      	cmp	r3, #34	; 0x22
 800ca2c:	d101      	bne.n	800ca32 <HAL_SAI_IRQHandler+0x7a>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <HAL_SAI_IRQHandler+0x7c>
 800ca32:	2302      	movs	r3, #2
 800ca34:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	431a      	orrs	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f96e 	bl	800cd28 <HAL_SAI_ErrorCallback>
 800ca4c:	e166      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f003 0302 	and.w	r3, r3, #2
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d013      	beq.n	800ca80 <HAL_SAI_IRQHandler+0xc8>
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f003 0302 	and.w	r3, r3, #2
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00e      	beq.n	800ca80 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2202      	movs	r2, #2
 800ca68:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 8153 	beq.w	800cd1c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca7c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800ca7e:	e14d      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f003 0320 	and.w	r3, r3, #32
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d05b      	beq.n	800cb42 <HAL_SAI_IRQHandler+0x18a>
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f003 0320 	and.w	r3, r3, #32
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d056      	beq.n	800cb42 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2220      	movs	r2, #32
 800ca9a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800caa2:	f043 0204 	orr.w	r2, r3, #4
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d03e      	beq.n	800cb34 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d018      	beq.n	800caf2 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cac6:	4a97      	ldr	r2, [pc, #604]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cac8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f8 fded 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cae2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f91b 	bl	800cd28 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 810a 	beq.w	800cd12 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb04:	4a87      	ldr	r2, [pc, #540]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cb06:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7f8 fdce 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 80fb 	beq.w	800cd12 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f8fb 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cb32:	e0ee      	b.n	800cd12 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff fd65 	bl	800c604 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f8f4 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cb40:	e0e7      	b.n	800cd12 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d05b      	beq.n	800cc04 <HAL_SAI_IRQHandler+0x24c>
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d056      	beq.n	800cc04 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2240      	movs	r2, #64	; 0x40
 800cb5c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb64:	f043 0208 	orr.w	r2, r3, #8
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d03e      	beq.n	800cbf6 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d018      	beq.n	800cbb4 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb88:	4a66      	ldr	r2, [pc, #408]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cb8a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7f8 fd8c 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f8ba 	bl	800cd28 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80ab 	beq.w	800cd16 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbc6:	4a57      	ldr	r2, [pc, #348]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cbc8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7f8 fd6d 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 809c 	beq.w	800cd16 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f89a 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cbf4:	e08f      	b.n	800cd16 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff fd04 	bl	800c604 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f893 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cc02:	e088      	b.n	800cd16 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f003 0304 	and.w	r3, r3, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d067      	beq.n	800ccde <HAL_SAI_IRQHandler+0x326>
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f003 0304 	and.w	r3, r3, #4
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d062      	beq.n	800ccde <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2204      	movs	r2, #4
 800cc1e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc26:	f043 0220 	orr.w	r2, r3, #32
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d03c      	beq.n	800ccb4 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d018      	beq.n	800cc76 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc4a:	4a36      	ldr	r2, [pc, #216]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cc4c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7f8 fd2b 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f859 	bl	800cd28 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d04c      	beq.n	800cd1a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc86:	4a27      	ldr	r2, [pc, #156]	; (800cd24 <HAL_SAI_IRQHandler+0x36c>)
 800cc88:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7f8 fd0d 	bl	80056b0 <HAL_DMA_Abort_IT>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d03e      	beq.n	800cd1a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cca2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f83b 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ccb2:	e032      	b.n	800cd1a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f826 	bl	800cd28 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ccdc:	e01d      	b.n	800cd1a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d019      	beq.n	800cd1c <HAL_SAI_IRQHandler+0x364>
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f003 0310 	and.w	r3, r3, #16
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d014      	beq.n	800cd1c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2210      	movs	r2, #16
 800ccf8:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd00:	f043 0210 	orr.w	r2, r3, #16
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f80c 	bl	800cd28 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800cd10:	e004      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cd12:	bf00      	nop
 800cd14:	e002      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cd16:	bf00      	nop
 800cd18:	e000      	b.n	800cd1c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800cd1a:	bf00      	nop
}
 800cd1c:	bf00      	nop
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	0800d1df 	.word	0x0800d1df

0800cd28 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <SAI_InitI2S+0x2e>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d103      	bne.n	800cd72 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	651a      	str	r2, [r3, #80]	; 0x50
 800cd70:	e002      	b.n	800cd78 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2201      	movs	r2, #1
 800cd76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cd7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd86:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	683a      	ldr	r2, [r7, #0]
 800cd92:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e077      	b.n	800ce92 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d107      	bne.n	800cdb8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cdb4:	665a      	str	r2, [r3, #100]	; 0x64
 800cdb6:	e006      	b.n	800cdc6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cdbe:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	665a      	str	r2, [r3, #100]	; 0x64
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d84f      	bhi.n	800ce6c <SAI_InitI2S+0x130>
 800cdcc:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <SAI_InitI2S+0x98>)
 800cdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800cde5 	.word	0x0800cde5
 800cdd8:	0800ce07 	.word	0x0800ce07
 800cddc:	0800ce29 	.word	0x0800ce29
 800cde0:	0800ce4b 	.word	0x0800ce4b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2280      	movs	r2, #128	; 0x80
 800cde8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	085b      	lsrs	r3, r3, #1
 800cdee:	015a      	lsls	r2, r3, #5
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	085b      	lsrs	r3, r3, #1
 800cdf8:	011a      	lsls	r2, r3, #4
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2240      	movs	r2, #64	; 0x40
 800ce02:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ce04:	e035      	b.n	800ce72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2280      	movs	r2, #128	; 0x80
 800ce0a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	085b      	lsrs	r3, r3, #1
 800ce10:	019a      	lsls	r2, r3, #6
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	085b      	lsrs	r3, r3, #1
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2280      	movs	r2, #128	; 0x80
 800ce24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ce26:	e024      	b.n	800ce72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	22c0      	movs	r2, #192	; 0xc0
 800ce2c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	085b      	lsrs	r3, r3, #1
 800ce32:	019a      	lsls	r2, r3, #6
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	085b      	lsrs	r3, r3, #1
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2280      	movs	r2, #128	; 0x80
 800ce46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ce48:	e013      	b.n	800ce72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	22e0      	movs	r2, #224	; 0xe0
 800ce4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	085b      	lsrs	r3, r3, #1
 800ce54:	019a      	lsls	r2, r3, #6
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	085b      	lsrs	r3, r3, #1
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2280      	movs	r2, #128	; 0x80
 800ce68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ce6a:	e002      	b.n	800ce72 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce70:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d10b      	bne.n	800ce90 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d102      	bne.n	800ce84 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2210      	movs	r2, #16
 800ce82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d102      	bne.n	800ce90 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2208      	movs	r2, #8
 800ce8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800ce90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	371c      	adds	r7, #28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <SAI_InitPCM+0x2e>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d103      	bne.n	800ced6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	651a      	str	r2, [r3, #80]	; 0x50
 800ced4:	e002      	b.n	800cedc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cee8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cef0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf04:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d103      	bne.n	800cf14 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	659a      	str	r2, [r3, #88]	; 0x58
 800cf12:	e002      	b.n	800cf1a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	220d      	movs	r2, #13
 800cf18:	659a      	str	r2, [r3, #88]	; 0x58
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d837      	bhi.n	800cf90 <SAI_InitPCM+0xf0>
 800cf20:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <SAI_InitPCM+0x88>)
 800cf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf26:	bf00      	nop
 800cf28:	0800cf39 	.word	0x0800cf39
 800cf2c:	0800cf4f 	.word	0x0800cf4f
 800cf30:	0800cf65 	.word	0x0800cf65
 800cf34:	0800cf7b 	.word	0x0800cf7b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2280      	movs	r2, #128	; 0x80
 800cf3c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	011a      	lsls	r2, r3, #4
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2240      	movs	r2, #64	; 0x40
 800cf4a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cf4c:	e023      	b.n	800cf96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2280      	movs	r2, #128	; 0x80
 800cf52:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2280      	movs	r2, #128	; 0x80
 800cf60:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cf62:	e018      	b.n	800cf96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	22c0      	movs	r2, #192	; 0xc0
 800cf68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2280      	movs	r2, #128	; 0x80
 800cf76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cf78:	e00d      	b.n	800cf96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	22e0      	movs	r2, #224	; 0xe0
 800cf7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	015a      	lsls	r2, r3, #5
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2280      	movs	r2, #128	; 0x80
 800cf8c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cf8e:	e002      	b.n	800cf96 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	75fb      	strb	r3, [r7, #23]
      break;
 800cf94:	bf00      	nop
  }

  return status;
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	371c      	adds	r7, #28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d103      	bne.n	800cfc2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f043 0308 	orr.w	r3, r3, #8
 800cfc0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc6:	2b08      	cmp	r3, #8
 800cfc8:	d10b      	bne.n	800cfe2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d003      	beq.n	800cfda <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d103      	bne.n	800cfe2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f043 0310 	orr.w	r3, r3, #16
 800cfe0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2b03      	cmp	r3, #3
 800cfe8:	d003      	beq.n	800cff2 <SAI_InterruptFlag+0x4e>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d104      	bne.n	800cffc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	e003      	b.n	800d004 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f043 0304 	orr.w	r3, r3, #4
 800d002:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d004:	68fb      	ldr	r3, [r7, #12]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
	...

0800d014 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d01c:	4b18      	ldr	r3, [pc, #96]	; (800d080 <SAI_Disable+0x6c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a18      	ldr	r2, [pc, #96]	; (800d084 <SAI_Disable+0x70>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	0b1b      	lsrs	r3, r3, #12
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d03e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d04c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	72fb      	strb	r3, [r7, #11]
      break;
 800d05a:	e009      	b.n	800d070 <SAI_Disable+0x5c>
    }
    count--;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3b01      	subs	r3, #1
 800d060:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e7      	bne.n	800d040 <SAI_Disable+0x2c>

  return status;
 800d070:	7afb      	ldrb	r3, [r7, #11]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20000000 	.word	0x20000000
 800d084:	95cbec1b 	.word	0x95cbec1b

0800d088 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d094:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d09e:	d01c      	beq.n	800d0da <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d0b6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7ff ff72 	bl	800cfa4 <SAI_InterruptFlag>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	43d9      	mvns	r1, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691a      	ldr	r2, [r3, #16]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	400a      	ands	r2, r1
 800d0d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f7f4 fc46 	bl	800196c <HAL_SAI_TxCpltCallback>
#endif
}
 800d0e0:	bf00      	nop
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7f4 fc58 	bl	80019ac <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800d0fc:	bf00      	nop
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11a:	d01c      	beq.n	800d156 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d12a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d134:	2100      	movs	r1, #0
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7ff ff34 	bl	800cfa4 <SAI_InterruptFlag>
 800d13c:	4603      	mov	r3, r0
 800d13e:	43d9      	mvns	r1, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	691a      	ldr	r2, [r3, #16]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	400a      	ands	r2, r1
 800d14c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7f4 fc48 	bl	80019ec <HAL_SAI_RxCpltCallback>
#endif
}
 800d15c:	bf00      	nop
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7f4 fc5a 	bl	8001a2c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7f9 fbfc 	bl	800698c <HAL_DMA_GetError>
 800d194:	4603      	mov	r3, r0
 800d196:	2b02      	cmp	r3, #2
 800d198:	d01d      	beq.n	800d1d6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d1b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f7ff ff2a 	bl	800d014 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7ff fda9 	bl	800cd28 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800d1d6:	bf00      	nop
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d1fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2200      	movs	r2, #0
 800d202:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f04f 32ff 	mov.w	r2, #4294967295
 800d20c:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d214:	2b20      	cmp	r3, #32
 800d216:	d00a      	beq.n	800d22e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f7ff fefb 	bl	800d014 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f042 0208 	orr.w	r2, r2, #8
 800d22c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7ff fd72 	bl	800cd28 <HAL_SAI_ErrorCallback>
#endif
}
 800d244:	bf00      	nop
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e03e      	b.n	800d2e0 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d106      	bne.n	800d27c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7f6 fc30 	bl	8003adc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3308      	adds	r3, #8
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f002 fdd8 	bl	800fe3c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	461a      	mov	r2, r3
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	f002 fe60 	bl	800ff5c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6858      	ldr	r0, [r3, #4]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	f002 fea7 	bl	800fffc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	6892      	ldr	r2, [r2, #8]
 800d2b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	6892      	ldr	r2, [r2, #8]
 800d2c2:	f041 0101 	orr.w	r1, r1, #1
 800d2c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <HAL_SRAM_Init+0x9c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a06      	ldr	r2, [pc, #24]	; (800d2e8 <HAL_SRAM_Init+0x9c>)
 800d2d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2d4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	52004000 	.word	0x52004000

0800d2ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e049      	b.n	800d392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d106      	bne.n	800d318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7f6 fa7e 	bl	8003814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3304      	adds	r3, #4
 800d328:	4619      	mov	r1, r3
 800d32a:	4610      	mov	r0, r2
 800d32c:	f000 fae2 	bl	800d8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d001      	beq.n	800d3b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e04f      	b.n	800d454 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f042 0201 	orr.w	r2, r2, #1
 800d3ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a23      	ldr	r2, [pc, #140]	; (800d460 <HAL_TIM_Base_Start_IT+0xc4>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d01d      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3de:	d018      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a1f      	ldr	r2, [pc, #124]	; (800d464 <HAL_TIM_Base_Start_IT+0xc8>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d013      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a1e      	ldr	r2, [pc, #120]	; (800d468 <HAL_TIM_Base_Start_IT+0xcc>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d00e      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a1c      	ldr	r2, [pc, #112]	; (800d46c <HAL_TIM_Base_Start_IT+0xd0>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d009      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <HAL_TIM_Base_Start_IT+0xd4>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d004      	beq.n	800d412 <HAL_TIM_Base_Start_IT+0x76>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a19      	ldr	r2, [pc, #100]	; (800d474 <HAL_TIM_Base_Start_IT+0xd8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d115      	bne.n	800d43e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	4b17      	ldr	r3, [pc, #92]	; (800d478 <HAL_TIM_Base_Start_IT+0xdc>)
 800d41a:	4013      	ands	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b06      	cmp	r3, #6
 800d422:	d015      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0xb4>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d42a:	d011      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f042 0201 	orr.w	r2, r2, #1
 800d43a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43c:	e008      	b.n	800d450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f042 0201 	orr.w	r2, r2, #1
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	e000      	b.n	800d452 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	40010000 	.word	0x40010000
 800d464:	40000400 	.word	0x40000400
 800d468:	40000800 	.word	0x40000800
 800d46c:	40000c00 	.word	0x40000c00
 800d470:	40010400 	.word	0x40010400
 800d474:	40001800 	.word	0x40001800
 800d478:	00010007 	.word	0x00010007

0800d47c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	f003 0302 	and.w	r3, r3, #2
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d122      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	f003 0302 	and.w	r3, r3, #2
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d11b      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f06f 0202 	mvn.w	r2, #2
 800d4a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	f003 0303 	and.w	r3, r3, #3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f9fa 	bl	800d8b8 <HAL_TIM_IC_CaptureCallback>
 800d4c4:	e005      	b.n	800d4d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f9ec 	bl	800d8a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f9fd 	bl	800d8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	f003 0304 	and.w	r3, r3, #4
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	d122      	bne.n	800d52c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	f003 0304 	and.w	r3, r3, #4
 800d4f0:	2b04      	cmp	r3, #4
 800d4f2:	d11b      	bne.n	800d52c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f06f 0204 	mvn.w	r2, #4
 800d4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2202      	movs	r2, #2
 800d502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f9d0 	bl	800d8b8 <HAL_TIM_IC_CaptureCallback>
 800d518:	e005      	b.n	800d526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f9c2 	bl	800d8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f9d3 	bl	800d8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	f003 0308 	and.w	r3, r3, #8
 800d536:	2b08      	cmp	r3, #8
 800d538:	d122      	bne.n	800d580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f003 0308 	and.w	r3, r3, #8
 800d544:	2b08      	cmp	r3, #8
 800d546:	d11b      	bne.n	800d580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f06f 0208 	mvn.w	r2, #8
 800d550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2204      	movs	r2, #4
 800d556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	69db      	ldr	r3, [r3, #28]
 800d55e:	f003 0303 	and.w	r3, r3, #3
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f9a6 	bl	800d8b8 <HAL_TIM_IC_CaptureCallback>
 800d56c:	e005      	b.n	800d57a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f998 	bl	800d8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f9a9 	bl	800d8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	f003 0310 	and.w	r3, r3, #16
 800d58a:	2b10      	cmp	r3, #16
 800d58c:	d122      	bne.n	800d5d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	f003 0310 	and.w	r3, r3, #16
 800d598:	2b10      	cmp	r3, #16
 800d59a:	d11b      	bne.n	800d5d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f06f 0210 	mvn.w	r2, #16
 800d5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2208      	movs	r2, #8
 800d5aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	69db      	ldr	r3, [r3, #28]
 800d5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f97c 	bl	800d8b8 <HAL_TIM_IC_CaptureCallback>
 800d5c0:	e005      	b.n	800d5ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f96e 	bl	800d8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f97f 	bl	800d8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d10e      	bne.n	800d600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d107      	bne.n	800d600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f06f 0201 	mvn.w	r2, #1
 800d5f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7f4 f99c 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d60a:	2b80      	cmp	r3, #128	; 0x80
 800d60c:	d10e      	bne.n	800d62c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d618:	2b80      	cmp	r3, #128	; 0x80
 800d61a:	d107      	bne.n	800d62c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 fb2e 	bl	800dc88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d63a:	d10e      	bne.n	800d65a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d646:	2b80      	cmp	r3, #128	; 0x80
 800d648:	d107      	bne.n	800d65a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fb21 	bl	800dc9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d664:	2b40      	cmp	r3, #64	; 0x40
 800d666:	d10e      	bne.n	800d686 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d672:	2b40      	cmp	r3, #64	; 0x40
 800d674:	d107      	bne.n	800d686 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f92d 	bl	800d8e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	f003 0320 	and.w	r3, r3, #32
 800d690:	2b20      	cmp	r3, #32
 800d692:	d10e      	bne.n	800d6b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f003 0320 	and.w	r3, r3, #32
 800d69e:	2b20      	cmp	r3, #32
 800d6a0:	d107      	bne.n	800d6b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f06f 0220 	mvn.w	r2, #32
 800d6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fae1 	bl	800dc74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
	...

0800d6bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d101      	bne.n	800d6d4 <HAL_TIM_ConfigClockSource+0x18>
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	e0db      	b.n	800d88c <HAL_TIM_ConfigClockSource+0x1d0>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2202      	movs	r2, #2
 800d6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	4b69      	ldr	r3, [pc, #420]	; (800d894 <HAL_TIM_ConfigClockSource+0x1d8>)
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a63      	ldr	r2, [pc, #396]	; (800d898 <HAL_TIM_ConfigClockSource+0x1dc>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	f000 80a9 	beq.w	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d710:	4a61      	ldr	r2, [pc, #388]	; (800d898 <HAL_TIM_ConfigClockSource+0x1dc>)
 800d712:	4293      	cmp	r3, r2
 800d714:	f200 80ae 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d718:	4a60      	ldr	r2, [pc, #384]	; (800d89c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	f000 80a1 	beq.w	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d720:	4a5e      	ldr	r2, [pc, #376]	; (800d89c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d722:	4293      	cmp	r3, r2
 800d724:	f200 80a6 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d728:	4a5d      	ldr	r2, [pc, #372]	; (800d8a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	f000 8099 	beq.w	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d730:	4a5b      	ldr	r2, [pc, #364]	; (800d8a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d732:	4293      	cmp	r3, r2
 800d734:	f200 809e 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d73c:	f000 8091 	beq.w	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d740:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d744:	f200 8096 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d74c:	f000 8089 	beq.w	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d754:	f200 808e 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d75c:	d03e      	beq.n	800d7dc <HAL_TIM_ConfigClockSource+0x120>
 800d75e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d762:	f200 8087 	bhi.w	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d76a:	f000 8085 	beq.w	800d878 <HAL_TIM_ConfigClockSource+0x1bc>
 800d76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d772:	d87f      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d774:	2b70      	cmp	r3, #112	; 0x70
 800d776:	d01a      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0xf2>
 800d778:	2b70      	cmp	r3, #112	; 0x70
 800d77a:	d87b      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d77c:	2b60      	cmp	r3, #96	; 0x60
 800d77e:	d050      	beq.n	800d822 <HAL_TIM_ConfigClockSource+0x166>
 800d780:	2b60      	cmp	r3, #96	; 0x60
 800d782:	d877      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d784:	2b50      	cmp	r3, #80	; 0x50
 800d786:	d03c      	beq.n	800d802 <HAL_TIM_ConfigClockSource+0x146>
 800d788:	2b50      	cmp	r3, #80	; 0x50
 800d78a:	d873      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d78c:	2b40      	cmp	r3, #64	; 0x40
 800d78e:	d058      	beq.n	800d842 <HAL_TIM_ConfigClockSource+0x186>
 800d790:	2b40      	cmp	r3, #64	; 0x40
 800d792:	d86f      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d794:	2b30      	cmp	r3, #48	; 0x30
 800d796:	d064      	beq.n	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d798:	2b30      	cmp	r3, #48	; 0x30
 800d79a:	d86b      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d79c:	2b20      	cmp	r3, #32
 800d79e:	d060      	beq.n	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d7a0:	2b20      	cmp	r3, #32
 800d7a2:	d867      	bhi.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d05c      	beq.n	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
 800d7a8:	2b10      	cmp	r3, #16
 800d7aa:	d05a      	beq.n	800d862 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d7ac:	e062      	b.n	800d874 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	6899      	ldr	r1, [r3, #8]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	685a      	ldr	r2, [r3, #4]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	f000 f9b1 	bl	800db24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d7d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	609a      	str	r2, [r3, #8]
      break;
 800d7da:	e04e      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6818      	ldr	r0, [r3, #0]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	6899      	ldr	r1, [r3, #8]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	685a      	ldr	r2, [r3, #4]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	f000 f99a 	bl	800db24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d7fe:	609a      	str	r2, [r3, #8]
      break;
 800d800:	e03b      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	6859      	ldr	r1, [r3, #4]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	461a      	mov	r2, r3
 800d810:	f000 f90a 	bl	800da28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2150      	movs	r1, #80	; 0x50
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 f964 	bl	800dae8 <TIM_ITRx_SetConfig>
      break;
 800d820:	e02b      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	6859      	ldr	r1, [r3, #4]
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	461a      	mov	r2, r3
 800d830:	f000 f929 	bl	800da86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2160      	movs	r1, #96	; 0x60
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 f954 	bl	800dae8 <TIM_ITRx_SetConfig>
      break;
 800d840:	e01b      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6818      	ldr	r0, [r3, #0]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	6859      	ldr	r1, [r3, #4]
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	461a      	mov	r2, r3
 800d850:	f000 f8ea 	bl	800da28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2140      	movs	r1, #64	; 0x40
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f944 	bl	800dae8 <TIM_ITRx_SetConfig>
      break;
 800d860:	e00b      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4619      	mov	r1, r3
 800d86c:	4610      	mov	r0, r2
 800d86e:	f000 f93b 	bl	800dae8 <TIM_ITRx_SetConfig>
        break;
 800d872:	e002      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800d874:	bf00      	nop
 800d876:	e000      	b.n	800d87a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800d878:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	ffceff88 	.word	0xffceff88
 800d898:	00100040 	.word	0x00100040
 800d89c:	00100030 	.word	0x00100030
 800d8a0:	00100020 	.word	0x00100020

0800d8a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8d4:	bf00      	nop
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a40      	ldr	r2, [pc, #256]	; (800da08 <TIM_Base_SetConfig+0x114>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d013      	beq.n	800d934 <TIM_Base_SetConfig+0x40>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d912:	d00f      	beq.n	800d934 <TIM_Base_SetConfig+0x40>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4a3d      	ldr	r2, [pc, #244]	; (800da0c <TIM_Base_SetConfig+0x118>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d00b      	beq.n	800d934 <TIM_Base_SetConfig+0x40>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4a3c      	ldr	r2, [pc, #240]	; (800da10 <TIM_Base_SetConfig+0x11c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d007      	beq.n	800d934 <TIM_Base_SetConfig+0x40>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a3b      	ldr	r2, [pc, #236]	; (800da14 <TIM_Base_SetConfig+0x120>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d003      	beq.n	800d934 <TIM_Base_SetConfig+0x40>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a3a      	ldr	r2, [pc, #232]	; (800da18 <TIM_Base_SetConfig+0x124>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d108      	bne.n	800d946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d93a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	4313      	orrs	r3, r2
 800d944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a2f      	ldr	r2, [pc, #188]	; (800da08 <TIM_Base_SetConfig+0x114>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d01f      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d954:	d01b      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a2c      	ldr	r2, [pc, #176]	; (800da0c <TIM_Base_SetConfig+0x118>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d017      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a2b      	ldr	r2, [pc, #172]	; (800da10 <TIM_Base_SetConfig+0x11c>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d013      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a2a      	ldr	r2, [pc, #168]	; (800da14 <TIM_Base_SetConfig+0x120>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d00f      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a29      	ldr	r2, [pc, #164]	; (800da18 <TIM_Base_SetConfig+0x124>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d00b      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a28      	ldr	r2, [pc, #160]	; (800da1c <TIM_Base_SetConfig+0x128>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d007      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a27      	ldr	r2, [pc, #156]	; (800da20 <TIM_Base_SetConfig+0x12c>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d003      	beq.n	800d98e <TIM_Base_SetConfig+0x9a>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a26      	ldr	r2, [pc, #152]	; (800da24 <TIM_Base_SetConfig+0x130>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d108      	bne.n	800d9a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	689a      	ldr	r2, [r3, #8]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a10      	ldr	r2, [pc, #64]	; (800da08 <TIM_Base_SetConfig+0x114>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d00f      	beq.n	800d9ec <TIM_Base_SetConfig+0xf8>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a12      	ldr	r2, [pc, #72]	; (800da18 <TIM_Base_SetConfig+0x124>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d00b      	beq.n	800d9ec <TIM_Base_SetConfig+0xf8>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a11      	ldr	r2, [pc, #68]	; (800da1c <TIM_Base_SetConfig+0x128>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d007      	beq.n	800d9ec <TIM_Base_SetConfig+0xf8>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4a10      	ldr	r2, [pc, #64]	; (800da20 <TIM_Base_SetConfig+0x12c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d003      	beq.n	800d9ec <TIM_Base_SetConfig+0xf8>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a0f      	ldr	r2, [pc, #60]	; (800da24 <TIM_Base_SetConfig+0x130>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d103      	bne.n	800d9f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	691a      	ldr	r2, [r3, #16]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	615a      	str	r2, [r3, #20]
}
 800d9fa:	bf00      	nop
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	40010000 	.word	0x40010000
 800da0c:	40000400 	.word	0x40000400
 800da10:	40000800 	.word	0x40000800
 800da14:	40000c00 	.word	0x40000c00
 800da18:	40010400 	.word	0x40010400
 800da1c:	40014000 	.word	0x40014000
 800da20:	40014400 	.word	0x40014400
 800da24:	40014800 	.word	0x40014800

0800da28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6a1b      	ldr	r3, [r3, #32]
 800da38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	f023 0201 	bic.w	r2, r3, #1
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	011b      	lsls	r3, r3, #4
 800da58:	693a      	ldr	r2, [r7, #16]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	f023 030a 	bic.w	r3, r3, #10
 800da64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	697a      	ldr	r2, [r7, #20]
 800da78:	621a      	str	r2, [r3, #32]
}
 800da7a:	bf00      	nop
 800da7c:	371c      	adds	r7, #28
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr

0800da86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da86:	b480      	push	{r7}
 800da88:	b087      	sub	sp, #28
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	60b9      	str	r1, [r7, #8]
 800da90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	f023 0210 	bic.w	r2, r3, #16
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	031b      	lsls	r3, r3, #12
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	4313      	orrs	r3, r2
 800daba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	693a      	ldr	r2, [r7, #16]
 800daca:	4313      	orrs	r3, r2
 800dacc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	621a      	str	r2, [r3, #32]
}
 800dada:	bf00      	nop
 800dadc:	371c      	adds	r7, #28
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
	...

0800dae8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4b09      	ldr	r3, [pc, #36]	; (800db20 <TIM_ITRx_SetConfig+0x38>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	4313      	orrs	r3, r2
 800db06:	f043 0307 	orr.w	r3, r3, #7
 800db0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	609a      	str	r2, [r3, #8]
}
 800db12:	bf00      	nop
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	ffcfff8f 	.word	0xffcfff8f

0800db24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	021a      	lsls	r2, r3, #8
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	431a      	orrs	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	4313      	orrs	r3, r2
 800db50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	697a      	ldr	r2, [r7, #20]
 800db56:	609a      	str	r2, [r3, #8]
}
 800db58:	bf00      	nop
 800db5a:	371c      	adds	r7, #28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db74:	2b01      	cmp	r3, #1
 800db76:	d101      	bne.n	800db7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db78:	2302      	movs	r3, #2
 800db7a:	e068      	b.n	800dc4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2202      	movs	r2, #2
 800db88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a2e      	ldr	r2, [pc, #184]	; (800dc5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d004      	beq.n	800dbb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a2d      	ldr	r2, [pc, #180]	; (800dc60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d108      	bne.n	800dbc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dbb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a1e      	ldr	r2, [pc, #120]	; (800dc5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d01d      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbee:	d018      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a1b      	ldr	r2, [pc, #108]	; (800dc64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d013      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a1a      	ldr	r2, [pc, #104]	; (800dc68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d00e      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a18      	ldr	r2, [pc, #96]	; (800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d009      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a13      	ldr	r2, [pc, #76]	; (800dc60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d004      	beq.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a14      	ldr	r2, [pc, #80]	; (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d10c      	bne.n	800dc3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	4313      	orrs	r3, r2
 800dc32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	40010000 	.word	0x40010000
 800dc60:	40010400 	.word	0x40010400
 800dc64:	40000400 	.word	0x40000400
 800dc68:	40000800 	.word	0x40000800
 800dc6c:	40000c00 	.word	0x40000c00
 800dc70:	40001800 	.word	0x40001800

0800dc74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d101      	bne.n	800dcc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e042      	b.n	800dd48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d106      	bne.n	800dcda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7f5 fdc5 	bl	8003864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2224      	movs	r2, #36	; 0x24
 800dcde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f022 0201 	bic.w	r2, r2, #1
 800dcf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fc6e 	bl	800e5d4 <UART_SetConfig>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e022      	b.n	800dd48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f001 f9c2 	bl	800f094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689a      	ldr	r2, [r3, #8]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f042 0201 	orr.w	r2, r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f001 fa49 	bl	800f1d8 <UART_CheckIdleState>
 800dd46:	4603      	mov	r3, r0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b08a      	sub	sp, #40	; 0x28
 800dd54:	af02      	add	r7, sp, #8
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd66:	2b20      	cmp	r3, #32
 800dd68:	f040 8083 	bne.w	800de72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <HAL_UART_Transmit+0x28>
 800dd72:	88fb      	ldrh	r3, [r7, #6]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d101      	bne.n	800dd7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e07b      	b.n	800de74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d101      	bne.n	800dd8a <HAL_UART_Transmit+0x3a>
 800dd86:	2302      	movs	r3, #2
 800dd88:	e074      	b.n	800de74 <HAL_UART_Transmit+0x124>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2221      	movs	r2, #33	; 0x21
 800dd9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dda2:	f7f6 fa0f 	bl	80041c4 <HAL_GetTick>
 800dda6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	88fa      	ldrh	r2, [r7, #6]
 800ddac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	88fa      	ldrh	r2, [r7, #6]
 800ddb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddc0:	d108      	bne.n	800ddd4 <HAL_UART_Transmit+0x84>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d104      	bne.n	800ddd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	61bb      	str	r3, [r7, #24]
 800ddd2:	e003      	b.n	800dddc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dde4:	e02c      	b.n	800de40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2200      	movs	r2, #0
 800ddee:	2180      	movs	r1, #128	; 0x80
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f001 fa3c 	bl	800f26e <UART_WaitOnFlagUntilTimeout>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e039      	b.n	800de74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10b      	bne.n	800de1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	3302      	adds	r3, #2
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	e007      	b.n	800de2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	3301      	adds	r3, #1
 800de2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de34:	b29b      	uxth	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	b29a      	uxth	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1cc      	bne.n	800dde6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2200      	movs	r2, #0
 800de54:	2140      	movs	r1, #64	; 0x40
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f001 fa09 	bl	800f26e <UART_WaitOnFlagUntilTimeout>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800de62:	2303      	movs	r3, #3
 800de64:	e006      	b.n	800de74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2220      	movs	r2, #32
 800de6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	e000      	b.n	800de74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800de72:	2302      	movs	r3, #2
  }
}
 800de74:	4618      	mov	r0, r3
 800de76:	3720      	adds	r7, #32
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af02      	add	r7, sp, #8
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de92:	2b20      	cmp	r3, #32
 800de94:	f040 80c0 	bne.w	800e018 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <HAL_UART_Receive+0x28>
 800de9e:	88fb      	ldrh	r3, [r7, #6]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e0b8      	b.n	800e01a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d101      	bne.n	800deb6 <HAL_UART_Receive+0x3a>
 800deb2:	2302      	movs	r3, #2
 800deb4:	e0b1      	b.n	800e01a <HAL_UART_Receive+0x19e>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2222      	movs	r2, #34	; 0x22
 800deca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ded4:	f7f6 f976 	bl	80041c4 <HAL_GetTick>
 800ded8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	88fa      	ldrh	r2, [r7, #6]
 800dede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800def2:	d10e      	bne.n	800df12 <HAL_UART_Receive+0x96>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d105      	bne.n	800df08 <HAL_UART_Receive+0x8c>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800df02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df06:	e02d      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df10:	e028      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10d      	bne.n	800df36 <HAL_UART_Receive+0xba>
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d104      	bne.n	800df2c <HAL_UART_Receive+0xb0>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	22ff      	movs	r2, #255	; 0xff
 800df26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df2a:	e01b      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	227f      	movs	r2, #127	; 0x7f
 800df30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df34:	e016      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df3e:	d10d      	bne.n	800df5c <HAL_UART_Receive+0xe0>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d104      	bne.n	800df52 <HAL_UART_Receive+0xd6>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	227f      	movs	r2, #127	; 0x7f
 800df4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df50:	e008      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	223f      	movs	r2, #63	; 0x3f
 800df56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df5a:	e003      	b.n	800df64 <HAL_UART_Receive+0xe8>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df74:	d108      	bne.n	800df88 <HAL_UART_Receive+0x10c>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d104      	bne.n	800df88 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	61bb      	str	r3, [r7, #24]
 800df86:	e003      	b.n	800df90 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df8c:	2300      	movs	r3, #0
 800df8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800df98:	e032      	b.n	800e000 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	2120      	movs	r1, #32
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f001 f962 	bl	800f26e <UART_WaitOnFlagUntilTimeout>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e032      	b.n	800e01a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10c      	bne.n	800dfd4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	8a7b      	ldrh	r3, [r7, #18]
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	3302      	adds	r3, #2
 800dfd0:	61bb      	str	r3, [r7, #24]
 800dfd2:	e00c      	b.n	800dfee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	8a7b      	ldrh	r3, [r7, #18]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	3301      	adds	r3, #1
 800dfec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e006:	b29b      	uxth	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1c6      	bne.n	800df9a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2220      	movs	r2, #32
 800e010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	e000      	b.n	800e01a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800e018:	2302      	movs	r3, #2
  }
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3720      	adds	r7, #32
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
	...

0800e024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	69db      	ldr	r3, [r3, #28]
 800e032:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	f640 030f 	movw	r3, #2063	; 0x80f
 800e04a:	4013      	ands	r3, r2
 800e04c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d118      	bne.n	800e086 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	f003 0320 	and.w	r3, r3, #32
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d013      	beq.n	800e086 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	f003 0320 	and.w	r3, r3, #32
 800e064:	2b00      	cmp	r3, #0
 800e066:	d104      	bne.n	800e072 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d009      	beq.n	800e086 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e076:	2b00      	cmp	r3, #0
 800e078:	f000 8282 	beq.w	800e580 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	4798      	blx	r3
      }
      return;
 800e084:	e27c      	b.n	800e580 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f000 80ef 	beq.w	800e26c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	4b73      	ldr	r3, [pc, #460]	; (800e260 <HAL_UART_IRQHandler+0x23c>)
 800e092:	4013      	ands	r3, r2
 800e094:	2b00      	cmp	r3, #0
 800e096:	d105      	bne.n	800e0a4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	4b72      	ldr	r3, [pc, #456]	; (800e264 <HAL_UART_IRQHandler+0x240>)
 800e09c:	4013      	ands	r3, r2
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 80e4 	beq.w	800e26c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d010      	beq.n	800e0d0 <HAL_UART_IRQHandler+0xac>
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0c6:	f043 0201 	orr.w	r2, r3, #1
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	f003 0302 	and.w	r3, r3, #2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d010      	beq.n	800e0fc <HAL_UART_IRQHandler+0xd8>
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f003 0301 	and.w	r3, r3, #1
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00b      	beq.n	800e0fc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f2:	f043 0204 	orr.w	r2, r3, #4
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d010      	beq.n	800e128 <HAL_UART_IRQHandler+0x104>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2204      	movs	r2, #4
 800e116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e11e:	f043 0202 	orr.w	r2, r3, #2
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	f003 0308 	and.w	r3, r3, #8
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d015      	beq.n	800e15e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	f003 0320 	and.w	r3, r3, #32
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d104      	bne.n	800e146 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	4b48      	ldr	r3, [pc, #288]	; (800e260 <HAL_UART_IRQHandler+0x23c>)
 800e140:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2208      	movs	r2, #8
 800e14c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e154:	f043 0208 	orr.w	r2, r3, #8
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e164:	2b00      	cmp	r3, #0
 800e166:	d011      	beq.n	800e18c <HAL_UART_IRQHandler+0x168>
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00c      	beq.n	800e18c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e182:	f043 0220 	orr.w	r2, r3, #32
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e192:	2b00      	cmp	r3, #0
 800e194:	f000 81f6 	beq.w	800e584 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	f003 0320 	and.w	r3, r3, #32
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d011      	beq.n	800e1c6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	f003 0320 	and.w	r3, r3, #32
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d104      	bne.n	800e1b6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d007      	beq.n	800e1c6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d8:	2b40      	cmp	r3, #64	; 0x40
 800e1da:	d004      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d031      	beq.n	800e24a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f001 f980 	bl	800f4ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f6:	2b40      	cmp	r3, #64	; 0x40
 800e1f8:	d123      	bne.n	800e242 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e208:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d013      	beq.n	800e23a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e216:	4a14      	ldr	r2, [pc, #80]	; (800e268 <HAL_UART_IRQHandler+0x244>)
 800e218:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f7 fa46 	bl	80056b0 <HAL_DMA_Abort_IT>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d017      	beq.n	800e25a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e234:	4610      	mov	r0, r2
 800e236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e238:	e00f      	b.n	800e25a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f9c0 	bl	800e5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e240:	e00b      	b.n	800e25a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f9bc 	bl	800e5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e248:	e007      	b.n	800e25a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f9b8 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e258:	e194      	b.n	800e584 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e25a:	bf00      	nop
    return;
 800e25c:	e192      	b.n	800e584 <HAL_UART_IRQHandler+0x560>
 800e25e:	bf00      	nop
 800e260:	10000001 	.word	0x10000001
 800e264:	04000120 	.word	0x04000120
 800e268:	0800f551 	.word	0x0800f551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e270:	2b01      	cmp	r3, #1
 800e272:	f040 810f 	bne.w	800e494 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	f003 0310 	and.w	r3, r3, #16
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 8109 	beq.w	800e494 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	f003 0310 	and.w	r3, r3, #16
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 8103 	beq.w	800e494 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2210      	movs	r2, #16
 800e294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a0:	2b40      	cmp	r3, #64	; 0x40
 800e2a2:	f040 80bb 	bne.w	800e41c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a96      	ldr	r2, [pc, #600]	; (800e508 <HAL_UART_IRQHandler+0x4e4>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d059      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a94      	ldr	r2, [pc, #592]	; (800e50c <HAL_UART_IRQHandler+0x4e8>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d053      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a92      	ldr	r2, [pc, #584]	; (800e510 <HAL_UART_IRQHandler+0x4ec>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d04d      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a90      	ldr	r2, [pc, #576]	; (800e514 <HAL_UART_IRQHandler+0x4f0>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d047      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a8e      	ldr	r2, [pc, #568]	; (800e518 <HAL_UART_IRQHandler+0x4f4>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d041      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a8c      	ldr	r2, [pc, #560]	; (800e51c <HAL_UART_IRQHandler+0x4f8>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d03b      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a8a      	ldr	r2, [pc, #552]	; (800e520 <HAL_UART_IRQHandler+0x4fc>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d035      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a88      	ldr	r2, [pc, #544]	; (800e524 <HAL_UART_IRQHandler+0x500>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d02f      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a86      	ldr	r2, [pc, #536]	; (800e528 <HAL_UART_IRQHandler+0x504>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d029      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a84      	ldr	r2, [pc, #528]	; (800e52c <HAL_UART_IRQHandler+0x508>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d023      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a82      	ldr	r2, [pc, #520]	; (800e530 <HAL_UART_IRQHandler+0x50c>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d01d      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a80      	ldr	r2, [pc, #512]	; (800e534 <HAL_UART_IRQHandler+0x510>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d017      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a7e      	ldr	r2, [pc, #504]	; (800e538 <HAL_UART_IRQHandler+0x514>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d011      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a7c      	ldr	r2, [pc, #496]	; (800e53c <HAL_UART_IRQHandler+0x518>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d00b      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a7a      	ldr	r2, [pc, #488]	; (800e540 <HAL_UART_IRQHandler+0x51c>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d005      	beq.n	800e366 <HAL_UART_IRQHandler+0x342>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a78      	ldr	r2, [pc, #480]	; (800e544 <HAL_UART_IRQHandler+0x520>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d105      	bne.n	800e372 <HAL_UART_IRQHandler+0x34e>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	e004      	b.n	800e37c <HAL_UART_IRQHandler+0x358>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e37e:	893b      	ldrh	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 8101 	beq.w	800e588 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e38c:	893a      	ldrh	r2, [r7, #8]
 800e38e:	429a      	cmp	r2, r3
 800e390:	f080 80fa 	bcs.w	800e588 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	893a      	ldrh	r2, [r7, #8]
 800e398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a0:	69db      	ldr	r3, [r3, #28]
 800e3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3a6:	d02b      	beq.n	800e400 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	689a      	ldr	r2, [r3, #8]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 0201 	bic.w	r2, r2, #1
 800e3c6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	689a      	ldr	r2, [r3, #8]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2220      	movs	r2, #32
 800e3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f022 0210 	bic.w	r2, r2, #16
 800e3f4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f6 fe3a 	bl	8005074 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	b29b      	uxth	r3, r3
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f2 fffd 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e41a:	e0b5      	b.n	800e588 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e428:	b29b      	uxth	r3, r3
 800e42a:	1ad3      	subs	r3, r2, r3
 800e42c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e434:	b29b      	uxth	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	f000 80a8 	beq.w	800e58c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e43c:	897b      	ldrh	r3, [r7, #10]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 80a4 	beq.w	800e58c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e452:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6899      	ldr	r1, [r3, #8]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	4b3a      	ldr	r3, [pc, #232]	; (800e548 <HAL_UART_IRQHandler+0x524>)
 800e460:	400b      	ands	r3, r1
 800e462:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2220      	movs	r2, #32
 800e468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f022 0210 	bic.w	r2, r2, #16
 800e486:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e488:	897b      	ldrh	r3, [r7, #10]
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7f2 ffc1 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e492:	e07b      	b.n	800e58c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00d      	beq.n	800e4ba <HAL_UART_IRQHandler+0x496>
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d008      	beq.n	800e4ba <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e4b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 fb58 	bl	800fb68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4b8:	e06b      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d012      	beq.n	800e4ea <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d104      	bne.n	800e4d8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d008      	beq.n	800e4ea <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d057      	beq.n	800e590 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	4798      	blx	r3
    }
    return;
 800e4e8:	e052      	b.n	800e590 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d02b      	beq.n	800e54c <HAL_UART_IRQHandler+0x528>
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d026      	beq.n	800e54c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f001 f83c 	bl	800f57c <UART_EndTransmit_IT>
    return;
 800e504:	e045      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
 800e506:	bf00      	nop
 800e508:	40020010 	.word	0x40020010
 800e50c:	40020028 	.word	0x40020028
 800e510:	40020040 	.word	0x40020040
 800e514:	40020058 	.word	0x40020058
 800e518:	40020070 	.word	0x40020070
 800e51c:	40020088 	.word	0x40020088
 800e520:	400200a0 	.word	0x400200a0
 800e524:	400200b8 	.word	0x400200b8
 800e528:	40020410 	.word	0x40020410
 800e52c:	40020428 	.word	0x40020428
 800e530:	40020440 	.word	0x40020440
 800e534:	40020458 	.word	0x40020458
 800e538:	40020470 	.word	0x40020470
 800e53c:	40020488 	.word	0x40020488
 800e540:	400204a0 	.word	0x400204a0
 800e544:	400204b8 	.word	0x400204b8
 800e548:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e552:	2b00      	cmp	r3, #0
 800e554:	d008      	beq.n	800e568 <HAL_UART_IRQHandler+0x544>
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d003      	beq.n	800e568 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f001 fb15 	bl	800fb90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e566:	e014      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00f      	beq.n	800e592 <HAL_UART_IRQHandler+0x56e>
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	2b00      	cmp	r3, #0
 800e576:	da0c      	bge.n	800e592 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 faff 	bl	800fb7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e57e:	e008      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
      return;
 800e580:	bf00      	nop
 800e582:	e006      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
    return;
 800e584:	bf00      	nop
 800e586:	e004      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
      return;
 800e588:	bf00      	nop
 800e58a:	e002      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
      return;
 800e58c:	bf00      	nop
 800e58e:	e000      	b.n	800e592 <HAL_UART_IRQHandler+0x56e>
    return;
 800e590:	bf00      	nop
  }
}
 800e592:	3720      	adds	r7, #32
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5d4:	b5b0      	push	{r4, r5, r7, lr}
 800e5d6:	b08e      	sub	sp, #56	; 0x38
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	689a      	ldr	r2, [r3, #8]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	695b      	ldr	r3, [r3, #20]
 800e5f0:	431a      	orrs	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	69db      	ldr	r3, [r3, #28]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	4bbf      	ldr	r3, [pc, #764]	; (800e900 <UART_SetConfig+0x32c>)
 800e602:	4013      	ands	r3, r2
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	6812      	ldr	r2, [r2, #0]
 800e608:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e60a:	430b      	orrs	r3, r1
 800e60c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68da      	ldr	r2, [r3, #12]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	430a      	orrs	r2, r1
 800e622:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4ab5      	ldr	r2, [pc, #724]	; (800e904 <UART_SetConfig+0x330>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d004      	beq.n	800e63e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a1b      	ldr	r3, [r3, #32]
 800e638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e63a:	4313      	orrs	r3, r2
 800e63c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	4bb0      	ldr	r3, [pc, #704]	; (800e908 <UART_SetConfig+0x334>)
 800e646:	4013      	ands	r3, r2
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	6812      	ldr	r2, [r2, #0]
 800e64c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e64e:	430b      	orrs	r3, r1
 800e650:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e658:	f023 010f 	bic.w	r1, r3, #15
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	430a      	orrs	r2, r1
 800e666:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4aa7      	ldr	r2, [pc, #668]	; (800e90c <UART_SetConfig+0x338>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d176      	bne.n	800e760 <UART_SetConfig+0x18c>
 800e672:	4ba7      	ldr	r3, [pc, #668]	; (800e910 <UART_SetConfig+0x33c>)
 800e674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e67a:	2b28      	cmp	r3, #40	; 0x28
 800e67c:	d86c      	bhi.n	800e758 <UART_SetConfig+0x184>
 800e67e:	a201      	add	r2, pc, #4	; (adr r2, 800e684 <UART_SetConfig+0xb0>)
 800e680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e684:	0800e729 	.word	0x0800e729
 800e688:	0800e759 	.word	0x0800e759
 800e68c:	0800e759 	.word	0x0800e759
 800e690:	0800e759 	.word	0x0800e759
 800e694:	0800e759 	.word	0x0800e759
 800e698:	0800e759 	.word	0x0800e759
 800e69c:	0800e759 	.word	0x0800e759
 800e6a0:	0800e759 	.word	0x0800e759
 800e6a4:	0800e731 	.word	0x0800e731
 800e6a8:	0800e759 	.word	0x0800e759
 800e6ac:	0800e759 	.word	0x0800e759
 800e6b0:	0800e759 	.word	0x0800e759
 800e6b4:	0800e759 	.word	0x0800e759
 800e6b8:	0800e759 	.word	0x0800e759
 800e6bc:	0800e759 	.word	0x0800e759
 800e6c0:	0800e759 	.word	0x0800e759
 800e6c4:	0800e739 	.word	0x0800e739
 800e6c8:	0800e759 	.word	0x0800e759
 800e6cc:	0800e759 	.word	0x0800e759
 800e6d0:	0800e759 	.word	0x0800e759
 800e6d4:	0800e759 	.word	0x0800e759
 800e6d8:	0800e759 	.word	0x0800e759
 800e6dc:	0800e759 	.word	0x0800e759
 800e6e0:	0800e759 	.word	0x0800e759
 800e6e4:	0800e741 	.word	0x0800e741
 800e6e8:	0800e759 	.word	0x0800e759
 800e6ec:	0800e759 	.word	0x0800e759
 800e6f0:	0800e759 	.word	0x0800e759
 800e6f4:	0800e759 	.word	0x0800e759
 800e6f8:	0800e759 	.word	0x0800e759
 800e6fc:	0800e759 	.word	0x0800e759
 800e700:	0800e759 	.word	0x0800e759
 800e704:	0800e749 	.word	0x0800e749
 800e708:	0800e759 	.word	0x0800e759
 800e70c:	0800e759 	.word	0x0800e759
 800e710:	0800e759 	.word	0x0800e759
 800e714:	0800e759 	.word	0x0800e759
 800e718:	0800e759 	.word	0x0800e759
 800e71c:	0800e759 	.word	0x0800e759
 800e720:	0800e759 	.word	0x0800e759
 800e724:	0800e751 	.word	0x0800e751
 800e728:	2301      	movs	r3, #1
 800e72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e72e:	e222      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e730:	2304      	movs	r3, #4
 800e732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e736:	e21e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e738:	2308      	movs	r3, #8
 800e73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e73e:	e21a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e740:	2310      	movs	r3, #16
 800e742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e746:	e216      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e748:	2320      	movs	r3, #32
 800e74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e74e:	e212      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e750:	2340      	movs	r3, #64	; 0x40
 800e752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e756:	e20e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e758:	2380      	movs	r3, #128	; 0x80
 800e75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75e:	e20a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a6b      	ldr	r2, [pc, #428]	; (800e914 <UART_SetConfig+0x340>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d130      	bne.n	800e7cc <UART_SetConfig+0x1f8>
 800e76a:	4b69      	ldr	r3, [pc, #420]	; (800e910 <UART_SetConfig+0x33c>)
 800e76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76e:	f003 0307 	and.w	r3, r3, #7
 800e772:	2b05      	cmp	r3, #5
 800e774:	d826      	bhi.n	800e7c4 <UART_SetConfig+0x1f0>
 800e776:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <UART_SetConfig+0x1a8>)
 800e778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77c:	0800e795 	.word	0x0800e795
 800e780:	0800e79d 	.word	0x0800e79d
 800e784:	0800e7a5 	.word	0x0800e7a5
 800e788:	0800e7ad 	.word	0x0800e7ad
 800e78c:	0800e7b5 	.word	0x0800e7b5
 800e790:	0800e7bd 	.word	0x0800e7bd
 800e794:	2300      	movs	r3, #0
 800e796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e79a:	e1ec      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e79c:	2304      	movs	r3, #4
 800e79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7a2:	e1e8      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7a4:	2308      	movs	r3, #8
 800e7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7aa:	e1e4      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7ac:	2310      	movs	r3, #16
 800e7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7b2:	e1e0      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7b4:	2320      	movs	r3, #32
 800e7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ba:	e1dc      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7bc:	2340      	movs	r3, #64	; 0x40
 800e7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c2:	e1d8      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7c4:	2380      	movs	r3, #128	; 0x80
 800e7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ca:	e1d4      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a51      	ldr	r2, [pc, #324]	; (800e918 <UART_SetConfig+0x344>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d130      	bne.n	800e838 <UART_SetConfig+0x264>
 800e7d6:	4b4e      	ldr	r3, [pc, #312]	; (800e910 <UART_SetConfig+0x33c>)
 800e7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7da:	f003 0307 	and.w	r3, r3, #7
 800e7de:	2b05      	cmp	r3, #5
 800e7e0:	d826      	bhi.n	800e830 <UART_SetConfig+0x25c>
 800e7e2:	a201      	add	r2, pc, #4	; (adr r2, 800e7e8 <UART_SetConfig+0x214>)
 800e7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e8:	0800e801 	.word	0x0800e801
 800e7ec:	0800e809 	.word	0x0800e809
 800e7f0:	0800e811 	.word	0x0800e811
 800e7f4:	0800e819 	.word	0x0800e819
 800e7f8:	0800e821 	.word	0x0800e821
 800e7fc:	0800e829 	.word	0x0800e829
 800e800:	2300      	movs	r3, #0
 800e802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e806:	e1b6      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e808:	2304      	movs	r3, #4
 800e80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e80e:	e1b2      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e810:	2308      	movs	r3, #8
 800e812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e816:	e1ae      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e818:	2310      	movs	r3, #16
 800e81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e81e:	e1aa      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e820:	2320      	movs	r3, #32
 800e822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e826:	e1a6      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e828:	2340      	movs	r3, #64	; 0x40
 800e82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e82e:	e1a2      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e830:	2380      	movs	r3, #128	; 0x80
 800e832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e836:	e19e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a37      	ldr	r2, [pc, #220]	; (800e91c <UART_SetConfig+0x348>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d130      	bne.n	800e8a4 <UART_SetConfig+0x2d0>
 800e842:	4b33      	ldr	r3, [pc, #204]	; (800e910 <UART_SetConfig+0x33c>)
 800e844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d826      	bhi.n	800e89c <UART_SetConfig+0x2c8>
 800e84e:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <UART_SetConfig+0x280>)
 800e850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e854:	0800e86d 	.word	0x0800e86d
 800e858:	0800e875 	.word	0x0800e875
 800e85c:	0800e87d 	.word	0x0800e87d
 800e860:	0800e885 	.word	0x0800e885
 800e864:	0800e88d 	.word	0x0800e88d
 800e868:	0800e895 	.word	0x0800e895
 800e86c:	2300      	movs	r3, #0
 800e86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e872:	e180      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e874:	2304      	movs	r3, #4
 800e876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87a:	e17c      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e87c:	2308      	movs	r3, #8
 800e87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e882:	e178      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e884:	2310      	movs	r3, #16
 800e886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e88a:	e174      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e88c:	2320      	movs	r3, #32
 800e88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e892:	e170      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e894:	2340      	movs	r3, #64	; 0x40
 800e896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e89a:	e16c      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e89c:	2380      	movs	r3, #128	; 0x80
 800e89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8a2:	e168      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a1d      	ldr	r2, [pc, #116]	; (800e920 <UART_SetConfig+0x34c>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d142      	bne.n	800e934 <UART_SetConfig+0x360>
 800e8ae:	4b18      	ldr	r3, [pc, #96]	; (800e910 <UART_SetConfig+0x33c>)
 800e8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b05      	cmp	r3, #5
 800e8b8:	d838      	bhi.n	800e92c <UART_SetConfig+0x358>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <UART_SetConfig+0x2ec>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e8d9 	.word	0x0800e8d9
 800e8c4:	0800e8e1 	.word	0x0800e8e1
 800e8c8:	0800e8e9 	.word	0x0800e8e9
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f9 	.word	0x0800e8f9
 800e8d4:	0800e925 	.word	0x0800e925
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8de:	e14a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e6:	e146      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ee:	e142      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8f6:	e13e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8fe:	e13a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e900:	cfff69f3 	.word	0xcfff69f3
 800e904:	58000c00 	.word	0x58000c00
 800e908:	11fff4ff 	.word	0x11fff4ff
 800e90c:	40011000 	.word	0x40011000
 800e910:	58024400 	.word	0x58024400
 800e914:	40004400 	.word	0x40004400
 800e918:	40004800 	.word	0x40004800
 800e91c:	40004c00 	.word	0x40004c00
 800e920:	40005000 	.word	0x40005000
 800e924:	2340      	movs	r3, #64	; 0x40
 800e926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92a:	e124      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e92c:	2380      	movs	r3, #128	; 0x80
 800e92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e932:	e120      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4acc      	ldr	r2, [pc, #816]	; (800ec6c <UART_SetConfig+0x698>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d176      	bne.n	800ea2c <UART_SetConfig+0x458>
 800e93e:	4bcc      	ldr	r3, [pc, #816]	; (800ec70 <UART_SetConfig+0x69c>)
 800e940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e946:	2b28      	cmp	r3, #40	; 0x28
 800e948:	d86c      	bhi.n	800ea24 <UART_SetConfig+0x450>
 800e94a:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <UART_SetConfig+0x37c>)
 800e94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e950:	0800e9f5 	.word	0x0800e9f5
 800e954:	0800ea25 	.word	0x0800ea25
 800e958:	0800ea25 	.word	0x0800ea25
 800e95c:	0800ea25 	.word	0x0800ea25
 800e960:	0800ea25 	.word	0x0800ea25
 800e964:	0800ea25 	.word	0x0800ea25
 800e968:	0800ea25 	.word	0x0800ea25
 800e96c:	0800ea25 	.word	0x0800ea25
 800e970:	0800e9fd 	.word	0x0800e9fd
 800e974:	0800ea25 	.word	0x0800ea25
 800e978:	0800ea25 	.word	0x0800ea25
 800e97c:	0800ea25 	.word	0x0800ea25
 800e980:	0800ea25 	.word	0x0800ea25
 800e984:	0800ea25 	.word	0x0800ea25
 800e988:	0800ea25 	.word	0x0800ea25
 800e98c:	0800ea25 	.word	0x0800ea25
 800e990:	0800ea05 	.word	0x0800ea05
 800e994:	0800ea25 	.word	0x0800ea25
 800e998:	0800ea25 	.word	0x0800ea25
 800e99c:	0800ea25 	.word	0x0800ea25
 800e9a0:	0800ea25 	.word	0x0800ea25
 800e9a4:	0800ea25 	.word	0x0800ea25
 800e9a8:	0800ea25 	.word	0x0800ea25
 800e9ac:	0800ea25 	.word	0x0800ea25
 800e9b0:	0800ea0d 	.word	0x0800ea0d
 800e9b4:	0800ea25 	.word	0x0800ea25
 800e9b8:	0800ea25 	.word	0x0800ea25
 800e9bc:	0800ea25 	.word	0x0800ea25
 800e9c0:	0800ea25 	.word	0x0800ea25
 800e9c4:	0800ea25 	.word	0x0800ea25
 800e9c8:	0800ea25 	.word	0x0800ea25
 800e9cc:	0800ea25 	.word	0x0800ea25
 800e9d0:	0800ea15 	.word	0x0800ea15
 800e9d4:	0800ea25 	.word	0x0800ea25
 800e9d8:	0800ea25 	.word	0x0800ea25
 800e9dc:	0800ea25 	.word	0x0800ea25
 800e9e0:	0800ea25 	.word	0x0800ea25
 800e9e4:	0800ea25 	.word	0x0800ea25
 800e9e8:	0800ea25 	.word	0x0800ea25
 800e9ec:	0800ea25 	.word	0x0800ea25
 800e9f0:	0800ea1d 	.word	0x0800ea1d
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9fa:	e0bc      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800e9fc:	2304      	movs	r3, #4
 800e9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea02:	e0b8      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea04:	2308      	movs	r3, #8
 800ea06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0a:	e0b4      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea12:	e0b0      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea14:	2320      	movs	r3, #32
 800ea16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1a:	e0ac      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea1c:	2340      	movs	r3, #64	; 0x40
 800ea1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea22:	e0a8      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea24:	2380      	movs	r3, #128	; 0x80
 800ea26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2a:	e0a4      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a90      	ldr	r2, [pc, #576]	; (800ec74 <UART_SetConfig+0x6a0>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d130      	bne.n	800ea98 <UART_SetConfig+0x4c4>
 800ea36:	4b8e      	ldr	r3, [pc, #568]	; (800ec70 <UART_SetConfig+0x69c>)
 800ea38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3a:	f003 0307 	and.w	r3, r3, #7
 800ea3e:	2b05      	cmp	r3, #5
 800ea40:	d826      	bhi.n	800ea90 <UART_SetConfig+0x4bc>
 800ea42:	a201      	add	r2, pc, #4	; (adr r2, 800ea48 <UART_SetConfig+0x474>)
 800ea44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea48:	0800ea61 	.word	0x0800ea61
 800ea4c:	0800ea69 	.word	0x0800ea69
 800ea50:	0800ea71 	.word	0x0800ea71
 800ea54:	0800ea79 	.word	0x0800ea79
 800ea58:	0800ea81 	.word	0x0800ea81
 800ea5c:	0800ea89 	.word	0x0800ea89
 800ea60:	2300      	movs	r3, #0
 800ea62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea66:	e086      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea68:	2304      	movs	r3, #4
 800ea6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea6e:	e082      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea70:	2308      	movs	r3, #8
 800ea72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea76:	e07e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea78:	2310      	movs	r3, #16
 800ea7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7e:	e07a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea80:	2320      	movs	r3, #32
 800ea82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea86:	e076      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea88:	2340      	movs	r3, #64	; 0x40
 800ea8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8e:	e072      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea90:	2380      	movs	r3, #128	; 0x80
 800ea92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea96:	e06e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a76      	ldr	r2, [pc, #472]	; (800ec78 <UART_SetConfig+0x6a4>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d130      	bne.n	800eb04 <UART_SetConfig+0x530>
 800eaa2:	4b73      	ldr	r3, [pc, #460]	; (800ec70 <UART_SetConfig+0x69c>)
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa6:	f003 0307 	and.w	r3, r3, #7
 800eaaa:	2b05      	cmp	r3, #5
 800eaac:	d826      	bhi.n	800eafc <UART_SetConfig+0x528>
 800eaae:	a201      	add	r2, pc, #4	; (adr r2, 800eab4 <UART_SetConfig+0x4e0>)
 800eab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab4:	0800eacd 	.word	0x0800eacd
 800eab8:	0800ead5 	.word	0x0800ead5
 800eabc:	0800eadd 	.word	0x0800eadd
 800eac0:	0800eae5 	.word	0x0800eae5
 800eac4:	0800eaed 	.word	0x0800eaed
 800eac8:	0800eaf5 	.word	0x0800eaf5
 800eacc:	2300      	movs	r3, #0
 800eace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead2:	e050      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800ead4:	2304      	movs	r3, #4
 800ead6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eada:	e04c      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eadc:	2308      	movs	r3, #8
 800eade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae2:	e048      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eae4:	2310      	movs	r3, #16
 800eae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaea:	e044      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eaec:	2320      	movs	r3, #32
 800eaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaf2:	e040      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eaf4:	2340      	movs	r3, #64	; 0x40
 800eaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eafa:	e03c      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eafc:	2380      	movs	r3, #128	; 0x80
 800eafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb02:	e038      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a5c      	ldr	r2, [pc, #368]	; (800ec7c <UART_SetConfig+0x6a8>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d130      	bne.n	800eb70 <UART_SetConfig+0x59c>
 800eb0e:	4b58      	ldr	r3, [pc, #352]	; (800ec70 <UART_SetConfig+0x69c>)
 800eb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb12:	f003 0307 	and.w	r3, r3, #7
 800eb16:	2b05      	cmp	r3, #5
 800eb18:	d826      	bhi.n	800eb68 <UART_SetConfig+0x594>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <UART_SetConfig+0x54c>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800eb39 	.word	0x0800eb39
 800eb24:	0800eb41 	.word	0x0800eb41
 800eb28:	0800eb49 	.word	0x0800eb49
 800eb2c:	0800eb51 	.word	0x0800eb51
 800eb30:	0800eb59 	.word	0x0800eb59
 800eb34:	0800eb61 	.word	0x0800eb61
 800eb38:	2302      	movs	r3, #2
 800eb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3e:	e01a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb40:	2304      	movs	r3, #4
 800eb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb46:	e016      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb48:	2308      	movs	r3, #8
 800eb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4e:	e012      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb50:	2310      	movs	r3, #16
 800eb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb56:	e00e      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb58:	2320      	movs	r3, #32
 800eb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5e:	e00a      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb60:	2340      	movs	r3, #64	; 0x40
 800eb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb66:	e006      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb68:	2380      	movs	r3, #128	; 0x80
 800eb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6e:	e002      	b.n	800eb76 <UART_SetConfig+0x5a2>
 800eb70:	2380      	movs	r3, #128	; 0x80
 800eb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a40      	ldr	r2, [pc, #256]	; (800ec7c <UART_SetConfig+0x6a8>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	f040 80ef 	bne.w	800ed60 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb86:	2b20      	cmp	r3, #32
 800eb88:	dc46      	bgt.n	800ec18 <UART_SetConfig+0x644>
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	f2c0 8081 	blt.w	800ec92 <UART_SetConfig+0x6be>
 800eb90:	3b02      	subs	r3, #2
 800eb92:	2b1e      	cmp	r3, #30
 800eb94:	d87d      	bhi.n	800ec92 <UART_SetConfig+0x6be>
 800eb96:	a201      	add	r2, pc, #4	; (adr r2, 800eb9c <UART_SetConfig+0x5c8>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ec1f 	.word	0x0800ec1f
 800eba0:	0800ec93 	.word	0x0800ec93
 800eba4:	0800ec27 	.word	0x0800ec27
 800eba8:	0800ec93 	.word	0x0800ec93
 800ebac:	0800ec93 	.word	0x0800ec93
 800ebb0:	0800ec93 	.word	0x0800ec93
 800ebb4:	0800ec37 	.word	0x0800ec37
 800ebb8:	0800ec93 	.word	0x0800ec93
 800ebbc:	0800ec93 	.word	0x0800ec93
 800ebc0:	0800ec93 	.word	0x0800ec93
 800ebc4:	0800ec93 	.word	0x0800ec93
 800ebc8:	0800ec93 	.word	0x0800ec93
 800ebcc:	0800ec93 	.word	0x0800ec93
 800ebd0:	0800ec93 	.word	0x0800ec93
 800ebd4:	0800ec47 	.word	0x0800ec47
 800ebd8:	0800ec93 	.word	0x0800ec93
 800ebdc:	0800ec93 	.word	0x0800ec93
 800ebe0:	0800ec93 	.word	0x0800ec93
 800ebe4:	0800ec93 	.word	0x0800ec93
 800ebe8:	0800ec93 	.word	0x0800ec93
 800ebec:	0800ec93 	.word	0x0800ec93
 800ebf0:	0800ec93 	.word	0x0800ec93
 800ebf4:	0800ec93 	.word	0x0800ec93
 800ebf8:	0800ec93 	.word	0x0800ec93
 800ebfc:	0800ec93 	.word	0x0800ec93
 800ec00:	0800ec93 	.word	0x0800ec93
 800ec04:	0800ec93 	.word	0x0800ec93
 800ec08:	0800ec93 	.word	0x0800ec93
 800ec0c:	0800ec93 	.word	0x0800ec93
 800ec10:	0800ec93 	.word	0x0800ec93
 800ec14:	0800ec85 	.word	0x0800ec85
 800ec18:	2b40      	cmp	r3, #64	; 0x40
 800ec1a:	d036      	beq.n	800ec8a <UART_SetConfig+0x6b6>
 800ec1c:	e039      	b.n	800ec92 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ec1e:	f7fc fcab 	bl	800b578 <HAL_RCCEx_GetD3PCLK1Freq>
 800ec22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec24:	e03b      	b.n	800ec9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec26:	f107 0314 	add.w	r3, r7, #20
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fc fcba 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec34:	e033      	b.n	800ec9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec36:	f107 0308 	add.w	r3, r7, #8
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fc fe06 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec44:	e02b      	b.n	800ec9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec46:	4b0a      	ldr	r3, [pc, #40]	; (800ec70 <UART_SetConfig+0x69c>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f003 0320 	and.w	r3, r3, #32
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d009      	beq.n	800ec66 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec52:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <UART_SetConfig+0x69c>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	08db      	lsrs	r3, r3, #3
 800ec58:	f003 0303 	and.w	r3, r3, #3
 800ec5c:	4a08      	ldr	r2, [pc, #32]	; (800ec80 <UART_SetConfig+0x6ac>)
 800ec5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec64:	e01b      	b.n	800ec9e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ec66:	4b06      	ldr	r3, [pc, #24]	; (800ec80 <UART_SetConfig+0x6ac>)
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec6a:	e018      	b.n	800ec9e <UART_SetConfig+0x6ca>
 800ec6c:	40011400 	.word	0x40011400
 800ec70:	58024400 	.word	0x58024400
 800ec74:	40007800 	.word	0x40007800
 800ec78:	40007c00 	.word	0x40007c00
 800ec7c:	58000c00 	.word	0x58000c00
 800ec80:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec84:	4bc4      	ldr	r3, [pc, #784]	; (800ef98 <UART_SetConfig+0x9c4>)
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec88:	e009      	b.n	800ec9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec90:	e005      	b.n	800ec9e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ec9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 81da 	beq.w	800f05a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	4abc      	ldr	r2, [pc, #752]	; (800ef9c <UART_SetConfig+0x9c8>)
 800ecac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecb8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	4413      	add	r3, r2
 800ecc4:	6a3a      	ldr	r2, [r7, #32]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d305      	bcc.n	800ecd6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecd0:	6a3a      	ldr	r2, [r7, #32]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d903      	bls.n	800ecde <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ecdc:	e1bd      	b.n	800f05a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece0:	4618      	mov	r0, r3
 800ece2:	f04f 0100 	mov.w	r1, #0
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecea:	4aac      	ldr	r2, [pc, #688]	; (800ef9c <UART_SetConfig+0x9c8>)
 800ecec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	f04f 0300 	mov.w	r3, #0
 800ecf6:	f7f1 fb43 	bl	8000380 <__aeabi_uldivmod>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	4610      	mov	r0, r2
 800ed00:	4619      	mov	r1, r3
 800ed02:	f04f 0200 	mov.w	r2, #0
 800ed06:	f04f 0300 	mov.w	r3, #0
 800ed0a:	020b      	lsls	r3, r1, #8
 800ed0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed10:	0202      	lsls	r2, r0, #8
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	6849      	ldr	r1, [r1, #4]
 800ed16:	0849      	lsrs	r1, r1, #1
 800ed18:	4608      	mov	r0, r1
 800ed1a:	f04f 0100 	mov.w	r1, #0
 800ed1e:	1814      	adds	r4, r2, r0
 800ed20:	eb43 0501 	adc.w	r5, r3, r1
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f04f 0300 	mov.w	r3, #0
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f1 fb25 	bl	8000380 <__aeabi_uldivmod>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed44:	d308      	bcc.n	800ed58 <UART_SetConfig+0x784>
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed4c:	d204      	bcs.n	800ed58 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed54:	60da      	str	r2, [r3, #12]
 800ed56:	e180      	b.n	800f05a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ed5e:	e17c      	b.n	800f05a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed68:	f040 80bf 	bne.w	800eeea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800ed6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed70:	2b20      	cmp	r3, #32
 800ed72:	dc49      	bgt.n	800ee08 <UART_SetConfig+0x834>
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	db7c      	blt.n	800ee72 <UART_SetConfig+0x89e>
 800ed78:	2b20      	cmp	r3, #32
 800ed7a:	d87a      	bhi.n	800ee72 <UART_SetConfig+0x89e>
 800ed7c:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <UART_SetConfig+0x7b0>)
 800ed7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed82:	bf00      	nop
 800ed84:	0800ee0f 	.word	0x0800ee0f
 800ed88:	0800ee17 	.word	0x0800ee17
 800ed8c:	0800ee73 	.word	0x0800ee73
 800ed90:	0800ee73 	.word	0x0800ee73
 800ed94:	0800ee1f 	.word	0x0800ee1f
 800ed98:	0800ee73 	.word	0x0800ee73
 800ed9c:	0800ee73 	.word	0x0800ee73
 800eda0:	0800ee73 	.word	0x0800ee73
 800eda4:	0800ee2f 	.word	0x0800ee2f
 800eda8:	0800ee73 	.word	0x0800ee73
 800edac:	0800ee73 	.word	0x0800ee73
 800edb0:	0800ee73 	.word	0x0800ee73
 800edb4:	0800ee73 	.word	0x0800ee73
 800edb8:	0800ee73 	.word	0x0800ee73
 800edbc:	0800ee73 	.word	0x0800ee73
 800edc0:	0800ee73 	.word	0x0800ee73
 800edc4:	0800ee3f 	.word	0x0800ee3f
 800edc8:	0800ee73 	.word	0x0800ee73
 800edcc:	0800ee73 	.word	0x0800ee73
 800edd0:	0800ee73 	.word	0x0800ee73
 800edd4:	0800ee73 	.word	0x0800ee73
 800edd8:	0800ee73 	.word	0x0800ee73
 800eddc:	0800ee73 	.word	0x0800ee73
 800ede0:	0800ee73 	.word	0x0800ee73
 800ede4:	0800ee73 	.word	0x0800ee73
 800ede8:	0800ee73 	.word	0x0800ee73
 800edec:	0800ee73 	.word	0x0800ee73
 800edf0:	0800ee73 	.word	0x0800ee73
 800edf4:	0800ee73 	.word	0x0800ee73
 800edf8:	0800ee73 	.word	0x0800ee73
 800edfc:	0800ee73 	.word	0x0800ee73
 800ee00:	0800ee73 	.word	0x0800ee73
 800ee04:	0800ee65 	.word	0x0800ee65
 800ee08:	2b40      	cmp	r3, #64	; 0x40
 800ee0a:	d02e      	beq.n	800ee6a <UART_SetConfig+0x896>
 800ee0c:	e031      	b.n	800ee72 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee0e:	f7fa ff59 	bl	8009cc4 <HAL_RCC_GetPCLK1Freq>
 800ee12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee14:	e033      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee16:	f7fa ff6b 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800ee1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee1c:	e02f      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee1e:	f107 0314 	add.w	r3, r7, #20
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fc fbbe 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee2c:	e027      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee2e:	f107 0308 	add.w	r3, r7, #8
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fc fd0a 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee3c:	e01f      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee3e:	4b58      	ldr	r3, [pc, #352]	; (800efa0 <UART_SetConfig+0x9cc>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f003 0320 	and.w	r3, r3, #32
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d009      	beq.n	800ee5e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee4a:	4b55      	ldr	r3, [pc, #340]	; (800efa0 <UART_SetConfig+0x9cc>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	08db      	lsrs	r3, r3, #3
 800ee50:	f003 0303 	and.w	r3, r3, #3
 800ee54:	4a53      	ldr	r2, [pc, #332]	; (800efa4 <UART_SetConfig+0x9d0>)
 800ee56:	fa22 f303 	lsr.w	r3, r2, r3
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee5c:	e00f      	b.n	800ee7e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ee5e:	4b51      	ldr	r3, [pc, #324]	; (800efa4 <UART_SetConfig+0x9d0>)
 800ee60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee62:	e00c      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee64:	4b4c      	ldr	r3, [pc, #304]	; (800ef98 <UART_SetConfig+0x9c4>)
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee68:	e009      	b.n	800ee7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee70:	e005      	b.n	800ee7e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ee72:	2300      	movs	r3, #0
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ee7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 80ea 	beq.w	800f05a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	4a44      	ldr	r2, [pc, #272]	; (800ef9c <UART_SetConfig+0x9c8>)
 800ee8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee98:	005a      	lsls	r2, r3, #1
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	085b      	lsrs	r3, r3, #1
 800eea0:	441a      	add	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	2b0f      	cmp	r3, #15
 800eeb2:	d916      	bls.n	800eee2 <UART_SetConfig+0x90e>
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeba:	d212      	bcs.n	800eee2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	f023 030f 	bic.w	r3, r3, #15
 800eec4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	085b      	lsrs	r3, r3, #1
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	f003 0307 	and.w	r3, r3, #7
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eed4:	4313      	orrs	r3, r2
 800eed6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eede:	60da      	str	r2, [r3, #12]
 800eee0:	e0bb      	b.n	800f05a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eee8:	e0b7      	b.n	800f05a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eeea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	dc4a      	bgt.n	800ef88 <UART_SetConfig+0x9b4>
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f2c0 8086 	blt.w	800f004 <UART_SetConfig+0xa30>
 800eef8:	2b20      	cmp	r3, #32
 800eefa:	f200 8083 	bhi.w	800f004 <UART_SetConfig+0xa30>
 800eefe:	a201      	add	r2, pc, #4	; (adr r2, 800ef04 <UART_SetConfig+0x930>)
 800ef00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef04:	0800ef8f 	.word	0x0800ef8f
 800ef08:	0800efa9 	.word	0x0800efa9
 800ef0c:	0800f005 	.word	0x0800f005
 800ef10:	0800f005 	.word	0x0800f005
 800ef14:	0800efb1 	.word	0x0800efb1
 800ef18:	0800f005 	.word	0x0800f005
 800ef1c:	0800f005 	.word	0x0800f005
 800ef20:	0800f005 	.word	0x0800f005
 800ef24:	0800efc1 	.word	0x0800efc1
 800ef28:	0800f005 	.word	0x0800f005
 800ef2c:	0800f005 	.word	0x0800f005
 800ef30:	0800f005 	.word	0x0800f005
 800ef34:	0800f005 	.word	0x0800f005
 800ef38:	0800f005 	.word	0x0800f005
 800ef3c:	0800f005 	.word	0x0800f005
 800ef40:	0800f005 	.word	0x0800f005
 800ef44:	0800efd1 	.word	0x0800efd1
 800ef48:	0800f005 	.word	0x0800f005
 800ef4c:	0800f005 	.word	0x0800f005
 800ef50:	0800f005 	.word	0x0800f005
 800ef54:	0800f005 	.word	0x0800f005
 800ef58:	0800f005 	.word	0x0800f005
 800ef5c:	0800f005 	.word	0x0800f005
 800ef60:	0800f005 	.word	0x0800f005
 800ef64:	0800f005 	.word	0x0800f005
 800ef68:	0800f005 	.word	0x0800f005
 800ef6c:	0800f005 	.word	0x0800f005
 800ef70:	0800f005 	.word	0x0800f005
 800ef74:	0800f005 	.word	0x0800f005
 800ef78:	0800f005 	.word	0x0800f005
 800ef7c:	0800f005 	.word	0x0800f005
 800ef80:	0800f005 	.word	0x0800f005
 800ef84:	0800eff7 	.word	0x0800eff7
 800ef88:	2b40      	cmp	r3, #64	; 0x40
 800ef8a:	d037      	beq.n	800effc <UART_SetConfig+0xa28>
 800ef8c:	e03a      	b.n	800f004 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef8e:	f7fa fe99 	bl	8009cc4 <HAL_RCC_GetPCLK1Freq>
 800ef92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef94:	e03c      	b.n	800f010 <UART_SetConfig+0xa3c>
 800ef96:	bf00      	nop
 800ef98:	003d0900 	.word	0x003d0900
 800ef9c:	08011f8c 	.word	0x08011f8c
 800efa0:	58024400 	.word	0x58024400
 800efa4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efa8:	f7fa fea2 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800efac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efae:	e02f      	b.n	800f010 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efb0:	f107 0314 	add.w	r3, r7, #20
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fc faf5 	bl	800b5a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efbe:	e027      	b.n	800f010 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efc0:	f107 0308 	add.w	r3, r7, #8
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fc fc41 	bl	800b84c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efce:	e01f      	b.n	800f010 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efd0:	4b2c      	ldr	r3, [pc, #176]	; (800f084 <UART_SetConfig+0xab0>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f003 0320 	and.w	r3, r3, #32
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d009      	beq.n	800eff0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efdc:	4b29      	ldr	r3, [pc, #164]	; (800f084 <UART_SetConfig+0xab0>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	08db      	lsrs	r3, r3, #3
 800efe2:	f003 0303 	and.w	r3, r3, #3
 800efe6:	4a28      	ldr	r2, [pc, #160]	; (800f088 <UART_SetConfig+0xab4>)
 800efe8:	fa22 f303 	lsr.w	r3, r2, r3
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efee:	e00f      	b.n	800f010 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800eff0:	4b25      	ldr	r3, [pc, #148]	; (800f088 <UART_SetConfig+0xab4>)
 800eff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eff4:	e00c      	b.n	800f010 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eff6:	4b25      	ldr	r3, [pc, #148]	; (800f08c <UART_SetConfig+0xab8>)
 800eff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800effa:	e009      	b.n	800f010 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800effc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f000:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f002:	e005      	b.n	800f010 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f004:	2300      	movs	r3, #0
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f00e:	bf00      	nop
    }

    if (pclk != 0U)
 800f010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f012:	2b00      	cmp	r3, #0
 800f014:	d021      	beq.n	800f05a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01a:	4a1d      	ldr	r2, [pc, #116]	; (800f090 <UART_SetConfig+0xabc>)
 800f01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f020:	461a      	mov	r2, r3
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	fbb3 f2f2 	udiv	r2, r3, r2
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	441a      	add	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	fbb2 f3f3 	udiv	r3, r2, r3
 800f038:	b29b      	uxth	r3, r3
 800f03a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	2b0f      	cmp	r3, #15
 800f040:	d908      	bls.n	800f054 <UART_SetConfig+0xa80>
 800f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f048:	d204      	bcs.n	800f054 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	e002      	b.n	800f05a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2201      	movs	r2, #1
 800f066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f076:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3738      	adds	r7, #56	; 0x38
 800f07e:	46bd      	mov	sp, r7
 800f080:	bdb0      	pop	{r4, r5, r7, pc}
 800f082:	bf00      	nop
 800f084:	58024400 	.word	0x58024400
 800f088:	03d09000 	.word	0x03d09000
 800f08c:	003d0900 	.word	0x003d0900
 800f090:	08011f8c 	.word	0x08011f8c

0800f094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a0:	f003 0301 	and.w	r3, r3, #1
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00a      	beq.n	800f0be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00a      	beq.n	800f0e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	430a      	orrs	r2, r1
 800f0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0e4:	f003 0304 	and.w	r3, r3, #4
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00a      	beq.n	800f102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f106:	f003 0308 	and.w	r3, r3, #8
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f128:	f003 0310 	and.w	r3, r3, #16
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00a      	beq.n	800f146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f14a:	f003 0320 	and.w	r3, r3, #32
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00a      	beq.n	800f168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d01a      	beq.n	800f1aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	430a      	orrs	r2, r1
 800f188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f192:	d10a      	bne.n	800f1aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	430a      	orrs	r2, r1
 800f1ca:	605a      	str	r2, [r3, #4]
  }
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af02      	add	r7, sp, #8
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1e8:	f7f4 ffec 	bl	80041c4 <HAL_GetTick>
 800f1ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 0308 	and.w	r3, r3, #8
 800f1f8:	2b08      	cmp	r3, #8
 800f1fa:	d10e      	bne.n	800f21a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2200      	movs	r2, #0
 800f206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 f82f 	bl	800f26e <UART_WaitOnFlagUntilTimeout>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f216:	2303      	movs	r3, #3
 800f218:	e025      	b.n	800f266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f003 0304 	and.w	r3, r3, #4
 800f224:	2b04      	cmp	r3, #4
 800f226:	d10e      	bne.n	800f246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f819 	bl	800f26e <UART_WaitOnFlagUntilTimeout>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f242:	2303      	movs	r3, #3
 800f244:	e00f      	b.n	800f266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2220      	movs	r2, #32
 800f24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2220      	movs	r2, #32
 800f252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b084      	sub	sp, #16
 800f272:	af00      	add	r7, sp, #0
 800f274:	60f8      	str	r0, [r7, #12]
 800f276:	60b9      	str	r1, [r7, #8]
 800f278:	603b      	str	r3, [r7, #0]
 800f27a:	4613      	mov	r3, r2
 800f27c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f27e:	e062      	b.n	800f346 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f286:	d05e      	beq.n	800f346 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f288:	f7f4 ff9c 	bl	80041c4 <HAL_GetTick>
 800f28c:	4602      	mov	r2, r0
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	429a      	cmp	r2, r3
 800f296:	d302      	bcc.n	800f29e <UART_WaitOnFlagUntilTimeout+0x30>
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d11d      	bne.n	800f2da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689a      	ldr	r2, [r3, #8]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f022 0201 	bic.w	r2, r2, #1
 800f2bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2220      	movs	r2, #32
 800f2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2220      	movs	r2, #32
 800f2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	e045      	b.n	800f366 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d02e      	beq.n	800f346 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2f6:	d126      	bne.n	800f346 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f310:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f022 0201 	bic.w	r2, r2, #1
 800f320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2220      	movs	r2, #32
 800f326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2220      	movs	r2, #32
 800f32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2220      	movs	r2, #32
 800f336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2200      	movs	r2, #0
 800f33e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f342:	2303      	movs	r3, #3
 800f344:	e00f      	b.n	800f366 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	69da      	ldr	r2, [r3, #28]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	4013      	ands	r3, r2
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	429a      	cmp	r2, r3
 800f354:	bf0c      	ite	eq
 800f356:	2301      	moveq	r3, #1
 800f358:	2300      	movne	r3, #0
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	461a      	mov	r2, r3
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	429a      	cmp	r2, r3
 800f362:	d08d      	beq.n	800f280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	4613      	mov	r3, r2
 800f37c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	88fa      	ldrh	r2, [r7, #6]
 800f388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	88fa      	ldrh	r2, [r7, #6]
 800f390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3a2:	d10e      	bne.n	800f3c2 <UART_Start_Receive_IT+0x52>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	691b      	ldr	r3, [r3, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d105      	bne.n	800f3b8 <UART_Start_Receive_IT+0x48>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f3b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3b6:	e02d      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	22ff      	movs	r2, #255	; 0xff
 800f3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3c0:	e028      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10d      	bne.n	800f3e6 <UART_Start_Receive_IT+0x76>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d104      	bne.n	800f3dc <UART_Start_Receive_IT+0x6c>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	22ff      	movs	r2, #255	; 0xff
 800f3d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3da:	e01b      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	227f      	movs	r2, #127	; 0x7f
 800f3e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3e4:	e016      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3ee:	d10d      	bne.n	800f40c <UART_Start_Receive_IT+0x9c>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <UART_Start_Receive_IT+0x92>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	227f      	movs	r2, #127	; 0x7f
 800f3fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f400:	e008      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	223f      	movs	r2, #63	; 0x3f
 800f406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f40a:	e003      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2222      	movs	r2, #34	; 0x22
 800f420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	689a      	ldr	r2, [r3, #8]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f042 0201 	orr.w	r2, r2, #1
 800f432:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f43c:	d12a      	bne.n	800f494 <UART_Start_Receive_IT+0x124>
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f444:	88fa      	ldrh	r2, [r7, #6]
 800f446:	429a      	cmp	r2, r3
 800f448:	d324      	bcc.n	800f494 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f452:	d107      	bne.n	800f464 <UART_Start_Receive_IT+0xf4>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d103      	bne.n	800f464 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	4a1f      	ldr	r2, [pc, #124]	; (800f4dc <UART_Start_Receive_IT+0x16c>)
 800f460:	671a      	str	r2, [r3, #112]	; 0x70
 800f462:	e002      	b.n	800f46a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	4a1e      	ldr	r2, [pc, #120]	; (800f4e0 <UART_Start_Receive_IT+0x170>)
 800f468:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f480:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f490:	609a      	str	r2, [r3, #8]
 800f492:	e01b      	b.n	800f4cc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f49c:	d107      	bne.n	800f4ae <UART_Start_Receive_IT+0x13e>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d103      	bne.n	800f4ae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4a0e      	ldr	r2, [pc, #56]	; (800f4e4 <UART_Start_Receive_IT+0x174>)
 800f4aa:	671a      	str	r2, [r3, #112]	; 0x70
 800f4ac:	e002      	b.n	800f4b4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4a0d      	ldr	r2, [pc, #52]	; (800f4e8 <UART_Start_Receive_IT+0x178>)
 800f4b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f4ca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	0800f965 	.word	0x0800f965
 800f4e0:	0800f761 	.word	0x0800f761
 800f4e4:	0800f689 	.word	0x0800f689
 800f4e8:	0800f5b1 	.word	0x0800f5b1

0800f4ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f502:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6899      	ldr	r1, [r3, #8]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <UART_EndRxTransfer+0x60>)
 800f510:	400b      	ands	r3, r1
 800f512:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d107      	bne.n	800f52c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f022 0210 	bic.w	r2, r2, #16
 800f52a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2220      	movs	r2, #32
 800f530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f540:	bf00      	nop
 800f542:	370c      	adds	r7, #12
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr
 800f54c:	effffffe 	.word	0xeffffffe

0800f550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f55c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f7ff f826 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f574:	bf00      	nop
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f592:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2220      	movs	r2, #32
 800f598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7fe fff8 	bl	800e598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5c6:	2b22      	cmp	r3, #34	; 0x22
 800f5c8:	d152      	bne.n	800f670 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5d2:	89bb      	ldrh	r3, [r7, #12]
 800f5d4:	b2d9      	uxtb	r1, r3
 800f5d6:	89fb      	ldrh	r3, [r7, #14]
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5de:	400a      	ands	r2, r1
 800f5e0:	b2d2      	uxtb	r2, r2
 800f5e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f606:	b29b      	uxth	r3, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d139      	bne.n	800f680 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f61a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	689a      	ldr	r2, [r3, #8]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f022 0201 	bic.w	r2, r2, #1
 800f62a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2220      	movs	r2, #32
 800f630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d10f      	bne.n	800f662 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f022 0210 	bic.w	r2, r2, #16
 800f650:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7f1 feda 	bl	8001414 <HAL_UARTEx_RxEventCallback>
 800f660:	e002      	b.n	800f668 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7fe ffa2 	bl	800e5ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f66e:	e007      	b.n	800f680 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	699a      	ldr	r2, [r3, #24]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f042 0208 	orr.w	r2, r2, #8
 800f67e:	619a      	str	r2, [r3, #24]
}
 800f680:	bf00      	nop
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f696:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f69e:	2b22      	cmp	r3, #34	; 0x22
 800f6a0:	d152      	bne.n	800f748 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f6b0:	89ba      	ldrh	r2, [r7, #12]
 800f6b2:	89fb      	ldrh	r3, [r7, #14]
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c0:	1c9a      	adds	r2, r3, #2
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d139      	bne.n	800f758 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f6f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	689a      	ldr	r2, [r3, #8]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f022 0201 	bic.w	r2, r2, #1
 800f702:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2220      	movs	r2, #32
 800f708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f716:	2b01      	cmp	r3, #1
 800f718:	d10f      	bne.n	800f73a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f022 0210 	bic.w	r2, r2, #16
 800f728:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7f1 fe6e 	bl	8001414 <HAL_UARTEx_RxEventCallback>
 800f738:	e002      	b.n	800f740 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7fe ff36 	bl	800e5ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f746:	e007      	b.n	800f758 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	699a      	ldr	r2, [r3, #24]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f042 0208 	orr.w	r2, r2, #8
 800f756:	619a      	str	r2, [r3, #24]
}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b088      	sub	sp, #32
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f76e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f78e:	2b22      	cmp	r3, #34	; 0x22
 800f790:	f040 80d8 	bne.w	800f944 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f79a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f79c:	e0a8      	b.n	800f8f0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f7a6:	89bb      	ldrh	r3, [r7, #12]
 800f7a8:	b2d9      	uxtb	r1, r3
 800f7aa:	8b7b      	ldrh	r3, [r7, #26]
 800f7ac:	b2da      	uxtb	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7b2:	400a      	ands	r2, r1
 800f7b4:	b2d2      	uxtb	r2, r2
 800f7b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7bc:	1c5a      	adds	r2, r3, #1
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	69db      	ldr	r3, [r3, #28]
 800f7da:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	f003 0307 	and.w	r3, r3, #7
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d04d      	beq.n	800f882 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	f003 0301 	and.w	r3, r3, #1
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d010      	beq.n	800f812 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00b      	beq.n	800f812 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2201      	movs	r2, #1
 800f800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f808:	f043 0201 	orr.w	r2, r3, #1
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	f003 0302 	and.w	r3, r3, #2
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d010      	beq.n	800f83e <UART_RxISR_8BIT_FIFOEN+0xde>
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00b      	beq.n	800f83e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2202      	movs	r2, #2
 800f82c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f834:	f043 0204 	orr.w	r2, r3, #4
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	f003 0304 	and.w	r3, r3, #4
 800f844:	2b00      	cmp	r3, #0
 800f846:	d010      	beq.n	800f86a <UART_RxISR_8BIT_FIFOEN+0x10a>
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	f003 0301 	and.w	r3, r3, #1
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00b      	beq.n	800f86a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2204      	movs	r2, #4
 800f858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f860:	f043 0202 	orr.w	r2, r3, #2
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f870:	2b00      	cmp	r3, #0
 800f872:	d006      	beq.n	800f882 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7fe fea3 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f888:	b29b      	uxth	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d130      	bne.n	800f8f0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f89c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6899      	ldr	r1, [r3, #8]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	4b2c      	ldr	r3, [pc, #176]	; (800f95c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800f8aa:	400b      	ands	r3, r1
 800f8ac:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d10f      	bne.n	800f8e4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f022 0210 	bic.w	r2, r2, #16
 800f8d2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7f1 fd99 	bl	8001414 <HAL_UARTEx_RxEventCallback>
 800f8e2:	e002      	b.n	800f8ea <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7fe fe61 	bl	800e5ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8f0:	89fb      	ldrh	r3, [r7, #14]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d005      	beq.n	800f902 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	f003 0320 	and.w	r3, r3, #32
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f47f af4e 	bne.w	800f79e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f908:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f90a:	897b      	ldrh	r3, [r7, #10]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d021      	beq.n	800f954 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f916:	897a      	ldrh	r2, [r7, #10]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d21b      	bcs.n	800f954 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	689a      	ldr	r2, [r3, #8]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f92a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a0c      	ldr	r2, [pc, #48]	; (800f960 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800f930:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f042 0220 	orr.w	r2, r2, #32
 800f940:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f942:	e007      	b.n	800f954 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	699a      	ldr	r2, [r3, #24]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f042 0208 	orr.w	r2, r2, #8
 800f952:	619a      	str	r2, [r3, #24]
}
 800f954:	bf00      	nop
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	effffffe 	.word	0xeffffffe
 800f960:	0800f5b1 	.word	0x0800f5b1

0800f964 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b08a      	sub	sp, #40	; 0x28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f972:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	69db      	ldr	r3, [r3, #28]
 800f97a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	689b      	ldr	r3, [r3, #8]
 800f98a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f992:	2b22      	cmp	r3, #34	; 0x22
 800f994:	f040 80d8 	bne.w	800fb48 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f99e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9a0:	e0a8      	b.n	800faf4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f9b0:	8aba      	ldrh	r2, [r7, #20]
 800f9b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c0:	1c9a      	adds	r2, r3, #2
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	f003 0307 	and.w	r3, r3, #7
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d04d      	beq.n	800fa86 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ec:	f003 0301 	and.w	r3, r3, #1
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d010      	beq.n	800fa16 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00b      	beq.n	800fa16 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2201      	movs	r2, #1
 800fa04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa0c:	f043 0201 	orr.w	r2, r3, #1
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa18:	f003 0302 	and.w	r3, r3, #2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d010      	beq.n	800fa42 <UART_RxISR_16BIT_FIFOEN+0xde>
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00b      	beq.n	800fa42 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa38:	f043 0204 	orr.w	r2, r3, #4
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa44:	f003 0304 	and.w	r3, r3, #4
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d010      	beq.n	800fa6e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00b      	beq.n	800fa6e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2204      	movs	r2, #4
 800fa5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa64:	f043 0202 	orr.w	r2, r3, #2
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d006      	beq.n	800fa86 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fe fda1 	bl	800e5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d130      	bne.n	800faf4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800faa0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	6899      	ldr	r1, [r3, #8]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	4b2c      	ldr	r3, [pc, #176]	; (800fb60 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800faae:	400b      	ands	r3, r1
 800fab0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2220      	movs	r2, #32
 800fab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d10f      	bne.n	800fae8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f022 0210 	bic.w	r2, r2, #16
 800fad6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7f1 fc97 	bl	8001414 <HAL_UARTEx_RxEventCallback>
 800fae6:	e002      	b.n	800faee <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7fe fd5f 	bl	800e5ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800faf4:	8afb      	ldrh	r3, [r7, #22]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d005      	beq.n	800fb06 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafc:	f003 0320 	and.w	r3, r3, #32
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f47f af4e 	bne.w	800f9a2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb0c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fb0e:	89fb      	ldrh	r3, [r7, #14]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d021      	beq.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb1a:	89fa      	ldrh	r2, [r7, #14]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d21b      	bcs.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	689a      	ldr	r2, [r3, #8]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fb2e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a0c      	ldr	r2, [pc, #48]	; (800fb64 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800fb34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f042 0220 	orr.w	r2, r2, #32
 800fb44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb46:	e007      	b.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	699a      	ldr	r2, [r3, #24]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f042 0208 	orr.w	r2, r2, #8
 800fb56:	619a      	str	r2, [r3, #24]
}
 800fb58:	bf00      	nop
 800fb5a:	3728      	adds	r7, #40	; 0x28
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	effffffe 	.word	0xeffffffe
 800fb64:	0800f689 	.word	0x0800f689

0800fb68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb84:	bf00      	nop
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb98:	bf00      	nop
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d101      	bne.n	800fbba <HAL_UARTEx_EnableFifoMode+0x16>
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	e02b      	b.n	800fc12 <HAL_UARTEx_EnableFifoMode+0x6e>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2224      	movs	r2, #36	; 0x24
 800fbc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f022 0201 	bic.w	r2, r2, #1
 800fbe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fbe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fbf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f8d0 	bl	800fda0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2220      	movs	r2, #32
 800fc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d101      	bne.n	800fc32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc2e:	2302      	movs	r3, #2
 800fc30:	e02d      	b.n	800fc8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2224      	movs	r2, #36	; 0x24
 800fc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f896 	bl	800fda0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2220      	movs	r2, #32
 800fc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e02d      	b.n	800fd0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2224      	movs	r2, #36	; 0x24
 800fcba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f022 0201 	bic.w	r2, r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f858 	bl	800fda0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b086      	sub	sp, #24
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	60f8      	str	r0, [r7, #12]
 800fd1a:	60b9      	str	r1, [r7, #8]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd26:	2b20      	cmp	r3, #32
 800fd28:	d135      	bne.n	800fd96 <HAL_UARTEx_ReceiveToIdle_IT+0x84>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800fd30:	88fb      	ldrh	r3, [r7, #6]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	e02e      	b.n	800fd98 <HAL_UARTEx_ReceiveToIdle_IT+0x86>
    }

    __HAL_LOCK(huart);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d101      	bne.n	800fd48 <HAL_UARTEx_ReceiveToIdle_IT+0x36>
 800fd44:	2302      	movs	r3, #2
 800fd46:	e027      	b.n	800fd98 <HAL_UARTEx_ReceiveToIdle_IT+0x86>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	68b9      	ldr	r1, [r7, #8]
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7ff fb07 	bl	800f370 <UART_Start_Receive_IT>
 800fd62:	4603      	mov	r3, r0
 800fd64:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fd66:	7dfb      	ldrb	r3, [r7, #23]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d112      	bne.n	800fd92 <HAL_UARTEx_ReceiveToIdle_IT+0x80>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d10c      	bne.n	800fd8e <HAL_UARTEx_ReceiveToIdle_IT+0x7c>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2210      	movs	r2, #16
 800fd7a:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f042 0210 	orr.w	r2, r2, #16
 800fd8a:	601a      	str	r2, [r3, #0]
 800fd8c:	e001      	b.n	800fd92 <HAL_UARTEx_ReceiveToIdle_IT+0x80>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	e000      	b.n	800fd98 <HAL_UARTEx_ReceiveToIdle_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 800fd96:	2302      	movs	r3, #2
  }
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d108      	bne.n	800fdc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fdc0:	e031      	b.n	800fe26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fdc2:	2310      	movs	r3, #16
 800fdc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdc6:	2310      	movs	r3, #16
 800fdc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	0e5b      	lsrs	r3, r3, #25
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	f003 0307 	and.w	r3, r3, #7
 800fdd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	0f5b      	lsrs	r3, r3, #29
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	f003 0307 	and.w	r3, r3, #7
 800fde8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdea:	7bbb      	ldrb	r3, [r7, #14]
 800fdec:	7b3a      	ldrb	r2, [r7, #12]
 800fdee:	4911      	ldr	r1, [pc, #68]	; (800fe34 <UARTEx_SetNbDataToProcess+0x94>)
 800fdf0:	5c8a      	ldrb	r2, [r1, r2]
 800fdf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdf6:	7b3a      	ldrb	r2, [r7, #12]
 800fdf8:	490f      	ldr	r1, [pc, #60]	; (800fe38 <UARTEx_SetNbDataToProcess+0x98>)
 800fdfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	7b7a      	ldrb	r2, [r7, #13]
 800fe0c:	4909      	ldr	r1, [pc, #36]	; (800fe34 <UARTEx_SetNbDataToProcess+0x94>)
 800fe0e:	5c8a      	ldrb	r2, [r1, r2]
 800fe10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe14:	7b7a      	ldrb	r2, [r7, #13]
 800fe16:	4908      	ldr	r1, [pc, #32]	; (800fe38 <UARTEx_SetNbDataToProcess+0x98>)
 800fe18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fe26:	bf00      	nop
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	08011fa4 	.word	0x08011fa4
 800fe38:	08011fac 	.word	0x08011fac

0800fe3c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe50:	683a      	ldr	r2, [r7, #0]
 800fe52:	6812      	ldr	r2, [r2, #0]
 800fe54:	f023 0101 	bic.w	r1, r3, #1
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	2b08      	cmp	r3, #8
 800fe64:	d102      	bne.n	800fe6c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800fe66:	2340      	movs	r3, #64	; 0x40
 800fe68:	617b      	str	r3, [r7, #20]
 800fe6a:	e001      	b.n	800fe70 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800fe7c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800fe82:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800fe88:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800fe8e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800fe94:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800fe9a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800fea0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800fea6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800feac:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800feb2:	4313      	orrs	r3, r2
 800feb4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	4313      	orrs	r3, r2
 800febe:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec4:	693a      	ldr	r2, [r7, #16]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fece:	693a      	ldr	r2, [r7, #16]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800fed4:	4b20      	ldr	r3, [pc, #128]	; (800ff58 <FMC_NORSRAM_Init+0x11c>)
 800fed6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fede:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fee6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800feee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	43db      	mvns	r3, r3
 800fefe:	ea02 0103 	and.w	r1, r2, r3
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	4319      	orrs	r1, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff18:	d10c      	bne.n	800ff34 <FMC_NORSRAM_Init+0xf8>
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d008      	beq.n	800ff34 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d006      	beq.n	800ff4a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff44:	431a      	orrs	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	371c      	adds	r7, #28
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	0008fb7f 	.word	0x0008fb7f

0800ff5c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff72:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	011b      	lsls	r3, r3, #4
 800ff80:	431a      	orrs	r2, r3
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	021b      	lsls	r3, r3, #8
 800ff88:	431a      	orrs	r2, r3
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	041b      	lsls	r3, r3, #16
 800ff90:	431a      	orrs	r2, r3
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	691b      	ldr	r3, [r3, #16]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	051b      	lsls	r3, r3, #20
 800ff9a:	431a      	orrs	r2, r3
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	695b      	ldr	r3, [r3, #20]
 800ffa0:	3b02      	subs	r3, #2
 800ffa2:	061b      	lsls	r3, r3, #24
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	3201      	adds	r2, #1
 800ffb0:	4319      	orrs	r1, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ffc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffc4:	d113      	bne.n	800ffee <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffce:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	051b      	lsls	r3, r3, #20
 800ffd8:	697a      	ldr	r2, [r7, #20]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	431a      	orrs	r2, r3
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	371c      	adds	r7, #28
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010010:	d11d      	bne.n	801004e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801001a:	4b13      	ldr	r3, [pc, #76]	; (8010068 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 801001c:	4013      	ands	r3, r2
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	6811      	ldr	r1, [r2, #0]
 8010022:	68ba      	ldr	r2, [r7, #8]
 8010024:	6852      	ldr	r2, [r2, #4]
 8010026:	0112      	lsls	r2, r2, #4
 8010028:	4311      	orrs	r1, r2
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	6892      	ldr	r2, [r2, #8]
 801002e:	0212      	lsls	r2, r2, #8
 8010030:	4311      	orrs	r1, r2
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	6992      	ldr	r2, [r2, #24]
 8010036:	4311      	orrs	r1, r2
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	68d2      	ldr	r2, [r2, #12]
 801003c:	0412      	lsls	r2, r2, #16
 801003e:	430a      	orrs	r2, r1
 8010040:	ea43 0102 	orr.w	r1, r3, r2
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801004c:	e005      	b.n	801005a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	cff00000 	.word	0xcff00000

0801006c <__errno>:
 801006c:	4b01      	ldr	r3, [pc, #4]	; (8010074 <__errno+0x8>)
 801006e:	6818      	ldr	r0, [r3, #0]
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	20000010 	.word	0x20000010

08010078 <__libc_init_array>:
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	4d0d      	ldr	r5, [pc, #52]	; (80100b0 <__libc_init_array+0x38>)
 801007c:	4c0d      	ldr	r4, [pc, #52]	; (80100b4 <__libc_init_array+0x3c>)
 801007e:	1b64      	subs	r4, r4, r5
 8010080:	10a4      	asrs	r4, r4, #2
 8010082:	2600      	movs	r6, #0
 8010084:	42a6      	cmp	r6, r4
 8010086:	d109      	bne.n	801009c <__libc_init_array+0x24>
 8010088:	4d0b      	ldr	r5, [pc, #44]	; (80100b8 <__libc_init_array+0x40>)
 801008a:	4c0c      	ldr	r4, [pc, #48]	; (80100bc <__libc_init_array+0x44>)
 801008c:	f001 f9f8 	bl	8011480 <_init>
 8010090:	1b64      	subs	r4, r4, r5
 8010092:	10a4      	asrs	r4, r4, #2
 8010094:	2600      	movs	r6, #0
 8010096:	42a6      	cmp	r6, r4
 8010098:	d105      	bne.n	80100a6 <__libc_init_array+0x2e>
 801009a:	bd70      	pop	{r4, r5, r6, pc}
 801009c:	f855 3b04 	ldr.w	r3, [r5], #4
 80100a0:	4798      	blx	r3
 80100a2:	3601      	adds	r6, #1
 80100a4:	e7ee      	b.n	8010084 <__libc_init_array+0xc>
 80100a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100aa:	4798      	blx	r3
 80100ac:	3601      	adds	r6, #1
 80100ae:	e7f2      	b.n	8010096 <__libc_init_array+0x1e>
 80100b0:	08012054 	.word	0x08012054
 80100b4:	08012054 	.word	0x08012054
 80100b8:	08012054 	.word	0x08012054
 80100bc:	08012058 	.word	0x08012058

080100c0 <memcpy>:
 80100c0:	440a      	add	r2, r1
 80100c2:	4291      	cmp	r1, r2
 80100c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80100c8:	d100      	bne.n	80100cc <memcpy+0xc>
 80100ca:	4770      	bx	lr
 80100cc:	b510      	push	{r4, lr}
 80100ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100d6:	4291      	cmp	r1, r2
 80100d8:	d1f9      	bne.n	80100ce <memcpy+0xe>
 80100da:	bd10      	pop	{r4, pc}

080100dc <memset>:
 80100dc:	4402      	add	r2, r0
 80100de:	4603      	mov	r3, r0
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d100      	bne.n	80100e6 <memset+0xa>
 80100e4:	4770      	bx	lr
 80100e6:	f803 1b01 	strb.w	r1, [r3], #1
 80100ea:	e7f9      	b.n	80100e0 <memset+0x4>

080100ec <iprintf>:
 80100ec:	b40f      	push	{r0, r1, r2, r3}
 80100ee:	4b0a      	ldr	r3, [pc, #40]	; (8010118 <iprintf+0x2c>)
 80100f0:	b513      	push	{r0, r1, r4, lr}
 80100f2:	681c      	ldr	r4, [r3, #0]
 80100f4:	b124      	cbz	r4, 8010100 <iprintf+0x14>
 80100f6:	69a3      	ldr	r3, [r4, #24]
 80100f8:	b913      	cbnz	r3, 8010100 <iprintf+0x14>
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 fab8 	bl	8010670 <__sinit>
 8010100:	ab05      	add	r3, sp, #20
 8010102:	9a04      	ldr	r2, [sp, #16]
 8010104:	68a1      	ldr	r1, [r4, #8]
 8010106:	9301      	str	r3, [sp, #4]
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fde5 	bl	8010cd8 <_vfiprintf_r>
 801010e:	b002      	add	sp, #8
 8010110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010114:	b004      	add	sp, #16
 8010116:	4770      	bx	lr
 8010118:	20000010 	.word	0x20000010

0801011c <_puts_r>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	460e      	mov	r6, r1
 8010120:	4605      	mov	r5, r0
 8010122:	b118      	cbz	r0, 801012c <_puts_r+0x10>
 8010124:	6983      	ldr	r3, [r0, #24]
 8010126:	b90b      	cbnz	r3, 801012c <_puts_r+0x10>
 8010128:	f000 faa2 	bl	8010670 <__sinit>
 801012c:	69ab      	ldr	r3, [r5, #24]
 801012e:	68ac      	ldr	r4, [r5, #8]
 8010130:	b913      	cbnz	r3, 8010138 <_puts_r+0x1c>
 8010132:	4628      	mov	r0, r5
 8010134:	f000 fa9c 	bl	8010670 <__sinit>
 8010138:	4b2c      	ldr	r3, [pc, #176]	; (80101ec <_puts_r+0xd0>)
 801013a:	429c      	cmp	r4, r3
 801013c:	d120      	bne.n	8010180 <_puts_r+0x64>
 801013e:	686c      	ldr	r4, [r5, #4]
 8010140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010142:	07db      	lsls	r3, r3, #31
 8010144:	d405      	bmi.n	8010152 <_puts_r+0x36>
 8010146:	89a3      	ldrh	r3, [r4, #12]
 8010148:	0598      	lsls	r0, r3, #22
 801014a:	d402      	bmi.n	8010152 <_puts_r+0x36>
 801014c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801014e:	f000 fb2d 	bl	80107ac <__retarget_lock_acquire_recursive>
 8010152:	89a3      	ldrh	r3, [r4, #12]
 8010154:	0719      	lsls	r1, r3, #28
 8010156:	d51d      	bpl.n	8010194 <_puts_r+0x78>
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	b1db      	cbz	r3, 8010194 <_puts_r+0x78>
 801015c:	3e01      	subs	r6, #1
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010164:	3b01      	subs	r3, #1
 8010166:	60a3      	str	r3, [r4, #8]
 8010168:	bb39      	cbnz	r1, 80101ba <_puts_r+0x9e>
 801016a:	2b00      	cmp	r3, #0
 801016c:	da38      	bge.n	80101e0 <_puts_r+0xc4>
 801016e:	4622      	mov	r2, r4
 8010170:	210a      	movs	r1, #10
 8010172:	4628      	mov	r0, r5
 8010174:	f000 f8a2 	bl	80102bc <__swbuf_r>
 8010178:	3001      	adds	r0, #1
 801017a:	d011      	beq.n	80101a0 <_puts_r+0x84>
 801017c:	250a      	movs	r5, #10
 801017e:	e011      	b.n	80101a4 <_puts_r+0x88>
 8010180:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <_puts_r+0xd4>)
 8010182:	429c      	cmp	r4, r3
 8010184:	d101      	bne.n	801018a <_puts_r+0x6e>
 8010186:	68ac      	ldr	r4, [r5, #8]
 8010188:	e7da      	b.n	8010140 <_puts_r+0x24>
 801018a:	4b1a      	ldr	r3, [pc, #104]	; (80101f4 <_puts_r+0xd8>)
 801018c:	429c      	cmp	r4, r3
 801018e:	bf08      	it	eq
 8010190:	68ec      	ldreq	r4, [r5, #12]
 8010192:	e7d5      	b.n	8010140 <_puts_r+0x24>
 8010194:	4621      	mov	r1, r4
 8010196:	4628      	mov	r0, r5
 8010198:	f000 f8e2 	bl	8010360 <__swsetup_r>
 801019c:	2800      	cmp	r0, #0
 801019e:	d0dd      	beq.n	801015c <_puts_r+0x40>
 80101a0:	f04f 35ff 	mov.w	r5, #4294967295
 80101a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101a6:	07da      	lsls	r2, r3, #31
 80101a8:	d405      	bmi.n	80101b6 <_puts_r+0x9a>
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	059b      	lsls	r3, r3, #22
 80101ae:	d402      	bmi.n	80101b6 <_puts_r+0x9a>
 80101b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101b2:	f000 fafc 	bl	80107ae <__retarget_lock_release_recursive>
 80101b6:	4628      	mov	r0, r5
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	da04      	bge.n	80101c8 <_puts_r+0xac>
 80101be:	69a2      	ldr	r2, [r4, #24]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	dc06      	bgt.n	80101d2 <_puts_r+0xb6>
 80101c4:	290a      	cmp	r1, #10
 80101c6:	d004      	beq.n	80101d2 <_puts_r+0xb6>
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	1c5a      	adds	r2, r3, #1
 80101cc:	6022      	str	r2, [r4, #0]
 80101ce:	7019      	strb	r1, [r3, #0]
 80101d0:	e7c5      	b.n	801015e <_puts_r+0x42>
 80101d2:	4622      	mov	r2, r4
 80101d4:	4628      	mov	r0, r5
 80101d6:	f000 f871 	bl	80102bc <__swbuf_r>
 80101da:	3001      	adds	r0, #1
 80101dc:	d1bf      	bne.n	801015e <_puts_r+0x42>
 80101de:	e7df      	b.n	80101a0 <_puts_r+0x84>
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	250a      	movs	r5, #10
 80101e4:	1c5a      	adds	r2, r3, #1
 80101e6:	6022      	str	r2, [r4, #0]
 80101e8:	701d      	strb	r5, [r3, #0]
 80101ea:	e7db      	b.n	80101a4 <_puts_r+0x88>
 80101ec:	08011fd8 	.word	0x08011fd8
 80101f0:	08011ff8 	.word	0x08011ff8
 80101f4:	08011fb8 	.word	0x08011fb8

080101f8 <puts>:
 80101f8:	4b02      	ldr	r3, [pc, #8]	; (8010204 <puts+0xc>)
 80101fa:	4601      	mov	r1, r0
 80101fc:	6818      	ldr	r0, [r3, #0]
 80101fe:	f7ff bf8d 	b.w	801011c <_puts_r>
 8010202:	bf00      	nop
 8010204:	20000010 	.word	0x20000010

08010208 <strcpy>:
 8010208:	4603      	mov	r3, r0
 801020a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801020e:	f803 2b01 	strb.w	r2, [r3], #1
 8010212:	2a00      	cmp	r2, #0
 8010214:	d1f9      	bne.n	801020a <strcpy+0x2>
 8010216:	4770      	bx	lr

08010218 <strstr>:
 8010218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801021a:	780c      	ldrb	r4, [r1, #0]
 801021c:	b164      	cbz	r4, 8010238 <strstr+0x20>
 801021e:	4603      	mov	r3, r0
 8010220:	781a      	ldrb	r2, [r3, #0]
 8010222:	4618      	mov	r0, r3
 8010224:	1c5e      	adds	r6, r3, #1
 8010226:	b90a      	cbnz	r2, 801022c <strstr+0x14>
 8010228:	4610      	mov	r0, r2
 801022a:	e005      	b.n	8010238 <strstr+0x20>
 801022c:	4294      	cmp	r4, r2
 801022e:	d108      	bne.n	8010242 <strstr+0x2a>
 8010230:	460d      	mov	r5, r1
 8010232:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010236:	b902      	cbnz	r2, 801023a <strstr+0x22>
 8010238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801023a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801023e:	4297      	cmp	r7, r2
 8010240:	d0f7      	beq.n	8010232 <strstr+0x1a>
 8010242:	4633      	mov	r3, r6
 8010244:	e7ec      	b.n	8010220 <strstr+0x8>

08010246 <_vsniprintf_r>:
 8010246:	b530      	push	{r4, r5, lr}
 8010248:	1e14      	subs	r4, r2, #0
 801024a:	4605      	mov	r5, r0
 801024c:	b09b      	sub	sp, #108	; 0x6c
 801024e:	4618      	mov	r0, r3
 8010250:	da05      	bge.n	801025e <_vsniprintf_r+0x18>
 8010252:	238b      	movs	r3, #139	; 0x8b
 8010254:	602b      	str	r3, [r5, #0]
 8010256:	f04f 30ff 	mov.w	r0, #4294967295
 801025a:	b01b      	add	sp, #108	; 0x6c
 801025c:	bd30      	pop	{r4, r5, pc}
 801025e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010262:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010266:	bf14      	ite	ne
 8010268:	f104 33ff 	addne.w	r3, r4, #4294967295
 801026c:	4623      	moveq	r3, r4
 801026e:	9302      	str	r3, [sp, #8]
 8010270:	9305      	str	r3, [sp, #20]
 8010272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010276:	9100      	str	r1, [sp, #0]
 8010278:	9104      	str	r1, [sp, #16]
 801027a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801027e:	4602      	mov	r2, r0
 8010280:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010282:	4669      	mov	r1, sp
 8010284:	4628      	mov	r0, r5
 8010286:	f000 fbfd 	bl	8010a84 <_svfiprintf_r>
 801028a:	1c43      	adds	r3, r0, #1
 801028c:	bfbc      	itt	lt
 801028e:	238b      	movlt	r3, #139	; 0x8b
 8010290:	602b      	strlt	r3, [r5, #0]
 8010292:	2c00      	cmp	r4, #0
 8010294:	d0e1      	beq.n	801025a <_vsniprintf_r+0x14>
 8010296:	9b00      	ldr	r3, [sp, #0]
 8010298:	2200      	movs	r2, #0
 801029a:	701a      	strb	r2, [r3, #0]
 801029c:	e7dd      	b.n	801025a <_vsniprintf_r+0x14>
	...

080102a0 <vsniprintf>:
 80102a0:	b507      	push	{r0, r1, r2, lr}
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	4613      	mov	r3, r2
 80102a6:	460a      	mov	r2, r1
 80102a8:	4601      	mov	r1, r0
 80102aa:	4803      	ldr	r0, [pc, #12]	; (80102b8 <vsniprintf+0x18>)
 80102ac:	6800      	ldr	r0, [r0, #0]
 80102ae:	f7ff ffca 	bl	8010246 <_vsniprintf_r>
 80102b2:	b003      	add	sp, #12
 80102b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80102b8:	20000010 	.word	0x20000010

080102bc <__swbuf_r>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	460e      	mov	r6, r1
 80102c0:	4614      	mov	r4, r2
 80102c2:	4605      	mov	r5, r0
 80102c4:	b118      	cbz	r0, 80102ce <__swbuf_r+0x12>
 80102c6:	6983      	ldr	r3, [r0, #24]
 80102c8:	b90b      	cbnz	r3, 80102ce <__swbuf_r+0x12>
 80102ca:	f000 f9d1 	bl	8010670 <__sinit>
 80102ce:	4b21      	ldr	r3, [pc, #132]	; (8010354 <__swbuf_r+0x98>)
 80102d0:	429c      	cmp	r4, r3
 80102d2:	d12b      	bne.n	801032c <__swbuf_r+0x70>
 80102d4:	686c      	ldr	r4, [r5, #4]
 80102d6:	69a3      	ldr	r3, [r4, #24]
 80102d8:	60a3      	str	r3, [r4, #8]
 80102da:	89a3      	ldrh	r3, [r4, #12]
 80102dc:	071a      	lsls	r2, r3, #28
 80102de:	d52f      	bpl.n	8010340 <__swbuf_r+0x84>
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	b36b      	cbz	r3, 8010340 <__swbuf_r+0x84>
 80102e4:	6923      	ldr	r3, [r4, #16]
 80102e6:	6820      	ldr	r0, [r4, #0]
 80102e8:	1ac0      	subs	r0, r0, r3
 80102ea:	6963      	ldr	r3, [r4, #20]
 80102ec:	b2f6      	uxtb	r6, r6
 80102ee:	4283      	cmp	r3, r0
 80102f0:	4637      	mov	r7, r6
 80102f2:	dc04      	bgt.n	80102fe <__swbuf_r+0x42>
 80102f4:	4621      	mov	r1, r4
 80102f6:	4628      	mov	r0, r5
 80102f8:	f000 f926 	bl	8010548 <_fflush_r>
 80102fc:	bb30      	cbnz	r0, 801034c <__swbuf_r+0x90>
 80102fe:	68a3      	ldr	r3, [r4, #8]
 8010300:	3b01      	subs	r3, #1
 8010302:	60a3      	str	r3, [r4, #8]
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	1c5a      	adds	r2, r3, #1
 8010308:	6022      	str	r2, [r4, #0]
 801030a:	701e      	strb	r6, [r3, #0]
 801030c:	6963      	ldr	r3, [r4, #20]
 801030e:	3001      	adds	r0, #1
 8010310:	4283      	cmp	r3, r0
 8010312:	d004      	beq.n	801031e <__swbuf_r+0x62>
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	07db      	lsls	r3, r3, #31
 8010318:	d506      	bpl.n	8010328 <__swbuf_r+0x6c>
 801031a:	2e0a      	cmp	r6, #10
 801031c:	d104      	bne.n	8010328 <__swbuf_r+0x6c>
 801031e:	4621      	mov	r1, r4
 8010320:	4628      	mov	r0, r5
 8010322:	f000 f911 	bl	8010548 <_fflush_r>
 8010326:	b988      	cbnz	r0, 801034c <__swbuf_r+0x90>
 8010328:	4638      	mov	r0, r7
 801032a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801032c:	4b0a      	ldr	r3, [pc, #40]	; (8010358 <__swbuf_r+0x9c>)
 801032e:	429c      	cmp	r4, r3
 8010330:	d101      	bne.n	8010336 <__swbuf_r+0x7a>
 8010332:	68ac      	ldr	r4, [r5, #8]
 8010334:	e7cf      	b.n	80102d6 <__swbuf_r+0x1a>
 8010336:	4b09      	ldr	r3, [pc, #36]	; (801035c <__swbuf_r+0xa0>)
 8010338:	429c      	cmp	r4, r3
 801033a:	bf08      	it	eq
 801033c:	68ec      	ldreq	r4, [r5, #12]
 801033e:	e7ca      	b.n	80102d6 <__swbuf_r+0x1a>
 8010340:	4621      	mov	r1, r4
 8010342:	4628      	mov	r0, r5
 8010344:	f000 f80c 	bl	8010360 <__swsetup_r>
 8010348:	2800      	cmp	r0, #0
 801034a:	d0cb      	beq.n	80102e4 <__swbuf_r+0x28>
 801034c:	f04f 37ff 	mov.w	r7, #4294967295
 8010350:	e7ea      	b.n	8010328 <__swbuf_r+0x6c>
 8010352:	bf00      	nop
 8010354:	08011fd8 	.word	0x08011fd8
 8010358:	08011ff8 	.word	0x08011ff8
 801035c:	08011fb8 	.word	0x08011fb8

08010360 <__swsetup_r>:
 8010360:	4b32      	ldr	r3, [pc, #200]	; (801042c <__swsetup_r+0xcc>)
 8010362:	b570      	push	{r4, r5, r6, lr}
 8010364:	681d      	ldr	r5, [r3, #0]
 8010366:	4606      	mov	r6, r0
 8010368:	460c      	mov	r4, r1
 801036a:	b125      	cbz	r5, 8010376 <__swsetup_r+0x16>
 801036c:	69ab      	ldr	r3, [r5, #24]
 801036e:	b913      	cbnz	r3, 8010376 <__swsetup_r+0x16>
 8010370:	4628      	mov	r0, r5
 8010372:	f000 f97d 	bl	8010670 <__sinit>
 8010376:	4b2e      	ldr	r3, [pc, #184]	; (8010430 <__swsetup_r+0xd0>)
 8010378:	429c      	cmp	r4, r3
 801037a:	d10f      	bne.n	801039c <__swsetup_r+0x3c>
 801037c:	686c      	ldr	r4, [r5, #4]
 801037e:	89a3      	ldrh	r3, [r4, #12]
 8010380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010384:	0719      	lsls	r1, r3, #28
 8010386:	d42c      	bmi.n	80103e2 <__swsetup_r+0x82>
 8010388:	06dd      	lsls	r5, r3, #27
 801038a:	d411      	bmi.n	80103b0 <__swsetup_r+0x50>
 801038c:	2309      	movs	r3, #9
 801038e:	6033      	str	r3, [r6, #0]
 8010390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	f04f 30ff 	mov.w	r0, #4294967295
 801039a:	e03e      	b.n	801041a <__swsetup_r+0xba>
 801039c:	4b25      	ldr	r3, [pc, #148]	; (8010434 <__swsetup_r+0xd4>)
 801039e:	429c      	cmp	r4, r3
 80103a0:	d101      	bne.n	80103a6 <__swsetup_r+0x46>
 80103a2:	68ac      	ldr	r4, [r5, #8]
 80103a4:	e7eb      	b.n	801037e <__swsetup_r+0x1e>
 80103a6:	4b24      	ldr	r3, [pc, #144]	; (8010438 <__swsetup_r+0xd8>)
 80103a8:	429c      	cmp	r4, r3
 80103aa:	bf08      	it	eq
 80103ac:	68ec      	ldreq	r4, [r5, #12]
 80103ae:	e7e6      	b.n	801037e <__swsetup_r+0x1e>
 80103b0:	0758      	lsls	r0, r3, #29
 80103b2:	d512      	bpl.n	80103da <__swsetup_r+0x7a>
 80103b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103b6:	b141      	cbz	r1, 80103ca <__swsetup_r+0x6a>
 80103b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103bc:	4299      	cmp	r1, r3
 80103be:	d002      	beq.n	80103c6 <__swsetup_r+0x66>
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 fa59 	bl	8010878 <_free_r>
 80103c6:	2300      	movs	r3, #0
 80103c8:	6363      	str	r3, [r4, #52]	; 0x34
 80103ca:	89a3      	ldrh	r3, [r4, #12]
 80103cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103d0:	81a3      	strh	r3, [r4, #12]
 80103d2:	2300      	movs	r3, #0
 80103d4:	6063      	str	r3, [r4, #4]
 80103d6:	6923      	ldr	r3, [r4, #16]
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	89a3      	ldrh	r3, [r4, #12]
 80103dc:	f043 0308 	orr.w	r3, r3, #8
 80103e0:	81a3      	strh	r3, [r4, #12]
 80103e2:	6923      	ldr	r3, [r4, #16]
 80103e4:	b94b      	cbnz	r3, 80103fa <__swsetup_r+0x9a>
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103f0:	d003      	beq.n	80103fa <__swsetup_r+0x9a>
 80103f2:	4621      	mov	r1, r4
 80103f4:	4630      	mov	r0, r6
 80103f6:	f000 f9ff 	bl	80107f8 <__smakebuf_r>
 80103fa:	89a0      	ldrh	r0, [r4, #12]
 80103fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010400:	f010 0301 	ands.w	r3, r0, #1
 8010404:	d00a      	beq.n	801041c <__swsetup_r+0xbc>
 8010406:	2300      	movs	r3, #0
 8010408:	60a3      	str	r3, [r4, #8]
 801040a:	6963      	ldr	r3, [r4, #20]
 801040c:	425b      	negs	r3, r3
 801040e:	61a3      	str	r3, [r4, #24]
 8010410:	6923      	ldr	r3, [r4, #16]
 8010412:	b943      	cbnz	r3, 8010426 <__swsetup_r+0xc6>
 8010414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010418:	d1ba      	bne.n	8010390 <__swsetup_r+0x30>
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	0781      	lsls	r1, r0, #30
 801041e:	bf58      	it	pl
 8010420:	6963      	ldrpl	r3, [r4, #20]
 8010422:	60a3      	str	r3, [r4, #8]
 8010424:	e7f4      	b.n	8010410 <__swsetup_r+0xb0>
 8010426:	2000      	movs	r0, #0
 8010428:	e7f7      	b.n	801041a <__swsetup_r+0xba>
 801042a:	bf00      	nop
 801042c:	20000010 	.word	0x20000010
 8010430:	08011fd8 	.word	0x08011fd8
 8010434:	08011ff8 	.word	0x08011ff8
 8010438:	08011fb8 	.word	0x08011fb8

0801043c <__sflush_r>:
 801043c:	898a      	ldrh	r2, [r1, #12]
 801043e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010442:	4605      	mov	r5, r0
 8010444:	0710      	lsls	r0, r2, #28
 8010446:	460c      	mov	r4, r1
 8010448:	d458      	bmi.n	80104fc <__sflush_r+0xc0>
 801044a:	684b      	ldr	r3, [r1, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	dc05      	bgt.n	801045c <__sflush_r+0x20>
 8010450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010452:	2b00      	cmp	r3, #0
 8010454:	dc02      	bgt.n	801045c <__sflush_r+0x20>
 8010456:	2000      	movs	r0, #0
 8010458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801045e:	2e00      	cmp	r6, #0
 8010460:	d0f9      	beq.n	8010456 <__sflush_r+0x1a>
 8010462:	2300      	movs	r3, #0
 8010464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010468:	682f      	ldr	r7, [r5, #0]
 801046a:	602b      	str	r3, [r5, #0]
 801046c:	d032      	beq.n	80104d4 <__sflush_r+0x98>
 801046e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010470:	89a3      	ldrh	r3, [r4, #12]
 8010472:	075a      	lsls	r2, r3, #29
 8010474:	d505      	bpl.n	8010482 <__sflush_r+0x46>
 8010476:	6863      	ldr	r3, [r4, #4]
 8010478:	1ac0      	subs	r0, r0, r3
 801047a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801047c:	b10b      	cbz	r3, 8010482 <__sflush_r+0x46>
 801047e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010480:	1ac0      	subs	r0, r0, r3
 8010482:	2300      	movs	r3, #0
 8010484:	4602      	mov	r2, r0
 8010486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010488:	6a21      	ldr	r1, [r4, #32]
 801048a:	4628      	mov	r0, r5
 801048c:	47b0      	blx	r6
 801048e:	1c43      	adds	r3, r0, #1
 8010490:	89a3      	ldrh	r3, [r4, #12]
 8010492:	d106      	bne.n	80104a2 <__sflush_r+0x66>
 8010494:	6829      	ldr	r1, [r5, #0]
 8010496:	291d      	cmp	r1, #29
 8010498:	d82c      	bhi.n	80104f4 <__sflush_r+0xb8>
 801049a:	4a2a      	ldr	r2, [pc, #168]	; (8010544 <__sflush_r+0x108>)
 801049c:	40ca      	lsrs	r2, r1
 801049e:	07d6      	lsls	r6, r2, #31
 80104a0:	d528      	bpl.n	80104f4 <__sflush_r+0xb8>
 80104a2:	2200      	movs	r2, #0
 80104a4:	6062      	str	r2, [r4, #4]
 80104a6:	04d9      	lsls	r1, r3, #19
 80104a8:	6922      	ldr	r2, [r4, #16]
 80104aa:	6022      	str	r2, [r4, #0]
 80104ac:	d504      	bpl.n	80104b8 <__sflush_r+0x7c>
 80104ae:	1c42      	adds	r2, r0, #1
 80104b0:	d101      	bne.n	80104b6 <__sflush_r+0x7a>
 80104b2:	682b      	ldr	r3, [r5, #0]
 80104b4:	b903      	cbnz	r3, 80104b8 <__sflush_r+0x7c>
 80104b6:	6560      	str	r0, [r4, #84]	; 0x54
 80104b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ba:	602f      	str	r7, [r5, #0]
 80104bc:	2900      	cmp	r1, #0
 80104be:	d0ca      	beq.n	8010456 <__sflush_r+0x1a>
 80104c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104c4:	4299      	cmp	r1, r3
 80104c6:	d002      	beq.n	80104ce <__sflush_r+0x92>
 80104c8:	4628      	mov	r0, r5
 80104ca:	f000 f9d5 	bl	8010878 <_free_r>
 80104ce:	2000      	movs	r0, #0
 80104d0:	6360      	str	r0, [r4, #52]	; 0x34
 80104d2:	e7c1      	b.n	8010458 <__sflush_r+0x1c>
 80104d4:	6a21      	ldr	r1, [r4, #32]
 80104d6:	2301      	movs	r3, #1
 80104d8:	4628      	mov	r0, r5
 80104da:	47b0      	blx	r6
 80104dc:	1c41      	adds	r1, r0, #1
 80104de:	d1c7      	bne.n	8010470 <__sflush_r+0x34>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d0c4      	beq.n	8010470 <__sflush_r+0x34>
 80104e6:	2b1d      	cmp	r3, #29
 80104e8:	d001      	beq.n	80104ee <__sflush_r+0xb2>
 80104ea:	2b16      	cmp	r3, #22
 80104ec:	d101      	bne.n	80104f2 <__sflush_r+0xb6>
 80104ee:	602f      	str	r7, [r5, #0]
 80104f0:	e7b1      	b.n	8010456 <__sflush_r+0x1a>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104f8:	81a3      	strh	r3, [r4, #12]
 80104fa:	e7ad      	b.n	8010458 <__sflush_r+0x1c>
 80104fc:	690f      	ldr	r7, [r1, #16]
 80104fe:	2f00      	cmp	r7, #0
 8010500:	d0a9      	beq.n	8010456 <__sflush_r+0x1a>
 8010502:	0793      	lsls	r3, r2, #30
 8010504:	680e      	ldr	r6, [r1, #0]
 8010506:	bf08      	it	eq
 8010508:	694b      	ldreq	r3, [r1, #20]
 801050a:	600f      	str	r7, [r1, #0]
 801050c:	bf18      	it	ne
 801050e:	2300      	movne	r3, #0
 8010510:	eba6 0807 	sub.w	r8, r6, r7
 8010514:	608b      	str	r3, [r1, #8]
 8010516:	f1b8 0f00 	cmp.w	r8, #0
 801051a:	dd9c      	ble.n	8010456 <__sflush_r+0x1a>
 801051c:	6a21      	ldr	r1, [r4, #32]
 801051e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010520:	4643      	mov	r3, r8
 8010522:	463a      	mov	r2, r7
 8010524:	4628      	mov	r0, r5
 8010526:	47b0      	blx	r6
 8010528:	2800      	cmp	r0, #0
 801052a:	dc06      	bgt.n	801053a <__sflush_r+0xfe>
 801052c:	89a3      	ldrh	r3, [r4, #12]
 801052e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010532:	81a3      	strh	r3, [r4, #12]
 8010534:	f04f 30ff 	mov.w	r0, #4294967295
 8010538:	e78e      	b.n	8010458 <__sflush_r+0x1c>
 801053a:	4407      	add	r7, r0
 801053c:	eba8 0800 	sub.w	r8, r8, r0
 8010540:	e7e9      	b.n	8010516 <__sflush_r+0xda>
 8010542:	bf00      	nop
 8010544:	20400001 	.word	0x20400001

08010548 <_fflush_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	690b      	ldr	r3, [r1, #16]
 801054c:	4605      	mov	r5, r0
 801054e:	460c      	mov	r4, r1
 8010550:	b913      	cbnz	r3, 8010558 <_fflush_r+0x10>
 8010552:	2500      	movs	r5, #0
 8010554:	4628      	mov	r0, r5
 8010556:	bd38      	pop	{r3, r4, r5, pc}
 8010558:	b118      	cbz	r0, 8010562 <_fflush_r+0x1a>
 801055a:	6983      	ldr	r3, [r0, #24]
 801055c:	b90b      	cbnz	r3, 8010562 <_fflush_r+0x1a>
 801055e:	f000 f887 	bl	8010670 <__sinit>
 8010562:	4b14      	ldr	r3, [pc, #80]	; (80105b4 <_fflush_r+0x6c>)
 8010564:	429c      	cmp	r4, r3
 8010566:	d11b      	bne.n	80105a0 <_fflush_r+0x58>
 8010568:	686c      	ldr	r4, [r5, #4]
 801056a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d0ef      	beq.n	8010552 <_fflush_r+0xa>
 8010572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010574:	07d0      	lsls	r0, r2, #31
 8010576:	d404      	bmi.n	8010582 <_fflush_r+0x3a>
 8010578:	0599      	lsls	r1, r3, #22
 801057a:	d402      	bmi.n	8010582 <_fflush_r+0x3a>
 801057c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801057e:	f000 f915 	bl	80107ac <__retarget_lock_acquire_recursive>
 8010582:	4628      	mov	r0, r5
 8010584:	4621      	mov	r1, r4
 8010586:	f7ff ff59 	bl	801043c <__sflush_r>
 801058a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801058c:	07da      	lsls	r2, r3, #31
 801058e:	4605      	mov	r5, r0
 8010590:	d4e0      	bmi.n	8010554 <_fflush_r+0xc>
 8010592:	89a3      	ldrh	r3, [r4, #12]
 8010594:	059b      	lsls	r3, r3, #22
 8010596:	d4dd      	bmi.n	8010554 <_fflush_r+0xc>
 8010598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801059a:	f000 f908 	bl	80107ae <__retarget_lock_release_recursive>
 801059e:	e7d9      	b.n	8010554 <_fflush_r+0xc>
 80105a0:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <_fflush_r+0x70>)
 80105a2:	429c      	cmp	r4, r3
 80105a4:	d101      	bne.n	80105aa <_fflush_r+0x62>
 80105a6:	68ac      	ldr	r4, [r5, #8]
 80105a8:	e7df      	b.n	801056a <_fflush_r+0x22>
 80105aa:	4b04      	ldr	r3, [pc, #16]	; (80105bc <_fflush_r+0x74>)
 80105ac:	429c      	cmp	r4, r3
 80105ae:	bf08      	it	eq
 80105b0:	68ec      	ldreq	r4, [r5, #12]
 80105b2:	e7da      	b.n	801056a <_fflush_r+0x22>
 80105b4:	08011fd8 	.word	0x08011fd8
 80105b8:	08011ff8 	.word	0x08011ff8
 80105bc:	08011fb8 	.word	0x08011fb8

080105c0 <std>:
 80105c0:	2300      	movs	r3, #0
 80105c2:	b510      	push	{r4, lr}
 80105c4:	4604      	mov	r4, r0
 80105c6:	e9c0 3300 	strd	r3, r3, [r0]
 80105ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105ce:	6083      	str	r3, [r0, #8]
 80105d0:	8181      	strh	r1, [r0, #12]
 80105d2:	6643      	str	r3, [r0, #100]	; 0x64
 80105d4:	81c2      	strh	r2, [r0, #14]
 80105d6:	6183      	str	r3, [r0, #24]
 80105d8:	4619      	mov	r1, r3
 80105da:	2208      	movs	r2, #8
 80105dc:	305c      	adds	r0, #92	; 0x5c
 80105de:	f7ff fd7d 	bl	80100dc <memset>
 80105e2:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <std+0x38>)
 80105e4:	6263      	str	r3, [r4, #36]	; 0x24
 80105e6:	4b05      	ldr	r3, [pc, #20]	; (80105fc <std+0x3c>)
 80105e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80105ea:	4b05      	ldr	r3, [pc, #20]	; (8010600 <std+0x40>)
 80105ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105ee:	4b05      	ldr	r3, [pc, #20]	; (8010604 <std+0x44>)
 80105f0:	6224      	str	r4, [r4, #32]
 80105f2:	6323      	str	r3, [r4, #48]	; 0x30
 80105f4:	bd10      	pop	{r4, pc}
 80105f6:	bf00      	nop
 80105f8:	08011281 	.word	0x08011281
 80105fc:	080112a3 	.word	0x080112a3
 8010600:	080112db 	.word	0x080112db
 8010604:	080112ff 	.word	0x080112ff

08010608 <_cleanup_r>:
 8010608:	4901      	ldr	r1, [pc, #4]	; (8010610 <_cleanup_r+0x8>)
 801060a:	f000 b8af 	b.w	801076c <_fwalk_reent>
 801060e:	bf00      	nop
 8010610:	08010549 	.word	0x08010549

08010614 <__sfmoreglue>:
 8010614:	b570      	push	{r4, r5, r6, lr}
 8010616:	1e4a      	subs	r2, r1, #1
 8010618:	2568      	movs	r5, #104	; 0x68
 801061a:	4355      	muls	r5, r2
 801061c:	460e      	mov	r6, r1
 801061e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010622:	f000 f979 	bl	8010918 <_malloc_r>
 8010626:	4604      	mov	r4, r0
 8010628:	b140      	cbz	r0, 801063c <__sfmoreglue+0x28>
 801062a:	2100      	movs	r1, #0
 801062c:	e9c0 1600 	strd	r1, r6, [r0]
 8010630:	300c      	adds	r0, #12
 8010632:	60a0      	str	r0, [r4, #8]
 8010634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010638:	f7ff fd50 	bl	80100dc <memset>
 801063c:	4620      	mov	r0, r4
 801063e:	bd70      	pop	{r4, r5, r6, pc}

08010640 <__sfp_lock_acquire>:
 8010640:	4801      	ldr	r0, [pc, #4]	; (8010648 <__sfp_lock_acquire+0x8>)
 8010642:	f000 b8b3 	b.w	80107ac <__retarget_lock_acquire_recursive>
 8010646:	bf00      	nop
 8010648:	20000b28 	.word	0x20000b28

0801064c <__sfp_lock_release>:
 801064c:	4801      	ldr	r0, [pc, #4]	; (8010654 <__sfp_lock_release+0x8>)
 801064e:	f000 b8ae 	b.w	80107ae <__retarget_lock_release_recursive>
 8010652:	bf00      	nop
 8010654:	20000b28 	.word	0x20000b28

08010658 <__sinit_lock_acquire>:
 8010658:	4801      	ldr	r0, [pc, #4]	; (8010660 <__sinit_lock_acquire+0x8>)
 801065a:	f000 b8a7 	b.w	80107ac <__retarget_lock_acquire_recursive>
 801065e:	bf00      	nop
 8010660:	20000b23 	.word	0x20000b23

08010664 <__sinit_lock_release>:
 8010664:	4801      	ldr	r0, [pc, #4]	; (801066c <__sinit_lock_release+0x8>)
 8010666:	f000 b8a2 	b.w	80107ae <__retarget_lock_release_recursive>
 801066a:	bf00      	nop
 801066c:	20000b23 	.word	0x20000b23

08010670 <__sinit>:
 8010670:	b510      	push	{r4, lr}
 8010672:	4604      	mov	r4, r0
 8010674:	f7ff fff0 	bl	8010658 <__sinit_lock_acquire>
 8010678:	69a3      	ldr	r3, [r4, #24]
 801067a:	b11b      	cbz	r3, 8010684 <__sinit+0x14>
 801067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010680:	f7ff bff0 	b.w	8010664 <__sinit_lock_release>
 8010684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010688:	6523      	str	r3, [r4, #80]	; 0x50
 801068a:	4b13      	ldr	r3, [pc, #76]	; (80106d8 <__sinit+0x68>)
 801068c:	4a13      	ldr	r2, [pc, #76]	; (80106dc <__sinit+0x6c>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	62a2      	str	r2, [r4, #40]	; 0x28
 8010692:	42a3      	cmp	r3, r4
 8010694:	bf04      	itt	eq
 8010696:	2301      	moveq	r3, #1
 8010698:	61a3      	streq	r3, [r4, #24]
 801069a:	4620      	mov	r0, r4
 801069c:	f000 f820 	bl	80106e0 <__sfp>
 80106a0:	6060      	str	r0, [r4, #4]
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 f81c 	bl	80106e0 <__sfp>
 80106a8:	60a0      	str	r0, [r4, #8]
 80106aa:	4620      	mov	r0, r4
 80106ac:	f000 f818 	bl	80106e0 <__sfp>
 80106b0:	2200      	movs	r2, #0
 80106b2:	60e0      	str	r0, [r4, #12]
 80106b4:	2104      	movs	r1, #4
 80106b6:	6860      	ldr	r0, [r4, #4]
 80106b8:	f7ff ff82 	bl	80105c0 <std>
 80106bc:	68a0      	ldr	r0, [r4, #8]
 80106be:	2201      	movs	r2, #1
 80106c0:	2109      	movs	r1, #9
 80106c2:	f7ff ff7d 	bl	80105c0 <std>
 80106c6:	68e0      	ldr	r0, [r4, #12]
 80106c8:	2202      	movs	r2, #2
 80106ca:	2112      	movs	r1, #18
 80106cc:	f7ff ff78 	bl	80105c0 <std>
 80106d0:	2301      	movs	r3, #1
 80106d2:	61a3      	str	r3, [r4, #24]
 80106d4:	e7d2      	b.n	801067c <__sinit+0xc>
 80106d6:	bf00      	nop
 80106d8:	08011fb4 	.word	0x08011fb4
 80106dc:	08010609 	.word	0x08010609

080106e0 <__sfp>:
 80106e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e2:	4607      	mov	r7, r0
 80106e4:	f7ff ffac 	bl	8010640 <__sfp_lock_acquire>
 80106e8:	4b1e      	ldr	r3, [pc, #120]	; (8010764 <__sfp+0x84>)
 80106ea:	681e      	ldr	r6, [r3, #0]
 80106ec:	69b3      	ldr	r3, [r6, #24]
 80106ee:	b913      	cbnz	r3, 80106f6 <__sfp+0x16>
 80106f0:	4630      	mov	r0, r6
 80106f2:	f7ff ffbd 	bl	8010670 <__sinit>
 80106f6:	3648      	adds	r6, #72	; 0x48
 80106f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106fc:	3b01      	subs	r3, #1
 80106fe:	d503      	bpl.n	8010708 <__sfp+0x28>
 8010700:	6833      	ldr	r3, [r6, #0]
 8010702:	b30b      	cbz	r3, 8010748 <__sfp+0x68>
 8010704:	6836      	ldr	r6, [r6, #0]
 8010706:	e7f7      	b.n	80106f8 <__sfp+0x18>
 8010708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801070c:	b9d5      	cbnz	r5, 8010744 <__sfp+0x64>
 801070e:	4b16      	ldr	r3, [pc, #88]	; (8010768 <__sfp+0x88>)
 8010710:	60e3      	str	r3, [r4, #12]
 8010712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010716:	6665      	str	r5, [r4, #100]	; 0x64
 8010718:	f000 f847 	bl	80107aa <__retarget_lock_init_recursive>
 801071c:	f7ff ff96 	bl	801064c <__sfp_lock_release>
 8010720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010728:	6025      	str	r5, [r4, #0]
 801072a:	61a5      	str	r5, [r4, #24]
 801072c:	2208      	movs	r2, #8
 801072e:	4629      	mov	r1, r5
 8010730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010734:	f7ff fcd2 	bl	80100dc <memset>
 8010738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801073c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010740:	4620      	mov	r0, r4
 8010742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010744:	3468      	adds	r4, #104	; 0x68
 8010746:	e7d9      	b.n	80106fc <__sfp+0x1c>
 8010748:	2104      	movs	r1, #4
 801074a:	4638      	mov	r0, r7
 801074c:	f7ff ff62 	bl	8010614 <__sfmoreglue>
 8010750:	4604      	mov	r4, r0
 8010752:	6030      	str	r0, [r6, #0]
 8010754:	2800      	cmp	r0, #0
 8010756:	d1d5      	bne.n	8010704 <__sfp+0x24>
 8010758:	f7ff ff78 	bl	801064c <__sfp_lock_release>
 801075c:	230c      	movs	r3, #12
 801075e:	603b      	str	r3, [r7, #0]
 8010760:	e7ee      	b.n	8010740 <__sfp+0x60>
 8010762:	bf00      	nop
 8010764:	08011fb4 	.word	0x08011fb4
 8010768:	ffff0001 	.word	0xffff0001

0801076c <_fwalk_reent>:
 801076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010770:	4606      	mov	r6, r0
 8010772:	4688      	mov	r8, r1
 8010774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010778:	2700      	movs	r7, #0
 801077a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801077e:	f1b9 0901 	subs.w	r9, r9, #1
 8010782:	d505      	bpl.n	8010790 <_fwalk_reent+0x24>
 8010784:	6824      	ldr	r4, [r4, #0]
 8010786:	2c00      	cmp	r4, #0
 8010788:	d1f7      	bne.n	801077a <_fwalk_reent+0xe>
 801078a:	4638      	mov	r0, r7
 801078c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010790:	89ab      	ldrh	r3, [r5, #12]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d907      	bls.n	80107a6 <_fwalk_reent+0x3a>
 8010796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801079a:	3301      	adds	r3, #1
 801079c:	d003      	beq.n	80107a6 <_fwalk_reent+0x3a>
 801079e:	4629      	mov	r1, r5
 80107a0:	4630      	mov	r0, r6
 80107a2:	47c0      	blx	r8
 80107a4:	4307      	orrs	r7, r0
 80107a6:	3568      	adds	r5, #104	; 0x68
 80107a8:	e7e9      	b.n	801077e <_fwalk_reent+0x12>

080107aa <__retarget_lock_init_recursive>:
 80107aa:	4770      	bx	lr

080107ac <__retarget_lock_acquire_recursive>:
 80107ac:	4770      	bx	lr

080107ae <__retarget_lock_release_recursive>:
 80107ae:	4770      	bx	lr

080107b0 <__swhatbuf_r>:
 80107b0:	b570      	push	{r4, r5, r6, lr}
 80107b2:	460e      	mov	r6, r1
 80107b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b8:	2900      	cmp	r1, #0
 80107ba:	b096      	sub	sp, #88	; 0x58
 80107bc:	4614      	mov	r4, r2
 80107be:	461d      	mov	r5, r3
 80107c0:	da07      	bge.n	80107d2 <__swhatbuf_r+0x22>
 80107c2:	2300      	movs	r3, #0
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	89b3      	ldrh	r3, [r6, #12]
 80107c8:	061a      	lsls	r2, r3, #24
 80107ca:	d410      	bmi.n	80107ee <__swhatbuf_r+0x3e>
 80107cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107d0:	e00e      	b.n	80107f0 <__swhatbuf_r+0x40>
 80107d2:	466a      	mov	r2, sp
 80107d4:	f000 fdba 	bl	801134c <_fstat_r>
 80107d8:	2800      	cmp	r0, #0
 80107da:	dbf2      	blt.n	80107c2 <__swhatbuf_r+0x12>
 80107dc:	9a01      	ldr	r2, [sp, #4]
 80107de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107e6:	425a      	negs	r2, r3
 80107e8:	415a      	adcs	r2, r3
 80107ea:	602a      	str	r2, [r5, #0]
 80107ec:	e7ee      	b.n	80107cc <__swhatbuf_r+0x1c>
 80107ee:	2340      	movs	r3, #64	; 0x40
 80107f0:	2000      	movs	r0, #0
 80107f2:	6023      	str	r3, [r4, #0]
 80107f4:	b016      	add	sp, #88	; 0x58
 80107f6:	bd70      	pop	{r4, r5, r6, pc}

080107f8 <__smakebuf_r>:
 80107f8:	898b      	ldrh	r3, [r1, #12]
 80107fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107fc:	079d      	lsls	r5, r3, #30
 80107fe:	4606      	mov	r6, r0
 8010800:	460c      	mov	r4, r1
 8010802:	d507      	bpl.n	8010814 <__smakebuf_r+0x1c>
 8010804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	6123      	str	r3, [r4, #16]
 801080c:	2301      	movs	r3, #1
 801080e:	6163      	str	r3, [r4, #20]
 8010810:	b002      	add	sp, #8
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	ab01      	add	r3, sp, #4
 8010816:	466a      	mov	r2, sp
 8010818:	f7ff ffca 	bl	80107b0 <__swhatbuf_r>
 801081c:	9900      	ldr	r1, [sp, #0]
 801081e:	4605      	mov	r5, r0
 8010820:	4630      	mov	r0, r6
 8010822:	f000 f879 	bl	8010918 <_malloc_r>
 8010826:	b948      	cbnz	r0, 801083c <__smakebuf_r+0x44>
 8010828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801082c:	059a      	lsls	r2, r3, #22
 801082e:	d4ef      	bmi.n	8010810 <__smakebuf_r+0x18>
 8010830:	f023 0303 	bic.w	r3, r3, #3
 8010834:	f043 0302 	orr.w	r3, r3, #2
 8010838:	81a3      	strh	r3, [r4, #12]
 801083a:	e7e3      	b.n	8010804 <__smakebuf_r+0xc>
 801083c:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <__smakebuf_r+0x7c>)
 801083e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010840:	89a3      	ldrh	r3, [r4, #12]
 8010842:	6020      	str	r0, [r4, #0]
 8010844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	9b00      	ldr	r3, [sp, #0]
 801084c:	6163      	str	r3, [r4, #20]
 801084e:	9b01      	ldr	r3, [sp, #4]
 8010850:	6120      	str	r0, [r4, #16]
 8010852:	b15b      	cbz	r3, 801086c <__smakebuf_r+0x74>
 8010854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010858:	4630      	mov	r0, r6
 801085a:	f000 fd89 	bl	8011370 <_isatty_r>
 801085e:	b128      	cbz	r0, 801086c <__smakebuf_r+0x74>
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	f023 0303 	bic.w	r3, r3, #3
 8010866:	f043 0301 	orr.w	r3, r3, #1
 801086a:	81a3      	strh	r3, [r4, #12]
 801086c:	89a0      	ldrh	r0, [r4, #12]
 801086e:	4305      	orrs	r5, r0
 8010870:	81a5      	strh	r5, [r4, #12]
 8010872:	e7cd      	b.n	8010810 <__smakebuf_r+0x18>
 8010874:	08010609 	.word	0x08010609

08010878 <_free_r>:
 8010878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801087a:	2900      	cmp	r1, #0
 801087c:	d048      	beq.n	8010910 <_free_r+0x98>
 801087e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010882:	9001      	str	r0, [sp, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	f1a1 0404 	sub.w	r4, r1, #4
 801088a:	bfb8      	it	lt
 801088c:	18e4      	addlt	r4, r4, r3
 801088e:	f000 fdab 	bl	80113e8 <__malloc_lock>
 8010892:	4a20      	ldr	r2, [pc, #128]	; (8010914 <_free_r+0x9c>)
 8010894:	9801      	ldr	r0, [sp, #4]
 8010896:	6813      	ldr	r3, [r2, #0]
 8010898:	4615      	mov	r5, r2
 801089a:	b933      	cbnz	r3, 80108aa <_free_r+0x32>
 801089c:	6063      	str	r3, [r4, #4]
 801089e:	6014      	str	r4, [r2, #0]
 80108a0:	b003      	add	sp, #12
 80108a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108a6:	f000 bda5 	b.w	80113f4 <__malloc_unlock>
 80108aa:	42a3      	cmp	r3, r4
 80108ac:	d90b      	bls.n	80108c6 <_free_r+0x4e>
 80108ae:	6821      	ldr	r1, [r4, #0]
 80108b0:	1862      	adds	r2, r4, r1
 80108b2:	4293      	cmp	r3, r2
 80108b4:	bf04      	itt	eq
 80108b6:	681a      	ldreq	r2, [r3, #0]
 80108b8:	685b      	ldreq	r3, [r3, #4]
 80108ba:	6063      	str	r3, [r4, #4]
 80108bc:	bf04      	itt	eq
 80108be:	1852      	addeq	r2, r2, r1
 80108c0:	6022      	streq	r2, [r4, #0]
 80108c2:	602c      	str	r4, [r5, #0]
 80108c4:	e7ec      	b.n	80108a0 <_free_r+0x28>
 80108c6:	461a      	mov	r2, r3
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	b10b      	cbz	r3, 80108d0 <_free_r+0x58>
 80108cc:	42a3      	cmp	r3, r4
 80108ce:	d9fa      	bls.n	80108c6 <_free_r+0x4e>
 80108d0:	6811      	ldr	r1, [r2, #0]
 80108d2:	1855      	adds	r5, r2, r1
 80108d4:	42a5      	cmp	r5, r4
 80108d6:	d10b      	bne.n	80108f0 <_free_r+0x78>
 80108d8:	6824      	ldr	r4, [r4, #0]
 80108da:	4421      	add	r1, r4
 80108dc:	1854      	adds	r4, r2, r1
 80108de:	42a3      	cmp	r3, r4
 80108e0:	6011      	str	r1, [r2, #0]
 80108e2:	d1dd      	bne.n	80108a0 <_free_r+0x28>
 80108e4:	681c      	ldr	r4, [r3, #0]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	6053      	str	r3, [r2, #4]
 80108ea:	4421      	add	r1, r4
 80108ec:	6011      	str	r1, [r2, #0]
 80108ee:	e7d7      	b.n	80108a0 <_free_r+0x28>
 80108f0:	d902      	bls.n	80108f8 <_free_r+0x80>
 80108f2:	230c      	movs	r3, #12
 80108f4:	6003      	str	r3, [r0, #0]
 80108f6:	e7d3      	b.n	80108a0 <_free_r+0x28>
 80108f8:	6825      	ldr	r5, [r4, #0]
 80108fa:	1961      	adds	r1, r4, r5
 80108fc:	428b      	cmp	r3, r1
 80108fe:	bf04      	itt	eq
 8010900:	6819      	ldreq	r1, [r3, #0]
 8010902:	685b      	ldreq	r3, [r3, #4]
 8010904:	6063      	str	r3, [r4, #4]
 8010906:	bf04      	itt	eq
 8010908:	1949      	addeq	r1, r1, r5
 801090a:	6021      	streq	r1, [r4, #0]
 801090c:	6054      	str	r4, [r2, #4]
 801090e:	e7c7      	b.n	80108a0 <_free_r+0x28>
 8010910:	b003      	add	sp, #12
 8010912:	bd30      	pop	{r4, r5, pc}
 8010914:	200000c0 	.word	0x200000c0

08010918 <_malloc_r>:
 8010918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801091a:	1ccd      	adds	r5, r1, #3
 801091c:	f025 0503 	bic.w	r5, r5, #3
 8010920:	3508      	adds	r5, #8
 8010922:	2d0c      	cmp	r5, #12
 8010924:	bf38      	it	cc
 8010926:	250c      	movcc	r5, #12
 8010928:	2d00      	cmp	r5, #0
 801092a:	4606      	mov	r6, r0
 801092c:	db01      	blt.n	8010932 <_malloc_r+0x1a>
 801092e:	42a9      	cmp	r1, r5
 8010930:	d903      	bls.n	801093a <_malloc_r+0x22>
 8010932:	230c      	movs	r3, #12
 8010934:	6033      	str	r3, [r6, #0]
 8010936:	2000      	movs	r0, #0
 8010938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801093a:	f000 fd55 	bl	80113e8 <__malloc_lock>
 801093e:	4921      	ldr	r1, [pc, #132]	; (80109c4 <_malloc_r+0xac>)
 8010940:	680a      	ldr	r2, [r1, #0]
 8010942:	4614      	mov	r4, r2
 8010944:	b99c      	cbnz	r4, 801096e <_malloc_r+0x56>
 8010946:	4f20      	ldr	r7, [pc, #128]	; (80109c8 <_malloc_r+0xb0>)
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	b923      	cbnz	r3, 8010956 <_malloc_r+0x3e>
 801094c:	4621      	mov	r1, r4
 801094e:	4630      	mov	r0, r6
 8010950:	f000 fc86 	bl	8011260 <_sbrk_r>
 8010954:	6038      	str	r0, [r7, #0]
 8010956:	4629      	mov	r1, r5
 8010958:	4630      	mov	r0, r6
 801095a:	f000 fc81 	bl	8011260 <_sbrk_r>
 801095e:	1c43      	adds	r3, r0, #1
 8010960:	d123      	bne.n	80109aa <_malloc_r+0x92>
 8010962:	230c      	movs	r3, #12
 8010964:	6033      	str	r3, [r6, #0]
 8010966:	4630      	mov	r0, r6
 8010968:	f000 fd44 	bl	80113f4 <__malloc_unlock>
 801096c:	e7e3      	b.n	8010936 <_malloc_r+0x1e>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	1b5b      	subs	r3, r3, r5
 8010972:	d417      	bmi.n	80109a4 <_malloc_r+0x8c>
 8010974:	2b0b      	cmp	r3, #11
 8010976:	d903      	bls.n	8010980 <_malloc_r+0x68>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	441c      	add	r4, r3
 801097c:	6025      	str	r5, [r4, #0]
 801097e:	e004      	b.n	801098a <_malloc_r+0x72>
 8010980:	6863      	ldr	r3, [r4, #4]
 8010982:	42a2      	cmp	r2, r4
 8010984:	bf0c      	ite	eq
 8010986:	600b      	streq	r3, [r1, #0]
 8010988:	6053      	strne	r3, [r2, #4]
 801098a:	4630      	mov	r0, r6
 801098c:	f000 fd32 	bl	80113f4 <__malloc_unlock>
 8010990:	f104 000b 	add.w	r0, r4, #11
 8010994:	1d23      	adds	r3, r4, #4
 8010996:	f020 0007 	bic.w	r0, r0, #7
 801099a:	1ac2      	subs	r2, r0, r3
 801099c:	d0cc      	beq.n	8010938 <_malloc_r+0x20>
 801099e:	1a1b      	subs	r3, r3, r0
 80109a0:	50a3      	str	r3, [r4, r2]
 80109a2:	e7c9      	b.n	8010938 <_malloc_r+0x20>
 80109a4:	4622      	mov	r2, r4
 80109a6:	6864      	ldr	r4, [r4, #4]
 80109a8:	e7cc      	b.n	8010944 <_malloc_r+0x2c>
 80109aa:	1cc4      	adds	r4, r0, #3
 80109ac:	f024 0403 	bic.w	r4, r4, #3
 80109b0:	42a0      	cmp	r0, r4
 80109b2:	d0e3      	beq.n	801097c <_malloc_r+0x64>
 80109b4:	1a21      	subs	r1, r4, r0
 80109b6:	4630      	mov	r0, r6
 80109b8:	f000 fc52 	bl	8011260 <_sbrk_r>
 80109bc:	3001      	adds	r0, #1
 80109be:	d1dd      	bne.n	801097c <_malloc_r+0x64>
 80109c0:	e7cf      	b.n	8010962 <_malloc_r+0x4a>
 80109c2:	bf00      	nop
 80109c4:	200000c0 	.word	0x200000c0
 80109c8:	200000c4 	.word	0x200000c4

080109cc <__ssputs_r>:
 80109cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d0:	688e      	ldr	r6, [r1, #8]
 80109d2:	429e      	cmp	r6, r3
 80109d4:	4682      	mov	sl, r0
 80109d6:	460c      	mov	r4, r1
 80109d8:	4690      	mov	r8, r2
 80109da:	461f      	mov	r7, r3
 80109dc:	d838      	bhi.n	8010a50 <__ssputs_r+0x84>
 80109de:	898a      	ldrh	r2, [r1, #12]
 80109e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109e4:	d032      	beq.n	8010a4c <__ssputs_r+0x80>
 80109e6:	6825      	ldr	r5, [r4, #0]
 80109e8:	6909      	ldr	r1, [r1, #16]
 80109ea:	eba5 0901 	sub.w	r9, r5, r1
 80109ee:	6965      	ldr	r5, [r4, #20]
 80109f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109f8:	3301      	adds	r3, #1
 80109fa:	444b      	add	r3, r9
 80109fc:	106d      	asrs	r5, r5, #1
 80109fe:	429d      	cmp	r5, r3
 8010a00:	bf38      	it	cc
 8010a02:	461d      	movcc	r5, r3
 8010a04:	0553      	lsls	r3, r2, #21
 8010a06:	d531      	bpl.n	8010a6c <__ssputs_r+0xa0>
 8010a08:	4629      	mov	r1, r5
 8010a0a:	f7ff ff85 	bl	8010918 <_malloc_r>
 8010a0e:	4606      	mov	r6, r0
 8010a10:	b950      	cbnz	r0, 8010a28 <__ssputs_r+0x5c>
 8010a12:	230c      	movs	r3, #12
 8010a14:	f8ca 3000 	str.w	r3, [sl]
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a1e:	81a3      	strh	r3, [r4, #12]
 8010a20:	f04f 30ff 	mov.w	r0, #4294967295
 8010a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a28:	6921      	ldr	r1, [r4, #16]
 8010a2a:	464a      	mov	r2, r9
 8010a2c:	f7ff fb48 	bl	80100c0 <memcpy>
 8010a30:	89a3      	ldrh	r3, [r4, #12]
 8010a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a3a:	81a3      	strh	r3, [r4, #12]
 8010a3c:	6126      	str	r6, [r4, #16]
 8010a3e:	6165      	str	r5, [r4, #20]
 8010a40:	444e      	add	r6, r9
 8010a42:	eba5 0509 	sub.w	r5, r5, r9
 8010a46:	6026      	str	r6, [r4, #0]
 8010a48:	60a5      	str	r5, [r4, #8]
 8010a4a:	463e      	mov	r6, r7
 8010a4c:	42be      	cmp	r6, r7
 8010a4e:	d900      	bls.n	8010a52 <__ssputs_r+0x86>
 8010a50:	463e      	mov	r6, r7
 8010a52:	4632      	mov	r2, r6
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	4641      	mov	r1, r8
 8010a58:	f000 fcac 	bl	80113b4 <memmove>
 8010a5c:	68a3      	ldr	r3, [r4, #8]
 8010a5e:	6822      	ldr	r2, [r4, #0]
 8010a60:	1b9b      	subs	r3, r3, r6
 8010a62:	4432      	add	r2, r6
 8010a64:	60a3      	str	r3, [r4, #8]
 8010a66:	6022      	str	r2, [r4, #0]
 8010a68:	2000      	movs	r0, #0
 8010a6a:	e7db      	b.n	8010a24 <__ssputs_r+0x58>
 8010a6c:	462a      	mov	r2, r5
 8010a6e:	f000 fcc7 	bl	8011400 <_realloc_r>
 8010a72:	4606      	mov	r6, r0
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d1e1      	bne.n	8010a3c <__ssputs_r+0x70>
 8010a78:	6921      	ldr	r1, [r4, #16]
 8010a7a:	4650      	mov	r0, sl
 8010a7c:	f7ff fefc 	bl	8010878 <_free_r>
 8010a80:	e7c7      	b.n	8010a12 <__ssputs_r+0x46>
	...

08010a84 <_svfiprintf_r>:
 8010a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a88:	4698      	mov	r8, r3
 8010a8a:	898b      	ldrh	r3, [r1, #12]
 8010a8c:	061b      	lsls	r3, r3, #24
 8010a8e:	b09d      	sub	sp, #116	; 0x74
 8010a90:	4607      	mov	r7, r0
 8010a92:	460d      	mov	r5, r1
 8010a94:	4614      	mov	r4, r2
 8010a96:	d50e      	bpl.n	8010ab6 <_svfiprintf_r+0x32>
 8010a98:	690b      	ldr	r3, [r1, #16]
 8010a9a:	b963      	cbnz	r3, 8010ab6 <_svfiprintf_r+0x32>
 8010a9c:	2140      	movs	r1, #64	; 0x40
 8010a9e:	f7ff ff3b 	bl	8010918 <_malloc_r>
 8010aa2:	6028      	str	r0, [r5, #0]
 8010aa4:	6128      	str	r0, [r5, #16]
 8010aa6:	b920      	cbnz	r0, 8010ab2 <_svfiprintf_r+0x2e>
 8010aa8:	230c      	movs	r3, #12
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	e0d1      	b.n	8010c56 <_svfiprintf_r+0x1d2>
 8010ab2:	2340      	movs	r3, #64	; 0x40
 8010ab4:	616b      	str	r3, [r5, #20]
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8010aba:	2320      	movs	r3, #32
 8010abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ac4:	2330      	movs	r3, #48	; 0x30
 8010ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010c70 <_svfiprintf_r+0x1ec>
 8010aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ace:	f04f 0901 	mov.w	r9, #1
 8010ad2:	4623      	mov	r3, r4
 8010ad4:	469a      	mov	sl, r3
 8010ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ada:	b10a      	cbz	r2, 8010ae0 <_svfiprintf_r+0x5c>
 8010adc:	2a25      	cmp	r2, #37	; 0x25
 8010ade:	d1f9      	bne.n	8010ad4 <_svfiprintf_r+0x50>
 8010ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ae4:	d00b      	beq.n	8010afe <_svfiprintf_r+0x7a>
 8010ae6:	465b      	mov	r3, fp
 8010ae8:	4622      	mov	r2, r4
 8010aea:	4629      	mov	r1, r5
 8010aec:	4638      	mov	r0, r7
 8010aee:	f7ff ff6d 	bl	80109cc <__ssputs_r>
 8010af2:	3001      	adds	r0, #1
 8010af4:	f000 80aa 	beq.w	8010c4c <_svfiprintf_r+0x1c8>
 8010af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010afa:	445a      	add	r2, fp
 8010afc:	9209      	str	r2, [sp, #36]	; 0x24
 8010afe:	f89a 3000 	ldrb.w	r3, [sl]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f000 80a2 	beq.w	8010c4c <_svfiprintf_r+0x1c8>
 8010b08:	2300      	movs	r3, #0
 8010b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b12:	f10a 0a01 	add.w	sl, sl, #1
 8010b16:	9304      	str	r3, [sp, #16]
 8010b18:	9307      	str	r3, [sp, #28]
 8010b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8010b20:	4654      	mov	r4, sl
 8010b22:	2205      	movs	r2, #5
 8010b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b28:	4851      	ldr	r0, [pc, #324]	; (8010c70 <_svfiprintf_r+0x1ec>)
 8010b2a:	f7ef fbd9 	bl	80002e0 <memchr>
 8010b2e:	9a04      	ldr	r2, [sp, #16]
 8010b30:	b9d8      	cbnz	r0, 8010b6a <_svfiprintf_r+0xe6>
 8010b32:	06d0      	lsls	r0, r2, #27
 8010b34:	bf44      	itt	mi
 8010b36:	2320      	movmi	r3, #32
 8010b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b3c:	0711      	lsls	r1, r2, #28
 8010b3e:	bf44      	itt	mi
 8010b40:	232b      	movmi	r3, #43	; 0x2b
 8010b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b46:	f89a 3000 	ldrb.w	r3, [sl]
 8010b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b4c:	d015      	beq.n	8010b7a <_svfiprintf_r+0xf6>
 8010b4e:	9a07      	ldr	r2, [sp, #28]
 8010b50:	4654      	mov	r4, sl
 8010b52:	2000      	movs	r0, #0
 8010b54:	f04f 0c0a 	mov.w	ip, #10
 8010b58:	4621      	mov	r1, r4
 8010b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b5e:	3b30      	subs	r3, #48	; 0x30
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	d94e      	bls.n	8010c02 <_svfiprintf_r+0x17e>
 8010b64:	b1b0      	cbz	r0, 8010b94 <_svfiprintf_r+0x110>
 8010b66:	9207      	str	r2, [sp, #28]
 8010b68:	e014      	b.n	8010b94 <_svfiprintf_r+0x110>
 8010b6a:	eba0 0308 	sub.w	r3, r0, r8
 8010b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8010b72:	4313      	orrs	r3, r2
 8010b74:	9304      	str	r3, [sp, #16]
 8010b76:	46a2      	mov	sl, r4
 8010b78:	e7d2      	b.n	8010b20 <_svfiprintf_r+0x9c>
 8010b7a:	9b03      	ldr	r3, [sp, #12]
 8010b7c:	1d19      	adds	r1, r3, #4
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	9103      	str	r1, [sp, #12]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	bfbb      	ittet	lt
 8010b86:	425b      	neglt	r3, r3
 8010b88:	f042 0202 	orrlt.w	r2, r2, #2
 8010b8c:	9307      	strge	r3, [sp, #28]
 8010b8e:	9307      	strlt	r3, [sp, #28]
 8010b90:	bfb8      	it	lt
 8010b92:	9204      	strlt	r2, [sp, #16]
 8010b94:	7823      	ldrb	r3, [r4, #0]
 8010b96:	2b2e      	cmp	r3, #46	; 0x2e
 8010b98:	d10c      	bne.n	8010bb4 <_svfiprintf_r+0x130>
 8010b9a:	7863      	ldrb	r3, [r4, #1]
 8010b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b9e:	d135      	bne.n	8010c0c <_svfiprintf_r+0x188>
 8010ba0:	9b03      	ldr	r3, [sp, #12]
 8010ba2:	1d1a      	adds	r2, r3, #4
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	9203      	str	r2, [sp, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	bfb8      	it	lt
 8010bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bb0:	3402      	adds	r4, #2
 8010bb2:	9305      	str	r3, [sp, #20]
 8010bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010c80 <_svfiprintf_r+0x1fc>
 8010bb8:	7821      	ldrb	r1, [r4, #0]
 8010bba:	2203      	movs	r2, #3
 8010bbc:	4650      	mov	r0, sl
 8010bbe:	f7ef fb8f 	bl	80002e0 <memchr>
 8010bc2:	b140      	cbz	r0, 8010bd6 <_svfiprintf_r+0x152>
 8010bc4:	2340      	movs	r3, #64	; 0x40
 8010bc6:	eba0 000a 	sub.w	r0, r0, sl
 8010bca:	fa03 f000 	lsl.w	r0, r3, r0
 8010bce:	9b04      	ldr	r3, [sp, #16]
 8010bd0:	4303      	orrs	r3, r0
 8010bd2:	3401      	adds	r4, #1
 8010bd4:	9304      	str	r3, [sp, #16]
 8010bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bda:	4826      	ldr	r0, [pc, #152]	; (8010c74 <_svfiprintf_r+0x1f0>)
 8010bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010be0:	2206      	movs	r2, #6
 8010be2:	f7ef fb7d 	bl	80002e0 <memchr>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d038      	beq.n	8010c5c <_svfiprintf_r+0x1d8>
 8010bea:	4b23      	ldr	r3, [pc, #140]	; (8010c78 <_svfiprintf_r+0x1f4>)
 8010bec:	bb1b      	cbnz	r3, 8010c36 <_svfiprintf_r+0x1b2>
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	3307      	adds	r3, #7
 8010bf2:	f023 0307 	bic.w	r3, r3, #7
 8010bf6:	3308      	adds	r3, #8
 8010bf8:	9303      	str	r3, [sp, #12]
 8010bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bfc:	4433      	add	r3, r6
 8010bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010c00:	e767      	b.n	8010ad2 <_svfiprintf_r+0x4e>
 8010c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c06:	460c      	mov	r4, r1
 8010c08:	2001      	movs	r0, #1
 8010c0a:	e7a5      	b.n	8010b58 <_svfiprintf_r+0xd4>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	3401      	adds	r4, #1
 8010c10:	9305      	str	r3, [sp, #20]
 8010c12:	4619      	mov	r1, r3
 8010c14:	f04f 0c0a 	mov.w	ip, #10
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c1e:	3a30      	subs	r2, #48	; 0x30
 8010c20:	2a09      	cmp	r2, #9
 8010c22:	d903      	bls.n	8010c2c <_svfiprintf_r+0x1a8>
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d0c5      	beq.n	8010bb4 <_svfiprintf_r+0x130>
 8010c28:	9105      	str	r1, [sp, #20]
 8010c2a:	e7c3      	b.n	8010bb4 <_svfiprintf_r+0x130>
 8010c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c30:	4604      	mov	r4, r0
 8010c32:	2301      	movs	r3, #1
 8010c34:	e7f0      	b.n	8010c18 <_svfiprintf_r+0x194>
 8010c36:	ab03      	add	r3, sp, #12
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	462a      	mov	r2, r5
 8010c3c:	4b0f      	ldr	r3, [pc, #60]	; (8010c7c <_svfiprintf_r+0x1f8>)
 8010c3e:	a904      	add	r1, sp, #16
 8010c40:	4638      	mov	r0, r7
 8010c42:	f3af 8000 	nop.w
 8010c46:	1c42      	adds	r2, r0, #1
 8010c48:	4606      	mov	r6, r0
 8010c4a:	d1d6      	bne.n	8010bfa <_svfiprintf_r+0x176>
 8010c4c:	89ab      	ldrh	r3, [r5, #12]
 8010c4e:	065b      	lsls	r3, r3, #25
 8010c50:	f53f af2c 	bmi.w	8010aac <_svfiprintf_r+0x28>
 8010c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c56:	b01d      	add	sp, #116	; 0x74
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5c:	ab03      	add	r3, sp, #12
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	462a      	mov	r2, r5
 8010c62:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <_svfiprintf_r+0x1f8>)
 8010c64:	a904      	add	r1, sp, #16
 8010c66:	4638      	mov	r0, r7
 8010c68:	f000 f9d4 	bl	8011014 <_printf_i>
 8010c6c:	e7eb      	b.n	8010c46 <_svfiprintf_r+0x1c2>
 8010c6e:	bf00      	nop
 8010c70:	08012018 	.word	0x08012018
 8010c74:	08012022 	.word	0x08012022
 8010c78:	00000000 	.word	0x00000000
 8010c7c:	080109cd 	.word	0x080109cd
 8010c80:	0801201e 	.word	0x0801201e

08010c84 <__sfputc_r>:
 8010c84:	6893      	ldr	r3, [r2, #8]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	b410      	push	{r4}
 8010c8c:	6093      	str	r3, [r2, #8]
 8010c8e:	da08      	bge.n	8010ca2 <__sfputc_r+0x1e>
 8010c90:	6994      	ldr	r4, [r2, #24]
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	db01      	blt.n	8010c9a <__sfputc_r+0x16>
 8010c96:	290a      	cmp	r1, #10
 8010c98:	d103      	bne.n	8010ca2 <__sfputc_r+0x1e>
 8010c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c9e:	f7ff bb0d 	b.w	80102bc <__swbuf_r>
 8010ca2:	6813      	ldr	r3, [r2, #0]
 8010ca4:	1c58      	adds	r0, r3, #1
 8010ca6:	6010      	str	r0, [r2, #0]
 8010ca8:	7019      	strb	r1, [r3, #0]
 8010caa:	4608      	mov	r0, r1
 8010cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <__sfputs_r>:
 8010cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	460f      	mov	r7, r1
 8010cb8:	4614      	mov	r4, r2
 8010cba:	18d5      	adds	r5, r2, r3
 8010cbc:	42ac      	cmp	r4, r5
 8010cbe:	d101      	bne.n	8010cc4 <__sfputs_r+0x12>
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	e007      	b.n	8010cd4 <__sfputs_r+0x22>
 8010cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc8:	463a      	mov	r2, r7
 8010cca:	4630      	mov	r0, r6
 8010ccc:	f7ff ffda 	bl	8010c84 <__sfputc_r>
 8010cd0:	1c43      	adds	r3, r0, #1
 8010cd2:	d1f3      	bne.n	8010cbc <__sfputs_r+0xa>
 8010cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cd8 <_vfiprintf_r>:
 8010cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cdc:	460d      	mov	r5, r1
 8010cde:	b09d      	sub	sp, #116	; 0x74
 8010ce0:	4614      	mov	r4, r2
 8010ce2:	4698      	mov	r8, r3
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	b118      	cbz	r0, 8010cf0 <_vfiprintf_r+0x18>
 8010ce8:	6983      	ldr	r3, [r0, #24]
 8010cea:	b90b      	cbnz	r3, 8010cf0 <_vfiprintf_r+0x18>
 8010cec:	f7ff fcc0 	bl	8010670 <__sinit>
 8010cf0:	4b89      	ldr	r3, [pc, #548]	; (8010f18 <_vfiprintf_r+0x240>)
 8010cf2:	429d      	cmp	r5, r3
 8010cf4:	d11b      	bne.n	8010d2e <_vfiprintf_r+0x56>
 8010cf6:	6875      	ldr	r5, [r6, #4]
 8010cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cfa:	07d9      	lsls	r1, r3, #31
 8010cfc:	d405      	bmi.n	8010d0a <_vfiprintf_r+0x32>
 8010cfe:	89ab      	ldrh	r3, [r5, #12]
 8010d00:	059a      	lsls	r2, r3, #22
 8010d02:	d402      	bmi.n	8010d0a <_vfiprintf_r+0x32>
 8010d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d06:	f7ff fd51 	bl	80107ac <__retarget_lock_acquire_recursive>
 8010d0a:	89ab      	ldrh	r3, [r5, #12]
 8010d0c:	071b      	lsls	r3, r3, #28
 8010d0e:	d501      	bpl.n	8010d14 <_vfiprintf_r+0x3c>
 8010d10:	692b      	ldr	r3, [r5, #16]
 8010d12:	b9eb      	cbnz	r3, 8010d50 <_vfiprintf_r+0x78>
 8010d14:	4629      	mov	r1, r5
 8010d16:	4630      	mov	r0, r6
 8010d18:	f7ff fb22 	bl	8010360 <__swsetup_r>
 8010d1c:	b1c0      	cbz	r0, 8010d50 <_vfiprintf_r+0x78>
 8010d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d20:	07dc      	lsls	r4, r3, #31
 8010d22:	d50e      	bpl.n	8010d42 <_vfiprintf_r+0x6a>
 8010d24:	f04f 30ff 	mov.w	r0, #4294967295
 8010d28:	b01d      	add	sp, #116	; 0x74
 8010d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2e:	4b7b      	ldr	r3, [pc, #492]	; (8010f1c <_vfiprintf_r+0x244>)
 8010d30:	429d      	cmp	r5, r3
 8010d32:	d101      	bne.n	8010d38 <_vfiprintf_r+0x60>
 8010d34:	68b5      	ldr	r5, [r6, #8]
 8010d36:	e7df      	b.n	8010cf8 <_vfiprintf_r+0x20>
 8010d38:	4b79      	ldr	r3, [pc, #484]	; (8010f20 <_vfiprintf_r+0x248>)
 8010d3a:	429d      	cmp	r5, r3
 8010d3c:	bf08      	it	eq
 8010d3e:	68f5      	ldreq	r5, [r6, #12]
 8010d40:	e7da      	b.n	8010cf8 <_vfiprintf_r+0x20>
 8010d42:	89ab      	ldrh	r3, [r5, #12]
 8010d44:	0598      	lsls	r0, r3, #22
 8010d46:	d4ed      	bmi.n	8010d24 <_vfiprintf_r+0x4c>
 8010d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d4a:	f7ff fd30 	bl	80107ae <__retarget_lock_release_recursive>
 8010d4e:	e7e9      	b.n	8010d24 <_vfiprintf_r+0x4c>
 8010d50:	2300      	movs	r3, #0
 8010d52:	9309      	str	r3, [sp, #36]	; 0x24
 8010d54:	2320      	movs	r3, #32
 8010d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d5e:	2330      	movs	r3, #48	; 0x30
 8010d60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f24 <_vfiprintf_r+0x24c>
 8010d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d68:	f04f 0901 	mov.w	r9, #1
 8010d6c:	4623      	mov	r3, r4
 8010d6e:	469a      	mov	sl, r3
 8010d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d74:	b10a      	cbz	r2, 8010d7a <_vfiprintf_r+0xa2>
 8010d76:	2a25      	cmp	r2, #37	; 0x25
 8010d78:	d1f9      	bne.n	8010d6e <_vfiprintf_r+0x96>
 8010d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d7e:	d00b      	beq.n	8010d98 <_vfiprintf_r+0xc0>
 8010d80:	465b      	mov	r3, fp
 8010d82:	4622      	mov	r2, r4
 8010d84:	4629      	mov	r1, r5
 8010d86:	4630      	mov	r0, r6
 8010d88:	f7ff ff93 	bl	8010cb2 <__sfputs_r>
 8010d8c:	3001      	adds	r0, #1
 8010d8e:	f000 80aa 	beq.w	8010ee6 <_vfiprintf_r+0x20e>
 8010d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d94:	445a      	add	r2, fp
 8010d96:	9209      	str	r2, [sp, #36]	; 0x24
 8010d98:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 80a2 	beq.w	8010ee6 <_vfiprintf_r+0x20e>
 8010da2:	2300      	movs	r3, #0
 8010da4:	f04f 32ff 	mov.w	r2, #4294967295
 8010da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dac:	f10a 0a01 	add.w	sl, sl, #1
 8010db0:	9304      	str	r3, [sp, #16]
 8010db2:	9307      	str	r3, [sp, #28]
 8010db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010db8:	931a      	str	r3, [sp, #104]	; 0x68
 8010dba:	4654      	mov	r4, sl
 8010dbc:	2205      	movs	r2, #5
 8010dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc2:	4858      	ldr	r0, [pc, #352]	; (8010f24 <_vfiprintf_r+0x24c>)
 8010dc4:	f7ef fa8c 	bl	80002e0 <memchr>
 8010dc8:	9a04      	ldr	r2, [sp, #16]
 8010dca:	b9d8      	cbnz	r0, 8010e04 <_vfiprintf_r+0x12c>
 8010dcc:	06d1      	lsls	r1, r2, #27
 8010dce:	bf44      	itt	mi
 8010dd0:	2320      	movmi	r3, #32
 8010dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dd6:	0713      	lsls	r3, r2, #28
 8010dd8:	bf44      	itt	mi
 8010dda:	232b      	movmi	r3, #43	; 0x2b
 8010ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010de0:	f89a 3000 	ldrb.w	r3, [sl]
 8010de4:	2b2a      	cmp	r3, #42	; 0x2a
 8010de6:	d015      	beq.n	8010e14 <_vfiprintf_r+0x13c>
 8010de8:	9a07      	ldr	r2, [sp, #28]
 8010dea:	4654      	mov	r4, sl
 8010dec:	2000      	movs	r0, #0
 8010dee:	f04f 0c0a 	mov.w	ip, #10
 8010df2:	4621      	mov	r1, r4
 8010df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010df8:	3b30      	subs	r3, #48	; 0x30
 8010dfa:	2b09      	cmp	r3, #9
 8010dfc:	d94e      	bls.n	8010e9c <_vfiprintf_r+0x1c4>
 8010dfe:	b1b0      	cbz	r0, 8010e2e <_vfiprintf_r+0x156>
 8010e00:	9207      	str	r2, [sp, #28]
 8010e02:	e014      	b.n	8010e2e <_vfiprintf_r+0x156>
 8010e04:	eba0 0308 	sub.w	r3, r0, r8
 8010e08:	fa09 f303 	lsl.w	r3, r9, r3
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	9304      	str	r3, [sp, #16]
 8010e10:	46a2      	mov	sl, r4
 8010e12:	e7d2      	b.n	8010dba <_vfiprintf_r+0xe2>
 8010e14:	9b03      	ldr	r3, [sp, #12]
 8010e16:	1d19      	adds	r1, r3, #4
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	9103      	str	r1, [sp, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bfbb      	ittet	lt
 8010e20:	425b      	neglt	r3, r3
 8010e22:	f042 0202 	orrlt.w	r2, r2, #2
 8010e26:	9307      	strge	r3, [sp, #28]
 8010e28:	9307      	strlt	r3, [sp, #28]
 8010e2a:	bfb8      	it	lt
 8010e2c:	9204      	strlt	r2, [sp, #16]
 8010e2e:	7823      	ldrb	r3, [r4, #0]
 8010e30:	2b2e      	cmp	r3, #46	; 0x2e
 8010e32:	d10c      	bne.n	8010e4e <_vfiprintf_r+0x176>
 8010e34:	7863      	ldrb	r3, [r4, #1]
 8010e36:	2b2a      	cmp	r3, #42	; 0x2a
 8010e38:	d135      	bne.n	8010ea6 <_vfiprintf_r+0x1ce>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	1d1a      	adds	r2, r3, #4
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	9203      	str	r2, [sp, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bfb8      	it	lt
 8010e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e4a:	3402      	adds	r4, #2
 8010e4c:	9305      	str	r3, [sp, #20]
 8010e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f34 <_vfiprintf_r+0x25c>
 8010e52:	7821      	ldrb	r1, [r4, #0]
 8010e54:	2203      	movs	r2, #3
 8010e56:	4650      	mov	r0, sl
 8010e58:	f7ef fa42 	bl	80002e0 <memchr>
 8010e5c:	b140      	cbz	r0, 8010e70 <_vfiprintf_r+0x198>
 8010e5e:	2340      	movs	r3, #64	; 0x40
 8010e60:	eba0 000a 	sub.w	r0, r0, sl
 8010e64:	fa03 f000 	lsl.w	r0, r3, r0
 8010e68:	9b04      	ldr	r3, [sp, #16]
 8010e6a:	4303      	orrs	r3, r0
 8010e6c:	3401      	adds	r4, #1
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e74:	482c      	ldr	r0, [pc, #176]	; (8010f28 <_vfiprintf_r+0x250>)
 8010e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e7a:	2206      	movs	r2, #6
 8010e7c:	f7ef fa30 	bl	80002e0 <memchr>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d03f      	beq.n	8010f04 <_vfiprintf_r+0x22c>
 8010e84:	4b29      	ldr	r3, [pc, #164]	; (8010f2c <_vfiprintf_r+0x254>)
 8010e86:	bb1b      	cbnz	r3, 8010ed0 <_vfiprintf_r+0x1f8>
 8010e88:	9b03      	ldr	r3, [sp, #12]
 8010e8a:	3307      	adds	r3, #7
 8010e8c:	f023 0307 	bic.w	r3, r3, #7
 8010e90:	3308      	adds	r3, #8
 8010e92:	9303      	str	r3, [sp, #12]
 8010e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e96:	443b      	add	r3, r7
 8010e98:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9a:	e767      	b.n	8010d6c <_vfiprintf_r+0x94>
 8010e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	2001      	movs	r0, #1
 8010ea4:	e7a5      	b.n	8010df2 <_vfiprintf_r+0x11a>
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	3401      	adds	r4, #1
 8010eaa:	9305      	str	r3, [sp, #20]
 8010eac:	4619      	mov	r1, r3
 8010eae:	f04f 0c0a 	mov.w	ip, #10
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eb8:	3a30      	subs	r2, #48	; 0x30
 8010eba:	2a09      	cmp	r2, #9
 8010ebc:	d903      	bls.n	8010ec6 <_vfiprintf_r+0x1ee>
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d0c5      	beq.n	8010e4e <_vfiprintf_r+0x176>
 8010ec2:	9105      	str	r1, [sp, #20]
 8010ec4:	e7c3      	b.n	8010e4e <_vfiprintf_r+0x176>
 8010ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eca:	4604      	mov	r4, r0
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e7f0      	b.n	8010eb2 <_vfiprintf_r+0x1da>
 8010ed0:	ab03      	add	r3, sp, #12
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	462a      	mov	r2, r5
 8010ed6:	4b16      	ldr	r3, [pc, #88]	; (8010f30 <_vfiprintf_r+0x258>)
 8010ed8:	a904      	add	r1, sp, #16
 8010eda:	4630      	mov	r0, r6
 8010edc:	f3af 8000 	nop.w
 8010ee0:	4607      	mov	r7, r0
 8010ee2:	1c78      	adds	r0, r7, #1
 8010ee4:	d1d6      	bne.n	8010e94 <_vfiprintf_r+0x1bc>
 8010ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ee8:	07d9      	lsls	r1, r3, #31
 8010eea:	d405      	bmi.n	8010ef8 <_vfiprintf_r+0x220>
 8010eec:	89ab      	ldrh	r3, [r5, #12]
 8010eee:	059a      	lsls	r2, r3, #22
 8010ef0:	d402      	bmi.n	8010ef8 <_vfiprintf_r+0x220>
 8010ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef4:	f7ff fc5b 	bl	80107ae <__retarget_lock_release_recursive>
 8010ef8:	89ab      	ldrh	r3, [r5, #12]
 8010efa:	065b      	lsls	r3, r3, #25
 8010efc:	f53f af12 	bmi.w	8010d24 <_vfiprintf_r+0x4c>
 8010f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f02:	e711      	b.n	8010d28 <_vfiprintf_r+0x50>
 8010f04:	ab03      	add	r3, sp, #12
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	462a      	mov	r2, r5
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <_vfiprintf_r+0x258>)
 8010f0c:	a904      	add	r1, sp, #16
 8010f0e:	4630      	mov	r0, r6
 8010f10:	f000 f880 	bl	8011014 <_printf_i>
 8010f14:	e7e4      	b.n	8010ee0 <_vfiprintf_r+0x208>
 8010f16:	bf00      	nop
 8010f18:	08011fd8 	.word	0x08011fd8
 8010f1c:	08011ff8 	.word	0x08011ff8
 8010f20:	08011fb8 	.word	0x08011fb8
 8010f24:	08012018 	.word	0x08012018
 8010f28:	08012022 	.word	0x08012022
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	08010cb3 	.word	0x08010cb3
 8010f34:	0801201e 	.word	0x0801201e

08010f38 <_printf_common>:
 8010f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3c:	4616      	mov	r6, r2
 8010f3e:	4699      	mov	r9, r3
 8010f40:	688a      	ldr	r2, [r1, #8]
 8010f42:	690b      	ldr	r3, [r1, #16]
 8010f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	bfb8      	it	lt
 8010f4c:	4613      	movlt	r3, r2
 8010f4e:	6033      	str	r3, [r6, #0]
 8010f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f54:	4607      	mov	r7, r0
 8010f56:	460c      	mov	r4, r1
 8010f58:	b10a      	cbz	r2, 8010f5e <_printf_common+0x26>
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	6033      	str	r3, [r6, #0]
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	0699      	lsls	r1, r3, #26
 8010f62:	bf42      	ittt	mi
 8010f64:	6833      	ldrmi	r3, [r6, #0]
 8010f66:	3302      	addmi	r3, #2
 8010f68:	6033      	strmi	r3, [r6, #0]
 8010f6a:	6825      	ldr	r5, [r4, #0]
 8010f6c:	f015 0506 	ands.w	r5, r5, #6
 8010f70:	d106      	bne.n	8010f80 <_printf_common+0x48>
 8010f72:	f104 0a19 	add.w	sl, r4, #25
 8010f76:	68e3      	ldr	r3, [r4, #12]
 8010f78:	6832      	ldr	r2, [r6, #0]
 8010f7a:	1a9b      	subs	r3, r3, r2
 8010f7c:	42ab      	cmp	r3, r5
 8010f7e:	dc26      	bgt.n	8010fce <_printf_common+0x96>
 8010f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f84:	1e13      	subs	r3, r2, #0
 8010f86:	6822      	ldr	r2, [r4, #0]
 8010f88:	bf18      	it	ne
 8010f8a:	2301      	movne	r3, #1
 8010f8c:	0692      	lsls	r2, r2, #26
 8010f8e:	d42b      	bmi.n	8010fe8 <_printf_common+0xb0>
 8010f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f94:	4649      	mov	r1, r9
 8010f96:	4638      	mov	r0, r7
 8010f98:	47c0      	blx	r8
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	d01e      	beq.n	8010fdc <_printf_common+0xa4>
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	68e5      	ldr	r5, [r4, #12]
 8010fa2:	6832      	ldr	r2, [r6, #0]
 8010fa4:	f003 0306 	and.w	r3, r3, #6
 8010fa8:	2b04      	cmp	r3, #4
 8010faa:	bf08      	it	eq
 8010fac:	1aad      	subeq	r5, r5, r2
 8010fae:	68a3      	ldr	r3, [r4, #8]
 8010fb0:	6922      	ldr	r2, [r4, #16]
 8010fb2:	bf0c      	ite	eq
 8010fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fb8:	2500      	movne	r5, #0
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	bfc4      	itt	gt
 8010fbe:	1a9b      	subgt	r3, r3, r2
 8010fc0:	18ed      	addgt	r5, r5, r3
 8010fc2:	2600      	movs	r6, #0
 8010fc4:	341a      	adds	r4, #26
 8010fc6:	42b5      	cmp	r5, r6
 8010fc8:	d11a      	bne.n	8011000 <_printf_common+0xc8>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e008      	b.n	8010fe0 <_printf_common+0xa8>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	4652      	mov	r2, sl
 8010fd2:	4649      	mov	r1, r9
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	47c0      	blx	r8
 8010fd8:	3001      	adds	r0, #1
 8010fda:	d103      	bne.n	8010fe4 <_printf_common+0xac>
 8010fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe4:	3501      	adds	r5, #1
 8010fe6:	e7c6      	b.n	8010f76 <_printf_common+0x3e>
 8010fe8:	18e1      	adds	r1, r4, r3
 8010fea:	1c5a      	adds	r2, r3, #1
 8010fec:	2030      	movs	r0, #48	; 0x30
 8010fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ff2:	4422      	add	r2, r4
 8010ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ffc:	3302      	adds	r3, #2
 8010ffe:	e7c7      	b.n	8010f90 <_printf_common+0x58>
 8011000:	2301      	movs	r3, #1
 8011002:	4622      	mov	r2, r4
 8011004:	4649      	mov	r1, r9
 8011006:	4638      	mov	r0, r7
 8011008:	47c0      	blx	r8
 801100a:	3001      	adds	r0, #1
 801100c:	d0e6      	beq.n	8010fdc <_printf_common+0xa4>
 801100e:	3601      	adds	r6, #1
 8011010:	e7d9      	b.n	8010fc6 <_printf_common+0x8e>
	...

08011014 <_printf_i>:
 8011014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011018:	460c      	mov	r4, r1
 801101a:	4691      	mov	r9, r2
 801101c:	7e27      	ldrb	r7, [r4, #24]
 801101e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011020:	2f78      	cmp	r7, #120	; 0x78
 8011022:	4680      	mov	r8, r0
 8011024:	469a      	mov	sl, r3
 8011026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801102a:	d807      	bhi.n	801103c <_printf_i+0x28>
 801102c:	2f62      	cmp	r7, #98	; 0x62
 801102e:	d80a      	bhi.n	8011046 <_printf_i+0x32>
 8011030:	2f00      	cmp	r7, #0
 8011032:	f000 80d8 	beq.w	80111e6 <_printf_i+0x1d2>
 8011036:	2f58      	cmp	r7, #88	; 0x58
 8011038:	f000 80a3 	beq.w	8011182 <_printf_i+0x16e>
 801103c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011044:	e03a      	b.n	80110bc <_printf_i+0xa8>
 8011046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801104a:	2b15      	cmp	r3, #21
 801104c:	d8f6      	bhi.n	801103c <_printf_i+0x28>
 801104e:	a001      	add	r0, pc, #4	; (adr r0, 8011054 <_printf_i+0x40>)
 8011050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011054:	080110ad 	.word	0x080110ad
 8011058:	080110c1 	.word	0x080110c1
 801105c:	0801103d 	.word	0x0801103d
 8011060:	0801103d 	.word	0x0801103d
 8011064:	0801103d 	.word	0x0801103d
 8011068:	0801103d 	.word	0x0801103d
 801106c:	080110c1 	.word	0x080110c1
 8011070:	0801103d 	.word	0x0801103d
 8011074:	0801103d 	.word	0x0801103d
 8011078:	0801103d 	.word	0x0801103d
 801107c:	0801103d 	.word	0x0801103d
 8011080:	080111cd 	.word	0x080111cd
 8011084:	080110f1 	.word	0x080110f1
 8011088:	080111af 	.word	0x080111af
 801108c:	0801103d 	.word	0x0801103d
 8011090:	0801103d 	.word	0x0801103d
 8011094:	080111ef 	.word	0x080111ef
 8011098:	0801103d 	.word	0x0801103d
 801109c:	080110f1 	.word	0x080110f1
 80110a0:	0801103d 	.word	0x0801103d
 80110a4:	0801103d 	.word	0x0801103d
 80110a8:	080111b7 	.word	0x080111b7
 80110ac:	680b      	ldr	r3, [r1, #0]
 80110ae:	1d1a      	adds	r2, r3, #4
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	600a      	str	r2, [r1, #0]
 80110b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80110b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110bc:	2301      	movs	r3, #1
 80110be:	e0a3      	b.n	8011208 <_printf_i+0x1f4>
 80110c0:	6825      	ldr	r5, [r4, #0]
 80110c2:	6808      	ldr	r0, [r1, #0]
 80110c4:	062e      	lsls	r6, r5, #24
 80110c6:	f100 0304 	add.w	r3, r0, #4
 80110ca:	d50a      	bpl.n	80110e2 <_printf_i+0xce>
 80110cc:	6805      	ldr	r5, [r0, #0]
 80110ce:	600b      	str	r3, [r1, #0]
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	da03      	bge.n	80110dc <_printf_i+0xc8>
 80110d4:	232d      	movs	r3, #45	; 0x2d
 80110d6:	426d      	negs	r5, r5
 80110d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110dc:	485e      	ldr	r0, [pc, #376]	; (8011258 <_printf_i+0x244>)
 80110de:	230a      	movs	r3, #10
 80110e0:	e019      	b.n	8011116 <_printf_i+0x102>
 80110e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80110e6:	6805      	ldr	r5, [r0, #0]
 80110e8:	600b      	str	r3, [r1, #0]
 80110ea:	bf18      	it	ne
 80110ec:	b22d      	sxthne	r5, r5
 80110ee:	e7ef      	b.n	80110d0 <_printf_i+0xbc>
 80110f0:	680b      	ldr	r3, [r1, #0]
 80110f2:	6825      	ldr	r5, [r4, #0]
 80110f4:	1d18      	adds	r0, r3, #4
 80110f6:	6008      	str	r0, [r1, #0]
 80110f8:	0628      	lsls	r0, r5, #24
 80110fa:	d501      	bpl.n	8011100 <_printf_i+0xec>
 80110fc:	681d      	ldr	r5, [r3, #0]
 80110fe:	e002      	b.n	8011106 <_printf_i+0xf2>
 8011100:	0669      	lsls	r1, r5, #25
 8011102:	d5fb      	bpl.n	80110fc <_printf_i+0xe8>
 8011104:	881d      	ldrh	r5, [r3, #0]
 8011106:	4854      	ldr	r0, [pc, #336]	; (8011258 <_printf_i+0x244>)
 8011108:	2f6f      	cmp	r7, #111	; 0x6f
 801110a:	bf0c      	ite	eq
 801110c:	2308      	moveq	r3, #8
 801110e:	230a      	movne	r3, #10
 8011110:	2100      	movs	r1, #0
 8011112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011116:	6866      	ldr	r6, [r4, #4]
 8011118:	60a6      	str	r6, [r4, #8]
 801111a:	2e00      	cmp	r6, #0
 801111c:	bfa2      	ittt	ge
 801111e:	6821      	ldrge	r1, [r4, #0]
 8011120:	f021 0104 	bicge.w	r1, r1, #4
 8011124:	6021      	strge	r1, [r4, #0]
 8011126:	b90d      	cbnz	r5, 801112c <_printf_i+0x118>
 8011128:	2e00      	cmp	r6, #0
 801112a:	d04d      	beq.n	80111c8 <_printf_i+0x1b4>
 801112c:	4616      	mov	r6, r2
 801112e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011132:	fb03 5711 	mls	r7, r3, r1, r5
 8011136:	5dc7      	ldrb	r7, [r0, r7]
 8011138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801113c:	462f      	mov	r7, r5
 801113e:	42bb      	cmp	r3, r7
 8011140:	460d      	mov	r5, r1
 8011142:	d9f4      	bls.n	801112e <_printf_i+0x11a>
 8011144:	2b08      	cmp	r3, #8
 8011146:	d10b      	bne.n	8011160 <_printf_i+0x14c>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	07df      	lsls	r7, r3, #31
 801114c:	d508      	bpl.n	8011160 <_printf_i+0x14c>
 801114e:	6923      	ldr	r3, [r4, #16]
 8011150:	6861      	ldr	r1, [r4, #4]
 8011152:	4299      	cmp	r1, r3
 8011154:	bfde      	ittt	le
 8011156:	2330      	movle	r3, #48	; 0x30
 8011158:	f806 3c01 	strble.w	r3, [r6, #-1]
 801115c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011160:	1b92      	subs	r2, r2, r6
 8011162:	6122      	str	r2, [r4, #16]
 8011164:	f8cd a000 	str.w	sl, [sp]
 8011168:	464b      	mov	r3, r9
 801116a:	aa03      	add	r2, sp, #12
 801116c:	4621      	mov	r1, r4
 801116e:	4640      	mov	r0, r8
 8011170:	f7ff fee2 	bl	8010f38 <_printf_common>
 8011174:	3001      	adds	r0, #1
 8011176:	d14c      	bne.n	8011212 <_printf_i+0x1fe>
 8011178:	f04f 30ff 	mov.w	r0, #4294967295
 801117c:	b004      	add	sp, #16
 801117e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011182:	4835      	ldr	r0, [pc, #212]	; (8011258 <_printf_i+0x244>)
 8011184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	680e      	ldr	r6, [r1, #0]
 801118c:	061f      	lsls	r7, r3, #24
 801118e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011192:	600e      	str	r6, [r1, #0]
 8011194:	d514      	bpl.n	80111c0 <_printf_i+0x1ac>
 8011196:	07d9      	lsls	r1, r3, #31
 8011198:	bf44      	itt	mi
 801119a:	f043 0320 	orrmi.w	r3, r3, #32
 801119e:	6023      	strmi	r3, [r4, #0]
 80111a0:	b91d      	cbnz	r5, 80111aa <_printf_i+0x196>
 80111a2:	6823      	ldr	r3, [r4, #0]
 80111a4:	f023 0320 	bic.w	r3, r3, #32
 80111a8:	6023      	str	r3, [r4, #0]
 80111aa:	2310      	movs	r3, #16
 80111ac:	e7b0      	b.n	8011110 <_printf_i+0xfc>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	f043 0320 	orr.w	r3, r3, #32
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	2378      	movs	r3, #120	; 0x78
 80111b8:	4828      	ldr	r0, [pc, #160]	; (801125c <_printf_i+0x248>)
 80111ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111be:	e7e3      	b.n	8011188 <_printf_i+0x174>
 80111c0:	065e      	lsls	r6, r3, #25
 80111c2:	bf48      	it	mi
 80111c4:	b2ad      	uxthmi	r5, r5
 80111c6:	e7e6      	b.n	8011196 <_printf_i+0x182>
 80111c8:	4616      	mov	r6, r2
 80111ca:	e7bb      	b.n	8011144 <_printf_i+0x130>
 80111cc:	680b      	ldr	r3, [r1, #0]
 80111ce:	6826      	ldr	r6, [r4, #0]
 80111d0:	6960      	ldr	r0, [r4, #20]
 80111d2:	1d1d      	adds	r5, r3, #4
 80111d4:	600d      	str	r5, [r1, #0]
 80111d6:	0635      	lsls	r5, r6, #24
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	d501      	bpl.n	80111e0 <_printf_i+0x1cc>
 80111dc:	6018      	str	r0, [r3, #0]
 80111de:	e002      	b.n	80111e6 <_printf_i+0x1d2>
 80111e0:	0671      	lsls	r1, r6, #25
 80111e2:	d5fb      	bpl.n	80111dc <_printf_i+0x1c8>
 80111e4:	8018      	strh	r0, [r3, #0]
 80111e6:	2300      	movs	r3, #0
 80111e8:	6123      	str	r3, [r4, #16]
 80111ea:	4616      	mov	r6, r2
 80111ec:	e7ba      	b.n	8011164 <_printf_i+0x150>
 80111ee:	680b      	ldr	r3, [r1, #0]
 80111f0:	1d1a      	adds	r2, r3, #4
 80111f2:	600a      	str	r2, [r1, #0]
 80111f4:	681e      	ldr	r6, [r3, #0]
 80111f6:	6862      	ldr	r2, [r4, #4]
 80111f8:	2100      	movs	r1, #0
 80111fa:	4630      	mov	r0, r6
 80111fc:	f7ef f870 	bl	80002e0 <memchr>
 8011200:	b108      	cbz	r0, 8011206 <_printf_i+0x1f2>
 8011202:	1b80      	subs	r0, r0, r6
 8011204:	6060      	str	r0, [r4, #4]
 8011206:	6863      	ldr	r3, [r4, #4]
 8011208:	6123      	str	r3, [r4, #16]
 801120a:	2300      	movs	r3, #0
 801120c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011210:	e7a8      	b.n	8011164 <_printf_i+0x150>
 8011212:	6923      	ldr	r3, [r4, #16]
 8011214:	4632      	mov	r2, r6
 8011216:	4649      	mov	r1, r9
 8011218:	4640      	mov	r0, r8
 801121a:	47d0      	blx	sl
 801121c:	3001      	adds	r0, #1
 801121e:	d0ab      	beq.n	8011178 <_printf_i+0x164>
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	079b      	lsls	r3, r3, #30
 8011224:	d413      	bmi.n	801124e <_printf_i+0x23a>
 8011226:	68e0      	ldr	r0, [r4, #12]
 8011228:	9b03      	ldr	r3, [sp, #12]
 801122a:	4298      	cmp	r0, r3
 801122c:	bfb8      	it	lt
 801122e:	4618      	movlt	r0, r3
 8011230:	e7a4      	b.n	801117c <_printf_i+0x168>
 8011232:	2301      	movs	r3, #1
 8011234:	4632      	mov	r2, r6
 8011236:	4649      	mov	r1, r9
 8011238:	4640      	mov	r0, r8
 801123a:	47d0      	blx	sl
 801123c:	3001      	adds	r0, #1
 801123e:	d09b      	beq.n	8011178 <_printf_i+0x164>
 8011240:	3501      	adds	r5, #1
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	9903      	ldr	r1, [sp, #12]
 8011246:	1a5b      	subs	r3, r3, r1
 8011248:	42ab      	cmp	r3, r5
 801124a:	dcf2      	bgt.n	8011232 <_printf_i+0x21e>
 801124c:	e7eb      	b.n	8011226 <_printf_i+0x212>
 801124e:	2500      	movs	r5, #0
 8011250:	f104 0619 	add.w	r6, r4, #25
 8011254:	e7f5      	b.n	8011242 <_printf_i+0x22e>
 8011256:	bf00      	nop
 8011258:	08012029 	.word	0x08012029
 801125c:	0801203a 	.word	0x0801203a

08011260 <_sbrk_r>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	4d06      	ldr	r5, [pc, #24]	; (801127c <_sbrk_r+0x1c>)
 8011264:	2300      	movs	r3, #0
 8011266:	4604      	mov	r4, r0
 8011268:	4608      	mov	r0, r1
 801126a:	602b      	str	r3, [r5, #0]
 801126c:	f7f2 fe38 	bl	8003ee0 <_sbrk>
 8011270:	1c43      	adds	r3, r0, #1
 8011272:	d102      	bne.n	801127a <_sbrk_r+0x1a>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	b103      	cbz	r3, 801127a <_sbrk_r+0x1a>
 8011278:	6023      	str	r3, [r4, #0]
 801127a:	bd38      	pop	{r3, r4, r5, pc}
 801127c:	20000b2c 	.word	0x20000b2c

08011280 <__sread>:
 8011280:	b510      	push	{r4, lr}
 8011282:	460c      	mov	r4, r1
 8011284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011288:	f000 f8e0 	bl	801144c <_read_r>
 801128c:	2800      	cmp	r0, #0
 801128e:	bfab      	itete	ge
 8011290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011292:	89a3      	ldrhlt	r3, [r4, #12]
 8011294:	181b      	addge	r3, r3, r0
 8011296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801129a:	bfac      	ite	ge
 801129c:	6563      	strge	r3, [r4, #84]	; 0x54
 801129e:	81a3      	strhlt	r3, [r4, #12]
 80112a0:	bd10      	pop	{r4, pc}

080112a2 <__swrite>:
 80112a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a6:	461f      	mov	r7, r3
 80112a8:	898b      	ldrh	r3, [r1, #12]
 80112aa:	05db      	lsls	r3, r3, #23
 80112ac:	4605      	mov	r5, r0
 80112ae:	460c      	mov	r4, r1
 80112b0:	4616      	mov	r6, r2
 80112b2:	d505      	bpl.n	80112c0 <__swrite+0x1e>
 80112b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b8:	2302      	movs	r3, #2
 80112ba:	2200      	movs	r2, #0
 80112bc:	f000 f868 	bl	8011390 <_lseek_r>
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112ca:	81a3      	strh	r3, [r4, #12]
 80112cc:	4632      	mov	r2, r6
 80112ce:	463b      	mov	r3, r7
 80112d0:	4628      	mov	r0, r5
 80112d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112d6:	f000 b817 	b.w	8011308 <_write_r>

080112da <__sseek>:
 80112da:	b510      	push	{r4, lr}
 80112dc:	460c      	mov	r4, r1
 80112de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e2:	f000 f855 	bl	8011390 <_lseek_r>
 80112e6:	1c43      	adds	r3, r0, #1
 80112e8:	89a3      	ldrh	r3, [r4, #12]
 80112ea:	bf15      	itete	ne
 80112ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80112ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112f6:	81a3      	strheq	r3, [r4, #12]
 80112f8:	bf18      	it	ne
 80112fa:	81a3      	strhne	r3, [r4, #12]
 80112fc:	bd10      	pop	{r4, pc}

080112fe <__sclose>:
 80112fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011302:	f000 b813 	b.w	801132c <_close_r>
	...

08011308 <_write_r>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4d07      	ldr	r5, [pc, #28]	; (8011328 <_write_r+0x20>)
 801130c:	4604      	mov	r4, r0
 801130e:	4608      	mov	r0, r1
 8011310:	4611      	mov	r1, r2
 8011312:	2200      	movs	r2, #0
 8011314:	602a      	str	r2, [r5, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	f7f2 fd91 	bl	8003e3e <_write>
 801131c:	1c43      	adds	r3, r0, #1
 801131e:	d102      	bne.n	8011326 <_write_r+0x1e>
 8011320:	682b      	ldr	r3, [r5, #0]
 8011322:	b103      	cbz	r3, 8011326 <_write_r+0x1e>
 8011324:	6023      	str	r3, [r4, #0]
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	20000b2c 	.word	0x20000b2c

0801132c <_close_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d06      	ldr	r5, [pc, #24]	; (8011348 <_close_r+0x1c>)
 8011330:	2300      	movs	r3, #0
 8011332:	4604      	mov	r4, r0
 8011334:	4608      	mov	r0, r1
 8011336:	602b      	str	r3, [r5, #0]
 8011338:	f7f2 fd9d 	bl	8003e76 <_close>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_close_r+0x1a>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_close_r+0x1a>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	20000b2c 	.word	0x20000b2c

0801134c <_fstat_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4d07      	ldr	r5, [pc, #28]	; (801136c <_fstat_r+0x20>)
 8011350:	2300      	movs	r3, #0
 8011352:	4604      	mov	r4, r0
 8011354:	4608      	mov	r0, r1
 8011356:	4611      	mov	r1, r2
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	f7f2 fd98 	bl	8003e8e <_fstat>
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	d102      	bne.n	8011368 <_fstat_r+0x1c>
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	b103      	cbz	r3, 8011368 <_fstat_r+0x1c>
 8011366:	6023      	str	r3, [r4, #0]
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	bf00      	nop
 801136c:	20000b2c 	.word	0x20000b2c

08011370 <_isatty_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4d06      	ldr	r5, [pc, #24]	; (801138c <_isatty_r+0x1c>)
 8011374:	2300      	movs	r3, #0
 8011376:	4604      	mov	r4, r0
 8011378:	4608      	mov	r0, r1
 801137a:	602b      	str	r3, [r5, #0]
 801137c:	f7f2 fd97 	bl	8003eae <_isatty>
 8011380:	1c43      	adds	r3, r0, #1
 8011382:	d102      	bne.n	801138a <_isatty_r+0x1a>
 8011384:	682b      	ldr	r3, [r5, #0]
 8011386:	b103      	cbz	r3, 801138a <_isatty_r+0x1a>
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	20000b2c 	.word	0x20000b2c

08011390 <_lseek_r>:
 8011390:	b538      	push	{r3, r4, r5, lr}
 8011392:	4d07      	ldr	r5, [pc, #28]	; (80113b0 <_lseek_r+0x20>)
 8011394:	4604      	mov	r4, r0
 8011396:	4608      	mov	r0, r1
 8011398:	4611      	mov	r1, r2
 801139a:	2200      	movs	r2, #0
 801139c:	602a      	str	r2, [r5, #0]
 801139e:	461a      	mov	r2, r3
 80113a0:	f7f2 fd90 	bl	8003ec4 <_lseek>
 80113a4:	1c43      	adds	r3, r0, #1
 80113a6:	d102      	bne.n	80113ae <_lseek_r+0x1e>
 80113a8:	682b      	ldr	r3, [r5, #0]
 80113aa:	b103      	cbz	r3, 80113ae <_lseek_r+0x1e>
 80113ac:	6023      	str	r3, [r4, #0]
 80113ae:	bd38      	pop	{r3, r4, r5, pc}
 80113b0:	20000b2c 	.word	0x20000b2c

080113b4 <memmove>:
 80113b4:	4288      	cmp	r0, r1
 80113b6:	b510      	push	{r4, lr}
 80113b8:	eb01 0402 	add.w	r4, r1, r2
 80113bc:	d902      	bls.n	80113c4 <memmove+0x10>
 80113be:	4284      	cmp	r4, r0
 80113c0:	4623      	mov	r3, r4
 80113c2:	d807      	bhi.n	80113d4 <memmove+0x20>
 80113c4:	1e43      	subs	r3, r0, #1
 80113c6:	42a1      	cmp	r1, r4
 80113c8:	d008      	beq.n	80113dc <memmove+0x28>
 80113ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113d2:	e7f8      	b.n	80113c6 <memmove+0x12>
 80113d4:	4402      	add	r2, r0
 80113d6:	4601      	mov	r1, r0
 80113d8:	428a      	cmp	r2, r1
 80113da:	d100      	bne.n	80113de <memmove+0x2a>
 80113dc:	bd10      	pop	{r4, pc}
 80113de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113e6:	e7f7      	b.n	80113d8 <memmove+0x24>

080113e8 <__malloc_lock>:
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <__malloc_lock+0x8>)
 80113ea:	f7ff b9df 	b.w	80107ac <__retarget_lock_acquire_recursive>
 80113ee:	bf00      	nop
 80113f0:	20000b24 	.word	0x20000b24

080113f4 <__malloc_unlock>:
 80113f4:	4801      	ldr	r0, [pc, #4]	; (80113fc <__malloc_unlock+0x8>)
 80113f6:	f7ff b9da 	b.w	80107ae <__retarget_lock_release_recursive>
 80113fa:	bf00      	nop
 80113fc:	20000b24 	.word	0x20000b24

08011400 <_realloc_r>:
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011402:	4607      	mov	r7, r0
 8011404:	4614      	mov	r4, r2
 8011406:	460e      	mov	r6, r1
 8011408:	b921      	cbnz	r1, 8011414 <_realloc_r+0x14>
 801140a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801140e:	4611      	mov	r1, r2
 8011410:	f7ff ba82 	b.w	8010918 <_malloc_r>
 8011414:	b922      	cbnz	r2, 8011420 <_realloc_r+0x20>
 8011416:	f7ff fa2f 	bl	8010878 <_free_r>
 801141a:	4625      	mov	r5, r4
 801141c:	4628      	mov	r0, r5
 801141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011420:	f000 f826 	bl	8011470 <_malloc_usable_size_r>
 8011424:	42a0      	cmp	r0, r4
 8011426:	d20f      	bcs.n	8011448 <_realloc_r+0x48>
 8011428:	4621      	mov	r1, r4
 801142a:	4638      	mov	r0, r7
 801142c:	f7ff fa74 	bl	8010918 <_malloc_r>
 8011430:	4605      	mov	r5, r0
 8011432:	2800      	cmp	r0, #0
 8011434:	d0f2      	beq.n	801141c <_realloc_r+0x1c>
 8011436:	4631      	mov	r1, r6
 8011438:	4622      	mov	r2, r4
 801143a:	f7fe fe41 	bl	80100c0 <memcpy>
 801143e:	4631      	mov	r1, r6
 8011440:	4638      	mov	r0, r7
 8011442:	f7ff fa19 	bl	8010878 <_free_r>
 8011446:	e7e9      	b.n	801141c <_realloc_r+0x1c>
 8011448:	4635      	mov	r5, r6
 801144a:	e7e7      	b.n	801141c <_realloc_r+0x1c>

0801144c <_read_r>:
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4d07      	ldr	r5, [pc, #28]	; (801146c <_read_r+0x20>)
 8011450:	4604      	mov	r4, r0
 8011452:	4608      	mov	r0, r1
 8011454:	4611      	mov	r1, r2
 8011456:	2200      	movs	r2, #0
 8011458:	602a      	str	r2, [r5, #0]
 801145a:	461a      	mov	r2, r3
 801145c:	f7f2 fcd2 	bl	8003e04 <_read>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_read_r+0x1e>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	b103      	cbz	r3, 801146a <_read_r+0x1e>
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	20000b2c 	.word	0x20000b2c

08011470 <_malloc_usable_size_r>:
 8011470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011474:	1f18      	subs	r0, r3, #4
 8011476:	2b00      	cmp	r3, #0
 8011478:	bfbc      	itt	lt
 801147a:	580b      	ldrlt	r3, [r1, r0]
 801147c:	18c0      	addlt	r0, r0, r3
 801147e:	4770      	bx	lr

08011480 <_init>:
 8011480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011482:	bf00      	nop
 8011484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011486:	bc08      	pop	{r3}
 8011488:	469e      	mov	lr, r3
 801148a:	4770      	bx	lr

0801148c <_fini>:
 801148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801148e:	bf00      	nop
 8011490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011492:	bc08      	pop	{r3}
 8011494:	469e      	mov	lr, r3
 8011496:	4770      	bx	lr
