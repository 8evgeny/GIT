/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef OVENSCREENVIEWBASE_HPP
#define OVENSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/ovenscreen_screen/OvenScreenPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <gui/containers/OvenWheelElement.hpp>

#include <gui/containers/FpsMcuLoad.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
class OvenScreenViewBase : public touchgfx::View<OvenScreenPresenter>
{
public:
    OvenScreenViewBase();
    virtual ~OvenScreenViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheelOvenProgramUpdateItem(OvenWheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in OvenScreen
    }

    virtual void scrollWheelOvenProgramUpdateCenterItem(OvenWheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in OvenScreen
    }

    /*
     * Virtual Action Handlers
     */
    virtual void buttonTurnOnOff()
    {
        // Override and implement this function in OvenScreen
    }

    virtual void tempButtonClicked()
    {
        // Override and implement this function in OvenScreen
    }

    virtual void timerButtonClicked()
    {
        // Override and implement this function in OvenScreen
    }

    virtual void okButtonClicked()
    {
        // Override and implement this function in OvenScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image background;
    touchgfx::FadeAnimator< touchgfx::Image > imageButtomBar;
    touchgfx::Container containerScreenElements;
    touchgfx::FadeAnimator< touchgfx::Image > imageButtomBarWheel;
    touchgfx::FadeAnimator< touchgfx::Button > buttonKitchen;
    touchgfx::FadeAnimator< touchgfx::TextArea > textAreaOvenMode;
    touchgfx::FadeAnimator< touchgfx::Button > buttonStartStop;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > textAreaTemperature;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithTwoWildcards > textAreaTimer;
    touchgfx::Button buttonTemperature;
    touchgfx::Button buttonTimer;
    touchgfx::FadeAnimator< touchgfx::Button > buttonOk;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelOvenProgram;
    touchgfx::DrawableListItems<OvenWheelElement, 6> scrollWheelOvenProgramListItems;
    touchgfx::DrawableListItems<OvenWheelElement, 2> scrollWheelOvenProgramSelectedListItems;

    FpsMcuLoad mcu;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREATEMPERATURE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaTemperatureBuffer[TEXTAREATEMPERATURE_SIZE];
    static const uint16_t TEXTAREATIMERBUFFER1_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaTimerBuffer1[TEXTAREATIMERBUFFER1_SIZE];
    static const uint16_t TEXTAREATIMERBUFFER2_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaTimerBuffer2[TEXTAREATIMERBUFFER2_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<OvenScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<OvenScreenViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // OVENSCREENVIEWBASE_HPP
