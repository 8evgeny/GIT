/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/extractorhoodscreen_screen/ExtractorHoodScreenViewBase.hpp>
#include "BitmapDatabase.hpp"

ExtractorHoodScreenViewBase::ExtractorHoodScreenViewBase() :
    buttonCallback(this, &ExtractorHoodScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &ExtractorHoodScreenViewBase::flexButtonCallbackHandler)
{
    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_AIRCONTROL_BG_ID));

    buttoKitchen.setXY(15, 15);
    buttoKitchen.setBitmaps(touchgfx::Bitmap(BITMAP_HOMEBTN_ID), touchgfx::Bitmap(BITMAP_HOMEBTN_ID));
    buttoKitchen.setAction(buttonCallback);

    fanBg.setXY(121, 0);
    fanBg.setBitmap(touchgfx::Bitmap(BITMAP_FAN_BG_ID));

    gitter.setXY(143, 16);
    gitter.setBitmap(touchgfx::Bitmap(BITMAP_GITTER_ID));

    imageFanBtn.setXY(15, 83);
    imageFanBtn.setBitmap(touchgfx::Bitmap(BITMAP_FAN_BUTTON_ON_ID));

    imageLightBtn.setXY(385, 83);
    imageLightBtn.setBitmap(touchgfx::Bitmap(BITMAP_LIGHT_BUTTON_ON_ID));

    flexButtonFan.setBitmaps(Bitmap(BITMAP_EXTRACTORHOODBUTTONOVERLAY_ID), Bitmap(BITMAP_EXTRACTORHOODBUTTONOVERLAY_ID));
    flexButtonFan.setBitmapXY(0, 8);
    flexButtonFan.setPosition(15, 74, 81, 137);
    flexButtonFan.setAction(flexButtonCallback);

    flexButtonLight.setBitmaps(Bitmap(BITMAP_EXTRACTORHOODBUTTONOVERLAY_ID), Bitmap(BITMAP_EXTRACTORHOODBUTTONOVERLAY_ID));
    flexButtonLight.setBitmapXY(0, 8);
    flexButtonLight.setPosition(385, 74, 81, 137);
    flexButtonLight.setAction(flexButtonCallback);

    fanKnob.setXY(0, 192);

    fpsMcu.setXY(349, 0);

    add(background);
    add(buttoKitchen);
    add(fanBg);
    add(gitter);
    add(imageFanBtn);
    add(imageLightBtn);
    add(flexButtonFan);
    add(flexButtonLight);
    add(fanKnob);
    add(fpsMcu);
}

void ExtractorHoodScreenViewBase::setupScreen()
{
    fanKnob.initialize();
    fpsMcu.initialize();
}

void ExtractorHoodScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttoKitchen)
    {
        //InteractionGoToKitchen
        //When buttoKitchen clicked change screen to KitchenScreen
        //Go to KitchenScreen with no screen transition
        application().gotoKitchenScreenScreenNoTransition();
    }
}

void ExtractorHoodScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButtonFan)
    {
        //InteractionFanButtonClicked
        //When flexButtonFan clicked call virtual function
        //Call fanButttonClicked
        fanButttonClicked();
    }
    else if (&src == &flexButtonLight)
    {
        //InteractionLightButtonCliked
        //When flexButtonLight clicked call virtual function
        //Call lightButtonClicked
        lightButtonClicked();
    }
}
