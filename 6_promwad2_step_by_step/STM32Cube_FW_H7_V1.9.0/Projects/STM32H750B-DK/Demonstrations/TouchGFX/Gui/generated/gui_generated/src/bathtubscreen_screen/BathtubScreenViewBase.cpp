/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/bathtubscreen_screen/BathtubScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>

BathtubScreenViewBase::BathtubScreenViewBase() :
    buttonCallback(this, &BathtubScreenViewBase::buttonCallbackHandler),
    updateItemCallback(this, &BathtubScreenViewBase::updateItemCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BATHTUB_UI_BG_ID));

    buttonBathroom.setXY(0, 0);
    buttonBathroom.setBitmaps(touchgfx::Bitmap(BITMAP_TOP_GO_BACK_ID), touchgfx::Bitmap(BITMAP_TOP_GO_BACK_ID));
    buttonBathroom.setAction(buttonCallback);

    containerCircleLight.setPosition(0, 143, 221, 108);

    circleLight1.setPosition(0, 0, 64, 64);
    circleLight1.setCenter(32, 32);
    circleLight1.setRadius(32);
    circleLight1.setLineWidth(0);
    circleLight1.setArc(0, 360);
    circleLight1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(204, 70, 70));
    circleLight1.setPainter(circleLight1Painter);
    circleLight1.setAlpha(0);
    containerCircleLight.add(circleLight1);

    circleLight2.setPosition(66, 1, 64, 64);
    circleLight2.setCenter(32, 32);
    circleLight2.setRadius(32);
    circleLight2.setLineWidth(0);
    circleLight2.setArc(0, 360);
    circleLight2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(204, 70, 70));
    circleLight2.setPainter(circleLight2Painter);
    circleLight2.setAlpha(0);
    containerCircleLight.add(circleLight2);

    circleLight3.setPosition(135, 34, 64, 64);
    circleLight3.setCenter(32, 32);
    circleLight3.setRadius(32);
    circleLight3.setLineWidth(0);
    circleLight3.setArc(0, 360);
    circleLight3Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(204, 70, 70));
    circleLight3.setPainter(circleLight3Painter);
    circleLight3.setAlpha(0);
    containerCircleLight.add(circleLight3);

    containerTempWheel.setPosition(480, 64, 146, 196);

    imageTempWheelBg.setXY(0, 2);
    imageTempWheelBg.setBitmap(touchgfx::Bitmap(BITMAP_TEMPERATURE_BG_ID));
    containerTempWheel.add(imageTempWheelBg);

    imageSelectedTempMarker.setXY(0, 90);
    imageSelectedTempMarker.setBitmap(touchgfx::Bitmap(BITMAP_GRADIENT_CENTER_ID));
    containerTempWheel.add(imageSelectedTempMarker);

    scrollWheelTemperature.setPosition(4, 61, 138, 124);
    scrollWheelTemperature.setHorizontal(false);
    scrollWheelTemperature.setCircular(false);
    scrollWheelTemperature.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheelTemperature.setSwipeAcceleration(10);
    scrollWheelTemperature.setDragAcceleration(10);
    scrollWheelTemperature.setNumberOfItems(25);
    scrollWheelTemperature.setSelectedItemOffset(37);
    scrollWheelTemperature.setSelectedItemExtraSize(0, 0);
    scrollWheelTemperature.setSelectedItemMargin(0, 0);
    scrollWheelTemperature.setDrawableSize(48, 0);
    scrollWheelTemperature.setDrawables(scrollWheelTemperatureListItems, updateItemCallback,
                              scrollWheelTemperatureSelectedListItems, updateItemCallback);
    scrollWheelTemperature.animateToItem(10, 0);
    containerTempWheel.add(scrollWheelTemperature);

    imageTempWheelGradient.setXY(0, 61);
    imageTempWheelGradient.setBitmap(touchgfx::Bitmap(BITMAP_GRADIENT_OVERLAY_ID));
    containerTempWheel.add(imageTempWheelGradient);

    toggleButtonTempUnit.setXY(13, 29);
    toggleButtonTempUnit.setBitmaps(touchgfx::Bitmap(BITMAP_F_ON_ID), touchgfx::Bitmap(BITMAP_C_ON_ID));
    toggleButtonTempUnit.forceState(true);
    toggleButtonTempUnit.setAction(buttonCallback);
    containerTempWheel.add(toggleButtonTempUnit);

    imageWheelSelectTemp.setXY(-3, 91);
    imageWheelSelectTemp.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECT_TOP_ID));
    containerTempWheel.add(imageWheelSelectTemp);

    containerLightColor.setPosition(480, 64, 146, 196);

    imageColorWheel.setXY(0, 1);
    imageColorWheel.setBitmap(touchgfx::Bitmap(BITMAP_LIGHTCOLOR_BG_ID));
    containerLightColor.add(imageColorWheel);

    imagePicker.setXY(53, 102);
    imagePicker.setBitmap(touchgfx::Bitmap(BITMAP_LIGHTCOLOR_SELECTOR_DOT_ID));
    containerLightColor.add(imagePicker);

    toggleButtonLight.setXY(13, 28);
    toggleButtonLight.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHTOFF_ID), touchgfx::Bitmap(BITMAP_LIGHTON_ID));
    toggleButtonLight.setAction(buttonCallback);
    containerLightColor.add(toggleButtonLight);

    containerJetControl.setPosition(480, 64, 146, 196);

    imageJetWheelBg.setXY(0, 2);
    imageJetWheelBg.setBitmap(touchgfx::Bitmap(BITMAP_JETS_BG_ID));
    containerJetControl.add(imageJetWheelBg);

    imageSelectedJetSpeedMarker.setXY(0, 90);
    imageSelectedJetSpeedMarker.setBitmap(touchgfx::Bitmap(BITMAP_GRADIENT_CENTER_ID));
    containerJetControl.add(imageSelectedJetSpeedMarker);

    scrollWheelJetSpeed.setPosition(4, 61, 138, 124);
    scrollWheelJetSpeed.setHorizontal(false);
    scrollWheelJetSpeed.setCircular(true);
    scrollWheelJetSpeed.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheelJetSpeed.setSwipeAcceleration(10);
    scrollWheelJetSpeed.setDragAcceleration(10);
    scrollWheelJetSpeed.setNumberOfItems(3);
    scrollWheelJetSpeed.setSelectedItemOffset(37);
    scrollWheelJetSpeed.setSelectedItemExtraSize(0, 0);
    scrollWheelJetSpeed.setSelectedItemMargin(0, 0);
    scrollWheelJetSpeed.setDrawableSize(48, 0);
    scrollWheelJetSpeed.setDrawables(scrollWheelJetSpeedListItems, updateItemCallback,
                              scrollWheelJetSpeedSelectedListItems, updateItemCallback);
    scrollWheelJetSpeed.animateToItem(0, 0);
    containerJetControl.add(scrollWheelJetSpeed);

    imageJetSpeedWheelGradient.setXY(0, 61);
    imageJetSpeedWheelGradient.setBitmap(touchgfx::Bitmap(BITMAP_GRADIENT_OVERLAY_ID));
    containerJetControl.add(imageJetSpeedWheelGradient);

    toggleButtonJetSpeed.setXY(13, 29);
    toggleButtonJetSpeed.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHTOFF_ID), touchgfx::Bitmap(BITMAP_LIGHTON_ID));
    toggleButtonJetSpeed.setAction(buttonCallback);
    containerJetControl.add(toggleButtonJetSpeed);

    imageWheelSelectJet.setXY(-3, 91);
    imageWheelSelectJet.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECT_TOP_ID));
    containerJetControl.add(imageWheelSelectJet);

    toggleButtonPower.setXY(410, 0);
    toggleButtonPower.setBitmaps(touchgfx::Bitmap(BITMAP_POWER_ICON_ID), touchgfx::Bitmap(BITMAP_POWER_ICON_ID));
    toggleButtonPower.setAction(buttonCallback);

    topBarButtonsContainer.setPosition(81, -60, 317, 60);

    radioButtonLight.setXY(217, 0);
    radioButtonLight.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHT_OFF_ID), touchgfx::Bitmap(BITMAP_LIGHT_OFF_ID), touchgfx::Bitmap(BITMAP_LIGHT_ON_ID), touchgfx::Bitmap(BITMAP_LIGHT_ON_ID));
    radioButtonLight.setSelected(false);
    radioButtonLight.setDeselectionEnabled(false);
    topBarButtonsContainer.add(radioButtonLight);

    radioButtonJets.setXY(108, 0);
    radioButtonJets.setBitmaps(touchgfx::Bitmap(BITMAP_JETS_OFF_IMG_ID), touchgfx::Bitmap(BITMAP_JETS_OFF_IMG_ID), touchgfx::Bitmap(BITMAP_JETS_ON_IMG_ID), touchgfx::Bitmap(BITMAP_JETS_ON_IMG_ID));
    radioButtonJets.setSelected(false);
    radioButtonJets.setDeselectionEnabled(false);
    topBarButtonsContainer.add(radioButtonJets);

    radioButtonTemperature.setXY(0, 0);
    radioButtonTemperature.setBitmaps(touchgfx::Bitmap(BITMAP_TEMP_OFF_ID), touchgfx::Bitmap(BITMAP_TEMP_OFF_ID), touchgfx::Bitmap(BITMAP_TEMP_ON_ID), touchgfx::Bitmap(BITMAP_TEMP_ON_ID));
    radioButtonTemperature.setSelected(false);
    radioButtonTemperature.setDeselectionEnabled(false);
    topBarButtonsContainer.add(radioButtonTemperature);

    imageWater.setXY(-19, 272);
    imageWater.setBitmap(touchgfx::Bitmap(BITMAP_BATHTUB_WATER_ID));

    imageBathtubFront.setXY(0, 162);
    imageBathtubFront.setBitmap(touchgfx::Bitmap(BITMAP_BATHTUB_OVERLAY_ID));

    mcuLoad.setXY(-54, 252);

    add(background);
    add(buttonBathroom);
    add(containerCircleLight);
    add(containerTempWheel);
    add(containerLightColor);
    add(containerJetControl);
    add(toggleButtonPower);
    add(topBarButtonsContainer);
    add(imageWater);
    add(imageBathtubFront);
    add(mcuLoad);
    radioButtonGroup.add(radioButtonLight);
    radioButtonGroup.add(radioButtonJets);
    radioButtonGroup.add(radioButtonTemperature);
}

void BathtubScreenViewBase::setupScreen()
{
    scrollWheelTemperature.initialize();
    for (int i = 0; i < scrollWheelTemperatureListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelTemperatureListItems[i].initialize();
    }
    for (int i = 0; i < scrollWheelTemperatureSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelTemperatureSelectedListItems[i].initialize();
    }
    scrollWheelJetSpeed.initialize();
    for (int i = 0; i < scrollWheelJetSpeedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelJetSpeedListItems[i].initialize();
    }
    for (int i = 0; i < scrollWheelJetSpeedSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelJetSpeedSelectedListItems[i].initialize();
    }
    mcuLoad.initialize();
}

void BathtubScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonBathroom)
    {
        //InteractionGoToBathroom
        //When buttonBathroom clicked change screen to BathroomScreen
        //Go to BathroomScreen with no screen transition
        application().gotoBathroomScreenScreenNoTransition();
    }
    else if (&src == &toggleButtonTempUnit)
    {
        //InteractionTempUnitButtonClicked
        //When toggleButtonTempUnit clicked call virtual function
        //Call tempUnitButtonClicked
        tempUnitButtonClicked();
    }
    else if (&src == &toggleButtonLight)
    {
        //InteractionLightButtonClicked
        //When toggleButtonLight clicked call virtual function
        //Call lightButtonClicked
        lightButtonClicked();
    }
    else if (&src == &toggleButtonJetSpeed)
    {
        //InteractionJetSpeedOnOffButtonClicked
        //When toggleButtonJetSpeed clicked call virtual function
        //Call jetSpeedOnOffButtonClicked
        jetSpeedOnOffButtonClicked();
    }
    else if (&src == &toggleButtonPower)
    {
        //InteractionPowerButtonClicked
        //When toggleButtonPower clicked call virtual function
        //Call powerButtonClicked
        powerButtonClicked();
    }
}

void BathtubScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheelTemperatureListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        BathtubWheelElement* cc = (BathtubWheelElement*)d;
        scrollWheelTemperatureUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollWheelTemperatureSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        BathtubWheelElementCenter* cc = (BathtubWheelElementCenter*)d;
        scrollWheelTemperatureUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollWheelJetSpeedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        BathtubWheelElement* cc = (BathtubWheelElement*)d;
        scrollWheelJetSpeedUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollWheelJetSpeedSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        BathtubWheelElementCenter* cc = (BathtubWheelElementCenter*)d;
        scrollWheelJetSpeedUpdateCenterItem(*cc, itemIndex);
    }
}
