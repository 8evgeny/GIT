/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/ovenscreen_screen/OvenScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

OvenScreenViewBase::OvenScreenViewBase() :
    buttonCallback(this, &OvenScreenViewBase::buttonCallbackHandler),
    updateItemCallback(this, &OvenScreenViewBase::updateItemCallbackHandler)
{
    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BG_ID));

    imageButtomBar.setXY(0, 192);
    imageButtomBar.setBitmap(touchgfx::Bitmap(BITMAP_BOTTOMBAR_ID));
    imageButtomBar.setAlpha(0);

    containerScreenElements.setPosition(0, 0, 480, 272);

    imageButtomBarWheel.setXY(0, 172);
    imageButtomBarWheel.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BUNDBAR_BG_ID));
    imageButtomBarWheel.setAlpha(0);
    containerScreenElements.add(imageButtomBarWheel);

    buttonKitchen.setXY(0, 0);
    buttonKitchen.setBitmaps(touchgfx::Bitmap(BITMAP_GO_BACK_KITCHEN_ID), touchgfx::Bitmap(BITMAP_GO_BACK_KITCHEN_ID));
    buttonKitchen.setAction(buttonCallback);
    buttonKitchen.setAlpha(0);
    containerScreenElements.add(buttonKitchen);

    textAreaOvenMode.setPosition(90, 21, 300, 30);
    textAreaOvenMode.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textAreaOvenMode.setLinespacing(0);
    textAreaOvenMode.setAlpha(0);
    textAreaOvenMode.setTypedText(touchgfx::TypedText(T_OVENMODEFAN));
    containerScreenElements.add(textAreaOvenMode);

    buttonStartStop.setXY(169, 200);
    buttonStartStop.setBitmaps(touchgfx::Bitmap(BITMAP_START_KNAP_ID), touchgfx::Bitmap(BITMAP_START_KNAP_PRESSED_ID));
    buttonStartStop.setAction(buttonCallback);
    buttonStartStop.setAlpha(0);
    containerScreenElements.add(buttonStartStop);

    textAreaTemperature.setPosition(0, 210, 120, 41);
    textAreaTemperature.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textAreaTemperature.setLinespacing(0);
    textAreaTemperature.setAlpha(0);
    Unicode::snprintf(textAreaTemperatureBuffer, TEXTAREATEMPERATURE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID52).getText());
    textAreaTemperature.setWildcard(textAreaTemperatureBuffer);
    textAreaTemperature.setTypedText(touchgfx::TypedText(T_SINGLEUSEID51));
    containerScreenElements.add(textAreaTemperature);

    textAreaTimer.setPosition(338, 210, 140, 41);
    textAreaTimer.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textAreaTimer.setLinespacing(0);
    textAreaTimer.setAlpha(0);
    touchgfx::Unicode::snprintf(textAreaTimerBuffer1, TEXTAREATIMERBUFFER1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
    textAreaTimer.setWildcard1(textAreaTimerBuffer1);
    touchgfx::Unicode::snprintf(textAreaTimerBuffer2, TEXTAREATIMERBUFFER2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID55).getText());
    textAreaTimer.setWildcard2(textAreaTimerBuffer2);
    textAreaTimer.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
    containerScreenElements.add(textAreaTimer);

    buttonTemperature.setXY(0, 192);
    buttonTemperature.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTONOVERLAY_ID), touchgfx::Bitmap(BITMAP_BUTTONOVERLAY_ID));
    buttonTemperature.setAction(buttonCallback);
    containerScreenElements.add(buttonTemperature);

    buttonTimer.setXY(315, 192);
    buttonTimer.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTONOVERLAY_ID), touchgfx::Bitmap(BITMAP_BUTTONOVERLAY_ID));
    buttonTimer.setAction(buttonCallback);
    containerScreenElements.add(buttonTimer);

    buttonOk.setXY(170, 200);
    buttonOk.setVisible(false);
    buttonOk.setBitmaps(touchgfx::Bitmap(BITMAP_OK_BUTTON_ID), touchgfx::Bitmap(BITMAP_OK_BUTTON_PRESSED_ID));
    buttonOk.setAction(buttonCallback);
    buttonOk.setAlpha(0);
    containerScreenElements.add(buttonOk);

    scrollWheelOvenProgram.setPosition(-1, 62, 480, 110);
    scrollWheelOvenProgram.setHorizontal(true);
    scrollWheelOvenProgram.setCircular(true);
    scrollWheelOvenProgram.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheelOvenProgram.setSwipeAcceleration(25);
    scrollWheelOvenProgram.setDragAcceleration(10);
    scrollWheelOvenProgram.setNumberOfItems(7);
    scrollWheelOvenProgram.setSelectedItemOffset(184);
    scrollWheelOvenProgram.setSelectedItemExtraSize(0, 0);
    scrollWheelOvenProgram.setSelectedItemMargin(0, 0);
    scrollWheelOvenProgram.setDrawableSize(110, 0);
    scrollWheelOvenProgram.setDrawables(scrollWheelOvenProgramListItems, updateItemCallback,
                              scrollWheelOvenProgramSelectedListItems, updateItemCallback);
    scrollWheelOvenProgram.animateToItem(3, 0);
    containerScreenElements.add(scrollWheelOvenProgram);

    mcu.setXY(353, 0);

    add(background);
    add(imageButtomBar);
    add(containerScreenElements);
    add(mcu);
}

void OvenScreenViewBase::setupScreen()
{
    scrollWheelOvenProgram.initialize();
    for (int i = 0; i < scrollWheelOvenProgramListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelOvenProgramListItems[i].initialize();
    }
    for (int i = 0; i < scrollWheelOvenProgramSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelOvenProgramSelectedListItems[i].initialize();
    }
    mcu.initialize();
}

void OvenScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonKitchen)
    {
        //InteractionGoToKitchen
        //When buttonKitchen clicked change screen to KitchenScreen
        //Go to KitchenScreen with no screen transition
        application().gotoKitchenScreenScreenNoTransition();
    }
    else if (&src == &buttonStartStop)
    {
        //InteractionButtonPowerClicked
        //When buttonStartStop clicked call virtual function
        //Call buttonTurnOnOff
        buttonTurnOnOff();
    }
    else if (&src == &buttonTemperature)
    {
        //InteractionTempButtonClicked
        //When buttonTemperature clicked call virtual function
        //Call tempButtonClicked
        tempButtonClicked();
    }
    else if (&src == &buttonTimer)
    {
        //InteractionTimerButtonClicked
        //When buttonTimer clicked call virtual function
        //Call timerButtonClicked
        timerButtonClicked();
    }
    else if (&src == &buttonOk)
    {
        //InteractionOkButtonClicked
        //When buttonOk clicked call virtual function
        //Call okButtonClicked
        okButtonClicked();
    }
}

void OvenScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheelOvenProgramListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        OvenWheelElement* cc = (OvenWheelElement*)d;
        scrollWheelOvenProgramUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollWheelOvenProgramSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        OvenWheelElement* cc = (OvenWheelElement*)d;
        scrollWheelOvenProgramUpdateCenterItem(*cc, itemIndex);
    }
}
