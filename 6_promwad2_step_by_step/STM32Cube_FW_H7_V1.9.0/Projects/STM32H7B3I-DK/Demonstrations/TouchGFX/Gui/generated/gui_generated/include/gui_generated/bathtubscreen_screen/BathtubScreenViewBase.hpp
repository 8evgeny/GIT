/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BATHTUBSCREENVIEWBASE_HPP
#define BATHTUBSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/bathtubscreen_screen/BathtubScreenPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>

#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <gui/containers/BathtubWheelElement.hpp>
#include <gui/containers/BathtubWheelElementCenter.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <gui/containers/FpsMcuLoad.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
class BathtubScreenViewBase : public touchgfx::View<BathtubScreenPresenter>
{
public:
    BathtubScreenViewBase();
    virtual ~BathtubScreenViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheelTemperatureUpdateItem(BathtubWheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void scrollWheelTemperatureUpdateCenterItem(BathtubWheelElementCenter& item, int16_t itemIndex)
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void scrollWheelJetSpeedUpdateItem(BathtubWheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void scrollWheelJetSpeedUpdateCenterItem(BathtubWheelElementCenter& item, int16_t itemIndex)
    {
        // Override and implement this function in BathtubScreen
    }

    /*
     * Virtual Action Handlers
     */
    virtual void powerButtonClicked()
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void lightButtonClicked()
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void tempUnitButtonClicked()
    {
        // Override and implement this function in BathtubScreen
    }

    virtual void jetSpeedOnOffButtonClicked()
    {
        // Override and implement this function in BathtubScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image background;
    touchgfx::Button buttonBathroom;
    touchgfx::Container containerCircleLight;
    touchgfx::FadeAnimator< touchgfx::Circle > circleLight1;
    touchgfx::PainterRGB888 circleLight1Painter;
    touchgfx::FadeAnimator< touchgfx::Circle > circleLight2;
    touchgfx::PainterRGB888 circleLight2Painter;
    touchgfx::FadeAnimator< touchgfx::Circle > circleLight3;
    touchgfx::PainterRGB888 circleLight3Painter;

    touchgfx::MoveAnimator< touchgfx::Container > containerTempWheel;
    touchgfx::MoveAnimator< touchgfx::Image > imageTempWheelBg;
    touchgfx::Image imageSelectedTempMarker;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelTemperature;
    touchgfx::DrawableListItems<BathtubWheelElement, 4> scrollWheelTemperatureListItems;
    touchgfx::DrawableListItems<BathtubWheelElementCenter, 2> scrollWheelTemperatureSelectedListItems;

    touchgfx::Image imageTempWheelGradient;
    touchgfx::ToggleButton toggleButtonTempUnit;
    touchgfx::Image imageWheelSelectTemp;

    touchgfx::MoveAnimator< touchgfx::Container > containerLightColor;
    touchgfx::Image imageColorWheel;
    touchgfx::Image imagePicker;
    touchgfx::ToggleButton toggleButtonLight;

    touchgfx::MoveAnimator< touchgfx::Container > containerJetControl;
    touchgfx::MoveAnimator< touchgfx::Image > imageJetWheelBg;
    touchgfx::Image imageSelectedJetSpeedMarker;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelJetSpeed;
    touchgfx::DrawableListItems<BathtubWheelElement, 4> scrollWheelJetSpeedListItems;
    touchgfx::DrawableListItems<BathtubWheelElementCenter, 2> scrollWheelJetSpeedSelectedListItems;

    touchgfx::Image imageJetSpeedWheelGradient;
    touchgfx::ToggleButton toggleButtonJetSpeed;
    touchgfx::Image imageWheelSelectJet;

    touchgfx::ToggleButton toggleButtonPower;
    touchgfx::MoveAnimator< touchgfx::Container > topBarButtonsContainer;
    touchgfx::RadioButton radioButtonLight;
    touchgfx::RadioButton radioButtonJets;
    touchgfx::RadioButton radioButtonTemperature;

    touchgfx::MoveAnimator< touchgfx::Image > imageWater;
    touchgfx::Image imageBathtubFront;
    FpsMcuLoad mcuLoad;
    touchgfx::RadioButtonGroup<3> radioButtonGroup;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<BathtubScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<BathtubScreenViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // BATHTUBSCREENVIEWBASE_HPP
