/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TRACKSELECTORBASE_HPP
#define TRACKSELECTORBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>

#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
class trackSelectorBase : public touchgfx::Container
{
public:
    trackSelectorBase();
    virtual ~trackSelectorBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setShuffelPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->shuffelPressedCallback = &callback;
    }
    void setRepeatPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->repeatPressedCallback = &callback;
    }
    void setVideoPlayPausedPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->videoPlayPausedPressedCallback = &callback;
    }
    void setVideoSelectedCallback(touchgfx::GenericCallback<int>& callback)
    {
        this->videoSelectedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitShuffelPressedCallback(bool value)
    {
        if (shuffelPressedCallback && shuffelPressedCallback->isValid())
        {
            this->shuffelPressedCallback->execute(value);
        }
    }
    virtual void emitRepeatPressedCallback(bool value)
    {
        if (repeatPressedCallback && repeatPressedCallback->isValid())
        {
            this->repeatPressedCallback->execute(value);
        }
    }
    virtual void emitVideoPlayPausedPressedCallback(bool value)
    {
        if (videoPlayPausedPressedCallback && videoPlayPausedPressedCallback->isValid())
        {
            this->videoPlayPausedPressedCallback->execute(value);
        }
    }
    virtual void emitVideoSelectedCallback(int value)
    {
        if (videoSelectedCallback && videoSelectedCallback->isValid())
        {
            this->videoSelectedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box boxBg;
    touchgfx::ScrollableContainer thumbNailsContainer;


    touchgfx::ToggleButton shuffelButton;
    touchgfx::ToggleButton repeatButton;
    touchgfx::Image gradientLeft;
    touchgfx::Image gradientRight;
    touchgfx::TextArea textArea1;
    touchgfx::Image titelUnderline;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<trackSelectorBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<bool>* shuffelPressedCallback;
    touchgfx::GenericCallback<bool>* repeatPressedCallback;
    touchgfx::GenericCallback<bool>* videoPlayPausedPressedCallback;
    touchgfx::GenericCallback<int>* videoSelectedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TRACKSELECTORBASE_HPP
