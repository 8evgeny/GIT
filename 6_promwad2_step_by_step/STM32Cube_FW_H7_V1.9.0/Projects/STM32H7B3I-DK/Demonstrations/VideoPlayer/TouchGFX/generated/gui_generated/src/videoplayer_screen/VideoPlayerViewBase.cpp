/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/videoplayer_screen/VideoPlayerViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

VideoPlayerViewBase::VideoPlayerViewBase() :
    buttonCallback(this, &VideoPlayerViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &VideoPlayerViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &VideoPlayerViewBase::sliderValueConfirmedCallbackHandler),
    videoSelectorShuffelPressedCallback(this, &VideoPlayerViewBase::videoSelectorShuffelPressedCallbackHandler),
    videoSelectorRepeatPressedCallback(this, &VideoPlayerViewBase::videoSelectorRepeatPressedCallbackHandler),
    videoSelectorVideoPlayPausedPressedCallback(this, &VideoPlayerViewBase::videoSelectorVideoPlayPausedPressedCallbackHandler),
    videoSelectorVideoSelectedCallback(this, &VideoPlayerViewBase::videoSelectorVideoSelectedCallbackHandler)
{
    backGroundBox.setPosition(0, 0, 480, 272);
    backGroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(47, 45, 64));

    noMediaFilesText.setXY(72, 115);
    noMediaFilesText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    noMediaFilesText.setLinespacing(0);
    noMediaFilesText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    bottomBar.setPosition(0, 192, 480, 80);
    bottomBar.setVisible(false);

    bottombar.setXY(0, 0);
    bottombar.setBitmap(touchgfx::Bitmap(BITMAP_BOTTOM_BAR_ID));
    bottomBar.add(bottombar);

    videoDurationSlider.setXY(98, 48);
    videoDurationSlider.setBitmaps(touchgfx::Bitmap(BITMAP_AUDIO_SLIDER_BAR_ID), touchgfx::Bitmap(BITMAP_AUDIO_SLIDER_FILL_PLAYING_ID), touchgfx::Bitmap(BITMAP_AUDIO_SLIDER_KNOB_ID));
    videoDurationSlider.setupHorizontalSlider(12, 11, 0, 0, 260);
    videoDurationSlider.setValueRange(0, 800);
    videoDurationSlider.setValue(0);
    videoDurationSlider.setStopValueCallback(sliderValueConfirmedCallback);
    bottomBar.add(videoDurationSlider);

    volumeButton.setXY(436, 52);
    volumeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_VOLUME_LOW_ID), touchgfx::Bitmap(BITMAP_ICON_VOLUME_LOW_PRESSED_ID));
    volumeButton.setAction(buttonCallback);
    bottomBar.add(volumeButton);

    playPauseButton.setXY(231, 10);
    playPauseButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_PLAY_ID), touchgfx::Bitmap(BITMAP_ICON_PAUSE_ID));
    playPauseButton.setAction(buttonCallback);
    bottomBar.add(playPauseButton);

    nextVideoButton.setXY(290, 6);
    nextVideoButton.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_NEXT_TRACK_OVERLAY_ID), touchgfx::Bitmap(BITMAP_BUTTON_NEXT_TRACK_PRESSED_ID));
    nextVideoButton.setAction(buttonCallback);
    bottomBar.add(nextVideoButton);

    previousVideoButton.setXY(106, 6);
    previousVideoButton.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_PREV_TRACK_OVERLAY_ID), touchgfx::Bitmap(BITMAP_BUTTON_PREV_TRACK_PRESSED_ID));
    previousVideoButton.setAction(buttonCallback);
    bottomBar.add(previousVideoButton);

    durationLeft.setPosition(68, 51, 30, 19);
    durationLeft.setColor(touchgfx::Color::getColorFrom24BitRGB(180, 176, 205));
    durationLeft.setLinespacing(0);
    Unicode::snprintf(durationLeftBuffer, DURATIONLEFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
    durationLeft.setWildcard(durationLeftBuffer);
    durationLeft.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
    bottomBar.add(durationLeft);

    durationTotal.setPosition(384, 51, 30, 19);
    durationTotal.setColor(touchgfx::Color::getColorFrom24BitRGB(180, 176, 205));
    durationTotal.setLinespacing(0);
    Unicode::snprintf(durationTotalBuffer, DURATIONTOTAL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
    durationTotal.setWildcard(durationTotalBuffer);
    durationTotal.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
    bottomBar.add(durationTotal);

    volumeBarContainer.setPosition(480, 52, 44, 168);

    volumenSliderBG.setXY(0, 0);
    volumenSliderBG.setBitmap(touchgfx::Bitmap(BITMAP_VOLUME_BAR_ID));
    volumeBarContainer.add(volumenSliderBG);

    volumeSlider.setXY(7, 15);
    volumeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_VOLUME_BAR_EMPTY_BG_ID), touchgfx::Bitmap(BITMAP_VOLUME_BAR_FILL_ID), touchgfx::Bitmap(BITMAP_VOLUME_HANDLE_ID));
    volumeSlider.setupVerticalSlider(7, 2, 0, 0, 140);
    volumeSlider.setValueRange(0, 100);
    volumeSlider.setValue(0);
    volumeSlider.setNewValueCallback(sliderValueChangedCallback);
    volumeBarContainer.add(volumeSlider);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_BACK_ID), touchgfx::Bitmap(BITMAP_BUTTON_BACK_PRESSED_ID));
    backButton.setAction(buttonCallback);

    videoSelector.setXY(480, 0);
    videoSelector.setShuffelPressedCallback(videoSelectorShuffelPressedCallback);
    videoSelector.setRepeatPressedCallback(videoSelectorRepeatPressedCallback);
    videoSelector.setVideoPlayPausedPressedCallback(videoSelectorVideoPlayPausedPressedCallback);
    videoSelector.setVideoSelectedCallback(videoSelectorVideoSelectedCallback);

    videoButton.setXY(412, 0);
    videoButton.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_ALBUM_ID), touchgfx::Bitmap(BITMAP_BUTTON_ALBUM_PRESSED_ID));
    videoButton.setAction(buttonCallback);

    cancelButton.setXY(412, 0);
    cancelButton.setVisible(false);
    cancelButton.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_CLOSE_ALBUM_ID), touchgfx::Bitmap(BITMAP_BUTTON_CLOSE_ALBUM_PRESSED_ID));
    cancelButton.setAction(buttonCallback);

    add(backGroundBox);
    add(noMediaFilesText);
    add(bottomBar);
    add(volumeBarContainer);
    add(backButton);
    add(videoSelector);
    add(videoButton);
    add(cancelButton);
}

void VideoPlayerViewBase::setupScreen()
{
    videoSelector.initialize();
}

void VideoPlayerViewBase::videoSelectorShuffelPressedCallbackHandler(bool value)
{
    //shufflePressed
    //When videoSelector shuffelPressed call shufflePressed on VideoPlayer
    //Call shufflePressed
    shufflePressed(value);
}

void VideoPlayerViewBase::videoSelectorRepeatPressedCallbackHandler(bool value)
{
    //repeatPressed
    //When videoSelector repeatPressed call repeatPressed on VideoPlayer
    //Call repeatPressed
    repeatPressed(value);
}

void VideoPlayerViewBase::videoSelectorVideoPlayPausedPressedCallbackHandler(bool value)
{
    //videoSelectPlayPause
    //When videoSelector videoPlayPausedPressed call videoListPlayPausePressed on VideoPlayer
    //Call videoListPlayPausePressed
    videoListPlayPausePressed(value);
}

void VideoPlayerViewBase::videoSelectorVideoSelectedCallbackHandler(int value)
{
    //newVideoSelected
    //When videoSelector videoSelected call newVideoSelected on VideoPlayer
    //Call newVideoSelected
    newVideoSelected(value);
}

void VideoPlayerViewBase::volumeButtonPressed(bool value)
{

}

void VideoPlayerViewBase::volumeSliderChanged(uint16_t value)
{

}

void VideoPlayerViewBase::videoSliderChanged(uint16_t value)
{

}

void VideoPlayerViewBase::playPauseButtonPressed(bool value)
{

}

void VideoPlayerViewBase::shufflePressed(bool value)
{

}

void VideoPlayerViewBase::repeatPressed(bool value)
{

}

void VideoPlayerViewBase::videoListPlayPausePressed(bool value)
{

}

void VideoPlayerViewBase::newVideoSelected(int value)
{

}

void VideoPlayerViewBase::cancelButtonPressed()
{

}

void VideoPlayerViewBase::videoButtonPressed()
{

}

void VideoPlayerViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &volumeButton)
    {
        //volumeButtonPressed
        //When volumeButton clicked call volumeButtonPressed on VideoPlayer
        //Call volumeButtonPressed
        volumeButtonPressed(volumeButton.getState());
    }
    else if (&src == &playPauseButton)
    {
        //playPauseButton
        //When playPauseButton clicked call playPauseButtonPressed on VideoPlayer
        //Call playPauseButtonPressed
        playPauseButtonPressed(playPauseButton.getState());
    }
    else if (&src == &nextVideoButton)
    {
        //nextPressed
        //When nextVideoButton clicked call virtual function
        //Call nextPressed
        nextPressed();
    }
    else if (&src == &previousVideoButton)
    {
        //previousPressed
        //When previousVideoButton clicked call virtual function
        //Call previousPressed
        previousPressed();
    }
    else if (&src == &backButton)
    {
        //backButtonPressed
        //When backButton clicked call virtual function
        //Call backButtonPressed
        backButtonPressed();
    }
    else if (&src == &videoButton)
    {
        //videoButtonPressed
        //When videoButton clicked move videoSelector
        //Move videoSelector to x:0, y:0 with LinearIn easing in 150 ms (9 Ticks)
        videoSelector.clearMoveAnimationEndedAction();
        videoSelector.startMoveAnimation(0, 0, 9, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);

        //videoSelectorInView1
        //When videoButton clicked hide videoButton
        //Hide videoButton
        videoButton.setVisible(false);
        videoButton.invalidate();

        //videoSelectorInView2
        //When videoButton clicked show cancelButton
        //Show cancelButton
        cancelButton.setVisible(true);
        cancelButton.invalidate();

        //Interaction1
        //When videoButton clicked execute C++ code
        //Execute C++ code
        volumeButtonPressed(false);
        volumeButton.forceState(false);
        volumeButton.invalidate();
    }
    else if (&src == &cancelButton)
    {
        //cancelButtonPressed
        //When cancelButton clicked move videoSelector
        //Move videoSelector to x:480, y:0 with LinearIn easing in 150 ms (9 Ticks)
        videoSelector.clearMoveAnimationEndedAction();
        videoSelector.startMoveAnimation(480, 0, 9, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);

        //videoSelectorOutOfView
        //When cancelButton clicked hide cancelButton
        //Hide cancelButton
        cancelButton.setVisible(false);
        cancelButton.invalidate();

        //videoSelectorOutOfView2
        //When cancelButton clicked show videoButton
        //Show videoButton
        videoButton.setVisible(true);
        videoButton.invalidate();
    }
}

void VideoPlayerViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &videoDurationSlider)
    {

    }
    else if (&src == &volumeSlider)
    {
        //volumenSliderValueChanged
        //When volumeSlider value changed call volumeSliderChanged on VideoPlayer
        //Call volumeSliderChanged
        volumeSliderChanged(value);
    }
}

void VideoPlayerViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &videoDurationSlider)
    {
        //musicDurationSliderChanged
        //When videoDurationSlider value confirmed call videoSliderChanged on VideoPlayer
        //Call videoSliderChanged
        videoSliderChanged(value);
    }
    else if (&src == &volumeSlider)
    {

    }
}
