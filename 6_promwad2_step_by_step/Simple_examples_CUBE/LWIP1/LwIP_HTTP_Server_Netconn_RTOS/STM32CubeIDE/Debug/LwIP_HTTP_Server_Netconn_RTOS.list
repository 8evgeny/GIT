
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ff9c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015ec8  0802026c  0802026c  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036134  08036134  000500b4  2**0
                  CONTENTS
  4 .ARM          00000000  08036134  08036134  000500b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08036134  08036134  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036134  08036134  00046134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036138  08036138  00046138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0803613c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d4c  200000b4  080361f0  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20013e00  080361f0  00053e00  2**0
                  ALLOC
 11 .lwip_sec     00003383  30000000  080361f0  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 13 .debug_line   00049e7e  00000000  00000000  000500e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00073bed  00000000  00000000  00099f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bd91  00000000  00000000  0010db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003718  00000000  00000000  001198e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b295  00000000  00000000  0011cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000034b8  00000000  00000000  002a8290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000481cc  00000000  00000000  002ab748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002f3914  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f244  00000000  00000000  002f3968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000b4 	.word	0x200000b4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020254 	.word	0x08020254

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000b8 	.word	0x200000b8
 800030c:	08020254 	.word	0x08020254

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000418 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003e6:	e003      	b.n	80003f0 <LoopCopyDataInit>

080003e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ee:	3104      	adds	r1, #4

080003f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003f8:	d3f6      	bcc.n	80003e8 <CopyDataInit>
  ldr  r2, =_sbss
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003fc:	e002      	b.n	8000404 <LoopFillZerobss>

080003fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000400:	f842 3b04 	str.w	r3, [r2], #4

08000404 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000406:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000408:	d3f9      	bcc.n	80003fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800040a:	f003 fd0f 	bl	8003e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040e:	f01e fc5b 	bl	801ecc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f000 ff83 	bl	800131c <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000418:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800041c:	0803613c 	.word	0x0803613c
  ldr  r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000424:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8000428:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 800042c:	20013e00 	.word	0x20013e00

08000430 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC3_IRQHandler>
	...

08000434 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d003      	beq.n	8000454 <ethernet_link_status_updated+0x20>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <ethernet_link_status_updated+0x34>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  }
}
 8000452:	e002      	b.n	800045a <ethernet_link_status_updated+0x26>
    DHCP_state = DHCP_LINK_DOWN;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <ethernet_link_status_updated+0x34>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	200000d0 	.word	0x200000d0

0800046c <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08c      	sub	sp, #48	; 0x30
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t iptxt[20];
#endif

  for (;;)
  {
    switch (DHCP_state)
 8000478:	4b44      	ldr	r3, [pc, #272]	; (800058c <DHCP_Thread+0x120>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b05      	cmp	r3, #5
 8000480:	d071      	beq.n	8000566 <DHCP_Thread+0xfa>
 8000482:	2b05      	cmp	r3, #5
 8000484:	dc79      	bgt.n	800057a <DHCP_Thread+0x10e>
 8000486:	2b01      	cmp	r3, #1
 8000488:	d002      	beq.n	8000490 <DHCP_Thread+0x24>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d016      	beq.n	80004bc <DHCP_Thread+0x50>
      BSP_LED_Off(LED1);
      BSP_LED_On(LED2);
#endif
    }
    break;
    default: break;
 800048e:	e074      	b.n	800057a <DHCP_Thread+0x10e>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8000496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);
 800049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 80004a2:	4b3a      	ldr	r3, [pc, #232]	; (800058c <DHCP_Thread+0x120>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
        LCD_UsrTrace ("  State: Looking for DHCP server ...\n");
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <DHCP_Thread+0x124>)
 80004aa:	4a3a      	ldr	r2, [pc, #232]	; (8000594 <DHCP_Thread+0x128>)
 80004ac:	611a      	str	r2, [r3, #16]
 80004ae:	483a      	ldr	r0, [pc, #232]	; (8000598 <DHCP_Thread+0x12c>)
 80004b0:	f01e fcf2 	bl	801ee98 <puts>
        dhcp_start(netif);
 80004b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004b6:	f010 ffdb 	bl	8011470 <dhcp_start>
      break;
 80004ba:	e061      	b.n	8000580 <DHCP_Thread+0x114>
        if (dhcp_supplied_address(netif))
 80004bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004be:	f012 fac7 	bl	8012a50 <dhcp_supplied_address>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d018      	beq.n	80004fa <DHCP_Thread+0x8e>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 80004c8:	4b30      	ldr	r3, [pc, #192]	; (800058c <DHCP_Thread+0x120>)
 80004ca:	2203      	movs	r2, #3
 80004cc:	701a      	strb	r2, [r3, #0]
          sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 80004ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d0:	3304      	adds	r3, #4
 80004d2:	4618      	mov	r0, r3
 80004d4:	f013 fed2 	bl	801427c <ip4addr_ntoa>
 80004d8:	4602      	mov	r2, r0
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	492f      	ldr	r1, [pc, #188]	; (800059c <DHCP_Thread+0x130>)
 80004e0:	4618      	mov	r0, r3
 80004e2:	f01e fd21 	bl	801ef28 <siprintf>
          LCD_UsrTrace ("IP address assigned by a DHCP server: %s\n", iptxt);
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <DHCP_Thread+0x124>)
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <DHCP_Thread+0x128>)
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4619      	mov	r1, r3
 80004f2:	482b      	ldr	r0, [pc, #172]	; (80005a0 <DHCP_Thread+0x134>)
 80004f4:	f01e fc4a 	bl	801ed8c <iprintf>
      break;
 80004f8:	e041      	b.n	800057e <DHCP_Thread+0x112>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	2b04      	cmp	r3, #4
 8000506:	d93a      	bls.n	800057e <DHCP_Thread+0x112>
            DHCP_state = DHCP_TIMEOUT;
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <DHCP_Thread+0x120>)
 800050a:	2204      	movs	r2, #4
 800050c:	701a      	strb	r2, [r3, #0]
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <DHCP_Thread+0x138>)
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000512:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000516:	623b      	str	r3, [r7, #32]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <DHCP_Thread+0x13c>)
 800051a:	61fb      	str	r3, [r7, #28]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	f107 0220 	add.w	r2, r7, #32
 8000524:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800052a:	f015 fccb 	bl	8015ec4 <netif_set_addr>
            sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000530:	3304      	adds	r3, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f013 fea2 	bl	801427c <ip4addr_ntoa>
 8000538:	4602      	mov	r2, r0
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4917      	ldr	r1, [pc, #92]	; (800059c <DHCP_Thread+0x130>)
 8000540:	4618      	mov	r0, r3
 8000542:	f01e fcf1 	bl	801ef28 <siprintf>
            LCD_UsrTrace ("DHCP Timeout !! \n");
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <DHCP_Thread+0x124>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <DHCP_Thread+0x128>)
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	4817      	ldr	r0, [pc, #92]	; (80005ac <DHCP_Thread+0x140>)
 800054e:	f01e fca3 	bl	801ee98 <puts>
            LCD_UsrTrace ("Static IP address: %s\n", iptxt);
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <DHCP_Thread+0x124>)
 8000554:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <DHCP_Thread+0x128>)
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4619      	mov	r1, r3
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <DHCP_Thread+0x144>)
 8000560:	f01e fc14 	bl	801ed8c <iprintf>
      break;
 8000564:	e00b      	b.n	800057e <DHCP_Thread+0x112>
      DHCP_state = DHCP_OFF;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <DHCP_Thread+0x120>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
      LCD_UsrTrace ("The network cable is not connected \n");
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <DHCP_Thread+0x124>)
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <DHCP_Thread+0x128>)
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <DHCP_Thread+0x148>)
 8000574:	f01e fc90 	bl	801ee98 <puts>
    break;
 8000578:	e002      	b.n	8000580 <DHCP_Thread+0x114>
    default: break;
 800057a:	bf00      	nop
 800057c:	e000      	b.n	8000580 <DHCP_Thread+0x114>
      break;
 800057e:	bf00      	nop
    }

    /* wait 500 ms */
    osDelay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f00d f8c9 	bl	800d71a <osDelay>
    switch (DHCP_state)
 8000588:	e776      	b.n	8000478 <DHCP_Thread+0xc>
 800058a:	bf00      	nop
 800058c:	200000d0 	.word	0x200000d0
 8000590:	20010398 	.word	0x20010398
 8000594:	ff000080 	.word	0xff000080
 8000598:	0802026c 	.word	0x0802026c
 800059c:	08020294 	.word	0x08020294
 80005a0:	08020298 	.word	0x08020298
 80005a4:	0a00a8c0 	.word	0x0a00a8c0
 80005a8:	0100a8c0 	.word	0x0100a8c0
 80005ac:	080202c4 	.word	0x080202c4
 80005b0:	080202d8 	.word	0x080202d8
 80005b4:	080202f0 	.word	0x080202f0

080005b8 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0aa      	sub	sp, #168	; 0xa8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t duplex, speed = 0U;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0U;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ETH_MACConfigTypeDef MACConf = {0};
 80005cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d0:	2264      	movs	r2, #100	; 0x64
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f01e fbd1 	bl	801ed7c <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80005da:	4a77      	ldr	r2, [pc, #476]	; (80007b8 <low_level_init+0x200>)
 80005dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e4:	6018      	str	r0, [r3, #0]
 80005e6:	3304      	adds	r3, #4
 80005e8:	8019      	strh	r1, [r3, #0]
  osThreadAttr_t attributes;
  EthHandle.Instance = ETH;
 80005ea:	4b74      	ldr	r3, [pc, #464]	; (80007bc <low_level_init+0x204>)
 80005ec:	4a74      	ldr	r2, [pc, #464]	; (80007c0 <low_level_init+0x208>)
 80005ee:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 80005f0:	4a72      	ldr	r2, [pc, #456]	; (80007bc <low_level_init+0x204>)
 80005f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f6:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005f8:	4b70      	ldr	r3, [pc, #448]	; (80007bc <low_level_init+0x204>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80005fe:	4b6f      	ldr	r3, [pc, #444]	; (80007bc <low_level_init+0x204>)
 8000600:	4a70      	ldr	r2, [pc, #448]	; (80007c4 <low_level_init+0x20c>)
 8000602:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000604:	4b6d      	ldr	r3, [pc, #436]	; (80007bc <low_level_init+0x204>)
 8000606:	4a70      	ldr	r2, [pc, #448]	; (80007c8 <low_level_init+0x210>)
 8000608:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800060a:	4b6c      	ldr	r3, [pc, #432]	; (80007bc <low_level_init+0x204>)
 800060c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000610:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000612:	486a      	ldr	r0, [pc, #424]	; (80007bc <low_level_init+0x204>)
 8000614:	f004 f946 	bl	80048a4 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2206      	movs	r2, #6
 800061c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2202      	movs	r2, #2
 8000624:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000656:	851a      	strh	r2, [r3, #40]	; 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800065e:	f043 030a 	orr.w	r3, r3, #10
 8000662:	b2da      	uxtb	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800066a:	4858      	ldr	r0, [pc, #352]	; (80007cc <low_level_init+0x214>)
 800066c:	f015 f974 	bl	8015958 <memp_init_pool>

  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000670:	2238      	movs	r2, #56	; 0x38
 8000672:	2100      	movs	r1, #0
 8000674:	4856      	ldr	r0, [pc, #344]	; (80007d0 <low_level_init+0x218>)
 8000676:	f01e fb81 	bl	801ed7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <low_level_init+0x218>)
 800067c:	2221      	movs	r2, #33	; 0x21
 800067e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000680:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <low_level_init+0x218>)
 8000682:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000686:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <low_level_init+0x218>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1,1, NULL);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	2001      	movs	r0, #1
 8000694:	f00d f96a 	bl	800d96c <osSemaphoreNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a4e      	ldr	r2, [pc, #312]	; (80007d4 <low_level_init+0x21c>)
 800069c:	6013      	str	r3, [r2, #0]
  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore =  osSemaphoreNew(1,1, NULL);
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	2001      	movs	r0, #1
 80006a4:	f00d f962 	bl	800d96c <osSemaphoreNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a4b      	ldr	r2, [pc, #300]	; (80007d8 <low_level_init+0x220>)
 80006ac:	6013      	str	r3, [r2, #0]
  
  /* create the task that handles the ETH_MAC */
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2224      	movs	r2, #36	; 0x24
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f01e fb60 	bl	801ed7c <memset>
  attributes.name = "EthIf";
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <low_level_init+0x224>)
 80006be:	60fb      	str	r3, [r7, #12]
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 80006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c4:	623b      	str	r3, [r7, #32]
  attributes.priority = osPriorityRealtime;
 80006c6:	2330      	movs	r3, #48	; 0x30
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  osThreadNew(ethernetif_input, netif, &attributes);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	461a      	mov	r2, r3
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4843      	ldr	r0, [pc, #268]	; (80007e0 <low_level_init+0x228>)
 80006d4:	f00c ff61 	bl	800d59a <osThreadNew>

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80006d8:	4942      	ldr	r1, [pc, #264]	; (80007e4 <low_level_init+0x22c>)
 80006da:	4843      	ldr	r0, [pc, #268]	; (80007e8 <low_level_init+0x230>)
 80006dc:	f001 fa89 	bl	8001bf2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80006e0:	4841      	ldr	r0, [pc, #260]	; (80007e8 <low_level_init+0x230>)
 80006e2:	f001 fab8 	bl	8001c56 <LAN8742_Init>

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80006e6:	4840      	ldr	r0, [pc, #256]	; (80007e8 <low_level_init+0x230>)
 80006e8:	f001 fb5d 	bl	8001da6 <LAN8742_GetLinkState>
 80006ec:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  /* Get link state */
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80006f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	dc06      	bgt.n	8000706 <low_level_init+0x14e>
  {
    netif_set_link_down(netif);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f015 fd13 	bl	8016124 <netif_set_link_down>
    netif_set_down(netif);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f015 fca6 	bl	8016050 <netif_set_down>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
    HAL_ETH_Start_IT(&EthHandle);
    netif_set_up(netif);
    netif_set_link_up(netif);
  }
}
 8000704:	e054      	b.n	80007b0 <low_level_init+0x1f8>
 8000706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800070a:	3b02      	subs	r3, #2
 800070c:	2b03      	cmp	r3, #3
 800070e:	d82b      	bhi.n	8000768 <low_level_init+0x1b0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <low_level_init+0x160>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	0800073b 	.word	0x0800073b
 8000720:	0800074b 	.word	0x0800074b
 8000724:	0800075b 	.word	0x0800075b
      duplex = ETH_FULLDUPLEX_MODE;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      speed = ETH_SPEED_100M;
 8000730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      break;
 8000738:	e01f      	b.n	800077a <low_level_init+0x1c2>
      duplex = ETH_HALFDUPLEX_MODE;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      speed = ETH_SPEED_100M;
 8000740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      break;
 8000748:	e017      	b.n	800077a <low_level_init+0x1c2>
      duplex = ETH_FULLDUPLEX_MODE;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      speed = ETH_SPEED_10M;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      break;
 8000758:	e00f      	b.n	800077a <low_level_init+0x1c2>
      duplex = ETH_HALFDUPLEX_MODE;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      speed = ETH_SPEED_10M;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      break;
 8000766:	e008      	b.n	800077a <low_level_init+0x1c2>
      duplex = ETH_FULLDUPLEX_MODE;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      speed = ETH_SPEED_100M;
 8000770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      break;
 8000778:	bf00      	nop
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 800077a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077e:	4619      	mov	r1, r3
 8000780:	480e      	ldr	r0, [pc, #56]	; (80007bc <low_level_init+0x204>)
 8000782:	f004 fe17 	bl	80053b4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8000786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800078a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800078c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000796:	4619      	mov	r1, r3
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <low_level_init+0x204>)
 800079a:	f004 ffdf 	bl	800575c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <low_level_init+0x204>)
 80007a0:	f004 f964 	bl	8004a6c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f015 fbe7 	bl	8015f78 <netif_set_up>
    netif_set_link_up(netif);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f015 fc82 	bl	80160b4 <netif_set_link_up>
}
 80007b0:	bf00      	nop
 80007b2:	37a8      	adds	r7, #168	; 0xa8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0802031c 	.word	0x0802031c
 80007bc:	20009144 	.word	0x20009144
 80007c0:	40028000 	.word	0x40028000
 80007c4:	30000000 	.word	0x30000000
 80007c8:	30000060 	.word	0x30000060
 80007cc:	08024688 	.word	0x08024688
 80007d0:	20009214 	.word	0x20009214
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	200000e0 	.word	0x200000e0
 80007dc:	08020314 	.word	0x08020314
 80007e0:	08000941 	.word	0x08000941
 80007e4:	20000000 	.word	0x20000000
 80007e8:	200091f4 	.word	0x200091f4

080007ec <low_level_output>:
 *
 * @note ERR_OK means the packet was sent (but not necessarily transmit complete),
 * and ERR_IF means the packet has more chained buffers than what the interface supports.
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b092      	sub	sp, #72	; 0x48
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2230      	movs	r2, #48	; 0x30
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f01e fab5 	bl	801ed7c <memset>

  for(q = p; q != NULL; q = q->next)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	643b      	str	r3, [r7, #64]	; 0x40
 8000816:	e049      	b.n	80008ac <low_level_output+0xc0>
  {
    if(i >= ETH_TX_DESC_CNT)
 8000818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800081a:	2b03      	cmp	r3, #3
 800081c:	d902      	bls.n	8000824 <low_level_output+0x38>
      return ERR_IF;
 800081e:	f06f 030b 	mvn.w	r3, #11
 8000822:	e069      	b.n	80008f8 <low_level_output+0x10c>

    Txbuffer[i].buffer = q->payload;
 8000824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000826:	6859      	ldr	r1, [r3, #4]
 8000828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000836:	4413      	add	r3, r2
 8000838:	3b3c      	subs	r3, #60	; 0x3c
 800083a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800083c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800083e:	895b      	ldrh	r3, [r3, #10]
 8000840:	4619      	mov	r1, r3
 8000842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000850:	4413      	add	r3, r2
 8000852:	3b38      	subs	r3, #56	; 0x38
 8000854:	6019      	str	r1, [r3, #0]

    if(i>0)
 8000856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000858:	2b00      	cmp	r3, #0
 800085a:	d012      	beq.n	8000882 <low_level_output+0x96>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800085c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	f107 000c 	add.w	r0, r7, #12
 8000864:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000866:	460b      	mov	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	18c1      	adds	r1, r0, r3
 8000870:	4613      	mov	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800087c:	4413      	add	r3, r2
 800087e:	3b34      	subs	r3, #52	; 0x34
 8000880:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8000882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10a      	bne.n	80008a0 <low_level_output+0xb4>
    {
      Txbuffer[i].next = NULL;
 800088a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000898:	4413      	add	r3, r2
 800089a:	3b34      	subs	r3, #52	; 0x34
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
    }

    i++;
 80008a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008a2:	3301      	adds	r3, #1
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80008a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
 80008ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1b2      	bne.n	8000818 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	891b      	ldrh	r3, [r3, #8]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <low_level_output+0x114>)
 80008ba:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80008bc:	4a10      	ldr	r2, [pc, #64]	; (8000900 <low_level_output+0x114>)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <low_level_output+0x114>)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f016 f8ae 	bl	8016a2c <pbuf_ref>

  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 80008d0:	490b      	ldr	r1, [pc, #44]	; (8000900 <low_level_output+0x114>)
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <low_level_output+0x118>)
 80008d4:	f004 f9cc 	bl	8004c70 <HAL_ETH_Transmit_IT>

  while(osSemaphoreAcquire( TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80008d8:	bf00      	nop
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <low_level_output+0x11c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e2:	4618      	mov	r0, r3
 80008e4:	f00d f8cc 	bl	800da80 <osSemaphoreAcquire>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f5      	bne.n	80008da <low_level_output+0xee>
  {
  }

  HAL_ETH_ReleaseTxPacket(&EthHandle);
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <low_level_output+0x118>)
 80008f0:	f004 fb3b 	bl	8004f6a <HAL_ETH_ReleaseTxPacket>

  return errval;
 80008f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3748      	adds	r7, #72	; 0x48
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20009214 	.word	0x20009214
 8000904:	20009144 	.word	0x20009144
 8000908:	200000e0 	.word	0x200000e0

0800090c <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <low_level_input+0x2c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <low_level_input+0x30>)
 8000928:	f004 f9f2 	bl	8004d10 <HAL_ETH_ReadData>
  }

  return p;
 800092c:	68fb      	ldr	r3, [r7, #12]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000d8 	.word	0x200000d8
 800093c:	20009144 	.word	0x20009144

08000940 <ethernetif_input>:
 * from the interface.
 *
 * @param argument the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void* argument )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <ethernetif_input+0x50>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000958:	4618      	mov	r0, r3
 800095a:	f00d f891 	bl	800da80 <osSemaphoreAcquire>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f5      	bne.n	8000950 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8000964:	68b8      	ldr	r0, [r7, #8]
 8000966:	f7ff ffd1 	bl	800090c <low_level_input>
 800096a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00a      	beq.n	8000988 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	4798      	blx	r3
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f015 ffac 	bl	80168e0 <pbuf_free>
          }
        }

      }while(p != NULL);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1ea      	bne.n	8000964 <ethernetif_input+0x24>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800098e:	e7df      	b.n	8000950 <ethernetif_input+0x10>
 8000990:	200000dc 	.word	0x200000dc

08000994 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <ethernetif_init+0x1c>
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <ethernetif_init+0x48>)
 80009a4:	f240 1287 	movw	r2, #391	; 0x187
 80009a8:	490d      	ldr	r1, [pc, #52]	; (80009e0 <ethernetif_init+0x4c>)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <ethernetif_init+0x50>)
 80009ac:	f01e f9ee 	bl	801ed8c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2273      	movs	r2, #115	; 0x73
 80009b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2274      	movs	r2, #116	; 0x74
 80009bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <ethernetif_init+0x54>)
 80009c4:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <ethernetif_init+0x58>)
 80009ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fdf3 	bl	80005b8 <low_level_init>

  return ERR_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08020324 	.word	0x08020324
 80009e0:	080203a0 	.word	0x080203a0
 80009e4:	080203b0 	.word	0x080203b0
 80009e8:	0801333d 	.word	0x0801333d
 80009ec:	080007ed 	.word	0x080007ed

080009f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80009fc:	68f9      	ldr	r1, [r7, #12]
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <pbuf_free_custom+0x34>)
 8000a00:	f015 f89a 	bl	8015b38 <memp_free_pool>

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <pbuf_free_custom+0x38>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d107      	bne.n	8000a1c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <pbuf_free_custom+0x38>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <pbuf_free_custom+0x3c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00d f884 	bl	800db24 <osSemaphoreRelease>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08024688 	.word	0x08024688
 8000a28:	200000d8 	.word	0x200000d8
 8000a2c:	200000dc 	.word	0x200000dc

08000a30 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a34:	f003 faaa 	bl	8003f8c <HAL_GetTick>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  */



  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]

  /* Configure PA1, PA2 , PA7 */
  GPIO_InitStructure.Pin =  GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000ab2:	2386      	movs	r3, #134	; 0x86
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000ac2:	230b      	movs	r3, #11
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4827      	ldr	r0, [pc, #156]	; (8000b6c <HAL_ETH_MspInit+0x12c>)
 8000ace:	f005 fc33 	bl	8006338 <HAL_GPIO_Init>

  /* Configure PB10, PB11, PB12 and PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13;
 8000ad2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4824      	ldr	r0, [pc, #144]	; (8000b70 <HAL_ETH_MspInit+0x130>)
 8000ae0:	f005 fc2a 	bl	8006338 <HAL_GPIO_Init>

  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000ae4:	2332      	movs	r3, #50	; 0x32
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <HAL_ETH_MspInit+0x134>)
 8000af0:	f005 fc22 	bl	8006338 <HAL_GPIO_Init>

  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2107      	movs	r1, #7
 8000af8:	203d      	movs	r0, #61	; 0x3d
 8000afa:	f003 fb53 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000afe:	203d      	movs	r0, #61	; 0x3d
 8000b00:	f003 fb6a 	bl	80041d8 <HAL_NVIC_EnableIRQ>

  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b28:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	; 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	58020000 	.word	0x58020000
 8000b70:	58020400 	.word	0x58020400
 8000b74:	58020800 	.word	0x58020800

08000b78 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_ETH_RxCpltCallback+0x1c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00c ffcd 	bl	800db24 <osSemaphoreRelease>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000dc 	.word	0x200000dc

08000b98 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_ETH_TxCpltCallback+0x1c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00c ffbd 	bl	800db24 <osSemaphoreRelease>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000e0 	.word	0x200000e0

08000bb8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f004 fe3d 	bl	8005840 <HAL_ETH_GetDMAError>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bcc:	2b80      	cmp	r3, #128	; 0x80
 8000bce:	d104      	bne.n	8000bda <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_ETH_ErrorCallback+0x2c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00c ffa5 	bl	800db24 <osSemaphoreRelease>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000dc 	.word	0x200000dc

08000be8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <ETH_PHY_IO_Init+0x10>)
 8000bee:	f004 fdcf 	bl	8005790 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20009144 	.word	0x20009144

08000bfc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <ETH_PHY_IO_ReadReg+0x30>)
 8000c20:	f004 fb20 	bl	8005264 <HAL_ETH_ReadPHYRegister>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	e000      	b.n	8000c32 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20009144 	.word	0x20009144

08000c40 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	68f9      	ldr	r1, [r7, #12]
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <ETH_PHY_IO_WriteReg+0x30>)
 8000c54:	f004 fb5a 	bl	800530c <HAL_ETH_WritePHYRegister>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	e000      	b.n	8000c66 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20009144 	.word	0x20009144

08000c74 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c78:	f003 f988 	bl	8003f8c <HAL_GetTick>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a0      	sub	sp, #128	; 0x80
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2264      	movs	r2, #100	; 0x64
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f01e f871 	bl	801ed7c <memset>
  int32_t PHYLinkState = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	677b      	str	r3, [r7, #116]	; 0x74
  struct netif *netif = (struct netif *) argument;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	66fb      	str	r3, [r7, #108]	; 0x6c

  for(;;)
  {

    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000cae:	483a      	ldr	r0, [pc, #232]	; (8000d98 <ethernet_link_thread+0x114>)
 8000cb0:	f001 f879 	bl	8001da6 <LAN8742_GetLinkState>
 8000cb4:	6738      	str	r0, [r7, #112]	; 0x70

    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00c      	beq.n	8000ce2 <ethernet_link_thread+0x5e>
 8000cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	dc09      	bgt.n	8000ce2 <ethernet_link_thread+0x5e>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 8000cce:	4833      	ldr	r0, [pc, #204]	; (8000d9c <ethernet_link_thread+0x118>)
 8000cd0:	f003 ff56 	bl	8004b80 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000cd6:	f015 f9bb 	bl	8016050 <netif_set_down>
      netif_set_link_down(netif);
 8000cda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000cdc:	f015 fa22 	bl	8016124 <netif_set_link_down>
 8000ce0:	e055      	b.n	8000d8e <ethernet_link_thread+0x10a>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <ethernet_link_thread+0x10a>
 8000cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	dd4b      	ble.n	8000d8e <ethernet_link_thread+0x10a>
 8000cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cf8:	3b02      	subs	r3, #2
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d82a      	bhi.n	8000d54 <ethernet_link_thread+0xd0>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <ethernet_link_thread+0x80>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d27 	.word	0x08000d27
 8000d0c:	08000d37 	.word	0x08000d37
 8000d10:	08000d47 	.word	0x08000d47
    {
      switch (PHYLinkState)
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1e:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d24:	e017      	b.n	8000d56 <ethernet_link_thread+0xd2>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000d2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d2e:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d34:	e00f      	b.n	8000d56 <ethernet_link_thread+0xd2>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d44:	e007      	b.n	8000d56 <ethernet_link_thread+0xd2>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d52:	e000      	b.n	8000d56 <ethernet_link_thread+0xd2>
      default:
        break;
 8000d54:	bf00      	nop
      }

      if(linkchanged)
 8000d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d018      	beq.n	8000d8e <ethernet_link_thread+0x10a>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	480e      	ldr	r0, [pc, #56]	; (8000d9c <ethernet_link_thread+0x118>)
 8000d64:	f004 fb26 	bl	80053b4 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8000d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d6a:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8000d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d6e:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <ethernet_link_thread+0x118>)
 8000d78:	f004 fcf0 	bl	800575c <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <ethernet_link_thread+0x118>)
 8000d7e:	f003 fe75 	bl	8004a6c <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000d82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000d84:	f015 f8f8 	bl	8015f78 <netif_set_up>
        netif_set_link_up(netif);
 8000d88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000d8a:	f015 f993 	bl	80160b4 <netif_set_link_up>
      }
    }

    osDelay(100);
 8000d8e:	2064      	movs	r0, #100	; 0x64
 8000d90:	f00c fcc3 	bl	800d71a <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000d94:	e78b      	b.n	8000cae <ethernet_link_thread+0x2a>
 8000d96:	bf00      	nop
 8000d98:	200091f4 	.word	0x200091f4
 8000d9c:	20009144 	.word	0x20009144

08000da0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <HAL_ETH_RxAllocateCallback+0x54>)
 8000daa:	f014 fe51 	bl	8015a50 <memp_malloc_pool>
 8000dae:	60f8      	str	r0, [r7, #12]
  if (p)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d014      	beq.n	8000de0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f103 0220 	add.w	r2, r3, #32
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_ETH_RxAllocateCallback+0x58>)
 8000dc4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	9201      	str	r2, [sp, #4]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2241      	movs	r2, #65	; 0x41
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f015 fbc7 	bl	801656c <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 8000dde:	e005      	b.n	8000dec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_ETH_RxAllocateCallback+0x5c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	08024688 	.word	0x08024688
 8000df8:	080009f1 	.word	0x080009f1
 8000dfc:	200000d8 	.word	0x200000d8

08000e00 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08d      	sub	sp, #52	; 0x34
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3b20      	subs	r3, #32
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8000e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8000e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e28:	2200      	movs	r2, #0
 8000e2a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8000e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e003      	b.n	8000e4a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e48:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e56:	e009      	b.n	8000e6c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	891a      	ldrh	r2, [r3, #8]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f2      	bne.n	8000e58 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	623a      	str	r2, [r7, #32]
 8000e78:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd1d      	ble.n	8000ebc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	f003 021f 	and.w	r2, r3, #31
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4413      	add	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e96:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_ETH_RxLinkCallback+0xcc>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3320      	adds	r3, #32
 8000ea2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	3b20      	subs	r3, #32
 8000ea8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dcf2      	bgt.n	8000e96 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb0:	f3bf 8f4f 	dsb	sy
}
 8000eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb6:	f3bf 8f6f 	isb	sy
}
 8000eba:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000ebc:	bf00      	nop
}
 8000ebe:	bf00      	nop
 8000ec0:	3734      	adds	r7, #52	; 0x34
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  pbuf_free((struct pbuf *)buff);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f015 fd01 	bl	80168e0 <pbuf_free>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <http_server_serve>:
  * @brief serve tcp connection
  * @param conn: pointer on connection structure
  * @retval None
  */
static void http_server_serve(struct netconn *conn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;

  /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8000ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f00d ffa2 	bl	800ee40 <netconn_recv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (recv_err == ERR_OK)
 8000f02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 80bf 	bne.w	800108a <http_server_serve+0x1a2>
  {
    if (netconn_err(conn) == ERR_OK)
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f00e f920 	bl	800f152 <netconn_err>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 80b8 	bne.w	800108a <http_server_serve+0x1a2>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1c:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000f20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00f fd23 	bl	8010970 <netbuf_data>

      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	f240 80ac 	bls.w	800108a <http_server_serve+0x1a2>
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	2205      	movs	r2, #5
 8000f36:	495a      	ldr	r1, [pc, #360]	; (80010a0 <http_server_serve+0x1b8>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f01e f82c 	bl	801ef96 <strncmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 80a2 	bne.w	800108a <http_server_serve+0x1a2>
      {
        /* Check if request to get ST.gif */
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	221b      	movs	r2, #27
 8000f4a:	4956      	ldr	r1, [pc, #344]	; (80010a4 <http_server_serve+0x1bc>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01e f822 	bl	801ef96 <strncmp>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d114      	bne.n	8000f82 <http_server_serve+0x9a>
        {
          fs_open(&file, "/STM32H7xx_files/ST.gif");
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4952      	ldr	r1, [pc, #328]	; (80010a8 <http_server_serve+0x1c0>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f01d f8be 	bl	801e0e0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f00d ffdf 	bl	800ef34 <netconn_write_partly>
          fs_close(&file);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f01d f8ee 	bl	801e15c <fs_close>
 8000f80:	e083      	b.n	800108a <http_server_serve+0x1a2>
        }
        /* Check if request to get stm32.jpg */
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	221e      	movs	r2, #30
 8000f86:	4949      	ldr	r1, [pc, #292]	; (80010ac <http_server_serve+0x1c4>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f01e f804 	bl	801ef96 <strncmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d114      	bne.n	8000fbe <http_server_serve+0xd6>
        {
          fs_open(&file, "/STM32H7xx_files/stm32.jpg");
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4945      	ldr	r1, [pc, #276]	; (80010b0 <http_server_serve+0x1c8>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f01d f8a0 	bl	801e0e0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f00d ffc1 	bl	800ef34 <netconn_write_partly>
          fs_close(&file);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f01d f8d0 	bl	801e15c <fs_close>
 8000fbc:	e065      	b.n	800108a <http_server_serve+0x1a2>
        }
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	221d      	movs	r2, #29
 8000fc2:	493c      	ldr	r1, [pc, #240]	; (80010b4 <http_server_serve+0x1cc>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f01d ffe6 	bl	801ef96 <strncmp>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d114      	bne.n	8000ffa <http_server_serve+0x112>
        {
          /* Check if request to get ST logo.jpg */
          fs_open(&file, "/STM32H7xx_files/logo.jpg");
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4938      	ldr	r1, [pc, #224]	; (80010b8 <http_server_serve+0x1d0>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f01d f882 	bl	801e0e0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000fdc:	68f9      	ldr	r1, [r7, #12]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f00d ffa3 	bl	800ef34 <netconn_write_partly>
          fs_close(&file);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f01d f8b2 	bl	801e15c <fs_close>
 8000ff8:	e047      	b.n	800108a <http_server_serve+0x1a2>
        }
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	2218      	movs	r2, #24
 8000ffe:	492f      	ldr	r1, [pc, #188]	; (80010bc <http_server_serve+0x1d4>)
 8001000:	4618      	mov	r0, r3
 8001002:	f01d ffc8 	bl	801ef96 <strncmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <http_server_serve+0x12c>
        {
           /* Load dynamic page */
           DynWebPage(conn);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8a9 	bl	8001164 <DynWebPage>
 8001012:	e03a      	b.n	800108a <http_server_serve+0x1a2>
        }
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2213      	movs	r2, #19
 8001018:	4929      	ldr	r1, [pc, #164]	; (80010c0 <http_server_serve+0x1d8>)
 800101a:	4618      	mov	r0, r3
 800101c:	f01d ffbb 	bl	801ef96 <strncmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <http_server_serve+0x150>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	2206      	movs	r2, #6
 800102a:	4926      	ldr	r1, [pc, #152]	; (80010c4 <http_server_serve+0x1dc>)
 800102c:	4618      	mov	r0, r3
 800102e:	f01d ffb2 	bl	801ef96 <strncmp>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d114      	bne.n	8001062 <http_server_serve+0x17a>
        {
          /* Load STM32H7xx page */
          fs_open(&file, "/STM32H7xx.html");
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4922      	ldr	r1, [pc, #136]	; (80010c8 <http_server_serve+0x1e0>)
 800103e:	4618      	mov	r0, r3
 8001040:	f01d f84e 	bl	801e0e0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	461a      	mov	r2, r3
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f00d ff6f 	bl	800ef34 <netconn_write_partly>
          fs_close(&file);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4618      	mov	r0, r3
 800105c:	f01d f87e 	bl	801e15c <fs_close>
 8001060:	e013      	b.n	800108a <http_server_serve+0x1a2>
        }
        else
        {
          /* Load Error page */
          fs_open(&file, "/404.html");
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4919      	ldr	r1, [pc, #100]	; (80010cc <http_server_serve+0x1e4>)
 8001068:	4618      	mov	r0, r3
 800106a:	f01d f839 	bl	801e0e0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	461a      	mov	r2, r3
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2300      	movs	r3, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f00d ff5a 	bl	800ef34 <netconn_write_partly>
          fs_close(&file);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4618      	mov	r0, r3
 8001086:	f01d f869 	bl	801e15c <fs_close>
        }
      }
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f00e f854 	bl	800f138 <netconn_close>

  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 8001090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001092:	4618      	mov	r0, r3
 8001094:	f00f fc4c 	bl	8010930 <netbuf_delete>
}
 8001098:	bf00      	nop
 800109a:	3730      	adds	r7, #48	; 0x30
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	080203d8 	.word	0x080203d8
 80010a4:	080203e0 	.word	0x080203e0
 80010a8:	080203fc 	.word	0x080203fc
 80010ac:	08020414 	.word	0x08020414
 80010b0:	08020434 	.word	0x08020434
 80010b4:	08020450 	.word	0x08020450
 80010b8:	08020470 	.word	0x08020470
 80010bc:	0802048c 	.word	0x0802048c
 80010c0:	080204a8 	.word	0x080204a8
 80010c4:	080204bc 	.word	0x080204bc
 80010c8:	080204c4 	.word	0x080204c4
 80010cc:	080204d4 	.word	0x080204d4

080010d0 <http_server_netconn_thread>:
  * @brief  http server thread
  * @param arg: pointer on argument(not used here)
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2010      	movs	r0, #16
 80010de:	f00d fb89 	bl	800e7f4 <netconn_new_with_proto_and_callback>
 80010e2:	6178      	str	r0, [r7, #20]

  if (conn!= NULL)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d023      	beq.n	8001132 <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 80010ea:	2250      	movs	r2, #80	; 0x50
 80010ec:	2100      	movs	r1, #0
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f00d fc3a 	bl	800e968 <netconn_bind>
 80010f4:	4603      	mov	r3, r0
 80010f6:	74fb      	strb	r3, [r7, #19]

    if (err == ERR_OK)
 80010f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d118      	bne.n	8001132 <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8001100:	21ff      	movs	r1, #255	; 0xff
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f00d fc68 	bl	800e9d8 <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f00d fc8e 	bl	800ea30 <netconn_accept>
 8001114:	4603      	mov	r3, r0
 8001116:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8001118:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f3      	bne.n	8001108 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fee0 	bl	8000ee8 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f00d fc00 	bl	800e930 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8001130:	e7ea      	b.n	8001108 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, 4 * DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8001142:	2320      	movs	r3, #32
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	2200      	movs	r2, #0
 800114c:	4903      	ldr	r1, [pc, #12]	; (800115c <http_server_netconn_init+0x20>)
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <http_server_netconn_init+0x24>)
 8001150:	f01c ff88 	bl	801e064 <sys_thread_new>
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	080010d1 	.word	0x080010d1
 8001160:	080204e0 	.word	0x080204e0

08001164 <DynWebPage>:
  *         running tasks and the number of page hits.
  * @param  conn pointer on connection structure
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800116a:	af02      	add	r7, sp, #8
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	3304      	adds	r3, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f01d fdf6 	bl	801ed7c <memset>

  /* Update the hit count */
  nPageHits++;
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <DynWebPage+0x19c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <DynWebPage+0x19c>)
 8001198:	6013      	str	r3, [r2, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <DynWebPage+0x19c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4957      	ldr	r1, [pc, #348]	; (8001304 <DynWebPage+0x1a0>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f01d febe 	bl	801ef28 <siprintf>
  strcat(PAGE_BODY, pagehits);
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f01d fed6 	bl	801ef68 <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f8af 	bl	8000324 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	4413      	add	r3, r2
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <DynWebPage+0x1a4>)
 80011d2:	4615      	mov	r5, r2
 80011d4:	469c      	mov	ip, r3
 80011d6:	f105 0e20 	add.w	lr, r5, #32
 80011da:	4664      	mov	r4, ip
 80011dc:	462e      	mov	r6, r5
 80011de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e0:	6020      	str	r0, [r4, #0]
 80011e2:	6061      	str	r1, [r4, #4]
 80011e4:	60a2      	str	r2, [r4, #8]
 80011e6:	60e3      	str	r3, [r4, #12]
 80011e8:	3510      	adds	r5, #16
 80011ea:	f10c 0c10 	add.w	ip, ip, #16
 80011ee:	4575      	cmp	r5, lr
 80011f0:	d1f3      	bne.n	80011da <DynWebPage+0x76>
 80011f2:	4664      	mov	r4, ip
 80011f4:	462b      	mov	r3, r5
 80011f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011f8:	6020      	str	r0, [r4, #0]
 80011fa:	6061      	str	r1, [r4, #4]
 80011fc:	60a2      	str	r2, [r4, #8]
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	81a2      	strh	r2, [r4, #12]
 8001204:	73a3      	strb	r3, [r4, #14]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f88a 	bl	8000324 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	4413      	add	r3, r2
 800121a:	4a3c      	ldr	r2, [pc, #240]	; (800130c <DynWebPage+0x1a8>)
 800121c:	4614      	mov	r4, r2
 800121e:	469c      	mov	ip, r3
 8001220:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001224:	4665      	mov	r5, ip
 8001226:	4626      	mov	r6, r4
 8001228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800122a:	6028      	str	r0, [r5, #0]
 800122c:	6069      	str	r1, [r5, #4]
 800122e:	60aa      	str	r2, [r5, #8]
 8001230:	60eb      	str	r3, [r5, #12]
 8001232:	3410      	adds	r4, #16
 8001234:	f10c 0c10 	add.w	ip, ip, #16
 8001238:	4574      	cmp	r4, lr
 800123a:	d1f3      	bne.n	8001224 <DynWebPage+0xc0>
 800123c:	4663      	mov	r3, ip
 800123e:	4622      	mov	r2, r4
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	6018      	str	r0, [r3, #0]
 8001244:	7912      	ldrb	r2, [r2, #4]
 8001246:	711a      	strb	r2, [r3, #4]

  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f869 	bl	8000324 <strlen>
 8001252:	4602      	mov	r2, r0
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4413      	add	r3, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f00b fcae 	bl	800cbbc <vTaskList>
  strcat((char *)PAGE_BODY, "<br><br>--------------------------------------------");
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f85d 	bl	8000324 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4413      	add	r3, r2
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <DynWebPage+0x1ac>)
 8001276:	4614      	mov	r4, r2
 8001278:	469c      	mov	ip, r3
 800127a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800127e:	4665      	mov	r5, ip
 8001280:	4626      	mov	r6, r4
 8001282:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001284:	6028      	str	r0, [r5, #0]
 8001286:	6069      	str	r1, [r5, #4]
 8001288:	60aa      	str	r2, [r5, #8]
 800128a:	60eb      	str	r3, [r5, #12]
 800128c:	3410      	adds	r4, #16
 800128e:	f10c 0c10 	add.w	ip, ip, #16
 8001292:	4574      	cmp	r4, lr
 8001294:	d1f3      	bne.n	800127e <DynWebPage+0x11a>
 8001296:	4663      	mov	r3, ip
 8001298:	4622      	mov	r2, r4
 800129a:	6810      	ldr	r0, [r2, #0]
 800129c:	6018      	str	r0, [r3, #0]
 800129e:	7912      	ldrb	r2, [r2, #4]
 80012a0:	711a      	strb	r2, [r3, #4]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f83c 	bl	8000324 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4413      	add	r3, r2
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <DynWebPage+0x1b0>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	4611      	mov	r1, r2
 80012bc:	2348      	movs	r3, #72	; 0x48
 80012be:	461a      	mov	r2, r3
 80012c0:	f01d fd34 	bl	801ed2c <memcpy>

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 80012c4:	1d38      	adds	r0, r7, #4
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	f240 624a 	movw	r2, #1610	; 0x64a
 80012d0:	4911      	ldr	r1, [pc, #68]	; (8001318 <DynWebPage+0x1b4>)
 80012d2:	6800      	ldr	r0, [r0, #0]
 80012d4:	f00d fe2e 	bl	800ef34 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f821 	bl	8000324 <strlen>
 80012e2:	4602      	mov	r2, r0
 80012e4:	f107 0118 	add.w	r1, r7, #24
 80012e8:	1d38      	adds	r0, r7, #4
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	6800      	ldr	r0, [r0, #0]
 80012f2:	f00d fe1f 	bl	800ef34 <netconn_write_partly>
}
 80012f6:	bf00      	nop
 80012f8:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	200000e4 	.word	0x200000e4
 8001304:	080204e8 	.word	0x080204e8
 8001308:	080204ec 	.word	0x080204ec
 800130c:	0802051c 	.word	0x0802051c
 8001310:	08020554 	.word	0x08020554
 8001314:	0802058c 	.word	0x0802058c
 8001318:	08024694 	.word	0x08024694

0800131c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 8001320:	f000 f95a 	bl	80015d8 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001324:	f000 f9d0 	bl	80016c8 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001328:	f002 fdd8 	bl	8003edc <HAL_Init>

  /* Configure the system clock to 520 MHz */
  SystemClock_Config();
 800132c:	f000 f8bc 	bl	80014a8 <SystemClock_Config>

  /* Configure the LCD ...*/
  BSP_Config();
 8001330:	f000 f834 	bl	800139c <BSP_Config>

  /* Init thread */
  osKernelInitialize();
 8001334:	f00c f8d2 	bl	800d4dc <osKernelInitialize>

  attr.name = "Start";
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <main+0x48>)
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <main+0x4c>)
 800133c:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <main+0x48>)
 8001340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001344:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <main+0x48>)
 8001348:	2218      	movs	r2, #24
 800134a:	619a      	str	r2, [r3, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <main+0x48>)
 800134e:	2100      	movs	r1, #0
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <main+0x50>)
 8001352:	f00c f922 	bl	800d59a <osThreadNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <main+0x54>)
 800135a:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800135c:	f00c f8e2 	bl	800d524 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 8001360:	e7fe      	b.n	8001360 <main+0x44>
 8001362:	bf00      	nop
 8001364:	20009288 	.word	0x20009288
 8001368:	080205d4 	.word	0x080205d4
 800136c:	08001375 	.word	0x08001375
 8001370:	20009284 	.word	0x20009284

08001374 <StartThread>:
  * @brief  Start Thread
  * @param  argument not used
  * @retval None
  */
void StartThread(void* argument)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f00f fcae 	bl	8010ce0 <tcpip_init>

  /* Initialize the LwIP stack */
  Netif_Config();
 8001384:	f000 f830 	bl	80013e8 <Netif_Config>

  /* Initialize webserver demo */
  http_server_netconn_init();
 8001388:	f7ff fed8 	bl	800113c <http_server_netconn_init>

  for( ;; )
  {
    /* Delete the Init Thread */
    osThreadTerminate(StartHandle);
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <StartThread+0x24>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f00c f995 	bl	800d6c0 <osThreadTerminate>
 8001396:	e7f9      	b.n	800138c <StartThread+0x18>
 8001398:	20009284 	.word	0x20009284

0800139c <BSP_Config>:
  * @brief  BSP Configuration
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
#ifdef USE_LCD

  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2000      	movs	r0, #0
 80013a4:	f001 f9f2 	bl	800278c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <BSP_Config+0x34>)
 80013aa:	f01d f921 	bl	801e5f0 <UTIL_LCD_SetFuncDriver>

  /* Initialize LCD Log module */
  UTIL_LCD_TRACE_Init();
 80013ae:	f01c fedf 	bl	801e170 <UTIL_LCD_TRACE_Init>

  /* Show Header and Footer texts */
  UTIL_LCD_TRACE_SetHeader((uint8_t *)"Webserver Application");
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <BSP_Config+0x38>)
 80013b4:	f01c ff42 	bl	801e23c <UTIL_LCD_TRACE_SetHeader>
  UTIL_LCD_TRACE_SetFooter((uint8_t *)"STM32H735G-DK board");
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <BSP_Config+0x3c>)
 80013ba:	f01c ff81 	bl	801e2c0 <UTIL_LCD_TRACE_SetFooter>

  LCD_UsrTrace("  State: Ethernet Initialization ...\n");
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <BSP_Config+0x40>)
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <BSP_Config+0x44>)
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <BSP_Config+0x48>)
 80013c6:	f01d fd67 	bl	801ee98 <puts>
#else
  BSP_LED_Init(LED1);
  BSP_LED_Init(LED2);
#endif
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08024d64 	.word	0x08024d64
 80013d4:	080205dc 	.word	0x080205dc
 80013d8:	080205f4 	.word	0x080205f4
 80013dc:	20010398 	.word	0x20010398
 80013e0:	ff000080 	.word	0xff000080
 80013e4:	08020608 	.word	0x08020608

080013e8 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	f107 0208 	add.w	r2, r7, #8
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <Netif_Config+0x94>)
 8001406:	9002      	str	r0, [sp, #8]
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <Netif_Config+0x98>)
 800140a:	9001      	str	r0, [sp, #4]
 800140c:	2000      	movs	r0, #0
 800140e:	9000      	str	r0, [sp, #0]
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <Netif_Config+0x9c>)
 8001412:	f014 fbe7 	bl	8015be4 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <Netif_Config+0x9c>)
 8001418:	f014 fd9e 	bl	8015f58 <netif_set_default>

  ethernet_link_status_updated(&gnetif);
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <Netif_Config+0x9c>)
 800141e:	f7ff f809 	bl	8000434 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001422:	4919      	ldr	r1, [pc, #100]	; (8001488 <Netif_Config+0xa0>)
 8001424:	4817      	ldr	r0, [pc, #92]	; (8001484 <Netif_Config+0x9c>)
 8001426:	f014 fead 	bl	8016184 <netif_set_link_callback>

  attr.name = "EthLink";
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <Netif_Config+0xa4>)
 800142c:	4a18      	ldr	r2, [pc, #96]	; (8001490 <Netif_Config+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <Netif_Config+0xa4>)
 8001432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001436:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <Netif_Config+0xa4>)
 800143a:	2218      	movs	r2, #24
 800143c:	619a      	str	r2, [r3, #24]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <Netif_Config+0xa4>)
 8001440:	4910      	ldr	r1, [pc, #64]	; (8001484 <Netif_Config+0x9c>)
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <Netif_Config+0xac>)
 8001444:	f00c f8a9 	bl	800d59a <osThreadNew>
 8001448:	4603      	mov	r3, r0
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <Netif_Config+0xb0>)
 800144c:	6013      	str	r3, [r2, #0]
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <Netif_Config+0xa4>)
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <Netif_Config+0xb4>)
 8001452:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <Netif_Config+0xa4>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityBelowNormal;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <Netif_Config+0xa4>)
 800145e:	2210      	movs	r2, #16
 8001460:	619a      	str	r2, [r3, #24]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <Netif_Config+0xa4>)
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <Netif_Config+0x9c>)
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <Netif_Config+0xb8>)
 8001468:	f00c f897 	bl	800d59a <osThreadNew>
 800146c:	4603      	mov	r3, r0
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <Netif_Config+0xbc>)
 8001470:	6013      	str	r3, [r2, #0]
#endif
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08010bf1 	.word	0x08010bf1
 8001480:	08000995 	.word	0x08000995
 8001484:	2000924c 	.word	0x2000924c
 8001488:	08000435 	.word	0x08000435
 800148c:	20009288 	.word	0x20009288
 8001490:	08020630 	.word	0x08020630
 8001494:	08000c85 	.word	0x08000c85
 8001498:	200092b0 	.word	0x200092b0
 800149c:	08020638 	.word	0x08020638
 80014a0:	0800046d 	.word	0x0800046d
 80014a4:	200092ac 	.word	0x200092ac

080014a8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0a0      	sub	sp, #128	; 0x80
 80014ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014b4:	2004      	movs	r0, #4
 80014b6:	f006 fc91 	bl	8007ddc <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <SystemClock_Config+0x128>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <SystemClock_Config+0x128>)
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <SystemClock_Config+0x128>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d6:	bf00      	nop
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <SystemClock_Config+0x128>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e4:	d1f8      	bne.n	80014d8 <SystemClock_Config+0x30>

  /* Enable D2 domain SRAM1 Clock (0x30000000 AXI)*/
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <SystemClock_Config+0x12c>)
 80014e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014ec:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <SystemClock_Config+0x12c>)
 80014ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014f2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <SystemClock_Config+0x12c>)
 80014f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38

  RCC_OscInitStruct.PLL.PLLM = 5;
 800151e:	2305      	movs	r3, #5
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001522:	2368      	movs	r3, #104	; 0x68
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001536:	2300      	movs	r3, #0
 8001538:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800153a:	2308      	movs	r3, #8
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fca4 	bl	8007e90 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(ret != HAL_OK)
 800154e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001556:	f000 f925 	bl	80017a4 <Error_Handler>
  }

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800155a:	233f      	movs	r3, #63	; 0x3f
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001566:	2308      	movs	r3, #8
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	67bb      	str	r3, [r7, #120]	; 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 800157c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001580:	2103      	movs	r1, #3
 8001582:	4618      	mov	r0, r3
 8001584:	f007 f830 	bl	80085e8 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(ret != HAL_OK)
 800158e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001596:	f000 f905 	bl	80017a4 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <SystemClock_Config+0x12c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <SystemClock_Config+0x12c>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <SystemClock_Config+0x12c>)
 80015a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <SystemClock_Config+0x12c>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <SystemClock_Config+0x12c>)
 80015b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  HAL_EnableCompensationCell();
 80015c4:	f002 fd26 	bl	8004014 <HAL_EnableCompensationCell>
}
 80015c8:	bf00      	nop
 80015ca:	3780      	adds	r7, #128	; 0x80
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58024800 	.word	0x58024800
 80015d4:	58024400 	.word	0x58024400

080015d8 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80015de:	f002 fe09 	bl	80041f4 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015ea:	231f      	movs	r3, #31
 80015ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015ee:	2300      	movs	r3, #0
 80015f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015fe:	2300      	movs	r3, #0
 8001600:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001602:	2300      	movs	r3, #0
 8001604:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001606:	2387      	movs	r3, #135	; 0x87
 8001608:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	733b      	strb	r3, [r7, #12]
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fe27 	bl	8004264 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800161a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800161e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001620:	2309      	movs	r3, #9
 8001622:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001624:	2303      	movs	r3, #3
 8001626:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001634:	2301      	movs	r3, #1
 8001636:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001638:	2300      	movs	r3, #0
 800163a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001644:	463b      	mov	r3, r7
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fe0c 	bl	8004264 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800164c:	2301      	movs	r3, #1
 800164e:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MPU_Config+0xec>)
 8001652:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001654:	230d      	movs	r3, #13
 8001656:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001658:	2303      	movs	r3, #3
 800165a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001664:	2301      	movs	r3, #1
 8001666:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001668:	2302      	movs	r3, #2
 800166a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800166c:	2301      	movs	r3, #1
 800166e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001670:	2300      	movs	r3, #0
 8001672:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001678:	463b      	mov	r3, r7
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fdf2 	bl	8004264 <HAL_MPU_ConfigRegion>

#ifdef USE_LCD
/* Configure the MPU attributes as WT for OctoSPI RAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = LCD_LAYER_0_ADDRESS;
 8001684:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001688:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800168a:	2317      	movs	r3, #23
 800168c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800168e:	2303      	movs	r3, #3
 8001690:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001696:	2301      	movs	r3, #1
 8001698:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800169e:	2303      	movs	r3, #3
 80016a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fdd7 	bl	8004264 <HAL_MPU_ConfigRegion>
#endif

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016b6:	2004      	movs	r0, #4
 80016b8:	f002 fdb4 	bl	8004224 <HAL_MPU_Enable>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	30004000 	.word	0x30004000

080016c8 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11b      	bne.n	8001712 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80016da:	f3bf 8f4f 	dsb	sy
}
 80016de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016e0:	f3bf 8f6f 	isb	sy
}
 80016e4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016ee:	f3bf 8f4f 	dsb	sy
}
 80016f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016f4:	f3bf 8f6f 	isb	sy
}
 80016f8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001706:	f3bf 8f4f 	dsb	sy
}
 800170a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800170c:	f3bf 8f6f 	isb	sy
}
 8001710:	e000      	b.n	8001714 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001712:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d138      	bne.n	8001792 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 8001722:	2200      	movs	r2, #0
 8001724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001728:	f3bf 8f4f 	dsb	sy
}
 800172c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 8001730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001734:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	0b5b      	lsrs	r3, r3, #13
 800173a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800173e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001748:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001752:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001758:	4911      	ldr	r1, [pc, #68]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 800175a:	4313      	orrs	r3, r2
 800175c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ef      	bne.n	800174a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e5      	bne.n	8001740 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
}
 8001778:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <CPU_CACHE_Enable+0xd8>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001786:	f3bf 8f4f 	dsb	sy
}
 800178a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800178c:	f3bf 8f6f 	isb	sy
}
 8001790:	e000      	b.n	8001794 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001792:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x4>
	...

080017ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	d827      	bhi.n	800180a <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017ba:	2200      	movs	r2, #0
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	2036      	movs	r0, #54	; 0x36
 80017c0:	f002 fcf0 	bl	80041a4 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c4:	2036      	movs	r0, #54	; 0x36
 80017c6:	f002 fd07 	bl	80041d8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_InitTick+0xc4>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_InitTick+0xc8>)
 80017d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d6:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_InitTick+0xc8>)
 80017d8:	f043 0310 	orr.w	r3, r3, #16
 80017dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_InitTick+0xc8>)
 80017e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ee:	f107 0210 	add.w	r2, r7, #16
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f007 fa81 	bl	8008d00 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <HAL_InitTick+0x6a>
 8001808:	e001      	b.n	800180e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e02b      	b.n	8001866 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800180e:	f007 fa4b 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 8001812:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001816:	f007 fa47 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800181a:	4603      	mov	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <HAL_InitTick+0xcc>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	3b01      	subs	r3, #1
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_InitTick+0xd0>)
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_InitTick+0xd4>)
 8001832:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_InitTick+0xd0>)
 8001836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183a:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_InitTick+0xd0>)
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_InitTick+0xd0>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_InitTick+0xd0>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <HAL_InitTick+0xd0>)
 8001850:	f008 faf6 	bl	8009e40 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d104      	bne.n	8001864 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <HAL_InitTick+0xd0>)
 800185c:	f008 fb52 	bl	8009f04 <HAL_TIM_Base_Start_IT>
 8001860:	4603      	mov	r3, r0
 8001862:	e000      	b.n	8001866 <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3740      	adds	r7, #64	; 0x40
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000024 	.word	0x20000024
 8001874:	58024400 	.word	0x58024400
 8001878:	431bde83 	.word	0x431bde83
 800187c:	200000e8 	.word	0x200000e8
 8001880:	40001000 	.word	0x40001000

08001884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800188c:	f002 fb6a 	bl	8003f64 <HAL_IncTick>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM6_DAC_IRQHandler+0x10>)
 800189e:	f008 fbb7 	bl	800a010 <HAL_TIM_IRQHandler>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000e8 	.word	0x200000e8

080018ac <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <ETH_IRQHandler+0x10>)
 80018e6:	f003 fb9b 	bl	8005020 <HAL_ETH_IRQHandler>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20009144 	.word	0x20009144

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190e:	f01d f9d5 	bl	801ecbc <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
	return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001936:	e7fe      	b.n	8001936 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
	}

return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f01c fce1 	bl	801e354 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
	}
	return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f01d f93a 	bl	801ecbc <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20020000 	.word	0x20020000
 8001a74:	00001000 	.word	0x00001000
 8001a78:	20000134 	.word	0x20000134
 8001a7c:	20013e00 	.word	0x20013e00

08001a80 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e02c      	b.n	8001af2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	891a      	ldrh	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <FT5336_RegisterBusIO+0x7c>)
 8001acc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <FT5336_RegisterBusIO+0x80>)
 8001ad2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4798      	blx	r3
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	e002      	b.n	8001af2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	08001b25 	.word	0x08001b25
 8001b00:	08001b59 	.word	0x08001b59

08001b04 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3318      	adds	r3, #24
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f850 	bl	8001bba <ft5336_chip_id>
 8001b1a:	4603      	mov	r3, r0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	72fb      	strb	r3, [r7, #11]
 8001b34:	4613      	mov	r3, r2
 8001b36:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	691c      	ldr	r4, [r3, #16]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	8918      	ldrh	r0, [r3, #8]
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	b299      	uxth	r1, r3
 8001b48:	893b      	ldrh	r3, [r7, #8]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	47a0      	blx	r4
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	72fb      	strb	r3, [r7, #11]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	68dc      	ldr	r4, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	8918      	ldrh	r0, [r3, #8]
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	47a0      	blx	r4
 8001b82:	4603      	mov	r3, r0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}

08001b8c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	460b      	mov	r3, r1
 8001b9a:	72fb      	strb	r3, [r7, #11]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685c      	ldr	r4, [r3, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	893b      	ldrh	r3, [r7, #8]
 8001baa:	7af9      	ldrb	r1, [r7, #11]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	47a0      	blx	r4
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}

08001bba <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	21a8      	movs	r1, #168	; 0xa8
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffde 	bl	8001b8c <ft5336_read_reg>
 8001bd0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <LAN8742_RegisterBusIO+0x28>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <LAN8742_RegisterBusIO+0x28>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <LAN8742_RegisterBusIO+0x28>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1e:	e014      	b.n	8001c4a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d17c      	bne.n	8001d70 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e01c      	b.n	8001cca <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f107 0208 	add.w	r2, r7, #8
 8001c98:	2112      	movs	r1, #18
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	4798      	blx	r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da03      	bge.n	8001cac <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001ca4:	f06f 0304 	mvn.w	r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001caa:	e00b      	b.n	8001cc4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d105      	bne.n	8001cc4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
         break;
 8001cc2:	e005      	b.n	8001cd0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	d9df      	bls.n	8001c90 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b1f      	cmp	r3, #31
 8001cd6:	d902      	bls.n	8001cde <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001cd8:	f06f 0302 	mvn.w	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d145      	bne.n	8001d70 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6810      	ldr	r0, [r2, #0]
 8001cec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4798      	blx	r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db37      	blt.n	8001d6a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6810      	ldr	r0, [r2, #0]
 8001d02:	f107 0208 	add.w	r2, r7, #8
 8001d06:	2100      	movs	r1, #0
 8001d08:	4798      	blx	r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db28      	blt.n	8001d62 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4798      	blx	r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d1a:	e01c      	b.n	8001d56 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d2e:	d80e      	bhi.n	8001d4e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6810      	ldr	r0, [r2, #0]
 8001d38:	f107 0208 	add.w	r2, r7, #8
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4798      	blx	r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da07      	bge.n	8001d56 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d46:	f06f 0304 	mvn.w	r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
                 break;
 8001d4c:	e010      	b.n	8001d70 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d4e:	f06f 0301 	mvn.w	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
               break;
 8001d54:	e00c      	b.n	8001d70 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1dd      	bne.n	8001d1c <LAN8742_Init+0xc6>
 8001d60:	e006      	b.n	8001d70 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d62:	f06f 0304 	mvn.w	r3, #4
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e002      	b.n	8001d70 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001d6a:	f06f 0303 	mvn.w	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d112      	bne.n	8001d9c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4798      	blx	r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001d80:	bf00      	nop
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d94:	d9f5      	bls.n	8001d82 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 }
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6810      	ldr	r0, [r2, #0]
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4798      	blx	r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da02      	bge.n	8001dce <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dc8:	f06f 0304 	mvn.w	r3, #4
 8001dcc:	e06e      	b.n	8001eac <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6810      	ldr	r0, [r2, #0]
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4798      	blx	r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da02      	bge.n	8001dea <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001de4:	f06f 0304 	mvn.w	r3, #4
 8001de8:	e060      	b.n	8001eac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001df4:	2301      	movs	r3, #1
 8001df6:	e059      	b.n	8001eac <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6810      	ldr	r0, [r2, #0]
 8001e00:	f107 020c 	add.w	r2, r7, #12
 8001e04:	2100      	movs	r1, #0
 8001e06:	4798      	blx	r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da02      	bge.n	8001e14 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e0e:	f06f 0304 	mvn.w	r3, #4
 8001e12:	e04b      	b.n	8001eac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11b      	bne.n	8001e56 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <LAN8742_GetLinkState+0x90>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e32:	2302      	movs	r3, #2
 8001e34:	e03a      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e033      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e02c      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e52:	2305      	movs	r3, #5
 8001e54:	e02a      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6810      	ldr	r0, [r2, #0]
 8001e5e:	f107 020c 	add.w	r2, r7, #12
 8001e62:	211f      	movs	r1, #31
 8001e64:	4798      	blx	r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da02      	bge.n	8001e72 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e6c:	f06f 0304 	mvn.w	r3, #4
 8001e70:	e01c      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	e015      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 031c 	and.w	r3, r3, #28
 8001e86:	2b18      	cmp	r3, #24
 8001e88:	d101      	bne.n	8001e8e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 031c 	and.w	r3, r3, #28
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d101      	bne.n	8001e9c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e007      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 031c 	and.w	r3, r3, #28
 8001ea2:	2b14      	cmp	r3, #20
 8001ea4:	d101      	bne.n	8001eaa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e000      	b.n	8001eac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001eaa:	2305      	movs	r3, #5
    }				
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <S70KL1281_EnableMemoryMappedMode>:
  * @brief  Enable memory mapped mode for the OSPI memory.
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t S70KL1281_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  OSPI_HyperbusCmdTypeDef  sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* OctoSPI Hyperbus command configuration */
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8001ec0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ec4:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8001eca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData       = 1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	623b      	str	r3, [r7, #32]

  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f005 fd70 	bl	80079c4 <HAL_OSPI_HyperbusCmd>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <S70KL1281_EnableMemoryMappedMode+0x3c>
  {
    return S70KL1281_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eee:	e00e      	b.n	8001f0e <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f005 feda 	bl	8007cb4 <HAL_OSPI_MemoryMapped>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <S70KL1281_EnableMemoryMappedMode+0x58>
  {
    return S70KL1281_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	e000      	b.n	8001f0e <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  return S70KL1281_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <S70KL1281_ReadCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Register value pointer
  * @retval error status
  */
int32_t S70KL1281_ReadCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t *Value)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b088      	sub	sp, #32
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCmdTypeDef  sCommand;

  /* Initialize the read command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 8001f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f24:	60fb      	str	r3, [r7, #12]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8001f26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f2a:	617b      	str	r3, [r7, #20]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	613b      	str	r3, [r7, #16]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8001f32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f36:	61fb      	str	r3, [r7, #28]
  sCommand.NbData       = 2U;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f005 fd3c 	bl	80079c4 <HAL_OSPI_HyperbusCmd>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <S70KL1281_ReadCfgReg0+0x42>
  {
    return S70KL1281_ERROR;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f56:	e00c      	b.n	8001f72 <S70KL1281_ReadCfgReg0+0x5c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f005 fe04 	bl	8007b6c <HAL_OSPI_Receive>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <S70KL1281_ReadCfgReg0+0x5a>
  {
    return S70KL1281_ERROR;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6e:	e000      	b.n	8001f72 <S70KL1281_ReadCfgReg0+0x5c>
  }

  return S70KL1281_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <S70KL1281_WriteCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t S70KL1281_WriteCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t Value, uint32_t LatencyMode, uint32_t InitialLatency)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b08e      	sub	sp, #56	; 0x38
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	460b      	mov	r3, r1
 8001f88:	817b      	strh	r3, [r7, #10]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  OSPI_HyperbusCmdTypeDef sCommand;

  /* Reconfigure peripheral as no write latency to write in registers */
  sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sHyperbusCfg.AccessTime       = InitialLatency;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001f92:	2302      	movs	r3, #2
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  sHyperbusCfg.LatencyMode      = LatencyMode;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f005 fcce 	bl	8007946 <HAL_OSPI_HyperbusCfg>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <S70KL1281_WriteCfgReg0+0x3c>
  {
    return S70KL1281_ERROR;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb4:	e03a      	b.n	800202c <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Initialize the write command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 8001fb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fba:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8001fbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fc0:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 8001fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc6:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8001fc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData       = 2U;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	623b      	str	r3, [r7, #32]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4619      	mov	r1, r3
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f005 fcf1 	bl	80079c4 <HAL_OSPI_HyperbusCmd>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <S70KL1281_WriteCfgReg0+0x74>
  {
    return S70KL1281_ERROR;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fec:	e01e      	b.n	800202c <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fee:	f107 030a 	add.w	r3, r7, #10
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f005 fd44 	bl	8007a86 <HAL_OSPI_Transmit>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <S70KL1281_WriteCfgReg0+0x90>
  {
    return S70KL1281_ERROR;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002008:	e010      	b.n	800202c <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Reconfigure peripheral for correct write access */
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4619      	mov	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f005 fc94 	bl	8007946 <HAL_OSPI_HyperbusCfg>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <S70KL1281_WriteCfgReg0+0xb0>
  {
    return S70KL1281_ERROR;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002028:	e000      	b.n	800202c <S70KL1281_WriteCfgReg0+0xb2>
  }

  return S70KL1281_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3738      	adds	r7, #56	; 0x38
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <BSP_I2C4_Init+0x64>)
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <BSP_I2C4_Init+0x68>)
 8002042:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <BSP_I2C4_Init+0x6c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	4915      	ldr	r1, [pc, #84]	; (80020a0 <BSP_I2C4_Init+0x6c>)
 800204c:	600a      	str	r2, [r1, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11d      	bne.n	800208e <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002052:	4811      	ldr	r0, [pc, #68]	; (8002098 <BSP_I2C4_Init+0x64>)
 8002054:	f004 fce6 	bl	8006a24 <HAL_I2C_GetState>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d117      	bne.n	800208e <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800205e:	480e      	ldr	r0, [pc, #56]	; (8002098 <BSP_I2C4_Init+0x64>)
 8002060:	f000 fb08 	bl	8002674 <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d111      	bne.n	800208e <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800206a:	f006 fe33 	bl	8008cd4 <HAL_RCC_GetPCLK2Freq>
 800206e:	4603      	mov	r3, r0
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <BSP_I2C4_Init+0x70>)
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f888 	bl	8002188 <I2C_GetTiming>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4806      	ldr	r0, [pc, #24]	; (8002098 <BSP_I2C4_Init+0x64>)
 800207e:	f000 f813 	bl	80020a8 <MX_I2C4_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002088:	f06f 0307 	mvn.w	r3, #7
 800208c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200092b4 	.word	0x200092b4
 800209c:	58001c00 	.word	0x58001c00
 80020a0:	20000138 	.word	0x20000138
 80020a4:	000186a0 	.word	0x000186a0

080020a8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f004 fae8 	bl	80066bc <HAL_I2C_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e014      	b.n	8002122 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 fefc 	bl	8006efc <HAL_I2CEx_ConfigAnalogFilter>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e008      	b.n	8002122 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002110:	2100      	movs	r1, #0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f004 ff3d 	bl	8006f92 <HAL_I2CEx_ConfigDigitalFilter>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
 800213a:	460b      	mov	r3, r1
 800213c:	81bb      	strh	r3, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002142:	89b9      	ldrh	r1, [r7, #12]
 8002144:	89f8      	ldrh	r0, [r7, #14]
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2201      	movs	r2, #1
 800214e:	f000 faf7 	bl	8002740 <I2C4_ReadReg>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e00c      	b.n	8002178 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <BSP_I2C4_ReadReg+0x58>)
 8002160:	f004 fc6e 	bl	8006a40 <HAL_I2C_GetError>
 8002164:	4603      	mov	r3, r0
 8002166:	2b04      	cmp	r3, #4
 8002168:	d103      	bne.n	8002172 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800216a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e002      	b.n	8002178 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002172:	f06f 0303 	mvn.w	r3, #3
 8002176:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002178:	697b      	ldr	r3, [r7, #20]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200092b4 	.word	0x200092b4

08002188 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d06b      	beq.n	8002274 <I2C_GetTiming+0xec>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d068      	beq.n	8002274 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e060      	b.n	800226a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80021a8:	4a35      	ldr	r2, [pc, #212]	; (8002280 <I2C_GetTiming+0xf8>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d352      	bcc.n	8002264 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80021be:	4a30      	ldr	r2, [pc, #192]	; (8002280 <I2C_GetTiming+0xf8>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3308      	adds	r3, #8
 80021cc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d847      	bhi.n	8002264 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f856 	bl	8002288 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f940 	bl	8002464 <I2C_Compute_SCLL_SCLH>
 80021e4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b7f      	cmp	r3, #127	; 0x7f
 80021ea:	d842      	bhi.n	8002272 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80021ec:	4925      	ldr	r1, [pc, #148]	; (8002284 <I2C_GetTiming+0xfc>)
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80021fe:	4821      	ldr	r0, [pc, #132]	; (8002284 <I2C_GetTiming+0xfc>)
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4403      	add	r3, r0
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	051b      	lsls	r3, r3, #20
 8002212:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002216:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002218:	481a      	ldr	r0, [pc, #104]	; (8002284 <I2C_GetTiming+0xfc>)
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4403      	add	r3, r0
 8002226:	3308      	adds	r3, #8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002230:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <I2C_GetTiming+0xfc>)
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4403      	add	r3, r0
 8002240:	330c      	adds	r3, #12
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002248:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <I2C_GetTiming+0xfc>)
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3310      	adds	r3, #16
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800225e:	430b      	orrs	r3, r1
 8002260:	617b      	str	r3, [r7, #20]
        }
        break;
 8002262:	e006      	b.n	8002272 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	3301      	adds	r3, #1
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d99b      	bls.n	80021a8 <I2C_GetTiming+0x20>
 8002270:	e000      	b.n	8002274 <I2C_GetTiming+0xec>
        break;
 8002272:	bf00      	nop
      }
    }
  }

  return ret;
 8002274:	697b      	ldr	r3, [r7, #20]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	08024ce0 	.word	0x08024ce0
 8002284:	2000013c 	.word	0x2000013c

08002288 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002288:	b480      	push	{r7}
 800228a:	b08f      	sub	sp, #60	; 0x3c
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002292:	2310      	movs	r3, #16
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	085a      	lsrs	r2, r3, #1
 800229a:	4b6e      	ldr	r3, [pc, #440]	; (8002454 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800229c:	4413      	add	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 80022aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80022ae:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3324      	adds	r3, #36	; 0x24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	4a65      	ldr	r2, [pc, #404]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	330c      	adds	r3, #12
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80022d4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80022d6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80022d8:	495f      	ldr	r1, [pc, #380]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	202c      	movs	r0, #44	; 0x2c
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	440b      	add	r3, r1
 80022e4:	3328      	adds	r3, #40	; 0x28
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3303      	adds	r3, #3
 80022ea:	69f9      	ldr	r1, [r7, #28]
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3310      	adds	r3, #16
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	4a54      	ldr	r2, [pc, #336]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3320      	adds	r3, #32
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002318:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800231a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800231c:	494e      	ldr	r1, [pc, #312]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	202c      	movs	r0, #44	; 0x2c
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	440b      	add	r3, r1
 8002328:	3328      	adds	r3, #40	; 0x28
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3304      	adds	r3, #4
 800232e:	69f9      	ldr	r1, [r7, #28]
 8002330:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002338:	4a47      	ldr	r2, [pc, #284]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3320      	adds	r3, #32
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	4a43      	ldr	r2, [pc, #268]	; (8002458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3314      	adds	r3, #20
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4403      	add	r3, r0
 800235c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	2b00      	cmp	r3, #0
 8002362:	dc01      	bgt.n	8002368 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	dc01      	bgt.n	8002372 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 8002376:	e062      	b.n	800243e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	e059      	b.n	8002432 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002384:	3201      	adds	r2, #1
 8002386:	fb02 f203 	mul.w	r2, r2, r3
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	429a      	cmp	r2, r3
 8002398:	d348      	bcc.n	800242c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	e042      	b.n	8002426 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	3301      	adds	r3, #1
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	fb02 f203 	mul.w	r2, r2, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d332      	bcc.n	8002420 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d82e      	bhi.n	8002420 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80023c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d02a      	beq.n	8002420 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4924      	ldr	r1, [pc, #144]	; (8002460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023dc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	491f      	ldr	r1, [pc, #124]	; (8002460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3304      	adds	r3, #4
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4919      	ldr	r1, [pc, #100]	; (8002460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3308      	adds	r3, #8
 8002406:	6a3a      	ldr	r2, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002416:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b7f      	cmp	r3, #127	; 0x7f
 800241e:	d812      	bhi.n	8002446 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	3301      	adds	r3, #1
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d9b9      	bls.n	80023a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3301      	adds	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d9a2      	bls.n	800237e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	3301      	adds	r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d999      	bls.n	8002378 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002444:	e000      	b.n	8002448 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002446:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002448:	373c      	adds	r7, #60	; 0x3c
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	3b9aca00 	.word	0x3b9aca00
 8002458:	08024ce0 	.word	0x08024ce0
 800245c:	20000b3c 	.word	0x20000b3c
 8002460:	2000013c 	.word	0x2000013c

08002464 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002464:	b480      	push	{r7}
 8002466:	b093      	sub	sp, #76	; 0x4c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	085a      	lsrs	r2, r3, #1
 8002478:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <I2C_Compute_SCLL_SCLH+0x200>)
 800247a:	4413      	add	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002484:	4a78      	ldr	r2, [pc, #480]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	085a      	lsrs	r2, r3, #1
 8002494:	4b73      	ldr	r3, [pc, #460]	; (8002664 <I2C_Compute_SCLL_SCLH+0x200>)
 8002496:	4413      	add	r3, r2
 8002498:	4973      	ldr	r1, [pc, #460]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	202c      	movs	r0, #44	; 0x2c
 800249e:	fb00 f202 	mul.w	r2, r0, r2
 80024a2:	440a      	add	r2, r1
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80024ac:	2332      	movs	r3, #50	; 0x32
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80024b0:	4a6d      	ldr	r2, [pc, #436]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80024c8:	4a67      	ldr	r2, [pc, #412]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a62      	ldr	r2, [pc, #392]	; (8002664 <I2C_Compute_SCLL_SCLH+0x200>)
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80024e0:	4a61      	ldr	r2, [pc, #388]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3308      	adds	r3, #8
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5c      	ldr	r2, [pc, #368]	; (8002664 <I2C_Compute_SCLL_SCLH+0x200>)
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	e0a3      	b.n	800264a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002502:	495a      	ldr	r1, [pc, #360]	; (800266c <I2C_Compute_SCLL_SCLH+0x208>)
 8002504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800251c:	2300      	movs	r3, #0
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	e08c      	b.n	800263c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	441a      	add	r2, r3
 8002528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252a:	3301      	adds	r3, #1
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	fb01 f103 	mul.w	r1, r1, r3
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	4413      	add	r3, r2
 800253a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3318      	adds	r3, #24
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d971      	bls.n	8002636 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d268      	bcs.n	8002636 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
 8002568:	e062      	b.n	8002630 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	441a      	add	r2, r3
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	3301      	adds	r3, #1
 8002574:	6979      	ldr	r1, [r7, #20]
 8002576:	fb01 f103 	mul.w	r1, r1, r3
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	441a      	add	r2, r3
 800258a:	4937      	ldr	r1, [pc, #220]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	fb00 f303 	mul.w	r3, r0, r3
 8002594:	440b      	add	r3, r1
 8002596:	3320      	adds	r3, #32
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	441a      	add	r2, r3
 800259c:	4932      	ldr	r1, [pc, #200]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	202c      	movs	r0, #44	; 0x2c
 80025a2:	fb00 f303 	mul.w	r3, r0, r3
 80025a6:	440b      	add	r3, r1
 80025a8:	3324      	adds	r3, #36	; 0x24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d338      	bcc.n	800262a <I2C_Compute_SCLL_SCLH+0x1c6>
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d834      	bhi.n	800262a <I2C_Compute_SCLL_SCLH+0x1c6>
 80025c0:	4a29      	ldr	r2, [pc, #164]	; (8002668 <I2C_Compute_SCLL_SCLH+0x204>)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	331c      	adds	r3, #28
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d329      	bcc.n	800262a <I2C_Compute_SCLL_SCLH+0x1c6>
 80025d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d225      	bcs.n	800262a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da02      	bge.n	80025f2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	425b      	negs	r3, r3
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d917      	bls.n	800262a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80025fe:	491b      	ldr	r1, [pc, #108]	; (800266c <I2C_Compute_SCLL_SCLH+0x208>)
 8002600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3310      	adds	r3, #16
 800260e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002610:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002612:	4916      	ldr	r1, [pc, #88]	; (800266c <I2C_Compute_SCLL_SCLH+0x208>)
 8002614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	330c      	adds	r3, #12
 8002622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002624:	601a      	str	r2, [r3, #0]
              ret = count;
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	3301      	adds	r3, #1
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d999      	bls.n	800256a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	3301      	adds	r3, #1
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	f67f af6f 	bls.w	8002522 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	3301      	adds	r3, #1
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <I2C_Compute_SCLL_SCLH+0x20c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002650:	429a      	cmp	r2, r3
 8002652:	f4ff af56 	bcc.w	8002502 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002658:	4618      	mov	r0, r3
 800265a:	374c      	adds	r7, #76	; 0x4c
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	3b9aca00 	.word	0x3b9aca00
 8002668:	08024ce0 	.word	0x08024ce0
 800266c:	2000013c 	.word	0x2000013c
 8002670:	20000b3c 	.word	0x20000b3c

08002674 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <I2C4_MspInit+0xc4>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <I2C4_MspInit+0xc4>)
 8002684:	f043 0320 	orr.w	r3, r3, #32
 8002688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <I2C4_MspInit+0xc4>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <I2C4_MspInit+0xc4>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <I2C4_MspInit+0xc4>)
 80026a2:	f043 0320 	orr.w	r3, r3, #32
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <I2C4_MspInit+0xc4>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80026b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80026be:	2312      	movs	r3, #18
 80026c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80026ca:	2304      	movs	r3, #4
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4819      	ldr	r0, [pc, #100]	; (800273c <I2C4_MspInit+0xc8>)
 80026d6:	f003 fe2f 	bl	8006338 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80026e0:	2304      	movs	r3, #4
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	4814      	ldr	r0, [pc, #80]	; (800273c <I2C4_MspInit+0xc8>)
 80026ec:	f003 fe24 	bl	8006338 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <I2C4_MspInit+0xc4>)
 80026f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <I2C4_MspInit+0xc4>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <I2C4_MspInit+0xc4>)
 8002702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <I2C4_MspInit+0xc4>)
 8002710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002714:	4a08      	ldr	r2, [pc, #32]	; (8002738 <I2C4_MspInit+0xc4>)
 8002716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <I2C4_MspInit+0xc4>)
 8002720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <I2C4_MspInit+0xc4>)
 8002726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	; 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400
 800273c:	58021400 	.word	0x58021400

08002740 <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af04      	add	r7, sp, #16
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4603      	mov	r3, r0
 800274a:	81fb      	strh	r3, [r7, #14]
 800274c:	460b      	mov	r3, r1
 800274e:	81bb      	strh	r3, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002754:	8978      	ldrh	r0, [r7, #10]
 8002756:	89ba      	ldrh	r2, [r7, #12]
 8002758:	89f9      	ldrh	r1, [r7, #14]
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	4603      	mov	r3, r0
 800276a:	4807      	ldr	r0, [pc, #28]	; (8002788 <I2C4_ReadReg+0x48>)
 800276c:	f004 f840 	bl	80067f0 <HAL_I2C_Mem_Read>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	e001      	b.n	800277e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800277a:	f06f 0307 	mvn.w	r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200092b4 	.word	0x200092b4

0800278c <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */

int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002796:	f44f 7388 	mov.w	r3, #272	; 0x110
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80027a0:	2201      	movs	r2, #1
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f805 	bl	80027b4 <BSP_LCD_InitEx>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b09e      	sub	sp, #120	; 0x78
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	677b      	str	r3, [r7, #116]	; 0x74
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t io_comp_ctx;
  MX_LTDC_LayerConfig_t config;
  BSP_OSPI_RAM_Init_t ospi_init;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d802      	bhi.n	80027d2 <BSP_LCD_InitEx+0x1e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <BSP_LCD_InitEx+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027d2:	f06f 0301 	mvn.w	r3, #1
 80027d6:	677b      	str	r3, [r7, #116]	; 0x74
 80027d8:	e0cf      	b.n	800297a <BSP_LCD_InitEx+0x1c6>
  }
  else
  {
    switch(PixelFormat)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d105      	bne.n	80027ec <BSP_LCD_InitEx+0x38>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80027e0:	2302      	movs	r3, #2
 80027e2:	673b      	str	r3, [r7, #112]	; 0x70
      PixelFormatFactor = 2U;
 80027e4:	4b67      	ldr	r3, [pc, #412]	; (8002984 <BSP_LCD_InitEx+0x1d0>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	601a      	str	r2, [r3, #0]
      break;
 80027ea:	e005      	b.n	80027f8 <BSP_LCD_InitEx+0x44>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80027ec:	2300      	movs	r3, #0
 80027ee:	673b      	str	r3, [r7, #112]	; 0x70
      PixelFormatFactor = 4U;
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <BSP_LCD_InitEx+0x1d0>)
 80027f2:	2204      	movs	r2, #4
 80027f4:	601a      	str	r2, [r3, #0]
      break;
 80027f6:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80027f8:	4963      	ldr	r1, [pc, #396]	; (8002988 <BSP_LCD_InitEx+0x1d4>)
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	330c      	adds	r3, #12
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 800280c:	495e      	ldr	r1, [pc, #376]	; (8002988 <BSP_LCD_InitEx+0x1d4>)
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 800281e:	495a      	ldr	r1, [pc, #360]	; (8002988 <BSP_LCD_InitEx+0x1d4>)
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	3304      	adds	r3, #4
 800282e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002832:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <BSP_LCD_InitEx+0x1d8>)
 8002836:	4a56      	ldr	r2, [pc, #344]	; (8002990 <BSP_LCD_InitEx+0x1dc>)
 8002838:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <BSP_LCD_InitEx+0x1e0>)
 800283c:	4a56      	ldr	r2, [pc, #344]	; (8002998 <BSP_LCD_InitEx+0x1e4>)
 800283e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002840:	4852      	ldr	r0, [pc, #328]	; (800298c <BSP_LCD_InitEx+0x1d8>)
 8002842:	f000 fd85 	bl	8003350 <LTDC_MspInit>
#endif
    /* De-assert display enable LCD_DISP_EN pin */
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800284c:	4853      	ldr	r0, [pc, #332]	; (800299c <BSP_LCD_InitEx+0x1e8>)
 800284e:	f003 ff1b 	bl	8006688 <HAL_GPIO_WritePin>

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_CTRL_GPIO_PORT, LCD_DISP_CTRL_PIN, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002858:	4851      	ldr	r0, [pc, #324]	; (80029a0 <BSP_LCD_InitEx+0x1ec>)
 800285a:	f003 ff15 	bl	8006688 <HAL_GPIO_WritePin>

    /* Assert backlight LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800285e:	2201      	movs	r2, #1
 8002860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002864:	484f      	ldr	r0, [pc, #316]	; (80029a4 <BSP_LCD_InitEx+0x1f0>)
 8002866:	f003 ff0f 	bl	8006688 <HAL_GPIO_WritePin>

    DMA2D_MspInit(&hlcd_dma2d);
 800286a:	484a      	ldr	r0, [pc, #296]	; (8002994 <BSP_LCD_InitEx+0x1e0>)
 800286c:	f000 fec2 	bl	80035f4 <DMA2D_MspInit>

    io_comp_ctx.Init    = BSP_I2C4_Init;
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <BSP_LCD_InitEx+0x1f4>)
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
    io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002874:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <BSP_LCD_InitEx+0x1f8>)
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
    io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002878:	2370      	movs	r3, #112	; 0x70
 800287a:	873b      	strh	r3, [r7, #56]	; 0x38
    if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800287c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8fa 	bl	8001a80 <FT5336_RegisterBusIO>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	da03      	bge.n	800289a <BSP_LCD_InitEx+0xe6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002892:	f06f 0306 	mvn.w	r3, #6
 8002896:	677b      	str	r3, [r7, #116]	; 0x74
 8002898:	e02a      	b.n	80028f0 <BSP_LCD_InitEx+0x13c>
    }
    else if(FT5336_ReadID(&ts_comp_obj, &id) < 0)
 800289a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800289e:	4944      	ldr	r1, [pc, #272]	; (80029b0 <BSP_LCD_InitEx+0x1fc>)
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f92f 	bl	8001b04 <FT5336_ReadID>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da03      	bge.n	80028b4 <BSP_LCD_InitEx+0x100>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80028ac:	f06f 0306 	mvn.w	r3, #6
 80028b0:	677b      	str	r3, [r7, #116]	; 0x74
 80028b2:	e01d      	b.n	80028f0 <BSP_LCD_InitEx+0x13c>
    }
    else if(id != FT5336_ID)
 80028b4:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <BSP_LCD_InitEx+0x1fc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b51      	cmp	r3, #81	; 0x51
 80028ba:	d003      	beq.n	80028c4 <BSP_LCD_InitEx+0x110>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80028bc:	f06f 0306 	mvn.w	r3, #6
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
 80028c2:	e015      	b.n	80028f0 <BSP_LCD_InitEx+0x13c>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80028c4:	4831      	ldr	r0, [pc, #196]	; (800298c <BSP_LCD_InitEx+0x1d8>)
 80028c6:	f000 f903 	bl	8002ad0 <MX_LTDC_ClockConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <BSP_LCD_InitEx+0x124>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80028d0:	f06f 0303 	mvn.w	r3, #3
 80028d4:	677b      	str	r3, [r7, #116]	; 0x74
 80028d6:	e00b      	b.n	80028f0 <BSP_LCD_InitEx+0x13c>
    }
    else
    {
      if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80028d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	482b      	ldr	r0, [pc, #172]	; (800298c <BSP_LCD_InitEx+0x1d8>)
 80028e0:	f000 f868 	bl	80029b4 <MX_LTDC_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <BSP_LCD_InitEx+0x13c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80028ea:	f06f 0303 	mvn.w	r3, #3
 80028ee:	677b      	str	r3, [r7, #116]	; 0x74
      }
    }

    if(ret == BSP_ERROR_NONE)
 80028f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d141      	bne.n	800297a <BSP_LCD_InitEx+0x1c6>
    {
      /* Before configuring LTDC layer, ensure OSPI is initialized */
      ospi_init.LatencyType = BSP_OSPI_RAM_FIXED_LATENCY;
 80028f6:	2301      	movs	r3, #1
 80028f8:	753b      	strb	r3, [r7, #20]
      ospi_init.BurstType   = BSP_OSPI_RAM_LINEAR_BURST;
 80028fa:	2301      	movs	r3, #1
 80028fc:	757b      	strb	r3, [r7, #21]
      ospi_init.BurstLength = BSP_OSPI_RAM_BURST_32_BYTES;
 80028fe:	2303      	movs	r3, #3
 8002900:	75bb      	strb	r3, [r7, #22]
      if(BSP_OSPI_RAM_Init(0, &ospi_init) != BSP_ERROR_NONE)
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	2000      	movs	r0, #0
 800290a:	f000 fea1 	bl	8003650 <BSP_OSPI_RAM_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <BSP_LCD_InitEx+0x168>
      {
        ret = BSP_ERROR_NO_INIT;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002918:	677b      	str	r3, [r7, #116]	; 0x74
 800291a:	e02e      	b.n	800297a <BSP_LCD_InitEx+0x1c6>
      }
      else if(BSP_OSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800291c:	2000      	movs	r0, #0
 800291e:	f000 ff89 	bl	8003834 <BSP_OSPI_RAM_EnableMemoryMappedMode>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <BSP_LCD_InitEx+0x17c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002928:	f06f 0303 	mvn.w	r3, #3
 800292c:	677b      	str	r3, [r7, #116]	; 0x74
 800292e:	e024      	b.n	800297a <BSP_LCD_InitEx+0x1c6>
      }
      else
      {
        /* Configure default LTDC Layer 0. This configuration can be override by calling
        BSP_LCD_ConfigLayer() at application level */
        config.X0          = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
        config.X1          = Width;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	61fb      	str	r3, [r7, #28]
        config.Y0          = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
        config.Y1          = Height;
 800293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
        config.PixelFormat = ltdc_pixel_format;
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
        config.Address     = LCD_LAYER_0_ADDRESS;
 8002946:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	461a      	mov	r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <BSP_LCD_InitEx+0x1d8>)
 8002956:	f000 f879 	bl	8002a4c <MX_LTDC_ConfigLayer>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <BSP_LCD_InitEx+0x1b2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8002960:	f06f 0303 	mvn.w	r3, #3
 8002964:	677b      	str	r3, [r7, #116]	; 0x74
        }
        /* By default the reload is activated and executed immediately */
        Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <BSP_LCD_InitEx+0x1d4>)
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3314      	adds	r3, #20
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
      }
    }
   }

  return ret;
 800297a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800297c:	4618      	mov	r0, r3
 800297e:	3778      	adds	r7, #120	; 0x78
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000b40 	.word	0x20000b40
 8002988:	200093a8 	.word	0x200093a8
 800298c:	20009300 	.word	0x20009300
 8002990:	50001000 	.word	0x50001000
 8002994:	200093c0 	.word	0x200093c0
 8002998:	52001000 	.word	0x52001000
 800299c:	58021000 	.word	0x58021000
 80029a0:	58020c00 	.word	0x58020c00
 80029a4:	58021800 	.word	0x58021800
 80029a8:	08002035 	.word	0x08002035
 80029ac:	0800212d 	.word	0x0800212d
 80029b0:	20000b44 	.word	0x20000b44

080029b4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <MX_LTDC_Init+0x94>)
 80029c4:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2228      	movs	r2, #40	; 0x28
 80029e2:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP-11) - 1);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	222a      	movs	r2, #42	; 0x2a
 80029e8:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f103 0235 	add.w	r2, r3, #53	; 0x35
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP-11) + RK043FN48H_HFP - 1;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2209      	movs	r2, #9
 8002a02:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	220b      	movs	r2, #11
 8002a08:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 020b 	add.w	r2, r3, #11
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 020d 	add.w	r2, r3, #13
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	22ff      	movs	r2, #255	; 0xff
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f004 faf8 	bl	800702c <HAL_LTDC_Init>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	50001000 	.word	0x50001000

08002a4c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	; 0x48
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8002a76:	23ff      	movs	r3, #255	; 0xff
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a84:	2307      	movs	r3, #7
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f004 fb8d 	bl	80071e0 <HAL_LTDC_ConfigLayer>
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3748      	adds	r7, #72	; 0x48
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0b0      	sub	sp, #192	; 0xc0
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ad8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002adc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002ade:	2305      	movs	r3, #5
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002ae2:	23a0      	movs	r3, #160	; 0xa0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002aea:	2302      	movs	r3, #2
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002aee:	2353      	movs	r3, #83	; 0x53
 8002af0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL1VCOWIDE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL1VCIRANGE_0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44


  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4618      	mov	r0, r3
 8002b04:	f006 f93e 	bl	8008d84 <HAL_RCCEx_PeriphCLKConfig>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	37c0      	adds	r7, #192	; 0xc0
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b28:	f06f 0301 	mvn.w	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e00a      	b.n	8002b46 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002b30:	4908      	ldr	r1, [pc, #32]	; (8002b54 <BSP_LCD_GetPixelFormat+0x40>)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	330c      	adds	r3, #12
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	200093a8 	.word	0x200093a8

08002b58 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b6c:	f06f 0301 	mvn.w	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e009      	b.n	8002b88 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002b74:	4908      	ldr	r1, [pc, #32]	; (8002b98 <BSP_LCD_SetActiveLayer+0x40>)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	3308      	adds	r3, #8
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200093a8 	.word	0x200093a8

08002b9c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002bb0:	f06f 0301 	mvn.w	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e009      	b.n	8002bcc <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002bb8:	4908      	ldr	r1, [pc, #32]	; (8002bdc <BSP_LCD_GetXSize+0x40>)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200093a8 	.word	0x200093a8

08002be0 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002bf4:	f06f 0301 	mvn.w	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e00a      	b.n	8002c12 <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002bfc:	4908      	ldr	r1, [pc, #32]	; (8002c20 <BSP_LCD_GetYSize+0x40>)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	200093a8 	.word	0x200093a8

08002c24 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pbmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08e      	sub	sp, #56	; 0x38
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	330a      	adds	r3, #10
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	330b      	adds	r3, #11
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	441a      	add	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	441a      	add	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	330d      	adds	r3, #13
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4413      	add	r3, r2
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	3312      	adds	r3, #18
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3313      	adds	r3, #19
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	441a      	add	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	441a      	add	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3315      	adds	r3, #21
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	4413      	add	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3316      	adds	r3, #22
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3317      	adds	r3, #23
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	441a      	add	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	441a      	add	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3319      	adds	r3, #25
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	331c      	adds	r3, #28
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	331d      	adds	r3, #29
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	4413      	add	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002cc2:	4938      	ldr	r1, [pc, #224]	; (8002da4 <BSP_LCD_DrawBitmap+0x180>)
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <BSP_LCD_DrawBitmap+0x184>)
 8002cd6:	2134      	movs	r1, #52	; 0x34
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	335c      	adds	r3, #92	; 0x5c
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	4830      	ldr	r0, [pc, #192]	; (8002da4 <BSP_LCD_DrawBitmap+0x180>)
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4403      	add	r3, r0
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	fb02 f203 	mul.w	r2, r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <BSP_LCD_DrawBitmap+0x188>)
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	440b      	add	r3, r1
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3b20      	subs	r3, #32
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d802      	bhi.n	8002d16 <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	e008      	b.n	8002d28 <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3b10      	subs	r3, #16
 8002d1a:	2b07      	cmp	r3, #7
 8002d1c:	d802      	bhi.n	8002d24 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e001      	b.n	8002d28 <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	08d2      	lsrs	r2, r2, #3
 8002d36:	fb02 f203 	mul.w	r2, r2, r3
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	e022      	b.n	8002d90 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6a39      	ldr	r1, [r7, #32]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 faa3 	bl	80032a0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8002d5a:	4912      	ldr	r1, [pc, #72]	; (8002da4 <BSP_LCD_DrawBitmap+0x180>)
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <BSP_LCD_DrawBitmap+0x188>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d74:	4413      	add	r3, r2
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	425b      	negs	r3, r3
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	4413      	add	r3, r2
 8002d88:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3d8      	bcc.n	8002d4a <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 8002d98:	69fb      	ldr	r3, [r7, #28]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200093a8 	.word	0x200093a8
 8002da8:	20009300 	.word	0x20009300
 8002dac:	20000b40 	.word	0x20000b40

08002db0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e02e      	b.n	8002e22 <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e024      	b.n	8002e14 <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	3303      	adds	r3, #3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	18d1      	adds	r1, r2, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f976 	bl	80030f0 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <BSP_LCD_FillRGBRect+0x84>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3d6      	bcc.n	8002dca <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3cc      	bcc.n	8002dc4 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000b40 	.word	0x20000b40

08002e38 <BSP_LCD_DrawHLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002e46:	491e      	ldr	r1, [pc, #120]	; (8002ec0 <BSP_LCD_DrawHLine+0x88>)
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	3308      	adds	r3, #8
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <BSP_LCD_DrawHLine+0x8c>)
 8002e5a:	2134      	movs	r1, #52	; 0x34
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	4816      	ldr	r0, [pc, #88]	; (8002ec0 <BSP_LCD_DrawHLine+0x88>)
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4403      	add	r3, r0
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	fb02 f203 	mul.w	r2, r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <BSP_LCD_DrawHLine+0x90>)
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	440b      	add	r3, r1
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <BSP_LCD_DrawHLine+0x88>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f988 	bl	80031c4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200093a8 	.word	0x200093a8
 8002ec4:	20009300 	.word	0x20009300
 8002ec8:	20000b40 	.word	0x20000b40

08002ecc <BSP_LCD_DrawVLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af04      	add	r7, sp, #16
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002eda:	4922      	ldr	r1, [pc, #136]	; (8002f64 <BSP_LCD_DrawVLine+0x98>)
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3308      	adds	r3, #8
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <BSP_LCD_DrawVLine+0x9c>)
 8002eee:	2134      	movs	r1, #52	; 0x34
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	335c      	adds	r3, #92	; 0x5c
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	481a      	ldr	r0, [pc, #104]	; (8002f64 <BSP_LCD_DrawVLine+0x98>)
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	fb02 f203 	mul.w	r2, r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <BSP_LCD_DrawVLine+0xa0>)
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002f20:	4910      	ldr	r1, [pc, #64]	; (8002f64 <BSP_LCD_DrawVLine+0x98>)
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3308      	adds	r3, #8
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	4c0b      	ldr	r4, [pc, #44]	; (8002f64 <BSP_LCD_DrawVLine+0x98>)
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4423      	add	r3, r4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2301      	movs	r3, #1
 8002f52:	4602      	mov	r2, r0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f935 	bl	80031c4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	200093a8 	.word	0x200093a8
 8002f68:	20009300 	.word	0x20009300
 8002f6c:	20000b40 	.word	0x20000b40

08002f70 <BSP_LCD_FillRect>:
  * @param  Ypos Y position
  * @param  Width Rectangle width
  * @param  Height Rectangle height
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002f7e:	4923      	ldr	r1, [pc, #140]	; (800300c <BSP_LCD_FillRect+0x9c>)
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <BSP_LCD_FillRect+0xa0>)
 8002f92:	2134      	movs	r1, #52	; 0x34
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	481b      	ldr	r0, [pc, #108]	; (800300c <BSP_LCD_FillRect+0x9c>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4403      	add	r3, r0
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	fb02 f203 	mul.w	r2, r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <BSP_LCD_FillRect+0xa4>)
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002fc4:	4911      	ldr	r1, [pc, #68]	; (800300c <BSP_LCD_FillRect+0x9c>)
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	4c0c      	ldr	r4, [pc, #48]	; (800300c <BSP_LCD_FillRect+0x9c>)
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4423      	add	r3, r4
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	9202      	str	r2, [sp, #8]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8e2 	bl	80031c4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	200093a8 	.word	0x200093a8
 8003010:	20009300 	.word	0x20009300
 8003014:	20000b40 	.word	0x20000b40

08003018 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval Value  pixel color
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003026:	4930      	ldr	r1, [pc, #192]	; (80030e8 <BSP_LCD_ReadPixel+0xd0>)
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3308      	adds	r3, #8
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <BSP_LCD_ReadPixel+0xd4>)
 800303a:	2134      	movs	r1, #52	; 0x34
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3348      	adds	r3, #72	; 0x48
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d122      	bne.n	8003090 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800304a:	4927      	ldr	r1, [pc, #156]	; (80030e8 <BSP_LCD_ReadPixel+0xd0>)
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	3308      	adds	r3, #8
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <BSP_LCD_ReadPixel+0xd4>)
 800305e:	2134      	movs	r1, #52	; 0x34
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	335c      	adds	r3, #92	; 0x5c
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	481f      	ldr	r0, [pc, #124]	; (80030e8 <BSP_LCD_ReadPixel+0xd0>)
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4403      	add	r3, r0
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	fb02 f203 	mul.w	r2, r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e023      	b.n	80030d8 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8003090:	4915      	ldr	r1, [pc, #84]	; (80030e8 <BSP_LCD_ReadPixel+0xd0>)
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3308      	adds	r3, #8
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <BSP_LCD_ReadPixel+0xd4>)
 80030a4:	2134      	movs	r1, #52	; 0x34
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <BSP_LCD_ReadPixel+0xd0>)
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4403      	add	r3, r0
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	fb02 f203 	mul.w	r2, r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	440b      	add	r3, r1
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	200093a8 	.word	0x200093a8
 80030ec:	20009300 	.word	0x20009300

080030f0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030fe:	492f      	ldr	r1, [pc, #188]	; (80031bc <BSP_LCD_WritePixel+0xcc>)
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	3308      	adds	r3, #8
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <BSP_LCD_WritePixel+0xd0>)
 8003112:	2134      	movs	r1, #52	; 0x34
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3348      	adds	r3, #72	; 0x48
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d122      	bne.n	8003168 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8003122:	4926      	ldr	r1, [pc, #152]	; (80031bc <BSP_LCD_WritePixel+0xcc>)
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3308      	adds	r3, #8
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <BSP_LCD_WritePixel+0xd0>)
 8003136:	2134      	movs	r1, #52	; 0x34
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	335c      	adds	r3, #92	; 0x5c
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	481e      	ldr	r0, [pc, #120]	; (80031bc <BSP_LCD_WritePixel+0xcc>)
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4403      	add	r3, r0
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	fb02 f203 	mul.w	r2, r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	461a      	mov	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e021      	b.n	80031ac <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8003168:	4914      	ldr	r1, [pc, #80]	; (80031bc <BSP_LCD_WritePixel+0xcc>)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3308      	adds	r3, #8
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <BSP_LCD_WritePixel+0xd0>)
 800317c:	2134      	movs	r1, #52	; 0x34
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	335c      	adds	r3, #92	; 0x5c
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	480c      	ldr	r0, [pc, #48]	; (80031bc <BSP_LCD_WritePixel+0xcc>)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4403      	add	r3, r0
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	fb02 f203 	mul.w	r2, r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	440b      	add	r3, r1
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	b292      	uxth	r2, r2
 80031aa:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200093a8 	.word	0x200093a8
 80031c0:	20009300 	.word	0x20009300

080031c4 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80031d6:	492f      	ldr	r1, [pc, #188]	; (8003294 <LL_FillBuffer+0xd0>)
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	330c      	adds	r3, #12
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d129      	bne.n	8003240 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80031ec:	2302      	movs	r3, #2
 80031ee:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	0adb      	lsrs	r3, r3, #11
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	4413      	add	r3, r2
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	3317      	adds	r3, #23
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	0419      	lsls	r1, r3, #16
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003210:	4613      	mov	r3, r2
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	3321      	adds	r3, #33	; 0x21
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4319      	orrs	r1, r3
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4413      	add	r3, r2
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	3317      	adds	r3, #23
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	430b      	orrs	r3, r1
 8003238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323c:	613b      	str	r3, [r7, #16]
    break;
 800323e:	e002      	b.n	8003246 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    break;
 8003244:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <LL_FillBuffer+0xd4>)
 8003248:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800324c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <LL_FillBuffer+0xd4>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003254:	4a10      	ldr	r2, [pc, #64]	; (8003298 <LL_FillBuffer+0xd4>)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <LL_FillBuffer+0xd4>)
 800325c:	4a0f      	ldr	r2, [pc, #60]	; (800329c <LL_FillBuffer+0xd8>)
 800325e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <LL_FillBuffer+0xd4>)
 8003262:	f001 f843 	bl	80042ec <HAL_DMA2D_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <LL_FillBuffer+0xc6>
  {
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	4808      	ldr	r0, [pc, #32]	; (8003298 <LL_FillBuffer+0xd4>)
 8003278:	f001 f8a6 	bl	80043c8 <HAL_DMA2D_Start>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <LL_FillBuffer+0xc6>
    {
      /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003282:	2132      	movs	r1, #50	; 0x32
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <LL_FillBuffer+0xd4>)
 8003286:	f001 f8ca 	bl	800441e <HAL_DMA2D_PollForTransfer>
    }
  }
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200093a8 	.word	0x200093a8
 8003298:	200093c0 	.word	0x200093c0
 800329c:	52001000 	.word	0x52001000

080032a0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80032ae:	4925      	ldr	r1, [pc, #148]	; (8003344 <LL_ConvertLineToRGB+0xa4>)
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	330c      	adds	r3, #12
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d102      	bne.n	80032ca <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80032c4:	2302      	movs	r3, #2
 80032c6:	617b      	str	r3, [r7, #20]
    break;
 80032c8:	e002      	b.n	80032d0 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
    break;
 80032ce:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032d6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032ec:	22ff      	movs	r2, #255	; 0xff
 80032ee:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <LL_ConvertLineToRGB+0xac>)
 8003300:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003302:	4811      	ldr	r0, [pc, #68]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 8003304:	f000 fff2 	bl	80042ec <HAL_DMA2D_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800330e:	2101      	movs	r1, #1
 8003310:	480d      	ldr	r0, [pc, #52]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 8003312:	f001 f96d 	bl	80045f0 <HAL_DMA2D_ConfigLayer>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10e      	bne.n	800333a <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	2301      	movs	r3, #1
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4808      	ldr	r0, [pc, #32]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 8003328:	f001 f84e 	bl	80043c8 <HAL_DMA2D_Start>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8003332:	2119      	movs	r1, #25
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <LL_ConvertLineToRGB+0xa8>)
 8003336:	f001 f872 	bl	800441e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200093a8 	.word	0x200093a8
 8003348:	200093c0 	.word	0x200093c0
 800334c:	52001000 	.word	0x52001000

08003350 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b092      	sub	sp, #72	; 0x48
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a9c      	ldr	r2, [pc, #624]	; (80035d0 <LTDC_MspInit+0x280>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 80e1 	bne.w	8003526 <LTDC_MspInit+0x1d6>
  {
    /* Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003364:	4b9b      	ldr	r3, [pc, #620]	; (80035d4 <LTDC_MspInit+0x284>)
 8003366:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800336a:	4a9a      	ldr	r2, [pc, #616]	; (80035d4 <LTDC_MspInit+0x284>)
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003374:	4b97      	ldr	r3, [pc, #604]	; (80035d4 <LTDC_MspInit+0x284>)
 8003376:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b94      	ldr	r3, [pc, #592]	; (80035d4 <LTDC_MspInit+0x284>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003388:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <LTDC_MspInit+0x284>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003392:	4b90      	ldr	r3, [pc, #576]	; (80035d4 <LTDC_MspInit+0x284>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a0:	4b8c      	ldr	r3, [pc, #560]	; (80035d4 <LTDC_MspInit+0x284>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	4a8b      	ldr	r2, [pc, #556]	; (80035d4 <LTDC_MspInit+0x284>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b0:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <LTDC_MspInit+0x284>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	4b85      	ldr	r3, [pc, #532]	; (80035d4 <LTDC_MspInit+0x284>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	4a83      	ldr	r2, [pc, #524]	; (80035d4 <LTDC_MspInit+0x284>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <LTDC_MspInit+0x284>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033dc:	4b7d      	ldr	r3, [pc, #500]	; (80035d4 <LTDC_MspInit+0x284>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	4a7c      	ldr	r2, [pc, #496]	; (80035d4 <LTDC_MspInit+0x284>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ec:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <LTDC_MspInit+0x284>)
 80033ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fa:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <LTDC_MspInit+0x284>)
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <LTDC_MspInit+0x284>)
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340a:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <LTDC_MspInit+0x284>)
 800340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003418:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <LTDC_MspInit+0x284>)
 800341a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341e:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <LTDC_MspInit+0x284>)
 8003420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <LTDC_MspInit+0x284>)
 800342a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <LTDC_MspInit+0x284>)
 8003438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343c:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <LTDC_MspInit+0x284>)
 800343e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <LTDC_MspInit+0x284>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800345c:	2302      	movs	r3, #2
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003460:	230e      	movs	r3, #14
 8003462:	647b      	str	r3, [r7, #68]	; 0x44

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
 8003464:	2358      	movs	r3, #88	; 0x58
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800346c:	4619      	mov	r1, r3
 800346e:	485a      	ldr	r0, [pc, #360]	; (80035d8 <LTDC_MspInit+0x288>)
 8003470:	f002 ff62 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9;
 8003474:	f240 3303 	movw	r3, #771	; 0x303
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800347a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800347e:	4619      	mov	r1, r3
 8003480:	4856      	ldr	r0, [pc, #344]	; (80035dc <LTDC_MspInit+0x28c>)
 8003482:	f002 ff59 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 8003486:	23c0      	movs	r3, #192	; 0xc0
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800348a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800348e:	4619      	mov	r1, r3
 8003490:	4853      	ldr	r0, [pc, #332]	; (80035e0 <LTDC_MspInit+0x290>)
 8003492:	f002 ff51 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_6;
 8003496:	2349      	movs	r3, #73	; 0x49
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800349a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800349e:	4619      	mov	r1, r3
 80034a0:	4850      	ldr	r0, [pc, #320]	; (80035e4 <LTDC_MspInit+0x294>)
 80034a2:	f002 ff49 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80034a6:	f649 0303 	movw	r3, #38915	; 0x9803
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034b0:	4619      	mov	r1, r3
 80034b2:	484d      	ldr	r0, [pc, #308]	; (80035e8 <LTDC_MspInit+0x298>)
 80034b4:	f002 ff40 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_14;
 80034b8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034c2:	4619      	mov	r1, r3
 80034c4:	4849      	ldr	r0, [pc, #292]	; (80035ec <LTDC_MspInit+0x29c>)
 80034c6:	f002 ff37 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_15;
 80034ca:	f648 7308 	movw	r3, #36616	; 0x8f08
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80034d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034d4:	4619      	mov	r1, r3
 80034d6:	4846      	ldr	r0, [pc, #280]	; (80035f0 <LTDC_MspInit+0x2a0>)
 80034d8:	f002 ff2e 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF13_LTDC;
 80034dc:	230d      	movs	r3, #13
 80034de:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_8;
 80034e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80034e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034ea:	4619      	mov	r1, r3
 80034ec:	483a      	ldr	r0, [pc, #232]	; (80035d8 <LTDC_MspInit+0x288>)
 80034ee:	f002 ff23 	bl	8006338 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80034f2:	2309      	movs	r3, #9
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_4;
 80034f6:	2310      	movs	r3, #16
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80034fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034fe:	4619      	mov	r1, r3
 8003500:	483b      	ldr	r0, [pc, #236]	; (80035f0 <LTDC_MspInit+0x2a0>)
 8003502:	f002 ff19 	bl	8006338 <HAL_GPIO_Init>

    /** Toggle Sw reset of LTDC peripheral */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003506:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <LTDC_MspInit+0x284>)
 8003508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350c:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <LTDC_MspInit+0x284>)
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <LTDC_MspInit+0x284>)
 8003518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <LTDC_MspInit+0x284>)
 800351e:	f023 0308 	bic.w	r3, r3, #8
 8003522:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  }

  LCD_DISP_CTRL_GPIO_CLK_ENABLE();
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <LTDC_MspInit+0x284>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <LTDC_MspInit+0x284>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <LTDC_MspInit+0x284>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <LTDC_MspInit+0x284>)
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354a:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <LTDC_MspInit+0x284>)
 800354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <LTDC_MspInit+0x284>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <LTDC_MspInit+0x284>)
 8003564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <LTDC_MspInit+0x284>)
 800356a:	f043 0310 	orr.w	r3, r3, #16
 800356e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <LTDC_MspInit+0x284>)
 8003574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

  /* LCD_DISP_EN GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003586:	2301      	movs	r3, #1
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 800358a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800358e:	4619      	mov	r1, r3
 8003590:	4815      	ldr	r0, [pc, #84]	; (80035e8 <LTDC_MspInit+0x298>)
 8003592:	f002 fed1 	bl	8006338 <HAL_GPIO_Init>

  /* LCD_DISP_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_CTRL_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800359c:	2301      	movs	r3, #1
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_CTRL_GPIO_PORT, &gpio_init_structure);
 80035a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035a4:	4619      	mov	r1, r3
 80035a6:	480f      	ldr	r0, [pc, #60]	; (80035e4 <LTDC_MspInit+0x294>)
 80035a8:	f002 fec6 	bl	8006338 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80035ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035b2:	2301      	movs	r3, #1
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80035b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035ba:	4619      	mov	r1, r3
 80035bc:	480b      	ldr	r0, [pc, #44]	; (80035ec <LTDC_MspInit+0x29c>)
 80035be:	f002 febb 	bl	8006338 <HAL_GPIO_Init>

  HAL_Delay(40);
 80035c2:	2028      	movs	r0, #40	; 0x28
 80035c4:	f000 fcee 	bl	8003fa4 <HAL_Delay>
}
 80035c8:	bf00      	nop
 80035ca:	3748      	adds	r7, #72	; 0x48
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	50001000 	.word	0x50001000
 80035d4:	58024400 	.word	0x58024400
 80035d8:	58020000 	.word	0x58020000
 80035dc:	58020400 	.word	0x58020400
 80035e0:	58020800 	.word	0x58020800
 80035e4:	58020c00 	.word	0x58020c00
 80035e8:	58021000 	.word	0x58021000
 80035ec:	58021800 	.word	0x58021800
 80035f0:	58021c00 	.word	0x58021c00

080035f4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <DMA2D_MspInit+0x54>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d11a      	bne.n	800363c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <DMA2D_MspInit+0x58>)
 8003608:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <DMA2D_MspInit+0x58>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <DMA2D_MspInit+0x58>)
 8003618:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <DMA2D_MspInit+0x58>)
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	4a08      	ldr	r2, [pc, #32]	; (800364c <DMA2D_MspInit+0x58>)
 800362a:	f043 0310 	orr.w	r3, r3, #16
 800362e:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <DMA2D_MspInit+0x58>)
 8003632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003634:	4a05      	ldr	r2, [pc, #20]	; (800364c <DMA2D_MspInit+0x58>)
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	52001000 	.word	0x52001000
 800364c:	58024400 	.word	0x58024400

08003650 <BSP_OSPI_RAM_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Init(uint32_t Instance, BSP_OSPI_RAM_Init_t *Init)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <BSP_OSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003660:	f06f 0301 	mvn.w	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e05d      	b.n	8003724 <BSP_OSPI_RAM_Init+0xd4>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8003668:	4a31      	ldr	r2, [pc, #196]	; (8003730 <BSP_OSPI_RAM_Init+0xe0>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d155      	bne.n	8003720 <BSP_OSPI_RAM_Init+0xd0>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_RAM_MspInit(&hospi_ram[Instance]);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	225c      	movs	r2, #92	; 0x5c
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <BSP_OSPI_RAM_Init+0xe4>)
 800367e:	4413      	add	r3, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa2b 	bl	8003adc <OSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      ospi_init.ClockPrescaler = 2U; /* OctoSPI clock = 200 MHz / ClockPrescaler = 100 MHz */
 8003686:	2302      	movs	r3, #2
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800368e:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <BSP_OSPI_RAM_Init+0x56>
  {
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e003      	b.n	80036ae <BSP_OSPI_RAM_Init+0x5e>
  }
  return __builtin_clz(value);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL(S70KL1281_RAM_SIZE);
 80036ae:	60bb      	str	r3, [r7, #8]
      ospi_init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_ram[Instance]) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	225c      	movs	r2, #92	; 0x5c
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <BSP_OSPI_RAM_Init+0xe4>)
 80036be:	4413      	add	r3, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f839 	bl	8003738 <MX_OSPI_ClockConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <BSP_OSPI_RAM_Init+0x84>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80036cc:	f06f 0303 	mvn.w	r3, #3
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e027      	b.n	8003724 <BSP_OSPI_RAM_Init+0xd4>
      }
      /* STM32 OSPI interface initialization */
      else if (MX_OSPI_RAM_Init(&hospi_ram[Instance], &ospi_init) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225c      	movs	r2, #92	; 0x5c
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <BSP_OSPI_RAM_Init+0xe4>)
 80036de:	4413      	add	r3, r2
 80036e0:	f107 0208 	add.w	r2, r7, #8
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f84a 	bl	8003780 <MX_OSPI_RAM_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <BSP_OSPI_RAM_Init+0xaa>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80036f2:	f06f 0303 	mvn.w	r3, #3
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
 80036f8:	e014      	b.n	8003724 <BSP_OSPI_RAM_Init+0xd4>
      }
      /* Configure the memory */
      else if (BSP_OSPI_RAM_ConfigHyperRAM(Instance, Init->LatencyType, Init->BurstType, Init->BurstLength) != BSP_ERROR_NONE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	7819      	ldrb	r1, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	785a      	ldrb	r2, [r3, #1]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8c0 	bl	800388c <BSP_OSPI_RAM_ConfigHyperRAM>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <BSP_OSPI_RAM_Init+0xca>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003712:	f06f 0304 	mvn.w	r3, #4
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	e004      	b.n	8003724 <BSP_OSPI_RAM_Init+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	e001      	b.n	8003724 <BSP_OSPI_RAM_Init+0xd4>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003726:	4618      	mov	r0, r3
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000014 	.word	0x20000014
 8003734:	20000b48 	.word	0x20000b48

08003738 <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0b0      	sub	sp, #192	; 0xc0
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003744:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003746:	2320      	movs	r3, #32
 8003748:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800374a:	2305      	movs	r3, #5
 800374c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 800374e:	2350      	movs	r3, #80	; 0x50
 8003750:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003752:	2305      	movs	r3, #5
 8003754:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003756:	2302      	movs	r3, #2
 8003758:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800375a:	2302      	movs	r3, #2
 800375c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	4618      	mov	r0, r3
 8003770:	f005 fb08 	bl	8008d84 <HAL_RCCEx_PeriphCLKConfig>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	37c0      	adds	r7, #192	; 0xc0
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <MX_OSPI_RAM_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_RAM_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  HAL_StatusTypeDef status;

  hospi->Instance = OCTOSPI2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <MX_OSPI_RAM_Init+0xb0>)
 800378e:	601a      	str	r2, [r3, #0]
  HAL_OSPI_DeInit(hospi);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f004 f8a7 	bl	80078e4 <HAL_OSPI_DeInit>

  hospi->Init.FifoThreshold         = 4;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_HYPERBUS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037a8:	60da      	str	r2, [r3, #12]
  hospi->Init.DeviceSize            = Init->MemorySize;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime    = 4;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize              = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler        = Init->ClockPrescaler;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting        = Init->SampleShifting;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi->Init.Refresh               = 400; /*4us @100MHz*/
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi->Init.ChipSelectBoundary    = 23;  /* memory die boundary 2^23=8MBs*/
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2217      	movs	r2, #23
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30

  status = HAL_OSPI_Init(hospi);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f003 ffb1 	bl	8007758 <HAL_OSPI_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	77fb      	strb	r3, [r7, #31]
  if (status == HAL_OK)
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <MX_OSPI_RAM_Init+0xa4>
  {
    sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8003800:	2303      	movs	r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
    sHyperbusCfg.AccessTime       = DEFAULT_INITIAL_LATENCY;
 8003804:	2306      	movs	r3, #6
 8003806:	613b      	str	r3, [r7, #16]
    sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
    sHyperbusCfg.LatencyMode      = HAL_OSPI_FIXED_LATENCY;
 800380c:	2301      	movs	r3, #1
 800380e:	61bb      	str	r3, [r7, #24]

    status = HAL_OSPI_HyperbusCfg(hospi, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f004 f893 	bl	8007946 <HAL_OSPI_HyperbusCfg>
 8003820:	4603      	mov	r3, r0
 8003822:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	5200a000 	.word	0x5200a000

08003834 <BSP_OSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <BSP_OSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003846:	f06f 0301 	mvn.w	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e014      	b.n	8003878 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x44>
  }
  else
  {
    if(S70KL1281_EnableMemoryMappedMode(&hospi_ram[Instance]) != S70KL1281_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	225c      	movs	r2, #92	; 0x5c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x50>)
 8003858:	4413      	add	r3, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fb2a 	bl	8001eb4 <S70KL1281_EnableMemoryMappedMode>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <BSP_OSPI_RAM_EnableMemoryMappedMode+0x3a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003866:	f06f 0304 	mvn.w	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e004      	b.n	8003878 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x44>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800386e:	4a06      	ldr	r2, [pc, #24]	; (8003888 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x54>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2102      	movs	r1, #2
 8003874:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000b48 	.word	0x20000b48
 8003888:	20000014 	.word	0x20000014

0800388c <BSP_OSPI_RAM_ConfigHyperRAM>:
  * @param  BurstType   OSPI burst type
  * @param  BurstLength OSPI burst length
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_ConfigHyperRAM(uint32_t Instance, BSP_OSPI_RAM_Latency_t Latency, BSP_OSPI_RAM_BurstType_t BurstType, BSP_OSPI_RAM_BurstLength_t BurstLength)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	70fb      	strb	r3, [r7, #3]
 800389e:	460b      	mov	r3, r1
 80038a0:	70bb      	strb	r3, [r7, #2]
 80038a2:	4613      	mov	r3, r2
 80038a4:	707b      	strb	r3, [r7, #1]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  int32_t ret = BSP_ERROR_NONE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t initial_latency, latency_mode;
  uint16_t reg;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <BSP_OSPI_RAM_ConfigHyperRAM+0x2c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038b0:	f06f 0301 	mvn.w	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e107      	b.n	8003ac8 <BSP_OSPI_RAM_ConfigHyperRAM+0x23c>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80038b8:	4a86      	ldr	r2, [pc, #536]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d103      	bne.n	80038cc <BSP_OSPI_RAM_ConfigHyperRAM+0x40>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80038c4:	f06f 0319 	mvn.w	r3, #25
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	e0fd      	b.n	8003ac8 <BSP_OSPI_RAM_ConfigHyperRAM+0x23c>
    }
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 80038cc:	4a81      	ldr	r2, [pc, #516]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 80038d8:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	785b      	ldrb	r3, [r3, #1]
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d110      	bne.n	800390a <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 80038e8:	4a7a      	ldr	r2, [pc, #488]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	789b      	ldrb	r3, [r3, #2]
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 80038f2:	78ba      	ldrb	r2, [r7, #2]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d108      	bne.n	800390a <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstLength   != BurstLength))
 80038f8:	4a76      	ldr	r2, [pc, #472]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	78db      	ldrb	r3, [r3, #3]
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 8003902:	787a      	ldrb	r2, [r7, #1]
 8003904:	429a      	cmp	r2, r3
 8003906:	f000 80df 	beq.w	8003ac8 <BSP_OSPI_RAM_ConfigHyperRAM+0x23c>
    {
      /* Reading the configuration of the HyperRAM ****************************/
      if(S70KL1281_ReadCfgReg0(&hospi_ram[Instance], &reg) != S70KL1281_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	225c      	movs	r2, #92	; 0x5c
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	4a71      	ldr	r2, [pc, #452]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003914:	4413      	add	r3, r2
 8003916:	f107 020a 	add.w	r2, r7, #10
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fafa 	bl	8001f16 <S70KL1281_ReadCfgReg0>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <BSP_OSPI_RAM_ConfigHyperRAM+0xa4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003928:	f06f 0304 	mvn.w	r3, #4
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	e0b1      	b.n	8003a94 <BSP_OSPI_RAM_ConfigHyperRAM+0x208>
      }
      else
      {
        /* Configure the HyperRAM memory **************************************/
        /* Initial latency */
        if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8003930:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <BSP_OSPI_RAM_ConfigHyperRAM+0xba>
        {
          initial_latency = DEFAULT_INITIAL_LATENCY;
 800393c:	2306      	movs	r3, #6
 800393e:	623b      	str	r3, [r7, #32]
          latency_mode = HAL_OSPI_FIXED_LATENCY;
 8003940:	2301      	movs	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e002      	b.n	800394c <BSP_OSPI_RAM_ConfigHyperRAM+0xc0>
        }
        else
        {
          ret = BSP_ERROR_WRONG_PARAM;
 8003946:	f06f 0301 	mvn.w	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* check Latency Type */
        if (Latency != BSP_OSPI_RAM_FIXED_LATENCY)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d002      	beq.n	8003958 <BSP_OSPI_RAM_ConfigHyperRAM+0xcc>
        {
          ret = BSP_ERROR_WRONG_PARAM;
 8003952:	f06f 0301 	mvn.w	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Burst type */
        if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 8003958:	78bb      	ldrb	r3, [r7, #2]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <BSP_OSPI_RAM_ConfigHyperRAM+0xde>
        {
          CLEAR_BIT(reg, S70KL1281_CR0_HBE);
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	b29b      	uxth	r3, r3
 8003966:	817b      	strh	r3, [r7, #10]
 8003968:	e004      	b.n	8003974 <BSP_OSPI_RAM_ConfigHyperRAM+0xe8>
        }
        else
        {
          SET_BIT(reg, S70KL1281_CR0_HBE);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	b29b      	uxth	r3, r3
 8003972:	817b      	strh	r3, [r7, #10]
        }

        /* Burst length */
        MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_BLENGTH, (uint16_t) BurstLength);
 8003974:	897b      	ldrh	r3, [r7, #10]
 8003976:	b21b      	sxth	r3, r3
 8003978:	f023 0303 	bic.w	r3, r3, #3
 800397c:	b21a      	sxth	r2, r3
 800397e:	787b      	ldrb	r3, [r7, #1]
 8003980:	b21b      	sxth	r3, r3
 8003982:	4313      	orrs	r3, r2
 8003984:	b21b      	sxth	r3, r3
 8003986:	b29b      	uxth	r3, r3
 8003988:	817b      	strh	r3, [r7, #10]

        if (S70KL1281_WriteCfgReg0(&hospi_ram[Instance], reg, latency_mode, initial_latency) != S70KL1281_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	225c      	movs	r2, #92	; 0x5c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a51      	ldr	r2, [pc, #324]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003994:	1898      	adds	r0, r3, r2
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f7fe faed 	bl	8001f7a <S70KL1281_WriteCfgReg0>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <BSP_OSPI_RAM_ConfigHyperRAM+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80039a6:	f06f 0304 	mvn.w	r3, #4
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	e072      	b.n	8003a94 <BSP_OSPI_RAM_ConfigHyperRAM+0x208>
        }
        else
        {
          /* Configure the peripheral *****************************************/
          if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 80039ae:	78bb      	ldrb	r3, [r7, #2]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d139      	bne.n	8003a28 <BSP_OSPI_RAM_ConfigHyperRAM+0x19c>
          {
            switch (BurstLength)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d840      	bhi.n	8003a3c <BSP_OSPI_RAM_ConfigHyperRAM+0x1b0>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <BSP_OSPI_RAM_ConfigHyperRAM+0x134>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	08003a13 	.word	0x08003a13
 80039c4:	080039fd 	.word	0x080039fd
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	080039e7 	.word	0x080039e7
            {
            case BSP_OSPI_RAM_BURST_16_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_16_BYTES;
 80039d0:	4a41      	ldr	r2, [pc, #260]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	215c      	movs	r1, #92	; 0x5c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3320      	adds	r3, #32
 80039de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039e2:	601a      	str	r2, [r3, #0]
              break;
 80039e4:	e02b      	b.n	8003a3e <BSP_OSPI_RAM_ConfigHyperRAM+0x1b2>
            case BSP_OSPI_RAM_BURST_32_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_32_BYTES;
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	215c      	movs	r1, #92	; 0x5c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3320      	adds	r3, #32
 80039f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039f8:	601a      	str	r2, [r3, #0]
              break;
 80039fa:	e020      	b.n	8003a3e <BSP_OSPI_RAM_ConfigHyperRAM+0x1b2>
            case BSP_OSPI_RAM_BURST_64_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80039fc:	4a36      	ldr	r2, [pc, #216]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	215c      	movs	r1, #92	; 0x5c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	3320      	adds	r3, #32
 8003a0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a0e:	601a      	str	r2, [r3, #0]
              break;
 8003a10:	e015      	b.n	8003a3e <BSP_OSPI_RAM_ConfigHyperRAM+0x1b2>
            case BSP_OSPI_RAM_BURST_128_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_128_BYTES;
 8003a12:	4a31      	ldr	r2, [pc, #196]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	215c      	movs	r1, #92	; 0x5c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3320      	adds	r3, #32
 8003a20:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8003a24:	601a      	str	r2, [r3, #0]
              break;
 8003a26:	e00a      	b.n	8003a3e <BSP_OSPI_RAM_ConfigHyperRAM+0x1b2>
              break;
            }
          }
          else
          {
            hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003a28:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	215c      	movs	r1, #92	; 0x5c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3320      	adds	r3, #32
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e000      	b.n	8003a3e <BSP_OSPI_RAM_ConfigHyperRAM+0x1b2>
              break;
 8003a3c:	bf00      	nop
          }
          if (HAL_OSPI_Init(&hospi_ram[Instance]) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	225c      	movs	r2, #92	; 0x5c
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fe84 	bl	8007758 <HAL_OSPI_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <BSP_OSPI_RAM_ConfigHyperRAM+0x1d2>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003a56:	f06f 0303 	mvn.w	r3, #3
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	e01a      	b.n	8003a94 <BSP_OSPI_RAM_ConfigHyperRAM+0x208>
          }
          else
          {
            sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	60fb      	str	r3, [r7, #12]
            sHyperbusCfg.AccessTime       = DEFAULT_INITIAL_LATENCY;
 8003a62:	2306      	movs	r3, #6
 8003a64:	613b      	str	r3, [r7, #16]
            sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
            sHyperbusCfg.LatencyMode      = HAL_OSPI_FIXED_LATENCY;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61bb      	str	r3, [r7, #24]

            if (HAL_OSPI_HyperbusCfg(&hospi_ram[Instance], &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	225c      	movs	r2, #92	; 0x5c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <BSP_OSPI_RAM_ConfigHyperRAM+0x24c>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	f107 010c 	add.w	r1, r7, #12
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 ff5f 	bl	8007946 <HAL_OSPI_HyperbusCfg>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <BSP_OSPI_RAM_ConfigHyperRAM+0x208>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8003a8e:	f06f 0303 	mvn.w	r3, #3
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <BSP_OSPI_RAM_ConfigHyperRAM+0x23c>
      {
        /* Update current status parameter *****************************************/
        Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003a9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Ram_Ctx[Instance].LatencyType   = BSP_OSPI_RAM_FIXED_LATENCY;
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	2201      	movs	r2, #1
 8003aae:	705a      	strb	r2, [r3, #1]
        Ospi_Ram_Ctx[Instance].BurstType     = BurstType;
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	78ba      	ldrb	r2, [r7, #2]
 8003aba:	709a      	strb	r2, [r3, #2]
        Ospi_Ram_Ctx[Instance].BurstLength   = BurstLength;
 8003abc:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <BSP_OSPI_RAM_ConfigHyperRAM+0x248>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	787a      	ldrb	r2, [r7, #1]
 8003ac6:	70da      	strb	r2, [r3, #3]
      /* Nothing to do */
    }
  }

  /* Return BSP status */
  return ret;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000014 	.word	0x20000014
 8003ad8:	20000b48 	.word	0x20000b48

08003adc <OSPI_RAM_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_RAM_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b094      	sub	sp, #80	; 0x50
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the OctoSPI memory interface, DMA and GPIO clocks */
  OSPI_RAM_CLK_ENABLE();
 8003ae4:	4bba      	ldr	r3, [pc, #744]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003aea:	4ab9      	ldr	r2, [pc, #740]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003af0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003af4:	4bb6      	ldr	r3, [pc, #728]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003af6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  OSPI_RAM_MDMAx_CLK_ENABLE();
 8003b02:	4bb3      	ldr	r3, [pc, #716]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003b08:	4ab1      	ldr	r2, [pc, #708]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003b12:	4baf      	ldr	r3, [pc, #700]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_RAM_CLK_GPIO_CLK_ENABLE();
 8003b20:	4bab      	ldr	r3, [pc, #684]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b26:	4aaa      	ldr	r2, [pc, #680]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b30:	4ba7      	ldr	r3, [pc, #668]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_RAM_DQS_GPIO_CLK_ENABLE();
 8003b3e:	4ba4      	ldr	r3, [pc, #656]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b44:	4aa2      	ldr	r2, [pc, #648]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b46:	f043 0320 	orr.w	r3, r3, #32
 8003b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b4e:	4ba0      	ldr	r3, [pc, #640]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_RAM_CS_GPIO_CLK_ENABLE();
 8003b5c:	4b9c      	ldr	r3, [pc, #624]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b62:	4a9b      	ldr	r2, [pc, #620]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b6c:	4b98      	ldr	r3, [pc, #608]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_RAM_D0_GPIO_CLK_ENABLE();
 8003b7a:	4b95      	ldr	r3, [pc, #596]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b80:	4a93      	ldr	r2, [pc, #588]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b82:	f043 0320 	orr.w	r3, r3, #32
 8003b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8a:	4b91      	ldr	r3, [pc, #580]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_RAM_D1_GPIO_CLK_ENABLE();
 8003b98:	4b8d      	ldr	r3, [pc, #564]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9e:	4a8c      	ldr	r2, [pc, #560]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003ba0:	f043 0320 	orr.w	r3, r3, #32
 8003ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ba8:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
  OSPI_RAM_D2_GPIO_CLK_ENABLE();
 8003bb6:	4b86      	ldr	r3, [pc, #536]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbc:	4a84      	ldr	r2, [pc, #528]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bbe:	f043 0320 	orr.w	r3, r3, #32
 8003bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
  OSPI_RAM_D3_GPIO_CLK_ENABLE();
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bda:	4a7d      	ldr	r2, [pc, #500]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003be4:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
  OSPI_RAM_D4_GPIO_CLK_ENABLE();
 8003bf2:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf8:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
  OSPI_RAM_D5_GPIO_CLK_ENABLE();
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c16:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c20:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
  OSPI_RAM_D6_GPIO_CLK_ENABLE();
 8003c2e:	4b68      	ldr	r3, [pc, #416]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c34:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c3e:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
  OSPI_RAM_D7_GPIO_CLK_ENABLE();
 8003c4c:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c52:	4a5f      	ldr	r2, [pc, #380]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]

  /* Reset the OctoSPI memory interface */
  OSPI_RAM_FORCE_RESET();
 8003c6a:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6e:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c74:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RAM_RELEASE_RESET();
 8003c76:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7a:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <OSPI_RAM_MspInit+0x2f4>)
 8003c7c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003c80:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CS_PIN;
 8003c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_RAM_CS_PIN_AF;
 8003c94:	2303      	movs	r3, #3
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
 8003c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	484d      	ldr	r0, [pc, #308]	; (8003dd4 <OSPI_RAM_MspInit+0x2f8>)
 8003ca0:	f002 fb4a 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_RAM_DQS_PIN;
 8003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_DQS_PIN_AF;
 8003cae:	2309      	movs	r3, #9
 8003cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003cb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4847      	ldr	r0, [pc, #284]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003cba:	f002 fb3d 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CLK_PIN;
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_CLK_PIN_AF;
 8003cc2:	2309      	movs	r3, #9
 8003cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003cc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4842      	ldr	r0, [pc, #264]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003cce:	f002 fb33 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D0_PIN;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D0_PIN_AF;
 8003cd6:	2309      	movs	r3, #9
 8003cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
 8003cda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	483d      	ldr	r0, [pc, #244]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003ce2:	f002 fb29 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D1_PIN;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D1_PIN_AF;
 8003cea:	2309      	movs	r3, #9
 8003cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
 8003cee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4838      	ldr	r0, [pc, #224]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003cf6:	f002 fb1f 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D2_PIN;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D2_PIN_AF;
 8003cfe:	2309      	movs	r3, #9
 8003d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
 8003d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d06:	4619      	mov	r1, r3
 8003d08:	4833      	ldr	r0, [pc, #204]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003d0a:	f002 fb15 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D3_PIN;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D3_PIN_AF;
 8003d12:	2309      	movs	r3, #9
 8003d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
 8003d16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	482e      	ldr	r0, [pc, #184]	; (8003dd8 <OSPI_RAM_MspInit+0x2fc>)
 8003d1e:	f002 fb0b 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D4_PIN;
 8003d22:	2301      	movs	r3, #1
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D4_PIN_AF;
 8003d26:	2309      	movs	r3, #9
 8003d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
 8003d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4828      	ldr	r0, [pc, #160]	; (8003dd4 <OSPI_RAM_MspInit+0x2f8>)
 8003d32:	f002 fb01 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D5_PIN;
 8003d36:	2302      	movs	r3, #2
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D5_PIN_AF;
 8003d3a:	2309      	movs	r3, #9
 8003d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
 8003d3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d42:	4619      	mov	r1, r3
 8003d44:	4823      	ldr	r0, [pc, #140]	; (8003dd4 <OSPI_RAM_MspInit+0x2f8>)
 8003d46:	f002 faf7 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D6_PIN;
 8003d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D6_PIN_AF;
 8003d50:	2303      	movs	r3, #3
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
 8003d54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <OSPI_RAM_MspInit+0x2f8>)
 8003d5c:	f002 faec 	bl	8006338 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D7_PIN;
 8003d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D7_PIN_AF;
 8003d66:	2309      	movs	r3, #9
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
 8003d6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4818      	ldr	r0, [pc, #96]	; (8003dd4 <OSPI_RAM_MspInit+0x2f8>)
 8003d72:	f002 fae1 	bl	8006338 <HAL_GPIO_Init>

  /* Configure the OctoSPI DMA */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d84:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d88:	2280      	movs	r2, #128	; 0x80
 8003d8a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d8e:	f240 2202 	movw	r2, #514	; 0x202
 8003d92:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d96:	f640 0208 	movw	r2, #2056	; 0x808
 8003d9a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003d9e:	2220      	movs	r2, #32
 8003da0:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8003dbc:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <OSPI_RAM_MspInit+0x300>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	e008      	b.n	8003de0 <OSPI_RAM_MspInit+0x304>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58021800 	.word	0x58021800
 8003dd8:	58021400 	.word	0x58021400
 8003ddc:	20000ba4 	.word	0x20000ba4
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

  mdma_handle.Instance = OSPI_RAM_MDMAx_CHANNEL;
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <OSPI_RAM_MspInit+0x348>)
 8003de4:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <OSPI_RAM_MspInit+0x34c>)
 8003de6:	601a      	str	r2, [r3, #0]

  __HAL_LINKDMA(hospi, hmdma, mdma_handle);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <OSPI_RAM_MspInit+0x348>)
 8003dec:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <OSPI_RAM_MspInit+0x348>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6413      	str	r3, [r2, #64]	; 0x40
  (void) HAL_MDMA_Init(&mdma_handle);
 8003df4:	480b      	ldr	r0, [pc, #44]	; (8003e24 <OSPI_RAM_MspInit+0x348>)
 8003df6:	f003 fbcb 	bl	8007590 <HAL_MDMA_Init>

  /* Enable and set priority of the OctoSPI and DMA interrupts */
  HAL_NVIC_SetPriority(OCTOSPI2_IRQn, BSP_OSPI_RAM_IT_PRIORITY, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2107      	movs	r1, #7
 8003dfe:	2096      	movs	r0, #150	; 0x96
 8003e00:	f000 f9d0 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(OSPI_RAM_MDMAx_IRQn, BSP_OSPI_RAM_DMA_IT_PRIORITY, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2107      	movs	r1, #7
 8003e08:	207a      	movs	r0, #122	; 0x7a
 8003e0a:	f000 f9cb 	bl	80041a4 <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
 8003e0e:	2096      	movs	r0, #150	; 0x96
 8003e10:	f000 f9e2 	bl	80041d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(OSPI_RAM_MDMAx_IRQn);
 8003e14:	207a      	movs	r0, #122	; 0x7a
 8003e16:	f000 f9df 	bl	80041d8 <HAL_NVIC_EnableIRQ>

}
 8003e1a:	bf00      	nop
 8003e1c:	3750      	adds	r7, #80	; 0x50
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000ba4 	.word	0x20000ba4
 8003e28:	52000040 	.word	0x52000040

08003e2c <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e30:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <SystemInit+0xa0>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <SystemInit+0xa0>)
 8003e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <SystemInit+0xa4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <SystemInit+0xa4>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e4c:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <SystemInit+0xa4>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <SystemInit+0xa4>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	491e      	ldr	r1, [pc, #120]	; (8003ed0 <SystemInit+0xa4>)
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <SystemInit+0xa8>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <SystemInit+0xa4>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <SystemInit+0xa4>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <SystemInit+0xa4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <SystemInit+0xa4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <SystemInit+0xa4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <SystemInit+0xa4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <SystemInit+0xa4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <SystemInit+0xa4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <SystemInit+0xa4>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <SystemInit+0xa4>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <SystemInit+0xa4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <SystemInit+0xa4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <SystemInit+0xa4>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <SystemInit+0xa4>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <SystemInit+0xac>)
 8003eb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SystemInit+0xa0>)
 8003ebc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ec0:	609a      	str	r2, [r3, #8]
#endif


}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ed8:	52004000 	.word	0x52004000

08003edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee2:	2003      	movs	r0, #3
 8003ee4:	f000 f953 	bl	800418e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ee8:	f004 fd34 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_Init+0x68>)
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	4913      	ldr	r1, [pc, #76]	; (8003f48 <HAL_Init+0x6c>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_Init+0x68>)
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_Init+0x6c>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <HAL_Init+0x70>)
 8003f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f20:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <HAL_Init+0x74>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f26:	200f      	movs	r0, #15
 8003f28:	f7fd fc40 	bl	80017ac <HAL_InitTick>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e002      	b.n	8003f3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f36:	f000 f80d 	bl	8003f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	58024400 	.word	0x58024400
 8003f48:	08024d90 	.word	0x08024d90
 8003f4c:	20000020 	.word	0x20000020
 8003f50:	2000001c 	.word	0x2000001c

08003f54 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_IncTick+0x20>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_IncTick+0x24>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_IncTick+0x24>)
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000028 	.word	0x20000028
 8003f88:	20009428 	.word	0x20009428

08003f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_GetTick+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20009428 	.word	0x20009428

08003fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7ff ffee 	bl	8003f8c <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbc:	d005      	beq.n	8003fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_Delay+0x44>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fca:	bf00      	nop
 8003fcc:	f7ff ffde 	bl	8003f8c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d8f7      	bhi.n	8003fcc <HAL_Delay+0x28>
  {
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000028 	.word	0x20000028

08003fec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	58000400 	.word	0x58000400

08004014 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_EnableCompensationCell+0x1c>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_EnableCompensationCell+0x1c>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6213      	str	r3, [r2, #32]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58000400 	.word	0x58000400

08004034 <__NVIC_SetPriorityGrouping>:
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <__NVIC_SetPriorityGrouping+0x40>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <__NVIC_SetPriorityGrouping+0x44>)
 800405e:	4313      	orrs	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <__NVIC_SetPriorityGrouping+0x40>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	60d3      	str	r3, [r2, #12]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00
 8004078:	05fa0000 	.word	0x05fa0000

0800407c <__NVIC_GetPriorityGrouping>:
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <__NVIC_GetPriorityGrouping+0x18>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 0307 	and.w	r3, r3, #7
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_EnableIRQ>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db0b      	blt.n	80040c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f003 021f 	and.w	r2, r3, #31
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <__NVIC_EnableIRQ+0x38>)
 80040b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2001      	movs	r0, #1
 80040ba:	fa00 f202 	lsl.w	r2, r0, r2
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e100 	.word	0xe000e100

080040d4 <__NVIC_SetPriority>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	db0a      	blt.n	80040fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	490c      	ldr	r1, [pc, #48]	; (8004120 <__NVIC_SetPriority+0x4c>)
 80040ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	440b      	add	r3, r1
 80040f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040fc:	e00a      	b.n	8004114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4908      	ldr	r1, [pc, #32]	; (8004124 <__NVIC_SetPriority+0x50>)
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3b04      	subs	r3, #4
 800410c:	0112      	lsls	r2, r2, #4
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	440b      	add	r3, r1
 8004112:	761a      	strb	r2, [r3, #24]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000e100 	.word	0xe000e100
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <NVIC_EncodePriority>:
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	bf28      	it	cs
 8004146:	2304      	movcs	r3, #4
 8004148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3304      	adds	r3, #4
 800414e:	2b06      	cmp	r3, #6
 8004150:	d902      	bls.n	8004158 <NVIC_EncodePriority+0x30>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3b03      	subs	r3, #3
 8004156:	e000      	b.n	800415a <NVIC_EncodePriority+0x32>
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800415c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	401a      	ands	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	43d9      	mvns	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	4313      	orrs	r3, r2
}
 8004182:	4618      	mov	r0, r3
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ff4c 	bl	8004034 <__NVIC_SetPriorityGrouping>
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b2:	f7ff ff63 	bl	800407c <__NVIC_GetPriorityGrouping>
 80041b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f7ff ffb3 	bl	8004128 <NVIC_EncodePriority>
 80041c2:	4602      	mov	r2, r0
 80041c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ff82 	bl	80040d4 <__NVIC_SetPriority>
}
 80041d0:	bf00      	nop
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff56 	bl	8004098 <__NVIC_EnableIRQ>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80041f8:	f3bf 8f5f 	dmb	sy
}
 80041fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_MPU_Disable+0x28>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	4a06      	ldr	r2, [pc, #24]	; (800421c <HAL_MPU_Disable+0x28>)
 8004204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004208:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_MPU_Disable+0x2c>)
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00
 8004220:	e000ed90 	.word	0xe000ed90

08004224 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_MPU_Enable+0x38>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <HAL_MPU_Enable+0x3c>)
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_MPU_Enable+0x3c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004242:	f3bf 8f4f 	dsb	sy
}
 8004246:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004248:	f3bf 8f6f 	isb	sy
}
 800424c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000ed90 	.word	0xe000ed90
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	785a      	ldrb	r2, [r3, #1]
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_MPU_ConfigRegion+0x84>)
 8004272:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d029      	beq.n	80042d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800427c:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <HAL_MPU_ConfigRegion+0x84>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7b1b      	ldrb	r3, [r3, #12]
 8004288:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7adb      	ldrb	r3, [r3, #11]
 800428e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004290:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7a9b      	ldrb	r3, [r3, #10]
 8004296:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004298:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7b5b      	ldrb	r3, [r3, #13]
 800429e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80042a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7b9b      	ldrb	r3, [r3, #14]
 80042a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7bdb      	ldrb	r3, [r3, #15]
 80042ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7a5b      	ldrb	r3, [r3, #9]
 80042b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7a1b      	ldrb	r3, [r3, #8]
 80042be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042c8:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80042ce:	e005      	b.n	80042dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_MPU_ConfigRegion+0x84>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_MPU_ConfigRegion+0x84>)
 80042d8:	2200      	movs	r2, #0
 80042da:	611a      	str	r2, [r3, #16]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000ed90 	.word	0xe000ed90

080042ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e04f      	b.n	800439e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f84e 	bl	80043b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_DMA2D_Init+0xbc>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6851      	ldr	r1, [r2, #4]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69d2      	ldr	r2, [r2, #28]
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	430b      	orrs	r3, r1
 800433a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_DMA2D_Init+0xc0>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6891      	ldr	r1, [r2, #8]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6992      	ldr	r2, [r2, #24]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_DMA2D_Init+0xc4>)
 8004360:	4013      	ands	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d1      	ldr	r1, [r2, #12]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	430b      	orrs	r3, r1
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	051a      	lsls	r2, r3, #20
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	055b      	lsls	r3, r3, #21
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	fff8ffbf 	.word	0xfff8ffbf
 80043ac:	fffffef8 	.word	0xfffffef8
 80043b0:	ffff0000 	.word	0xffff0000

080043b4 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_DMA2D_Start+0x1c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e018      	b.n	8004416 <HAL_DMA2D_Start+0x4e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f9aa 	bl	8004758 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d056      	beq.n	80044e8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800443a:	f7ff fda7 	bl	8003f8c <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004440:	e04b      	b.n	80044da <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004462:	f043 0202 	orr.w	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2221      	movs	r2, #33	; 0x21
 8004486:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2204      	movs	r2, #4
 800448c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0a5      	b.n	80045e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d01a      	beq.n	80044da <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7ff fd72 	bl	8003f8c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <HAL_DMA2D_PollForTransfer+0x9c>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2203      	movs	r2, #3
 80044ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e086      	b.n	80045e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ac      	beq.n	8004442 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d061      	beq.n	80045ce <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800450a:	f7ff fd3f 	bl	8003f8c <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004510:	e056      	b.n	80045c0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004520:	2b00      	cmp	r3, #0
 8004522:	d02e      	beq.n	8004582 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004548:	f043 0202 	orr.w	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2229      	movs	r2, #41	; 0x29
 800456c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2204      	movs	r2, #4
 8004572:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e032      	b.n	80045e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004588:	d01a      	beq.n	80045c0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7ff fcff 	bl	8003f8c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <HAL_DMA2D_PollForTransfer+0x182>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2203      	movs	r2, #3
 80045b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e013      	b.n	80045e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0a1      	beq.n	8004512 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2212      	movs	r2, #18
 80045d4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d104      	bne.n	8004612 <HAL_DMA2D_ConfigLayer+0x22>
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_DMA2D_ConfigLayer+0x30>
 800461c:	2302      	movs	r3, #2
 800461e:	e092      	b.n	8004746 <HAL_DMA2D_ConfigLayer+0x156>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	3328      	adds	r3, #40	; 0x28
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004654:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004660:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_DMA2D_ConfigLayer+0x164>)
 8004662:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b0a      	cmp	r3, #10
 800466a:	d003      	beq.n	8004674 <HAL_DMA2D_ConfigLayer+0x84>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d107      	bne.n	8004684 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e005      	b.n	8004690 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d120      	bne.n	80046d8 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	43db      	mvns	r3, r3
 80046a0:	ea02 0103 	and.w	r1, r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b0a      	cmp	r3, #10
 80046be:	d003      	beq.n	80046c8 <HAL_DMA2D_ConfigLayer+0xd8>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d135      	bne.n	8004734 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
 80046d6:	e02d      	b.n	8004734 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b0b      	cmp	r3, #11
 80046de:	d109      	bne.n	80046f4 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	049b      	lsls	r3, r3, #18
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80046f2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	ea02 0103 	and.w	r1, r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b0a      	cmp	r3, #10
 800471c:	d003      	beq.n	8004726 <HAL_DMA2D_ConfigLayer+0x136>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b09      	cmp	r3, #9
 8004724:	d106      	bne.n	8004734 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004732:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	ff33000f 	.word	0xff33000f

08004758 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004758:	b480      	push	{r7}
 800475a:	b08b      	sub	sp, #44	; 0x2c
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	041a      	lsls	r2, r3, #16
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	431a      	orrs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004790:	d174      	bne.n	800487c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004798:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047a0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047a8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	431a      	orrs	r2, r3
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	e053      	b.n	8004872 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d106      	bne.n	80047e0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	e048      	b.n	8004872 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d111      	bne.n	800480c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	0cdb      	lsrs	r3, r3, #19
 80047ec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	0a9b      	lsrs	r3, r3, #10
 80047f2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	02db      	lsls	r3, r3, #11
 8004802:	4313      	orrs	r3, r2
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e032      	b.n	8004872 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d117      	bne.n	8004844 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	0fdb      	lsrs	r3, r3, #31
 8004818:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	0cdb      	lsrs	r3, r3, #19
 800481e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	029b      	lsls	r3, r3, #10
 8004834:	431a      	orrs	r2, r3
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	03db      	lsls	r3, r3, #15
 800483a:	4313      	orrs	r3, r2
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	e016      	b.n	8004872 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	0f1b      	lsrs	r3, r3, #28
 8004848:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	0d1b      	lsrs	r3, r3, #20
 800484e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	0b1b      	lsrs	r3, r3, #12
 8004854:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	011a      	lsls	r2, r3, #4
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	431a      	orrs	r2, r3
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	031b      	lsls	r3, r3, #12
 800486a:	4313      	orrs	r3, r2
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800487a:	e00d      	b.n	8004898 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004884:	d104      	bne.n	8004890 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	615a      	str	r2, [r3, #20]
}
 800488e:	e003      	b.n	8004898 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	60da      	str	r2, [r3, #12]
}
 8004898:	bf00      	nop
 800489a:	372c      	adds	r7, #44	; 0x2c
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0cd      	b.n	8004a52 <HAL_ETH_Init+0x1ae>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2223      	movs	r2, #35	; 0x23
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fc f8b9 	bl	8000a40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <HAL_ETH_Init+0x1b8>)
 80048d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048d4:	4a61      	ldr	r2, [pc, #388]	; (8004a5c <HAL_ETH_Init+0x1b8>)
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_ETH_Init+0x1b8>)
 80048e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7a1b      	ldrb	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7ff fb79 	bl	8003fec <HAL_SYSCFG_ETHInterfaceSelect>
 80048fa:	e003      	b.n	8004904 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80048fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004900:	f7ff fb74 	bl	8003fec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004904:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <HAL_ETH_Init+0x1bc>)
 8004906:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004920:	f7ff fb34 	bl	8003f8c <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004926:	e011      	b.n	800494c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004928:	f7ff fb30 	bl	8003f8c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004936:	d909      	bls.n	800494c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	22e0      	movs	r2, #224	; 0xe0
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e082      	b.n	8004a52 <HAL_ETH_Init+0x1ae>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e4      	bne.n	8004928 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 ff16 	bl	8005790 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004964:	f004 f970 	bl	8008c48 <HAL_RCC_GetHCLKFreq>
 8004968:	4603      	mov	r3, r0
 800496a:	4a3e      	ldr	r2, [pc, #248]	; (8004a64 <HAL_ETH_Init+0x1c0>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	0c9a      	lsrs	r2, r3, #18
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3a01      	subs	r2, #1
 8004978:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 f90f 	bl	8005ba0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004998:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800499c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_ETH_Init+0x11a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	22e0      	movs	r2, #224	; 0xe0
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e049      	b.n	8004a52 <HAL_ETH_Init+0x1ae>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80049c6:	4413      	add	r3, r2
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_ETH_Init+0x1c4>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6952      	ldr	r2, [r2, #20]
 80049d2:	0052      	lsls	r2, r2, #1
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	431a      	orrs	r2, r3
 80049da:	f241 1308 	movw	r3, #4360	; 0x1108
 80049de:	440b      	add	r3, r1
 80049e0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 f979 	bl	8005cda <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f001 f9bd 	bl	8005d68 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	3305      	adds	r3, #5
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	3303      	adds	r3, #3
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	061a      	lsls	r2, r3, #24
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	3301      	adds	r3, #1
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a3a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
 8004a60:	58000400 	.word	0x58000400
 8004a64:	431bde83 	.word	0x431bde83
 8004a68:	ffff8001 	.word	0xffff8001

08004a6c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d177      	bne.n	8004b6e <HAL_ETH_Start_IT+0x102>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2223      	movs	r2, #35	; 0x23
 8004a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <HAL_ETH_Start_IT+0x10c>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <HAL_ETH_Start_IT+0x110>)
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9e8 	bl	8004e90 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0202 	orr.w	r2, r2, #2
 8004ace:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f241 1304 	movw	r3, #4356	; 0x1104
 8004afc:	4413      	add	r3, r2
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6811      	ldr	r1, [r2, #0]
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	f241 1304 	movw	r3, #4356	; 0x1104
 8004b0c:	440b      	add	r3, r1
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b18:	4413      	add	r3, r2
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6811      	ldr	r1, [r2, #0]
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b28:	440b      	add	r3, r1
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8004b3e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b42:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b4c:	4413      	add	r3, r2
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6811      	ldr	r1, [r2, #0]
 8004b54:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b5e:	440b      	add	r3, r1
 8004b60:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2223      	movs	r2, #35	; 0x23
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <HAL_ETH_Start_IT+0x104>
  }
  else
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	0c020060 	.word	0x0c020060
 8004b7c:	0c20c000 	.word	0x0c20c000

08004b80 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8e:	2b23      	cmp	r3, #35	; 0x23
 8004b90:	d165      	bne.n	8004c5e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2223      	movs	r2, #35	; 0x23
 8004b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004ba2:	4413      	add	r3, r2
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <HAL_ETH_Stop_IT+0xec>)
 8004bac:	401a      	ands	r2, r3
 8004bae:	f241 1334 	movw	r3, #4404	; 0x1134
 8004bb2:	440b      	add	r3, r1
 8004bb4:	601a      	str	r2, [r3, #0]
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f241 1304 	movw	r3, #4356	; 0x1104
 8004bbe:	4413      	add	r3, r2
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6811      	ldr	r1, [r2, #0]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	f241 1304 	movw	r3, #4356	; 0x1104
 8004bce:	440b      	add	r3, r1
 8004bd0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f241 1308 	movw	r3, #4360	; 0x1108
 8004bda:	4413      	add	r3, r2
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	f241 1308 	movw	r3, #4360	; 0x1108
 8004bea:	440b      	add	r3, r1
 8004bec:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0202 	bic.w	r2, r2, #2
 8004c20:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e00e      	b.n	8004c46 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	3212      	adds	r2, #18
 8004c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c32:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d9ed      	bls.n	8004c28 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2210      	movs	r2, #16
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	ffff2f3e 	.word	0xffff2f3e

08004c70 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e039      	b.n	8004d08 <HAL_ETH_Transmit_IT+0x98>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	2b23      	cmp	r3, #35	; 0x23
 8004c9c:	d133      	bne.n	8004d06 <HAL_ETH_Transmit_IT+0x96>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 f8b8 	bl	8005e20 <ETH_Prepare_Tx_Descriptors>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f043 0202 	orr.w	r2, r3, #2
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e01e      	b.n	8004d08 <HAL_ETH_Transmit_IT+0x98>
  __ASM volatile ("dsb 0xF":::"memory");
 8004cca:	f3bf 8f4f 	dsb	sy
}
 8004cce:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d904      	bls.n	8004cec <HAL_ETH_Transmit_IT+0x7c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	1f1a      	subs	r2, r3, #4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	3106      	adds	r1, #6
 8004cf8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004cfc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004d00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_ETH_Transmit_IT+0x98>

  }
  else
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0a5      	b.n	8004e88 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	2b23      	cmp	r3, #35	; 0x23
 8004d44:	d001      	beq.n	8004d4a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e09e      	b.n	8004e88 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	3212      	adds	r2, #18
 8004d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	f1c3 0304 	rsb	r3, r3, #4
 8004d64:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004d66:	e067      	b.n	8004e38 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <HAL_ETH_ReadData+0x88>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d03d      	beq.n	8004e14 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004dee:	461a      	mov	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f7fc f804 	bl	8000e00 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2200      	movs	r2, #0
 8004e12:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d902      	bls.n	8004e26 <HAL_ETH_ReadData+0x116>
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3b04      	subs	r3, #4
 8004e24:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	3212      	adds	r2, #18
 8004e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e30:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	3301      	adds	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db06      	blt.n	8004e4e <HAL_ETH_ReadData+0x13e>
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d202      	bcs.n	8004e4e <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d08c      	beq.n	8004d68 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f814 	bl	8004e90 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d108      	bne.n	8004e86 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	3212      	adds	r2, #18
 8004eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004eb8:	e03b      	b.n	8004f32 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d112      	bne.n	8004ee8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fb ff6a 	bl	8000da0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	74fb      	strb	r3, [r7, #19]
 8004ed6:	e007      	b.n	8004ee8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d021      	beq.n	8004f32 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004eee:	f3bf 8f5f 	dmb	sy
}
 8004ef2:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004f02:	60da      	str	r2, [r3, #12]
 8004f04:	e003      	b.n	8004f0e <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004f0c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d902      	bls.n	8004f20 <ETH_UpdateDescriptor+0x90>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	3212      	adds	r2, #18
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	617b      	str	r3, [r7, #20]
      desccount--;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <ETH_UpdateDescriptor+0xae>
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1bd      	bne.n	8004eba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d00c      	beq.n	8004f62 <ETH_UpdateDescriptor+0xd2>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f241 1328 	movw	r3, #4392	; 0x1128
 8004f50:	4413      	add	r3, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004f62:	bf00      	nop
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3318      	adds	r3, #24
 8004f76:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004f88:	e03f      	b.n	800500a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d028      	beq.n	800500a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68d9      	ldr	r1, [r3, #12]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db1b      	blt.n	8005006 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb ff78 	bl	8000ed0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c
 8005004:	e001      	b.n	800500a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_ETH_ReleaseTxPacket+0xac>
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1b9      	bne.n	8004f8a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d113      	bne.n	8005062 <HAL_ETH_IRQHandler+0x42>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005042:	4413      	add	r3, r2
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d109      	bne.n	8005062 <HAL_ETH_IRQHandler+0x42>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005056:	f248 0240 	movw	r2, #32832	; 0x8040
 800505a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fb fd8b 	bl	8000b78 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	d113      	bne.n	800509c <HAL_ETH_IRQHandler+0x7c>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f241 1334 	movw	r3, #4404	; 0x1134
 800507c:	4413      	add	r3, r2
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d109      	bne.n	800509c <HAL_ETH_IRQHandler+0x7c>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005090:	f248 0201 	movw	r2, #32769	; 0x8001
 8005094:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb fd7e 	bl	8000b98 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ae:	d14e      	bne.n	800514e <HAL_ETH_IRQHandler+0x12e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	f241 1334 	movw	r3, #4404	; 0x1134
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c4:	d143      	bne.n	800514e <HAL_ETH_IRQHandler+0x12e>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f043 0208 	orr.w	r2, r3, #8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	d11d      	bne.n	8005126 <HAL_ETH_IRQHandler+0x106>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	f241 1302 	movw	r3, #4354	; 0x1102
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f241 1334 	movw	r3, #4404	; 0x1134
 8005108:	4413      	add	r3, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6811      	ldr	r1, [r2, #0]
 8005110:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005114:	f241 1334 	movw	r3, #4404	; 0x1134
 8005118:	440b      	add	r3, r1
 800511a:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	22e0      	movs	r2, #224	; 0xe0
 8005120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005124:	e010      	b.n	8005148 <HAL_ETH_IRQHandler+0x128>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005142:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005146:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fb fd35 	bl	8000bb8 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005156:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_ETH_IRQHandler+0x14c>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_ETH_IRQHandler+0x180>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f043 0210 	orr.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	22e0      	movs	r2, #224	; 0xe0
 800518e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fd10 	bl	8000bb8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d10f      	bne.n	80051d0 <HAL_ETH_IRQHandler+0x1b0>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051b8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f830 	bl	8005228 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d10f      	bne.n	8005200 <HAL_ETH_IRQHandler+0x1e0>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f822 	bl	800523c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <HAL_ETH_IRQHandler+0x204>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <HAL_ETH_IRQHandler+0x1fa>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_ETH_IRQHandler+0x204>)
 800520e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f81b 	bl	8005250 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	58000080 	.word	0x58000080

08005228 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e03e      	b.n	8005304 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800528e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	055b      	lsls	r3, r3, #21
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f043 030c 	orr.w	r3, r3, #12
 80052b2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80052c6:	f7fe fe61 	bl	8003f8c <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80052cc:	e009      	b.n	80052e2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80052ce:	f7fe fe5d 	bl	8003f8c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052dc:	d901      	bls.n	80052e2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e010      	b.n	8005304 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ed      	bne.n	80052ce <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03c      	b.n	80053a8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005336:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	055b      	lsls	r3, r3, #21
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 030c 	bic.w	r3, r3, #12
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <HAL_ETH_WritePHYRegister+0xa4>)
 800536e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005372:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <HAL_ETH_WritePHYRegister+0xa4>)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800537a:	f7fe fe07 	bl	8003f8c <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005380:	e009      	b.n	8005396 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005382:	f7fe fe03 	bl	8003f8c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005390:	d901      	bls.n	8005396 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e008      	b.n	80053a8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1ed      	bne.n	8005382 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40028000 	.word	0x40028000

080053b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e1c3      	b.n	8005750 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80055d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	0e5b      	lsrs	r3, r3, #25
 8005612:	f003 021f 	and.w	r2, r3, #31
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 020f 	and.w	r2, r3, #15
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	b29a      	uxth	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80056dc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80056ec:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e00b      	b.n	8005788 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005776:	2b10      	cmp	r3, #16
 8005778:	d105      	bne.n	8005786 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f86d 	bl	800585c <ETH_SetMACConfig>

    return HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	e000      	b.n	8005788 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80057aa:	f003 fa4d 	bl	8008c48 <HAL_RCC_GetHCLKFreq>
 80057ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d908      	bls.n	80057ca <HAL_ETH_SetMDIOClockRange+0x3a>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d804      	bhi.n	80057ca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e027      	b.n	800581a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d908      	bls.n	80057e4 <HAL_ETH_SetMDIOClockRange+0x54>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d204      	bcs.n	80057e4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e01a      	b.n	800581a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d303      	bcc.n	80057f4 <HAL_ETH_SetMDIOClockRange+0x64>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d911      	bls.n	8005818 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a10      	ldr	r2, [pc, #64]	; (8005838 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d908      	bls.n	800580e <HAL_ETH_SetMDIOClockRange+0x7e>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a0f      	ldr	r2, [pc, #60]	; (800583c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d804      	bhi.n	800580e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e005      	b.n	800581a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e000      	b.n	800581a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005818:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	01312cff 	.word	0x01312cff
 8005830:	02160ebf 	.word	0x02160ebf
 8005834:	03938700 	.word	0x03938700
 8005838:	05f5e0ff 	.word	0x05f5e0ff
 800583c:	08f0d17f 	.word	0x08f0d17f

08005840 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800586e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	791b      	ldrb	r3, [r3, #4]
 8005874:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800587e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	7b5b      	ldrb	r3, [r3, #13]
 8005884:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	7b9b      	ldrb	r3, [r3, #14]
 800588c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800588e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	7bdb      	ldrb	r3, [r3, #15]
 8005894:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005896:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	7c12      	ldrb	r2, [r2, #16]
 800589c:	2a00      	cmp	r2, #0
 800589e:	d102      	bne.n	80058a6 <ETH_SetMACConfig+0x4a>
 80058a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80058a4:	e000      	b.n	80058a8 <ETH_SetMACConfig+0x4c>
 80058a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80058a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	7c52      	ldrb	r2, [r2, #17]
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d102      	bne.n	80058b8 <ETH_SetMACConfig+0x5c>
 80058b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058b6:	e000      	b.n	80058ba <ETH_SetMACConfig+0x5e>
 80058b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80058ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	7c9b      	ldrb	r3, [r3, #18]
 80058c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80058c2:	431a      	orrs	r2, r3
               macconf->Speed |
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80058c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80058ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	7f1b      	ldrb	r3, [r3, #28]
 80058d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80058d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	7f5b      	ldrb	r3, [r3, #29]
 80058dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80058de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	7f92      	ldrb	r2, [r2, #30]
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d102      	bne.n	80058ee <ETH_SetMACConfig+0x92>
 80058e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ec:	e000      	b.n	80058f0 <ETH_SetMACConfig+0x94>
 80058ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80058f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	7fdb      	ldrb	r3, [r3, #31]
 80058f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80058f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005900:	2a00      	cmp	r2, #0
 8005902:	d102      	bne.n	800590a <ETH_SetMACConfig+0xae>
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	e000      	b.n	800590c <ETH_SetMACConfig+0xb0>
 800590a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800590c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800591a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800591c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <ETH_SetMACConfig+0x22c>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	430b      	orrs	r3, r1
 8005938:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005946:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005948:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005950:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800595a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800595c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005964:	2a00      	cmp	r2, #0
 8005966:	d102      	bne.n	800596e <ETH_SetMACConfig+0x112>
 8005968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800596c:	e000      	b.n	8005970 <ETH_SetMACConfig+0x114>
 800596e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005970:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <ETH_SetMACConfig+0x230>)
 8005982:	4013      	ands	r3, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	68f9      	ldr	r1, [r7, #12]
 800598a:	430b      	orrs	r3, r1
 800598c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005994:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <ETH_SetMACConfig+0x234>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80059be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	d101      	bne.n	80059ce <ETH_SetMACConfig+0x172>
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	e000      	b.n	80059d0 <ETH_SetMACConfig+0x174>
 80059ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80059d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80059e6:	4013      	ands	r3, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80059f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005a00:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f023 0103 	bic.w	r1, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005a26:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	d101      	bne.n	8005a4a <ETH_SetMACConfig+0x1ee>
 8005a46:	2240      	movs	r2, #64	; 0x40
 8005a48:	e000      	b.n	8005a4c <ETH_SetMACConfig+0x1f0>
 8005a4a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005a4c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a54:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005a5e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005a6c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	00048083 	.word	0x00048083
 8005a8c:	c0f88000 	.word	0xc0f88000
 8005a90:	fffffef0 	.word	0xfffffef0

08005a94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <ETH_SetDMAConfig+0xf8>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	6809      	ldr	r1, [r1, #0]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005aba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ac6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	7b1b      	ldrb	r3, [r3, #12]
 8005acc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f241 0304 	movw	r3, #4100	; 0x1004
 8005ada:	4413      	add	r3, r2
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <ETH_SetDMAConfig+0xfc>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	f241 0304 	movw	r3, #4100	; 0x1004
 8005aee:	440b      	add	r3, r1
 8005af0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	7b5b      	ldrb	r3, [r3, #13]
 8005af6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <ETH_SetDMAConfig+0x100>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6811      	ldr	r1, [r2, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005b1a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	7d1b      	ldrb	r3, [r3, #20]
 8005b24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	7f5b      	ldrb	r3, [r3, #29]
 8005b2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f241 1304 	movw	r3, #4356	; 0x1104
 8005b3a:	4413      	add	r3, r2
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <ETH_SetDMAConfig+0x104>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6811      	ldr	r1, [r2, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8005b4e:	440b      	add	r3, r1
 8005b50:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	7f1b      	ldrb	r3, [r3, #28]
 8005b56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b68:	4413      	add	r3, r2
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <ETH_SetDMAConfig+0x108>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6811      	ldr	r1, [r2, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b7c:	440b      	add	r3, r1
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	ffff87fd 	.word	0xffff87fd
 8005b90:	ffff2ffe 	.word	0xffff2ffe
 8005b94:	fffec000 	.word	0xfffec000
 8005b98:	ffc0efef 	.word	0xffc0efef
 8005b9c:	7fc0ffff 	.word	0x7fc0ffff

08005ba0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b0a4      	sub	sp, #144	; 0x90
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005bf8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005c22:	2300      	movs	r3, #0
 8005c24:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005c4a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fde6 	bl	800585c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005c94:	2301      	movs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005caa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005cb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005cc0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005cc6:	f107 0308 	add.w	r3, r7, #8
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fee1 	bl	8005a94 <ETH_SetDMAConfig>
}
 8005cd2:	bf00      	nop
 8005cd4:	3790      	adds	r7, #144	; 0x90
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e01d      	b.n	8005d24 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	440b      	add	r3, r1
 8005cf8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	3206      	adds	r2, #6
 8005d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d9de      	bls.n	8005ce8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	f241 132c 	movw	r3, #4396	; 0x112c
 8005d38:	4413      	add	r3, r2
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68d9      	ldr	r1, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	f241 1314 	movw	r3, #4372	; 0x1114
 8005d4a:	4413      	add	r3, r2
 8005d4c:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e023      	b.n	8005dbe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6919      	ldr	r1, [r3, #16]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2200      	movs	r2, #0
 8005daa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	3212      	adds	r2, #18
 8005db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d9d8      	bls.n	8005d76 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f241 1330 	movw	r3, #4400	; 0x1130
 8005dea:	4413      	add	r3, r2
 8005dec:	2203      	movs	r2, #3
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6919      	ldr	r1, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f241 131c 	movw	r3, #4380	; 0x111c
 8005dfc:	4413      	add	r3, r2
 8005dfe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005e10:	4413      	add	r3, r2
 8005e12:	6019      	str	r1, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b08d      	sub	sp, #52	; 0x34
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d007      	beq.n	8005e74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	3304      	adds	r3, #4
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e258      	b.n	800632a <ETH_Prepare_Tx_Descriptors+0x50a>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d044      	beq.n	8005f0e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	4b75      	ldr	r3, [pc, #468]	; (8006060 <ETH_Prepare_Tx_Descriptors+0x240>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e90:	431a      	orrs	r2, r3
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005eb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d027      	beq.n	8005f0e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005efc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	4b51      	ldr	r3, [pc, #324]	; (8006064 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	6992      	ldr	r2, [r2, #24]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d036      	beq.n	8005fbe <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005f5c:	f3bf 8f5f 	dmb	sy
}
 8005f60:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	3301      	adds	r3, #1
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d902      	bls.n	8005f80 <ETH_Prepare_Tx_Descriptors+0x160>
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9c:	d10f      	bne.n	8005fbe <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8005fa8:	f3bf 8f5f 	dmb	sy
}
 8005fac:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e1b5      	b.n	800632a <ETH_Prepare_Tx_Descriptors+0x50a>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	6852      	ldr	r2, [r2, #4]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d012      	beq.n	800600e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <ETH_Prepare_Tx_Descriptors+0x248>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	0412      	lsls	r2, r2, #16
 8006006:	431a      	orrs	r2, r3
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	e008      	b.n	8006020 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b13      	ldr	r3, [pc, #76]	; (8006068 <ETH_Prepare_Tx_Descriptors+0x248>)
 800601a:	4013      	ands	r3, r2
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d021      	beq.n	8006070 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	04db      	lsls	r3, r3, #19
 800603a:	431a      	orrs	r2, r3
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8006046:	4013      	ands	r3, r2
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	69d2      	ldr	r2, [r2, #28]
 800604c:	431a      	orrs	r2, r3
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e02e      	b.n	80060be <ETH_Prepare_Tx_Descriptors+0x29e>
 8006060:	ffff0000 	.word	0xffff0000
 8006064:	ffffc000 	.word	0xffffc000
 8006068:	c000ffff 	.word	0xc000ffff
 800606c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	4b97      	ldr	r3, [pc, #604]	; (80062d4 <ETH_Prepare_Tx_Descriptors+0x4b4>)
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	6852      	ldr	r2, [r2, #4]
 800607c:	431a      	orrs	r2, r3
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	431a      	orrs	r2, r3
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	431a      	orrs	r2, r3
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80060f4:	f3bf 8f5f 	dmb	sy
}
 80060f8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80d1 	beq.w	80062b6 <ETH_Prepare_Tx_Descriptors+0x496>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	431a      	orrs	r2, r3
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006126:	e0c6      	b.n	80062b6 <ETH_Prepare_Tx_Descriptors+0x496>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	3301      	adds	r3, #1
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b03      	cmp	r3, #3
 800613e:	d902      	bls.n	8006146 <ETH_Prepare_Tx_Descriptors+0x326>
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	3b04      	subs	r3, #4
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d007      	beq.n	800617a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	3304      	adds	r3, #4
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d029      	beq.n	80061ce <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006188:	2300      	movs	r3, #0
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
 800618c:	e019      	b.n	80061c2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800618e:	f3bf 8f5f 	dmb	sy
}
 8006192:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	3301      	adds	r3, #1
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d902      	bls.n	80061b2 <ETH_Prepare_Tx_Descriptors+0x392>
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	3b04      	subs	r3, #4
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	3301      	adds	r3, #1
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d3e1      	bcc.n	800618e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80061ca:	2302      	movs	r3, #2
 80061cc:	e0ad      	b.n	800632a <ETH_Prepare_Tx_Descriptors+0x50a>
    }

    descnbr += 1U;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	3301      	adds	r3, #1
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <ETH_Prepare_Tx_Descriptors+0x4b8>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	6852      	ldr	r2, [r2, #4]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d012      	beq.n	8006224 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	4b32      	ldr	r3, [pc, #200]	; (80062dc <ETH_Prepare_Tx_Descriptors+0x4bc>)
 8006214:	4013      	ands	r3, r2
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	0412      	lsls	r2, r2, #16
 800621c:	431a      	orrs	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	e008      	b.n	8006236 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2200      	movs	r2, #0
 8006228:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <ETH_Prepare_Tx_Descriptors+0x4bc>)
 8006230:	4013      	ands	r3, r2
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00f      	beq.n	8006262 <ETH_Prepare_Tx_Descriptors+0x442>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <ETH_Prepare_Tx_Descriptors+0x4c0>)
 8006248:	4013      	ands	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	69d2      	ldr	r2, [r2, #28]
 800624e:	431a      	orrs	r2, r3
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e017      	b.n	8006292 <ETH_Prepare_Tx_Descriptors+0x472>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <ETH_Prepare_Tx_Descriptors+0x4b4>)
 8006268:	4013      	ands	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	6852      	ldr	r2, [r2, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <ETH_Prepare_Tx_Descriptors+0x472>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	431a      	orrs	r2, r3
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	3301      	adds	r3, #1
 8006296:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006298:	f3bf 8f5f 	dmb	sy
}
 800629c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f47f af34 	bne.w	8006128 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00e      	beq.n	80062e4 <ETH_Prepare_Tx_Descriptors+0x4c4>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	e00d      	b.n	80062f0 <ETH_Prepare_Tx_Descriptors+0x4d0>
 80062d4:	ffff8000 	.word	0xffff8000
 80062d8:	ffffc000 	.word	0xffffc000
 80062dc:	c000ffff 	.word	0xc000ffff
 80062e0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	3304      	adds	r3, #4
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006310:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006312:	b672      	cpsid	i
}
 8006314:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006324:	b662      	cpsie	i
}
 8006326:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3734      	adds	r7, #52	; 0x34
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006346:	4b86      	ldr	r3, [pc, #536]	; (8006560 <HAL_GPIO_Init+0x228>)
 8006348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800634a:	e18c      	b.n	8006666 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2101      	movs	r1, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	4013      	ands	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 817e 	beq.w	8006660 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d005      	beq.n	800637c <HAL_GPIO_Init+0x44>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d130      	bne.n	80063de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	2203      	movs	r2, #3
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063b2:	2201      	movs	r2, #1
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 0201 	and.w	r2, r3, #1
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d017      	beq.n	800641a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	2203      	movs	r2, #3
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d123      	bne.n	800646e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	08da      	lsrs	r2, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3208      	adds	r2, #8
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	220f      	movs	r2, #15
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43db      	mvns	r3, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	4013      	ands	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4313      	orrs	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	08da      	lsrs	r2, r3, #3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3208      	adds	r2, #8
 8006468:	69b9      	ldr	r1, [r7, #24]
 800646a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	2203      	movs	r2, #3
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 0203 	and.w	r2, r3, #3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4313      	orrs	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80d8 	beq.w	8006660 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b0:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_GPIO_Init+0x22c>)
 80064b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <HAL_GPIO_Init+0x22c>)
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <HAL_GPIO_Init+0x22c>)
 80064c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ce:	4a26      	ldr	r2, [pc, #152]	; (8006568 <HAL_GPIO_Init+0x230>)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	089b      	lsrs	r3, r3, #2
 80064d4:	3302      	adds	r3, #2
 80064d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	220f      	movs	r2, #15
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	; (800656c <HAL_GPIO_Init+0x234>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04a      	beq.n	8006590 <HAL_GPIO_Init+0x258>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <HAL_GPIO_Init+0x238>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d02b      	beq.n	800655a <HAL_GPIO_Init+0x222>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <HAL_GPIO_Init+0x23c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d025      	beq.n	8006556 <HAL_GPIO_Init+0x21e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1a      	ldr	r2, [pc, #104]	; (8006578 <HAL_GPIO_Init+0x240>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01f      	beq.n	8006552 <HAL_GPIO_Init+0x21a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <HAL_GPIO_Init+0x244>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d019      	beq.n	800654e <HAL_GPIO_Init+0x216>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_GPIO_Init+0x248>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_GPIO_Init+0x212>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_GPIO_Init+0x24c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00d      	beq.n	8006546 <HAL_GPIO_Init+0x20e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_GPIO_Init+0x250>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d007      	beq.n	8006542 <HAL_GPIO_Init+0x20a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <HAL_GPIO_Init+0x254>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <HAL_GPIO_Init+0x206>
 800653a:	2309      	movs	r3, #9
 800653c:	e029      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 800653e:	230a      	movs	r3, #10
 8006540:	e027      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 8006542:	2307      	movs	r3, #7
 8006544:	e025      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 8006546:	2306      	movs	r3, #6
 8006548:	e023      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 800654a:	2305      	movs	r3, #5
 800654c:	e021      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 800654e:	2304      	movs	r3, #4
 8006550:	e01f      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 8006552:	2303      	movs	r3, #3
 8006554:	e01d      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 8006556:	2302      	movs	r3, #2
 8006558:	e01b      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 800655a:	2301      	movs	r3, #1
 800655c:	e019      	b.n	8006592 <HAL_GPIO_Init+0x25a>
 800655e:	bf00      	nop
 8006560:	58000080 	.word	0x58000080
 8006564:	58024400 	.word	0x58024400
 8006568:	58000400 	.word	0x58000400
 800656c:	58020000 	.word	0x58020000
 8006570:	58020400 	.word	0x58020400
 8006574:	58020800 	.word	0x58020800
 8006578:	58020c00 	.word	0x58020c00
 800657c:	58021000 	.word	0x58021000
 8006580:	58021400 	.word	0x58021400
 8006584:	58021800 	.word	0x58021800
 8006588:	58021c00 	.word	0x58021c00
 800658c:	58022400 	.word	0x58022400
 8006590:	2300      	movs	r3, #0
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	f002 0203 	and.w	r2, r2, #3
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	4093      	lsls	r3, r2
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065a2:	4938      	ldr	r1, [pc, #224]	; (8006684 <HAL_GPIO_Init+0x34c>)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	3302      	adds	r3, #2
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	43db      	mvns	r3, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	43db      	mvns	r3, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4013      	ands	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	3301      	adds	r3, #1
 8006664:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	f47f ae6b 	bne.w	800634c <HAL_GPIO_Init+0x14>
  }
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	3724      	adds	r7, #36	; 0x24
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	58000400 	.word	0x58000400

08006688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
 8006694:	4613      	mov	r3, r2
 8006696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006698:	787b      	ldrb	r3, [r7, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800669e:	887a      	ldrh	r2, [r7, #2]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066a4:	e003      	b.n	80066ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066a6:	887b      	ldrh	r3, [r7, #2]
 80066a8:	041a      	lsls	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	619a      	str	r2, [r3, #24]
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e07f      	b.n	80067ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f87a 	bl	80067dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2224      	movs	r2, #36	; 0x24
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800670c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800671c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	e006      	b.n	8006744 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006742:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d104      	bne.n	8006756 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6859      	ldr	r1, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <HAL_I2C_Init+0x11c>)
 8006762:	430b      	orrs	r3, r1
 8006764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	69d9      	ldr	r1, [r3, #28]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	02008000 	.word	0x02008000

080067dc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	4608      	mov	r0, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	461a      	mov	r2, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	817b      	strh	r3, [r7, #10]
 8006802:	460b      	mov	r3, r1
 8006804:	813b      	strh	r3, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b20      	cmp	r3, #32
 8006814:	f040 80fd 	bne.w	8006a12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_I2C_Mem_Read+0x34>
 800681e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0f1      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_I2C_Mem_Read+0x4e>
 800683a:	2302      	movs	r3, #2
 800683c:	e0ea      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006846:	f7fd fba1 	bl	8003f8c <HAL_GetTick>
 800684a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2319      	movs	r3, #25
 8006852:	2201      	movs	r2, #1
 8006854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f975 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0d5      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2222      	movs	r2, #34	; 0x22
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2240      	movs	r2, #64	; 0x40
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a3a      	ldr	r2, [r7, #32]
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006890:	88f8      	ldrh	r0, [r7, #6]
 8006892:	893a      	ldrh	r2, [r7, #8]
 8006894:	8979      	ldrh	r1, [r7, #10]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4603      	mov	r3, r0
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f8d9 	bl	8006a58 <I2C_RequestMemoryRead>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0ad      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2bff      	cmp	r3, #255	; 0xff
 80068c0:	d90e      	bls.n	80068e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	22ff      	movs	r2, #255	; 0xff
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	8979      	ldrh	r1, [r7, #10]
 80068d0:	4b52      	ldr	r3, [pc, #328]	; (8006a1c <HAL_I2C_Mem_Read+0x22c>)
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fadd 	bl	8006e98 <I2C_TransferConfig>
 80068de:	e00f      	b.n	8006900 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	8979      	ldrh	r1, [r7, #10]
 80068f2:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <HAL_I2C_Mem_Read+0x22c>)
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 facc 	bl	8006e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	2200      	movs	r2, #0
 8006908:	2104      	movs	r1, #4
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f91c 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e07c      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d034      	beq.n	80069c0 <HAL_I2C_Mem_Read+0x1d0>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d130      	bne.n	80069c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f8ed 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e04d      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2bff      	cmp	r3, #255	; 0xff
 8006980:	d90e      	bls.n	80069a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	b2da      	uxtb	r2, r3
 800698e:	8979      	ldrh	r1, [r7, #10]
 8006990:	2300      	movs	r3, #0
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fa7d 	bl	8006e98 <I2C_TransferConfig>
 800699e:	e00f      	b.n	80069c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	8979      	ldrh	r1, [r7, #10]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fa6c 	bl	8006e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d19a      	bne.n	8006900 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f93a 	bl	8006c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e01a      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2220      	movs	r2, #32
 80069e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_I2C_Mem_Read+0x230>)
 80069f2:	400b      	ands	r3, r1
 80069f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e000      	b.n	8006a14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
  }
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	80002400 	.word	0x80002400
 8006a20:	fe00e800 	.word	0xfe00e800

08006a24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a32:	b2db      	uxtb	r3, r3
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	817b      	strh	r3, [r7, #10]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	813b      	strh	r3, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	8979      	ldrh	r1, [r7, #10]
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <I2C_RequestMemoryRead+0xa4>)
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa0a 	bl	8006e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	69b9      	ldr	r1, [r7, #24]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f89d 	bl	8006bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e02c      	b.n	8006af2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d105      	bne.n	8006aaa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa8:	e015      	b.n	8006ad6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006aaa:	893b      	ldrh	r3, [r7, #8]
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	69b9      	ldr	r1, [r7, #24]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f883 	bl	8006bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e012      	b.n	8006af2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006acc:	893b      	ldrh	r3, [r7, #8]
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2200      	movs	r2, #0
 8006ade:	2140      	movs	r1, #64	; 0x40
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f831 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	80002000 	.word	0x80002000

08006b00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d103      	bne.n	8006b1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d007      	beq.n	8006b3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	619a      	str	r2, [r3, #24]
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b58:	e022      	b.n	8006ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b60:	d01e      	beq.n	8006ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fd fa13 	bl	8003f8c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d113      	bne.n	8006ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e00f      	b.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d0cd      	beq.n	8006b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bd4:	e02c      	b.n	8006c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f870 	bl	8006cc0 <I2C_IsErrorOccurred>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e02a      	b.n	8006c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf0:	d01e      	beq.n	8006c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf2:	f7fd f9cb 	bl	8003f8c <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d302      	bcc.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d113      	bne.n	8006c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d1cb      	bne.n	8006bd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c54:	e028      	b.n	8006ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f830 	bl	8006cc0 <I2C_IsErrorOccurred>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e026      	b.n	8006cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fd f98f 	bl	8003f8c <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d113      	bne.n	8006ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	f043 0220 	orr.w	r2, r3, #32
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e007      	b.n	8006cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d1cf      	bne.n	8006c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d075      	beq.n	8006dd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cf4:	e056      	b.n	8006da4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfc:	d052      	beq.n	8006da4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7fd f945 	bl	8003f8c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <I2C_IsErrorOccurred+0x54>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d147      	bne.n	8006da4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	d12e      	bne.n	8006d96 <I2C_IsErrorOccurred+0xd6>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3e:	d02a      	beq.n	8006d96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d027      	beq.n	8006d96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d54:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d56:	f7fd f919 	bl	8003f8c <HAL_GetTick>
 8006d5a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d5c:	e01b      	b.n	8006d96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d5e:	f7fd f915 	bl	8003f8c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b19      	cmp	r3, #25
 8006d6a:	d914      	bls.n	8006d96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d1dc      	bne.n	8006d5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d003      	beq.n	8006dba <I2C_IsErrorOccurred+0xfa>
 8006db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d09d      	beq.n	8006cf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f043 0304 	orr.w	r3, r3, #4
 8006dd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	f043 0308 	orr.w	r3, r3, #8
 8006e12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01c      	beq.n	8006e88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fe56 	bl	8006b00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <I2C_IsErrorOccurred+0x1d4>)
 8006e60:	400b      	ands	r3, r1
 8006e62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3728      	adds	r7, #40	; 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	fe00e800 	.word	0xfe00e800

08006e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	817b      	strh	r3, [r7, #10]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eaa:	897b      	ldrh	r3, [r7, #10]
 8006eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eb0:	7a7b      	ldrb	r3, [r7, #9]
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eb8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	0d5b      	lsrs	r3, r3, #21
 8006ed2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <I2C_TransferConfig+0x60>)
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	43db      	mvns	r3, r3
 8006edc:	ea02 0103 	and.w	r1, r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	03ff63ff 	.word	0x03ff63ff

08006efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d138      	bne.n	8006f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e032      	b.n	8006f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	; 0x24
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f84:	2302      	movs	r3, #2
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d139      	bne.n	800701c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e033      	b.n	800701e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2224      	movs	r2, #36	; 0x24
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fe4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e0bf      	b.n	80071be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8ba 	bl	80071cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800706e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6999      	ldr	r1, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007084:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6899      	ldr	r1, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b4a      	ldr	r3, [pc, #296]	; (80071c8 <HAL_LTDC_Init+0x19c>)
 80070a0:	400b      	ands	r3, r1
 80070a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <HAL_LTDC_Init+0x19c>)
 80070ce:	400b      	ands	r3, r1
 80070d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	041b      	lsls	r3, r3, #16
 80070d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68d9      	ldr	r1, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6919      	ldr	r1, [r3, #16]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b33      	ldr	r3, [pc, #204]	; (80071c8 <HAL_LTDC_Init+0x19c>)
 80070fc:	400b      	ands	r3, r1
 80070fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6919      	ldr	r1, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	4b27      	ldr	r3, [pc, #156]	; (80071c8 <HAL_LTDC_Init+0x19c>)
 800712a:	400b      	ands	r3, r1
 800712c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6959      	ldr	r1, [r3, #20]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0206 	orr.w	r2, r2, #6
 800719a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	f000f800 	.word	0xf000f800

080071cc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071e0:	b5b0      	push	{r4, r5, r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_LTDC_ConfigLayer+0x1a>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e02c      	b.n	8007254 <HAL_LTDC_ConfigLayer+0x74>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2134      	movs	r1, #52	; 0x34
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800722a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f811 	bl	800725c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bdb0      	pop	{r4, r5, r7, pc}

0800725c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007278:	4413      	add	r3, r2
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	01db      	lsls	r3, r3, #7
 8007288:	4413      	add	r3, r2
 800728a:	3384      	adds	r3, #132	; 0x84
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	4611      	mov	r1, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	01d2      	lsls	r2, r2, #7
 8007298:	440a      	add	r2, r1
 800729a:	3284      	adds	r2, #132	; 0x84
 800729c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4619      	mov	r1, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	440b      	add	r3, r1
 80072c2:	3384      	adds	r3, #132	; 0x84
 80072c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072da:	4413      	add	r3, r2
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3384      	adds	r3, #132	; 0x84
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	4611      	mov	r1, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	01d2      	lsls	r2, r2, #7
 80072fa:	440a      	add	r2, r1
 80072fc:	3284      	adds	r2, #132	; 0x84
 80072fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007302:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007312:	4413      	add	r3, r2
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	01db      	lsls	r3, r3, #7
 8007320:	440b      	add	r3, r1
 8007322:	3384      	adds	r3, #132	; 0x84
 8007324:	4619      	mov	r1, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4313      	orrs	r3, r2
 800732a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	01db      	lsls	r3, r3, #7
 8007336:	4413      	add	r3, r2
 8007338:	3384      	adds	r3, #132	; 0x84
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	4611      	mov	r1, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	01d2      	lsls	r2, r2, #7
 8007346:	440a      	add	r2, r1
 8007348:	3284      	adds	r2, #132	; 0x84
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	4413      	add	r3, r2
 800735c:	3384      	adds	r3, #132	; 0x84
 800735e:	461a      	mov	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4413      	add	r3, r2
 800738e:	3384      	adds	r3, #132	; 0x84
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4413      	add	r3, r2
 800739e:	3384      	adds	r3, #132	; 0x84
 80073a0:	461a      	mov	r2, r3
 80073a2:	2300      	movs	r3, #0
 80073a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ac:	461a      	mov	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	440b      	add	r3, r1
 80073c2:	3384      	adds	r3, #132	; 0x84
 80073c4:	4619      	mov	r1, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	4413      	add	r3, r2
 80073d8:	3384      	adds	r3, #132	; 0x84
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	4611      	mov	r1, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	01d2      	lsls	r2, r2, #7
 80073e6:	440a      	add	r2, r1
 80073e8:	3284      	adds	r2, #132	; 0x84
 80073ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	01db      	lsls	r3, r3, #7
 80073fa:	4413      	add	r3, r2
 80073fc:	3384      	adds	r3, #132	; 0x84
 80073fe:	461a      	mov	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	4413      	add	r3, r2
 8007412:	3384      	adds	r3, #132	; 0x84
 8007414:	69da      	ldr	r2, [r3, #28]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	440b      	add	r3, r1
 8007422:	3384      	adds	r3, #132	; 0x84
 8007424:	4619      	mov	r1, r3
 8007426:	4b58      	ldr	r3, [pc, #352]	; (8007588 <LTDC_SetConfig+0x32c>)
 8007428:	4013      	ands	r3, r2
 800742a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	6809      	ldr	r1, [r1, #0]
 8007438:	4608      	mov	r0, r1
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	01c9      	lsls	r1, r1, #7
 800743e:	4401      	add	r1, r0
 8007440:	3184      	adds	r1, #132	; 0x84
 8007442:	4313      	orrs	r3, r2
 8007444:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	3384      	adds	r3, #132	; 0x84
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	; 0x84
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	4413      	add	r3, r2
 8007476:	3384      	adds	r3, #132	; 0x84
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007488:	2304      	movs	r3, #4
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e01b      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d102      	bne.n	800749c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007496:	2303      	movs	r3, #3
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e014      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d00b      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d007      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d003      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	d102      	bne.n	80074c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80074bc:	2302      	movs	r3, #2
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e001      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	01db      	lsls	r3, r3, #7
 80074d0:	4413      	add	r3, r2
 80074d2:	3384      	adds	r3, #132	; 0x84
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	4611      	mov	r1, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	01d2      	lsls	r2, r2, #7
 80074e0:	440a      	add	r2, r1
 80074e2:	3284      	adds	r2, #132	; 0x84
 80074e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	041a      	lsls	r2, r3, #16
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	1acb      	subs	r3, r1, r3
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	3307      	adds	r3, #7
 8007508:	68f9      	ldr	r1, [r7, #12]
 800750a:	6809      	ldr	r1, [r1, #0]
 800750c:	4608      	mov	r0, r1
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	01c9      	lsls	r1, r1, #7
 8007512:	4401      	add	r1, r0
 8007514:	3184      	adds	r1, #132	; 0x84
 8007516:	4313      	orrs	r3, r2
 8007518:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	4413      	add	r3, r2
 8007526:	3384      	adds	r3, #132	; 0x84
 8007528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	440b      	add	r3, r1
 8007536:	3384      	adds	r3, #132	; 0x84
 8007538:	4619      	mov	r1, r3
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <LTDC_SetConfig+0x330>)
 800753c:	4013      	ands	r3, r2
 800753e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	01db      	lsls	r3, r3, #7
 800754a:	4413      	add	r3, r2
 800754c:	3384      	adds	r3, #132	; 0x84
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	4413      	add	r3, r2
 8007562:	3384      	adds	r3, #132	; 0x84
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	4611      	mov	r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	01d2      	lsls	r2, r2, #7
 8007570:	440a      	add	r2, r1
 8007572:	3284      	adds	r2, #132	; 0x84
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	6013      	str	r3, [r2, #0]
}
 800757a:	bf00      	nop
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	fffff8f8 	.word	0xfffff8f8
 800758c:	fffff800 	.word	0xfffff800

08007590 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007598:	f7fc fcf8 	bl	8003f8c <HAL_GetTick>
 800759c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e03b      	b.n	8007620 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80075c8:	e00f      	b.n	80075ea <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80075ca:	f7fc fcdf 	bl	8003f8c <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d908      	bls.n	80075ea <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2203      	movs	r2, #3
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e01a      	b.n	8007620 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e8      	bne.n	80075ca <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f815 	bl	8007628 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68d9      	ldr	r1, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695a      	ldr	r2, [r3, #20]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800764e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800765a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007666:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	3b01      	subs	r3, #1
 800766e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007670:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800767c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800767e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d107      	bne.n	800769a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007698:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da11      	bge.n	80076ce <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80076b8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	425b      	negs	r3, r3
 80076c0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	b292      	uxth	r2, r2
 80076ca:	621a      	str	r2, [r3, #32]
 80076cc:	e006      	b.n	80076dc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	b292      	uxth	r2, r2
 80076da:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da15      	bge.n	8007710 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80076f2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	425b      	negs	r3, r3
 80076fa:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a19      	ldr	r1, [r3, #32]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	041a      	lsls	r2, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	621a      	str	r2, [r3, #32]
 800770e:	e009      	b.n	8007724 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a19      	ldr	r1, [r3, #32]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	041a      	lsls	r2, r3, #16
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772c:	d006      	beq.n	800773c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
 800773a:	e003      	b.n	8007744 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2200      	movs	r2, #0
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2200      	movs	r2, #0
 800774a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af02      	add	r7, sp, #8
 800775e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007764:	f7fc fc12 	bl	8003f8c <HAL_GetTick>
 8007768:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	e0a5      	b.n	80078c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 809e 	bne.w	80078c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8a2 	bl	80078d0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800778c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fadd 	bl	8007d50 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <HAL_OSPI_Init+0x174>)
 800779e:	4013      	ands	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68d1      	ldr	r1, [r2, #12]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6912      	ldr	r2, [r2, #16]
 80077a8:	3a01      	subs	r2, #1
 80077aa:	0412      	lsls	r2, r2, #16
 80077ac:	4311      	orrs	r1, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6952      	ldr	r2, [r2, #20]
 80077b2:	3a01      	subs	r2, #1
 80077b4:	0212      	lsls	r2, r2, #8
 80077b6:	4311      	orrs	r1, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077bc:	4311      	orrs	r1, r2
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	69d2      	ldr	r2, [r2, #28]
 80077c2:	4311      	orrs	r1, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	3b01      	subs	r3, #1
 800780e:	021a      	lsls	r2, r3, #8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	2120      	movs	r1, #32
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 faa2 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d146      	bne.n	80078c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	1e5a      	subs	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800786a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d107      	bne.n	80078aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0202 	orr.w	r2, r2, #2
 80078a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078b2:	d103      	bne.n	80078bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	651a      	str	r2, [r3, #80]	; 0x50
 80078ba:	e002      	b.n	80078c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	f8e0f8f4 	.word	0xf8e0f8f4

080078d0 <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73fb      	strb	r3, [r7, #15]
 80078fa:	e015      	b.n	8007928 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0201 	bic.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0202 	bic.w	r2, r2, #2
 800791a:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f808 	bl	8007932 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_OSPI_MspDeInit>:
  * @brief  DeInitialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspDeInit can be implemented in the user file
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b08a      	sub	sp, #40	; 0x28
 800794a:	af02      	add	r7, sp, #8
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007952:	f7fc fb1b 	bl	8003f8c <HAL_GetTick>
 8007956:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795c:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d002      	beq.n	800796a <HAL_OSPI_HyperbusCfg+0x24>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d122      	bne.n	80079b0 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2200      	movs	r2, #0
 8007972:	2120      	movs	r1, #32
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f9fa 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800797e:	7ffb      	ldrb	r3, [r7, #31]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11a      	bne.n	80079ba <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	041a      	lsls	r2, r3, #16
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	431a      	orrs	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	ea42 0103 	orr.w	r1, r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2202      	movs	r2, #2
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80079ae:	e004      	b.n	80079ba <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2210      	movs	r2, #16
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 80079ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80079d0:	f7fc fadc 	bl	8003f8c <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE (cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA  (cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE     (cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d149      	bne.n	8007a72 <HAL_OSPI_HyperbusCmd+0xae>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079e6:	d144      	bne.n	8007a72 <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2120      	movs	r1, #32
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f9bb 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d13c      	bne.n	8007a7c <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a10:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8007a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8007a50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	6852      	ldr	r2, [r2, #4]
 8007a68:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007a70:	e004      	b.n	8007a7c <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b08a      	sub	sp, #40	; 0x28
 8007a8a:	af02      	add	r7, sp, #8
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007a92:	f7fc fa7b 	bl	8003f8c <HAL_GetTick>
 8007a96:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3350      	adds	r3, #80	; 0x50
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d105      	bne.n	8007ab2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2208      	movs	r2, #8
 8007aae:	655a      	str	r2, [r3, #84]	; 0x54
 8007ab0:	e057      	b.n	8007b62 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d14e      	bne.n	8007b58 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ae2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2201      	movs	r2, #1
 8007aec:	2104      	movs	r1, #4
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f93d 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007af8:	7ffb      	ldrb	r3, [r7, #31]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d113      	bne.n	8007b26 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b16:	1e5a      	subs	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1df      	bne.n	8007ae4 <HAL_OSPI_Transmit+0x5e>
 8007b24:	e000      	b.n	8007b28 <HAL_OSPI_Transmit+0xa2>
          break;
 8007b26:	bf00      	nop

      if (status == HAL_OK)
 8007b28:	7ffb      	ldrb	r3, [r7, #31]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d119      	bne.n	8007b62 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2201      	movs	r2, #1
 8007b36:	2102      	movs	r1, #2
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f918 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007b42:	7ffb      	ldrb	r3, [r7, #31]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
 8007b56:	e004      	b.n	8007b62 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8007b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	; 0x30
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007b78:	f7fc fa08 	bl	8003f8c <HAL_GetTick>
 8007b7c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3350      	adds	r3, #80	; 0x50
 8007b84:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007b96:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8007baa:	e07c      	b.n	8007ca6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d172      	bne.n	8007c9a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007be0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bea:	d104      	bne.n	8007bf6 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	649a      	str	r2, [r3, #72]	; 0x48
 8007bf4:	e011      	b.n	8007c1a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007bfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	649a      	str	r2, [r3, #72]	; 0x48
 8007c0e:	e004      	b.n	8007c1a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	2201      	movs	r2, #1
 8007c22:	2106      	movs	r1, #6
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f8a2 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8007c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d114      	bne.n	8007c62 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c52:	1e5a      	subs	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1dc      	bne.n	8007c1a <HAL_OSPI_Receive+0xae>
 8007c60:	e000      	b.n	8007c64 <HAL_OSPI_Receive+0xf8>
          break;
 8007c62:	bf00      	nop

      if (status == HAL_OK)
 8007c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11c      	bne.n	8007ca6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	2201      	movs	r2, #1
 8007c74:	2102      	movs	r1, #2
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f879 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8007c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	651a      	str	r2, [r3, #80]	; 0x50
 8007c98:	e005      	b.n	8007ca6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8007ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3728      	adds	r7, #40	; 0x28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cbe:	f7fc f965 	bl	8003f8c <HAL_GetTick>
 8007cc2:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d134      	bne.n	8007d36 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f848 	bl	8007d6e <OSPI_WaitFlagStateUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d12b      	bne.n	8007d40 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2288      	movs	r2, #136	; 0x88
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d111      	bne.n	8007d1a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	6852      	ldr	r2, [r2, #4]
 8007cfe:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2210      	movs	r2, #16
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d18:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <HAL_OSPI_MemoryMapped+0x98>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e004      	b.n	8007d40 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	cffffff7 	.word	0xcffffff7

08007d50 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d7e:	e01a      	b.n	8007db6 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d86:	d016      	beq.n	8007db6 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d88:	f7fc f900 	bl	8003f8c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d302      	bcc.n	8007d9e <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da4:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f043 0201 	orr.w	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e00e      	b.n	8007dd4 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d1d6      	bne.n	8007d80 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007de4:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	2b06      	cmp	r3, #6
 8007dee:	d00a      	beq.n	8007e06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007df0:	4b26      	ldr	r3, [pc, #152]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d001      	beq.n	8007e02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e03f      	b.n	8007e82 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e03d      	b.n	8007e82 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e06:	4b21      	ldr	r3, [pc, #132]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007e0e:	491f      	ldr	r1, [pc, #124]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e16:	f7fc f8b9 	bl	8003f8c <HAL_GetTick>
 8007e1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e1c:	e009      	b.n	8007e32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e1e:	f7fc f8b5 	bl	8003f8c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2c:	d901      	bls.n	8007e32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e027      	b.n	8007e82 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3e:	d1ee      	bne.n	8007e1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b1e      	cmp	r3, #30
 8007e44:	d008      	beq.n	8007e58 <HAL_PWREx_ConfigSupply+0x7c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4a:	d005      	beq.n	8007e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b1d      	cmp	r3, #29
 8007e50:	d002      	beq.n	8007e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b2d      	cmp	r3, #45	; 0x2d
 8007e56:	d113      	bne.n	8007e80 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007e58:	f7fc f898 	bl	8003f8c <HAL_GetTick>
 8007e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e5e:	e009      	b.n	8007e74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e60:	f7fc f894 	bl	8003f8c <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e6e:	d901      	bls.n	8007e74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e006      	b.n	8007e82 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0311 	and.w	r3, r3, #17
 8007e7c:	2b11      	cmp	r3, #17
 8007e7e:	d1ef      	bne.n	8007e60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	58024800 	.word	0x58024800

08007e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	; 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e397      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8087 	beq.w	8007fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb0:	4b9e      	ldr	r3, [pc, #632]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eba:	4b9c      	ldr	r3, [pc, #624]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d007      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x46>
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2b18      	cmp	r3, #24
 8007eca:	d110      	bne.n	8007eee <HAL_RCC_OscConfig+0x5e>
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d10b      	bne.n	8007eee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed6:	4b95      	ldr	r3, [pc, #596]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d06c      	beq.n	8007fbc <HAL_RCC_OscConfig+0x12c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d168      	bne.n	8007fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e371      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef6:	d106      	bne.n	8007f06 <HAL_RCC_OscConfig+0x76>
 8007ef8:	4b8c      	ldr	r3, [pc, #560]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a8b      	ldr	r2, [pc, #556]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	e02e      	b.n	8007f64 <HAL_RCC_OscConfig+0xd4>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10c      	bne.n	8007f28 <HAL_RCC_OscConfig+0x98>
 8007f0e:	4b87      	ldr	r3, [pc, #540]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a86      	ldr	r2, [pc, #536]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	4b84      	ldr	r3, [pc, #528]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a83      	ldr	r2, [pc, #524]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	e01d      	b.n	8007f64 <HAL_RCC_OscConfig+0xd4>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f30:	d10c      	bne.n	8007f4c <HAL_RCC_OscConfig+0xbc>
 8007f32:	4b7e      	ldr	r3, [pc, #504]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a7d      	ldr	r2, [pc, #500]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	4b7b      	ldr	r3, [pc, #492]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a7a      	ldr	r2, [pc, #488]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e00b      	b.n	8007f64 <HAL_RCC_OscConfig+0xd4>
 8007f4c:	4b77      	ldr	r3, [pc, #476]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a76      	ldr	r2, [pc, #472]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	4b74      	ldr	r3, [pc, #464]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a73      	ldr	r2, [pc, #460]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fc f80e 	bl	8003f8c <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f74:	f7fc f80a 	bl	8003f8c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b64      	cmp	r3, #100	; 0x64
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e325      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f86:	4b69      	ldr	r3, [pc, #420]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0xe4>
 8007f92:	e014      	b.n	8007fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f94:	f7fb fffa 	bl	8003f8c <HAL_GetTick>
 8007f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f9c:	f7fb fff6 	bl	8003f8c <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b64      	cmp	r3, #100	; 0x64
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e311      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fae:	4b5f      	ldr	r3, [pc, #380]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f0      	bne.n	8007f9c <HAL_RCC_OscConfig+0x10c>
 8007fba:	e000      	b.n	8007fbe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 808a 	beq.w	80080e0 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fcc:	4b57      	ldr	r3, [pc, #348]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fd6:	4b55      	ldr	r3, [pc, #340]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fda:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x162>
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	2b18      	cmp	r3, #24
 8007fe6:	d137      	bne.n	8008058 <HAL_RCC_OscConfig+0x1c8>
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d132      	bne.n	8008058 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ff2:	4b4e      	ldr	r3, [pc, #312]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_RCC_OscConfig+0x17a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e2e3      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800800a:	4b48      	ldr	r3, [pc, #288]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f023 0219 	bic.w	r2, r3, #25
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4945      	ldr	r1, [pc, #276]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800801c:	f7fb ffb6 	bl	8003f8c <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008024:	f7fb ffb2 	bl	8003f8c <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e2cd      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008036:	4b3d      	ldr	r3, [pc, #244]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f0      	beq.n	8008024 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008042:	4b3a      	ldr	r3, [pc, #232]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	4936      	ldr	r1, [pc, #216]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008056:	e043      	b.n	80080e0 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d026      	beq.n	80080ae <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008060:	4b32      	ldr	r3, [pc, #200]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f023 0219 	bic.w	r2, r3, #25
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	492f      	ldr	r1, [pc, #188]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008072:	f7fb ff8b 	bl	8003f8c <HAL_GetTick>
 8008076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800807a:	f7fb ff87 	bl	8003f8c <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e2a2      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0f0      	beq.n	800807a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008098:	4b24      	ldr	r3, [pc, #144]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	061b      	lsls	r3, r3, #24
 80080a6:	4921      	ldr	r1, [pc, #132]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	604b      	str	r3, [r1, #4]
 80080ac:	e018      	b.n	80080e0 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ae:	4b1f      	ldr	r3, [pc, #124]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1e      	ldr	r2, [pc, #120]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ba:	f7fb ff67 	bl	8003f8c <HAL_GetTick>
 80080be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c2:	f7fb ff63 	bl	8003f8c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e27e      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080d4:	4b15      	ldr	r3, [pc, #84]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f0      	bne.n	80080c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d06d      	beq.n	80081c8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d007      	beq.n	8008112 <HAL_RCC_OscConfig+0x282>
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b18      	cmp	r3, #24
 8008106:	d11e      	bne.n	8008146 <HAL_RCC_OscConfig+0x2b6>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d119      	bne.n	8008146 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008112:	4b06      	ldr	r3, [pc, #24]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <HAL_RCC_OscConfig+0x2a0>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d004      	beq.n	8008130 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e253      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008130:	4ba3      	ldr	r3, [pc, #652]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	061b      	lsls	r3, r3, #24
 800813e:	49a0      	ldr	r1, [pc, #640]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008140:	4313      	orrs	r3, r2
 8008142:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008144:	e040      	b.n	80081c8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d023      	beq.n	8008196 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800814e:	4b9c      	ldr	r3, [pc, #624]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a9b      	ldr	r2, [pc, #620]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815a:	f7fb ff17 	bl	8003f8c <HAL_GetTick>
 800815e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008162:	f7fb ff13 	bl	8003f8c <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e22e      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008174:	4b92      	ldr	r3, [pc, #584]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008180:	4b8f      	ldr	r3, [pc, #572]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	498c      	ldr	r1, [pc, #560]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008190:	4313      	orrs	r3, r2
 8008192:	60cb      	str	r3, [r1, #12]
 8008194:	e018      	b.n	80081c8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008196:	4b8a      	ldr	r3, [pc, #552]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a89      	ldr	r2, [pc, #548]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a2:	f7fb fef3 	bl	8003f8c <HAL_GetTick>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081aa:	f7fb feef 	bl	8003f8c <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e20a      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081bc:	4b80      	ldr	r3, [pc, #512]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f0      	bne.n	80081aa <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d036      	beq.n	8008242 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d019      	beq.n	8008210 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081dc:	4b78      	ldr	r3, [pc, #480]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 80081de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e0:	4a77      	ldr	r2, [pc, #476]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 80081e2:	f043 0301 	orr.w	r3, r3, #1
 80081e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e8:	f7fb fed0 	bl	8003f8c <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081f0:	f7fb fecc 	bl	8003f8c <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e1e7      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008202:	4b6f      	ldr	r3, [pc, #444]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x360>
 800820e:	e018      	b.n	8008242 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008210:	4b6b      	ldr	r3, [pc, #428]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008214:	4a6a      	ldr	r2, [pc, #424]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821c:	f7fb feb6 	bl	8003f8c <HAL_GetTick>
 8008220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008224:	f7fb feb2 	bl	8003f8c <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e1cd      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008236:	4b62      	ldr	r3, [pc, #392]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f0      	bne.n	8008224 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d036      	beq.n	80082bc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d019      	beq.n	800828a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008256:	4b5a      	ldr	r3, [pc, #360]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a59      	ldr	r2, [pc, #356]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800825c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008262:	f7fb fe93 	bl	8003f8c <HAL_GetTick>
 8008266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800826a:	f7fb fe8f 	bl	8003f8c <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e1aa      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800827c:	4b50      	ldr	r3, [pc, #320]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0f0      	beq.n	800826a <HAL_RCC_OscConfig+0x3da>
 8008288:	e018      	b.n	80082bc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800828a:	4b4d      	ldr	r3, [pc, #308]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a4c      	ldr	r2, [pc, #304]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008296:	f7fb fe79 	bl	8003f8c <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800829e:	f7fb fe75 	bl	8003f8c <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e190      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082b0:	4b43      	ldr	r3, [pc, #268]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8085 	beq.w	80083d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082ca:	4b3e      	ldr	r3, [pc, #248]	; (80083c4 <HAL_RCC_OscConfig+0x534>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a3d      	ldr	r2, [pc, #244]	; (80083c4 <HAL_RCC_OscConfig+0x534>)
 80082d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082d6:	f7fb fe59 	bl	8003f8c <HAL_GetTick>
 80082da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082de:	f7fb fe55 	bl	8003f8c <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b64      	cmp	r3, #100	; 0x64
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e170      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082f0:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <HAL_RCC_OscConfig+0x534>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0f0      	beq.n	80082de <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d106      	bne.n	8008312 <HAL_RCC_OscConfig+0x482>
 8008304:	4b2e      	ldr	r3, [pc, #184]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	4a2d      	ldr	r2, [pc, #180]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	6713      	str	r3, [r2, #112]	; 0x70
 8008310:	e02d      	b.n	800836e <HAL_RCC_OscConfig+0x4de>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10c      	bne.n	8008334 <HAL_RCC_OscConfig+0x4a4>
 800831a:	4b29      	ldr	r3, [pc, #164]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
 8008326:	4b26      	ldr	r3, [pc, #152]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	4a25      	ldr	r2, [pc, #148]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	6713      	str	r3, [r2, #112]	; 0x70
 8008332:	e01c      	b.n	800836e <HAL_RCC_OscConfig+0x4de>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b05      	cmp	r3, #5
 800833a:	d10c      	bne.n	8008356 <HAL_RCC_OscConfig+0x4c6>
 800833c:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008342:	f043 0304 	orr.w	r3, r3, #4
 8008346:	6713      	str	r3, [r2, #112]	; 0x70
 8008348:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	6713      	str	r3, [r2, #112]	; 0x70
 8008354:	e00b      	b.n	800836e <HAL_RCC_OscConfig+0x4de>
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	4a19      	ldr	r2, [pc, #100]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 800835c:	f023 0301 	bic.w	r3, r3, #1
 8008360:	6713      	str	r3, [r2, #112]	; 0x70
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008368:	f023 0304 	bic.w	r3, r3, #4
 800836c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d015      	beq.n	80083a2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008376:	f7fb fe09 	bl	8003f8c <HAL_GetTick>
 800837a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800837c:	e00a      	b.n	8008394 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837e:	f7fb fe05 	bl	8003f8c <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f241 3288 	movw	r2, #5000	; 0x1388
 800838c:	4293      	cmp	r3, r2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e11e      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_RCC_OscConfig+0x530>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0ee      	beq.n	800837e <HAL_RCC_OscConfig+0x4ee>
 80083a0:	e018      	b.n	80083d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a2:	f7fb fdf3 	bl	8003f8c <HAL_GetTick>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083a8:	e00e      	b.n	80083c8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083aa:	f7fb fdef 	bl	8003f8c <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d905      	bls.n	80083c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e108      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
 80083c0:	58024400 	.word	0x58024400
 80083c4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083c8:	4b84      	ldr	r3, [pc, #528]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1ea      	bne.n	80083aa <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80f9 	beq.w	80085d0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083de:	4b7f      	ldr	r3, [pc, #508]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e6:	2b18      	cmp	r3, #24
 80083e8:	f000 80b4 	beq.w	8008554 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	f040 8095 	bne.w	8008520 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f6:	4b79      	ldr	r3, [pc, #484]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a78      	ldr	r2, [pc, #480]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80083fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008402:	f7fb fdc3 	bl	8003f8c <HAL_GetTick>
 8008406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008408:	e008      	b.n	800841c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800840a:	f7fb fdbf 	bl	8003f8c <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e0da      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800841c:	4b6f      	ldr	r3, [pc, #444]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f0      	bne.n	800840a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008428:	4b6c      	ldr	r3, [pc, #432]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800842a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800842c:	4b6c      	ldr	r3, [pc, #432]	; (80085e0 <HAL_RCC_OscConfig+0x750>)
 800842e:	4013      	ands	r3, r2
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008438:	0112      	lsls	r2, r2, #4
 800843a:	430a      	orrs	r2, r1
 800843c:	4967      	ldr	r1, [pc, #412]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	628b      	str	r3, [r1, #40]	; 0x28
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	3b01      	subs	r3, #1
 8008448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008450:	3b01      	subs	r3, #1
 8008452:	025b      	lsls	r3, r3, #9
 8008454:	b29b      	uxth	r3, r3
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	3b01      	subs	r3, #1
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	3b01      	subs	r3, #1
 800846c:	061b      	lsls	r3, r3, #24
 800846e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008472:	495a      	ldr	r1, [pc, #360]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008474:	4313      	orrs	r3, r2
 8008476:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008478:	4b58      	ldr	r3, [pc, #352]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a57      	ldr	r2, [pc, #348]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008484:	4b55      	ldr	r3, [pc, #340]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008488:	4b56      	ldr	r3, [pc, #344]	; (80085e4 <HAL_RCC_OscConfig+0x754>)
 800848a:	4013      	ands	r3, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008490:	00d2      	lsls	r2, r2, #3
 8008492:	4952      	ldr	r1, [pc, #328]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008494:	4313      	orrs	r3, r2
 8008496:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008498:	4b50      	ldr	r3, [pc, #320]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	f023 020c 	bic.w	r2, r3, #12
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	494d      	ldr	r1, [pc, #308]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084aa:	4b4c      	ldr	r3, [pc, #304]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	f023 0202 	bic.w	r2, r3, #2
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	4949      	ldr	r1, [pc, #292]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084bc:	4b47      	ldr	r3, [pc, #284]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	4a46      	ldr	r2, [pc, #280]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c8:	4b44      	ldr	r3, [pc, #272]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4a43      	ldr	r2, [pc, #268]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084d4:	4b41      	ldr	r3, [pc, #260]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4a40      	ldr	r2, [pc, #256]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80084e0:	4b3e      	ldr	r3, [pc, #248]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	4a3d      	ldr	r2, [pc, #244]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084ec:	4b3b      	ldr	r3, [pc, #236]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a3a      	ldr	r2, [pc, #232]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 80084f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f8:	f7fb fd48 	bl	8003f8c <HAL_GetTick>
 80084fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008500:	f7fb fd44 	bl	8003f8c <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e05f      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008512:	4b32      	ldr	r3, [pc, #200]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f0      	beq.n	8008500 <HAL_RCC_OscConfig+0x670>
 800851e:	e057      	b.n	80085d0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008520:	4b2e      	ldr	r3, [pc, #184]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2d      	ldr	r2, [pc, #180]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800852a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852c:	f7fb fd2e 	bl	8003f8c <HAL_GetTick>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008534:	f7fb fd2a 	bl	8003f8c <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e045      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008546:	4b25      	ldr	r3, [pc, #148]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f0      	bne.n	8008534 <HAL_RCC_OscConfig+0x6a4>
 8008552:	e03d      	b.n	80085d0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008554:	4b21      	ldr	r3, [pc, #132]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800855a:	4b20      	ldr	r3, [pc, #128]	; (80085dc <HAL_RCC_OscConfig+0x74c>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	2b01      	cmp	r3, #1
 8008566:	d031      	beq.n	80085cc <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f003 0203 	and.w	r2, r3, #3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008572:	429a      	cmp	r2, r3
 8008574:	d12a      	bne.n	80085cc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008582:	429a      	cmp	r2, r3
 8008584:	d122      	bne.n	80085cc <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008592:	429a      	cmp	r2, r3
 8008594:	d11a      	bne.n	80085cc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	0a5b      	lsrs	r3, r3, #9
 800859a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d111      	bne.n	80085cc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d108      	bne.n	80085cc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	0e1b      	lsrs	r3, r3, #24
 80085be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d001      	beq.n	80085d0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	58024400 	.word	0x58024400
 80085e0:	fffffc0c 	.word	0xfffffc0c
 80085e4:	ffff0007 	.word	0xffff0007

080085e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e19c      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085fc:	4b8a      	ldr	r3, [pc, #552]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d910      	bls.n	800862c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800860a:	4b87      	ldr	r3, [pc, #540]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f023 020f 	bic.w	r2, r3, #15
 8008612:	4985      	ldr	r1, [pc, #532]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	4313      	orrs	r3, r2
 8008618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800861a:	4b83      	ldr	r3, [pc, #524]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d001      	beq.n	800862c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e184      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	4b7b      	ldr	r3, [pc, #492]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008644:	429a      	cmp	r2, r3
 8008646:	d908      	bls.n	800865a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008648:	4b78      	ldr	r3, [pc, #480]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	4975      	ldr	r1, [pc, #468]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008656:	4313      	orrs	r3, r2
 8008658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d010      	beq.n	8008688 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695a      	ldr	r2, [r3, #20]
 800866a:	4b70      	ldr	r3, [pc, #448]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008672:	429a      	cmp	r2, r3
 8008674:	d908      	bls.n	8008688 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008676:	4b6d      	ldr	r3, [pc, #436]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	496a      	ldr	r1, [pc, #424]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008684:	4313      	orrs	r3, r2
 8008686:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d010      	beq.n	80086b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	4b64      	ldr	r3, [pc, #400]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d908      	bls.n	80086b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086a4:	4b61      	ldr	r3, [pc, #388]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	495e      	ldr	r1, [pc, #376]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d010      	beq.n	80086e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69da      	ldr	r2, [r3, #28]
 80086c6:	4b59      	ldr	r3, [pc, #356]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d908      	bls.n	80086e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80086d2:	4b56      	ldr	r3, [pc, #344]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	4953      	ldr	r1, [pc, #332]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d010      	beq.n	8008712 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	4b4d      	ldr	r3, [pc, #308]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d908      	bls.n	8008712 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008700:	4b4a      	ldr	r3, [pc, #296]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f023 020f 	bic.w	r2, r3, #15
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4947      	ldr	r1, [pc, #284]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800870e:	4313      	orrs	r3, r2
 8008710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d055      	beq.n	80087ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800871e:	4b43      	ldr	r3, [pc, #268]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	4940      	ldr	r1, [pc, #256]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800872c:	4313      	orrs	r3, r2
 800872e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d107      	bne.n	8008748 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008738:	4b3c      	ldr	r3, [pc, #240]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d121      	bne.n	8008788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e0f6      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d107      	bne.n	8008760 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008750:	4b36      	ldr	r3, [pc, #216]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d115      	bne.n	8008788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e0ea      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d107      	bne.n	8008778 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008768:	4b30      	ldr	r3, [pc, #192]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0de      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008778:	4b2c      	ldr	r3, [pc, #176]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e0d6      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008788:	4b28      	ldr	r3, [pc, #160]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f023 0207 	bic.w	r2, r3, #7
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	4925      	ldr	r1, [pc, #148]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 8008796:	4313      	orrs	r3, r2
 8008798:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879a:	f7fb fbf7 	bl	8003f8c <HAL_GetTick>
 800879e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a0:	e00a      	b.n	80087b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087a2:	f7fb fbf3 	bl	8003f8c <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0be      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d1eb      	bne.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d010      	beq.n	80087f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	4b14      	ldr	r3, [pc, #80]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d208      	bcs.n	80087f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f023 020f 	bic.w	r2, r3, #15
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	490e      	ldr	r1, [pc, #56]	; (800882c <HAL_RCC_ClockConfig+0x244>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d214      	bcs.n	8008830 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 020f 	bic.w	r2, r3, #15
 800880e:	4906      	ldr	r1, [pc, #24]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	4313      	orrs	r3, r2
 8008814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008816:	4b04      	ldr	r3, [pc, #16]	; (8008828 <HAL_RCC_ClockConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	429a      	cmp	r2, r3
 8008822:	d005      	beq.n	8008830 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e086      	b.n	8008936 <HAL_RCC_ClockConfig+0x34e>
 8008828:	52002000 	.word	0x52002000
 800882c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	4b3f      	ldr	r3, [pc, #252]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008848:	429a      	cmp	r2, r3
 800884a:	d208      	bcs.n	800885e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800884c:	4b3c      	ldr	r3, [pc, #240]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	4939      	ldr	r1, [pc, #228]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 800885a:	4313      	orrs	r3, r2
 800885c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d010      	beq.n	800888c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	4b34      	ldr	r3, [pc, #208]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008876:	429a      	cmp	r2, r3
 8008878:	d208      	bcs.n	800888c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	492e      	ldr	r1, [pc, #184]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 8008888:	4313      	orrs	r3, r2
 800888a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d010      	beq.n	80088ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	4b28      	ldr	r3, [pc, #160]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d208      	bcs.n	80088ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	4922      	ldr	r1, [pc, #136]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69da      	ldr	r2, [r3, #28]
 80088ca:	4b1d      	ldr	r3, [pc, #116]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d208      	bcs.n	80088e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	4917      	ldr	r1, [pc, #92]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088e8:	f000 f834 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 80088ec:	4602      	mov	r2, r0
 80088ee:	4b14      	ldr	r3, [pc, #80]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	4912      	ldr	r1, [pc, #72]	; (8008944 <HAL_RCC_ClockConfig+0x35c>)
 80088fa:	5ccb      	ldrb	r3, [r1, r3]
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008906:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <HAL_RCC_ClockConfig+0x358>)
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	4a0d      	ldr	r2, [pc, #52]	; (8008944 <HAL_RCC_ClockConfig+0x35c>)
 8008910:	5cd3      	ldrb	r3, [r2, r3]
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <HAL_RCC_ClockConfig+0x360>)
 800891e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008920:	4a0a      	ldr	r2, [pc, #40]	; (800894c <HAL_RCC_ClockConfig+0x364>)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <HAL_RCC_ClockConfig+0x368>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f7f8 ff3e 	bl	80017ac <HAL_InitTick>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400
 8008944:	08024d90 	.word	0x08024d90
 8008948:	20000020 	.word	0x20000020
 800894c:	2000001c 	.word	0x2000001c
 8008950:	20000024 	.word	0x20000024

08008954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008954:	b480      	push	{r7}
 8008956:	b089      	sub	sp, #36	; 0x24
 8008958:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800895a:	4bb3      	ldr	r3, [pc, #716]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008962:	2b18      	cmp	r3, #24
 8008964:	f200 8155 	bhi.w	8008c12 <HAL_RCC_GetSysClockFreq+0x2be>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <HAL_RCC_GetSysClockFreq+0x1c>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089d5 	.word	0x080089d5
 8008974:	08008c13 	.word	0x08008c13
 8008978:	08008c13 	.word	0x08008c13
 800897c:	08008c13 	.word	0x08008c13
 8008980:	08008c13 	.word	0x08008c13
 8008984:	08008c13 	.word	0x08008c13
 8008988:	08008c13 	.word	0x08008c13
 800898c:	08008c13 	.word	0x08008c13
 8008990:	080089fb 	.word	0x080089fb
 8008994:	08008c13 	.word	0x08008c13
 8008998:	08008c13 	.word	0x08008c13
 800899c:	08008c13 	.word	0x08008c13
 80089a0:	08008c13 	.word	0x08008c13
 80089a4:	08008c13 	.word	0x08008c13
 80089a8:	08008c13 	.word	0x08008c13
 80089ac:	08008c13 	.word	0x08008c13
 80089b0:	08008a01 	.word	0x08008a01
 80089b4:	08008c13 	.word	0x08008c13
 80089b8:	08008c13 	.word	0x08008c13
 80089bc:	08008c13 	.word	0x08008c13
 80089c0:	08008c13 	.word	0x08008c13
 80089c4:	08008c13 	.word	0x08008c13
 80089c8:	08008c13 	.word	0x08008c13
 80089cc:	08008c13 	.word	0x08008c13
 80089d0:	08008a07 	.word	0x08008a07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d4:	4b94      	ldr	r3, [pc, #592]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e0:	4b91      	ldr	r3, [pc, #580]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a90      	ldr	r2, [pc, #576]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089f2:	e111      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089f4:	4b8d      	ldr	r3, [pc, #564]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089f6:	61bb      	str	r3, [r7, #24]
    break;
 80089f8:	e10e      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089fa:	4b8d      	ldr	r3, [pc, #564]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089fc:	61bb      	str	r3, [r7, #24]
    break;
 80089fe:	e10b      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008a00:	4b8c      	ldr	r3, [pc, #560]	; (8008c34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a02:	61bb      	str	r3, [r7, #24]
    break;
 8008a04:	e108      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a06:	4b88      	ldr	r3, [pc, #544]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008a10:	4b85      	ldr	r3, [pc, #532]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	091b      	lsrs	r3, r3, #4
 8008a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a1c:	4b82      	ldr	r3, [pc, #520]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a26:	4b80      	ldr	r3, [pc, #512]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	08db      	lsrs	r3, r3, #3
 8008a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80e1 	beq.w	8008c0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	f000 8083 	beq.w	8008b58 <HAL_RCC_GetSysClockFreq+0x204>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	f200 80a1 	bhi.w	8008b9c <HAL_RCC_GetSysClockFreq+0x248>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_RCC_GetSysClockFreq+0x114>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d056      	beq.n	8008b14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a66:	e099      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a68:	4b6f      	ldr	r3, [pc, #444]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d02d      	beq.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a74:	4b6c      	ldr	r3, [pc, #432]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	08db      	lsrs	r3, r3, #3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	4a6b      	ldr	r2, [pc, #428]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
 8008a84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	4b62      	ldr	r3, [pc, #392]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ab2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ace:	e087      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008c3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae2:	4b51      	ldr	r3, [pc, #324]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b12:	e065      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b26:	4b40      	ldr	r3, [pc, #256]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b56:	e043      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	4b2f      	ldr	r3, [pc, #188]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9a:	e021      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bae:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	0a5b      	lsrs	r3, r3, #9
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	3301      	adds	r3, #1
 8008bec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c04:	ee17 3a90 	vmov	r3, s15
 8008c08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008c0a:	e005      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
    break;
 8008c10:	e002      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c14:	61bb      	str	r3, [r7, #24]
    break;
 8008c16:	bf00      	nop
  }

  return sysclockfreq;
 8008c18:	69bb      	ldr	r3, [r7, #24]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3724      	adds	r7, #36	; 0x24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	03d09000 	.word	0x03d09000
 8008c30:	003d0900 	.word	0x003d0900
 8008c34:	017d7840 	.word	0x017d7840
 8008c38:	46000000 	.word	0x46000000
 8008c3c:	4c742400 	.word	0x4c742400
 8008c40:	4a742400 	.word	0x4a742400
 8008c44:	4bbebc20 	.word	0x4bbebc20

08008c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c4e:	f7ff fe81 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 8008c52:	4602      	mov	r2, r0
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	0a1b      	lsrs	r3, r3, #8
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	490f      	ldr	r1, [pc, #60]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c60:	5ccb      	ldrb	r3, [r1, r3]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c76:	5cd3      	ldrb	r3, [r2, r3]
 8008c78:	f003 031f 	and.w	r3, r3, #31
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c82:	4a07      	ldr	r2, [pc, #28]	; (8008ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c86:	4a07      	ldr	r2, [pc, #28]	; (8008ca4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	58024400 	.word	0x58024400
 8008c9c:	08024d90 	.word	0x08024d90
 8008ca0:	20000020 	.word	0x20000020
 8008ca4:	2000001c 	.word	0x2000001c

08008ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008cac:	f7ff ffcc 	bl	8008c48 <HAL_RCC_GetHCLKFreq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	091b      	lsrs	r3, r3, #4
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	4904      	ldr	r1, [pc, #16]	; (8008cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cbe:	5ccb      	ldrb	r3, [r1, r3]
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	58024400 	.word	0x58024400
 8008cd0:	08024d90 	.word	0x08024d90

08008cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cd8:	f7ff ffb6 	bl	8008c48 <HAL_RCC_GetHCLKFreq>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	4904      	ldr	r1, [pc, #16]	; (8008cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	58024400 	.word	0x58024400
 8008cfc:	08024d90 	.word	0x08024d90

08008d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	223f      	movs	r2, #63	; 0x3f
 8008d0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d10:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0207 	and.w	r2, r3, #7
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008d1c:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008d28:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	f003 020f 	and.w	r2, r3, #15
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008d34:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008d40:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <HAL_RCC_GetClockConfig+0x7c>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <HAL_RCC_GetClockConfig+0x80>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 020f 	and.w	r2, r3, #15
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	601a      	str	r2, [r3, #0]
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	52002000 	.word	0x52002000

08008d84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d90:	2300      	movs	r3, #0
 8008d92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d03f      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008da8:	d02a      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008daa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dae:	d824      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db4:	d018      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dba:	d81e      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc4:	d007      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008dc6:	e018      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc8:	4bab      	ldr	r3, [pc, #684]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4aaa      	ldr	r2, [pc, #680]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008dd4:	e015      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	2102      	movs	r1, #2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fecb 	bl	8009b78 <RCCEx_PLL2_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008de6:	e00c      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3324      	adds	r3, #36	; 0x24
 8008dec:	2102      	movs	r1, #2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 ff74 	bl	8009cdc <RCCEx_PLL3_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008df8:	e003      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e08:	4b9b      	ldr	r3, [pc, #620]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e14:	4998      	ldr	r1, [pc, #608]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	650b      	str	r3, [r1, #80]	; 0x50
 8008e1a:	e001      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d03d      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d826      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e51 	.word	0x08008e51
 8008e40:	08008e5f 	.word	0x08008e5f
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08008e89 	.word	0x08008e89
 8008e4c:	08008e89 	.word	0x08008e89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e50:	4b89      	ldr	r3, [pc, #548]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	4a88      	ldr	r2, [pc, #544]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e5c:	e015      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3304      	adds	r3, #4
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fe87 	bl	8009b78 <RCCEx_PLL2_Config>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e6e:	e00c      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3324      	adds	r3, #36	; 0x24
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff30 	bl	8009cdc <RCCEx_PLL3_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e80:	e003      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
      break;
 8008e86:	e000      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d109      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e90:	4b79      	ldr	r3, [pc, #484]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	f023 0207 	bic.w	r2, r3, #7
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9c:	4976      	ldr	r1, [pc, #472]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ea2:	e001      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d051      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008ebe:	d036      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008ec0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008ec4:	d830      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008eca:	d032      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ed0:	d82a      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ed2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ed6:	d02e      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008ed8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008edc:	d824      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee2:	d018      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee8:	d81e      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ef2:	d007      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008ef4:	e018      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef6:	4b60      	ldr	r3, [pc, #384]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	4a5f      	ldr	r2, [pc, #380]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f02:	e019      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3304      	adds	r3, #4
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fe34 	bl	8009b78 <RCCEx_PLL2_Config>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f14:	e010      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3324      	adds	r3, #36	; 0x24
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fedd 	bl	8009cdc <RCCEx_PLL3_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f26:	e007      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2c:	e004      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f3e:	4b4e      	ldr	r3, [pc, #312]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f42:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f4c:	494a      	ldr	r1, [pc, #296]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	658b      	str	r3, [r1, #88]	; 0x58
 8008f52:	e001      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d051      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f6a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f6e:	d036      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008f70:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f74:	d830      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f7a:	d032      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f80:	d82a      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f86:	d02e      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008f88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f8c:	d824      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f92:	d018      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f98:	d81e      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008f9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fa2:	d007      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008fa4:	e018      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa6:	4b34      	ldr	r3, [pc, #208]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a33      	ldr	r2, [pc, #204]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fb2:	e019      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fddc 	bl	8009b78 <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008fc4:	e010      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3324      	adds	r3, #36	; 0x24
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fe85 	bl	8009cdc <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fd6:	e007      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]
      break;
 8008fdc:	e004      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008fde:	bf00      	nop
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fee:	4b22      	ldr	r3, [pc, #136]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ffc:	491e      	ldr	r1, [pc, #120]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	658b      	str	r3, [r1, #88]	; 0x58
 8009002:	e001      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d035      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009018:	2b30      	cmp	r3, #48	; 0x30
 800901a:	d01c      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800901c:	2b30      	cmp	r3, #48	; 0x30
 800901e:	d817      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009020:	2b20      	cmp	r3, #32
 8009022:	d00c      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d813      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d016      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d10f      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4b11      	ldr	r3, [pc, #68]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	4a10      	ldr	r2, [pc, #64]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800903c:	e00e      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3304      	adds	r3, #4
 8009042:	2102      	movs	r1, #2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fd97 	bl	8009b78 <RCCEx_PLL2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800904e:	e005      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	75fb      	strb	r3, [r7, #23]
      break;
 8009054:	e002      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009056:	bf00      	nop
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800905a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10c      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009066:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906e:	4902      	ldr	r1, [pc, #8]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009070:	4313      	orrs	r3, r2
 8009072:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009074:	e004      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009076:	bf00      	nop
 8009078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d047      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009094:	d030      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800909a:	d82a      	bhi.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800909c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a0:	d02c      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x378>
 80090a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a6:	d824      	bhi.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80090a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ac:	d018      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b2:	d81e      	bhi.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090bc:	d007      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80090be:	e018      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c0:	4bac      	ldr	r3, [pc, #688]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	4aab      	ldr	r2, [pc, #684]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090cc:	e017      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3304      	adds	r3, #4
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fd4f 	bl	8009b78 <RCCEx_PLL2_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090de:	e00e      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3324      	adds	r3, #36	; 0x24
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fdf8 	bl	8009cdc <RCCEx_PLL3_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090f0:	e005      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	75fb      	strb	r3, [r7, #23]
      break;
 80090f6:	e002      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80090fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009104:	4b9b      	ldr	r3, [pc, #620]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	4998      	ldr	r1, [pc, #608]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009112:	4313      	orrs	r3, r2
 8009114:	650b      	str	r3, [r1, #80]	; 0x50
 8009116:	e001      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d049      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009130:	d02e      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009136:	d828      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800913c:	d02a      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800913e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009142:	d822      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009148:	d026      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800914a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800914e:	d81c      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009154:	d010      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800915a:	d816      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01d      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009164:	d111      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fd03 	bl	8009b78 <RCCEx_PLL2_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009176:	e012      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3324      	adds	r3, #36	; 0x24
 800917c:	2101      	movs	r1, #1
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fdac 	bl	8009cdc <RCCEx_PLL3_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009188:	e009      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
      break;
 800918e:	e006      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800919c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d109      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091a4:	4b73      	ldr	r3, [pc, #460]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80091a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b0:	4970      	ldr	r1, [pc, #448]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	650b      	str	r3, [r1, #80]	; 0x50
 80091b6:	e001      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d04b      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d2:	d02e      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80091d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d8:	d828      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d02a      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80091e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e4:	d822      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80091e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091ea:	d026      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80091ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091f0:	d81c      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80091f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f6:	d010      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80091f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091fc:	d816      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01d      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009206:	d111      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3304      	adds	r3, #4
 800920c:	2101      	movs	r1, #1
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fcb2 	bl	8009b78 <RCCEx_PLL2_Config>
 8009214:	4603      	mov	r3, r0
 8009216:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009218:	e012      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3324      	adds	r3, #36	; 0x24
 800921e:	2101      	movs	r1, #1
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fd5b 	bl	8009cdc <RCCEx_PLL3_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800922a:	e009      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
      break;
 8009230:	e006      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009232:	bf00      	nop
 8009234:	e004      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009236:	bf00      	nop
 8009238:	e002      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800923a:	bf00      	nop
 800923c:	e000      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800923e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009246:	4b4b      	ldr	r3, [pc, #300]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009254:	4947      	ldr	r1, [pc, #284]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009256:	4313      	orrs	r3, r2
 8009258:	658b      	str	r3, [r1, #88]	; 0x58
 800925a:	e001      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d02f      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009274:	d00e      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800927a:	d814      	bhi.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800927c:	2b00      	cmp	r3, #0
 800927e:	d015      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009284:	d10f      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009286:	4b3b      	ldr	r3, [pc, #236]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	4a3a      	ldr	r2, [pc, #232]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800928c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009292:	e00c      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	2101      	movs	r1, #1
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fc6c 	bl	8009b78 <RCCEx_PLL2_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
      break;
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80092ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d109      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092b4:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c0:	492c      	ldr	r1, [pc, #176]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	650b      	str	r3, [r1, #80]	; 0x50
 80092c6:	e001      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d032      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d81b      	bhi.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	0800931f 	.word	0x0800931f
 80092ec:	080092f9 	.word	0x080092f9
 80092f0:	08009307 	.word	0x08009307
 80092f4:	0800931f 	.word	0x0800931f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f8:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80092fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009304:	e00c      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	2102      	movs	r1, #2
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fc33 	bl	8009b78 <RCCEx_PLL2_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009316:	e003      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
      break;
 800931c:	e000      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800931e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932a:	f023 0203 	bic.w	r2, r3, #3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009332:	4910      	ldr	r1, [pc, #64]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009334:	4313      	orrs	r3, r2
 8009336:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009338:	e001      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 808a 	beq.w	8009460 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a09      	ldr	r2, [pc, #36]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009358:	f7fa fe18 	bl	8003f8c <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800935e:	e00d      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009360:	f7fa fe14 	bl	8003f8c <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b64      	cmp	r3, #100	; 0x64
 800936c:	d906      	bls.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	75fb      	strb	r3, [r7, #23]
        break;
 8009372:	e009      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009374:	58024400 	.word	0x58024400
 8009378:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800937c:	4bb9      	ldr	r3, [pc, #740]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0eb      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d166      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800938e:	4bb6      	ldr	r3, [pc, #728]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009398:	4053      	eors	r3, r2
 800939a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d013      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093a2:	4bb1      	ldr	r3, [pc, #708]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093ac:	4bae      	ldr	r3, [pc, #696]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b0:	4aad      	ldr	r2, [pc, #692]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093b8:	4bab      	ldr	r3, [pc, #684]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093bc:	4aaa      	ldr	r2, [pc, #680]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80093c4:	4aa8      	ldr	r2, [pc, #672]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d4:	d115      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d6:	f7fa fdd9 	bl	8003f8c <HAL_GetTick>
 80093da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093dc:	e00b      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093de:	f7fa fdd5 	bl	8003f8c <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d902      	bls.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	75fb      	strb	r3, [r7, #23]
            break;
 80093f4:	e005      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f6:	4b9c      	ldr	r3, [pc, #624]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0ed      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d126      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800940e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009416:	d10d      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009418:	4b93      	ldr	r3, [pc, #588]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009426:	0919      	lsrs	r1, r3, #4
 8009428:	4b90      	ldr	r3, [pc, #576]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800942a:	400b      	ands	r3, r1
 800942c:	498e      	ldr	r1, [pc, #568]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800942e:	4313      	orrs	r3, r2
 8009430:	610b      	str	r3, [r1, #16]
 8009432:	e005      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009434:	4b8c      	ldr	r3, [pc, #560]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	4a8b      	ldr	r2, [pc, #556]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800943a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800943e:	6113      	str	r3, [r2, #16]
 8009440:	4b89      	ldr	r3, [pc, #548]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800944a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800944e:	4986      	ldr	r1, [pc, #536]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009450:	4313      	orrs	r3, r2
 8009452:	670b      	str	r3, [r1, #112]	; 0x70
 8009454:	e004      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	75bb      	strb	r3, [r7, #22]
 800945a:	e001      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b00      	cmp	r3, #0
 800946a:	d07e      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009470:	2b28      	cmp	r3, #40	; 0x28
 8009472:	d867      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	0800954b 	.word	0x0800954b
 8009480:	08009545 	.word	0x08009545
 8009484:	08009545 	.word	0x08009545
 8009488:	08009545 	.word	0x08009545
 800948c:	08009545 	.word	0x08009545
 8009490:	08009545 	.word	0x08009545
 8009494:	08009545 	.word	0x08009545
 8009498:	08009545 	.word	0x08009545
 800949c:	08009521 	.word	0x08009521
 80094a0:	08009545 	.word	0x08009545
 80094a4:	08009545 	.word	0x08009545
 80094a8:	08009545 	.word	0x08009545
 80094ac:	08009545 	.word	0x08009545
 80094b0:	08009545 	.word	0x08009545
 80094b4:	08009545 	.word	0x08009545
 80094b8:	08009545 	.word	0x08009545
 80094bc:	08009533 	.word	0x08009533
 80094c0:	08009545 	.word	0x08009545
 80094c4:	08009545 	.word	0x08009545
 80094c8:	08009545 	.word	0x08009545
 80094cc:	08009545 	.word	0x08009545
 80094d0:	08009545 	.word	0x08009545
 80094d4:	08009545 	.word	0x08009545
 80094d8:	08009545 	.word	0x08009545
 80094dc:	0800954b 	.word	0x0800954b
 80094e0:	08009545 	.word	0x08009545
 80094e4:	08009545 	.word	0x08009545
 80094e8:	08009545 	.word	0x08009545
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009545 	.word	0x08009545
 80094f4:	08009545 	.word	0x08009545
 80094f8:	08009545 	.word	0x08009545
 80094fc:	0800954b 	.word	0x0800954b
 8009500:	08009545 	.word	0x08009545
 8009504:	08009545 	.word	0x08009545
 8009508:	08009545 	.word	0x08009545
 800950c:	08009545 	.word	0x08009545
 8009510:	08009545 	.word	0x08009545
 8009514:	08009545 	.word	0x08009545
 8009518:	08009545 	.word	0x08009545
 800951c:	0800954b 	.word	0x0800954b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	2101      	movs	r1, #1
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fb26 	bl	8009b78 <RCCEx_PLL2_Config>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009530:	e00c      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3324      	adds	r3, #36	; 0x24
 8009536:	2101      	movs	r1, #1
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fbcf 	bl	8009cdc <RCCEx_PLL3_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009542:	e003      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	75fb      	strb	r3, [r7, #23]
      break;
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800954a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009552:	4b45      	ldr	r3, [pc, #276]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800955e:	4942      	ldr	r1, [pc, #264]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009560:	4313      	orrs	r3, r2
 8009562:	654b      	str	r3, [r1, #84]	; 0x54
 8009564:	e001      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d037      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	2b05      	cmp	r3, #5
 800957c:	d820      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095c7 	.word	0x080095c7
 8009588:	0800959d 	.word	0x0800959d
 800958c:	080095af 	.word	0x080095af
 8009590:	080095c7 	.word	0x080095c7
 8009594:	080095c7 	.word	0x080095c7
 8009598:	080095c7 	.word	0x080095c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	2101      	movs	r1, #1
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fae8 	bl	8009b78 <RCCEx_PLL2_Config>
 80095a8:	4603      	mov	r3, r0
 80095aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095ac:	e00c      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3324      	adds	r3, #36	; 0x24
 80095b2:	2101      	movs	r1, #1
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fb91 	bl	8009cdc <RCCEx_PLL3_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095be:	e003      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	75fb      	strb	r3, [r7, #23]
      break;
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80095c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ce:	4b26      	ldr	r3, [pc, #152]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	f023 0207 	bic.w	r2, r3, #7
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	4923      	ldr	r1, [pc, #140]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	654b      	str	r3, [r1, #84]	; 0x54
 80095e0:	e001      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d040      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f8:	2b05      	cmp	r3, #5
 80095fa:	d821      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009647 	.word	0x08009647
 8009608:	0800961d 	.word	0x0800961d
 800960c:	0800962f 	.word	0x0800962f
 8009610:	08009647 	.word	0x08009647
 8009614:	08009647 	.word	0x08009647
 8009618:	08009647 	.word	0x08009647
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	2101      	movs	r1, #1
 8009622:	4618      	mov	r0, r3
 8009624:	f000 faa8 	bl	8009b78 <RCCEx_PLL2_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800962c:	e00c      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	2101      	movs	r1, #1
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fb51 	bl	8009cdc <RCCEx_PLL3_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800963e:	e003      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	75fb      	strb	r3, [r7, #23]
      break;
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8009646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d110      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009652:	f023 0207 	bic.w	r2, r3, #7
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800965c:	4902      	ldr	r1, [pc, #8]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800965e:	4313      	orrs	r3, r2
 8009660:	658b      	str	r3, [r1, #88]	; 0x58
 8009662:	e007      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009664:	58024800 	.word	0x58024800
 8009668:	58024400 	.word	0x58024400
 800966c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d04b      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968a:	d02e      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x966>
 800968c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009690:	d828      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009696:	d02a      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969c:	d822      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800969e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a2:	d026      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80096a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a8:	d81c      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ae:	d010      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80096b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b4:	d816      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01d      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80096ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096be:	d111      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	2100      	movs	r1, #0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fa56 	bl	8009b78 <RCCEx_PLL2_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096d0:	e012      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3324      	adds	r3, #36	; 0x24
 80096d6:	2102      	movs	r1, #2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 faff 	bl	8009cdc <RCCEx_PLL3_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096e2:	e009      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	75fb      	strb	r3, [r7, #23]
      break;
 80096e8:	e006      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80096ea:	bf00      	nop
 80096ec:	e004      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80096ee:	bf00      	nop
 80096f0:	e002      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80096f2:	bf00      	nop
 80096f4:	e000      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80096f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10a      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096fe:	4bb2      	ldr	r3, [pc, #712]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009702:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970c:	49ae      	ldr	r1, [pc, #696]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800970e:	4313      	orrs	r3, r2
 8009710:	654b      	str	r3, [r1, #84]	; 0x54
 8009712:	e001      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	d04b      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800972a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800972e:	d02e      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009730:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009734:	d828      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973a:	d02a      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009740:	d822      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009746:	d026      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800974c:	d81c      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800974e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009752:	d010      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009758:	d816      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01d      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800975e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009762:	d111      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3304      	adds	r3, #4
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fa04 	bl	8009b78 <RCCEx_PLL2_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009774:	e012      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3324      	adds	r3, #36	; 0x24
 800977a:	2102      	movs	r1, #2
 800977c:	4618      	mov	r0, r3
 800977e:	f000 faad 	bl	8009cdc <RCCEx_PLL3_Config>
 8009782:	4603      	mov	r3, r0
 8009784:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009786:	e009      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]
      break;
 800978c:	e006      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800978e:	bf00      	nop
 8009790:	e004      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009792:	bf00      	nop
 8009794:	e002      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800979a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097a2:	4b89      	ldr	r3, [pc, #548]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097b0:	4985      	ldr	r1, [pc, #532]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	658b      	str	r3, [r1, #88]	; 0x58
 80097b6:	e001      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d04b      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097d2:	d02e      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80097d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097d8:	d828      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097de:	d02a      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80097e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e4:	d822      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80097e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097ea:	d026      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80097ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097f0:	d81c      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80097f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097f6:	d010      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80097f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097fc:	d816      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01d      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8009802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009806:	d111      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	2100      	movs	r1, #0
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f9b2 	bl	8009b78 <RCCEx_PLL2_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009818:	e012      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3324      	adds	r3, #36	; 0x24
 800981e:	2102      	movs	r1, #2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fa5b 	bl	8009cdc <RCCEx_PLL3_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800982a:	e009      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	75fb      	strb	r3, [r7, #23]
      break;
 8009830:	e006      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009832:	bf00      	nop
 8009834:	e004      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009836:	bf00      	nop
 8009838:	e002      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800983a:	bf00      	nop
 800983c:	e000      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800983e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009846:	4b60      	ldr	r3, [pc, #384]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009854:	495c      	ldr	r1, [pc, #368]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009856:	4313      	orrs	r3, r2
 8009858:	658b      	str	r3, [r1, #88]	; 0x58
 800985a:	e001      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d018      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009874:	d10a      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3324      	adds	r3, #36	; 0x24
 800987a:	2102      	movs	r1, #2
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fa2d 	bl	8009cdc <RCCEx_PLL3_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800988c:	4b4e      	ldr	r3, [pc, #312]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800988e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009890:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009898:	494b      	ldr	r1, [pc, #300]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800989a:	4313      	orrs	r3, r2
 800989c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b4:	d10a      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3324      	adds	r3, #36	; 0x24
 80098ba:	2102      	movs	r1, #2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fa0d 	bl	8009cdc <RCCEx_PLL3_Config>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098cc:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80098ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098da:	493b      	ldr	r1, [pc, #236]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d034      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098f6:	d01d      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80098f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098fc:	d817      	bhi.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009906:	d009      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009908:	e011      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f931 	bl	8009b78 <RCCEx_PLL2_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800991a:	e00c      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3324      	adds	r3, #36	; 0x24
 8009920:	2102      	movs	r1, #2
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f9da 	bl	8009cdc <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800992c:	e003      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	75fb      	strb	r3, [r7, #23]
      break;
 8009932:	e000      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800993c:	4b22      	ldr	r3, [pc, #136]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800993e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800994a:	491f      	ldr	r1, [pc, #124]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800994c:	4313      	orrs	r3, r2
 800994e:	658b      	str	r3, [r1, #88]	; 0x58
 8009950:	e001      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d036      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800996c:	d01c      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800996e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009972:	d816      	bhi.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009978:	d003      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800997a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800997e:	d007      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009980:	e00f      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009982:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	4a10      	ldr	r2, [pc, #64]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800998c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800998e:	e00c      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3324      	adds	r3, #36	; 0x24
 8009994:	2101      	movs	r1, #1
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f9a0 	bl	8009cdc <RCCEx_PLL3_Config>
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80099a0:	e003      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
      break;
 80099a6:	e000      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80099a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10d      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099be:	4902      	ldr	r1, [pc, #8]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	654b      	str	r3, [r1, #84]	; 0x54
 80099c4:	e004      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80099c6:	bf00      	nop
 80099c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d029      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e8:	d007      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80099ea:	e00f      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ec:	4b61      	ldr	r3, [pc, #388]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	4a60      	ldr	r2, [pc, #384]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099f8:	e00b      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3304      	adds	r3, #4
 80099fe:	2102      	movs	r1, #2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f8b9 	bl	8009b78 <RCCEx_PLL2_Config>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009a0a:	e002      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a18:	4b56      	ldr	r3, [pc, #344]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a24:	4953      	ldr	r1, [pc, #332]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a2a:	e001      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3324      	adds	r3, #36	; 0x24
 8009a40:	2102      	movs	r1, #2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f94a 	bl	8009cdc <RCCEx_PLL3_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d030      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a66:	d017      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a6c:	d811      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a72:	d013      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a78:	d80b      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d010      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a82:	d106      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a84:	4b3b      	ldr	r3, [pc, #236]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	4a3a      	ldr	r2, [pc, #232]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009a90:	e007      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	75fb      	strb	r3, [r7, #23]
      break;
 8009a96:	e004      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e002      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e000      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d109      	bne.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009aa8:	4b32      	ldr	r3, [pc, #200]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab4:	492f      	ldr	r1, [pc, #188]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	654b      	str	r3, [r1, #84]	; 0x54
 8009aba:	e001      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d008      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009acc:	4b29      	ldr	r3, [pc, #164]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad8:	4926      	ldr	r1, [pc, #152]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009aea:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009af6:	491f      	ldr	r1, [pc, #124]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b08:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	4a19      	ldr	r2, [pc, #100]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b12:	6113      	str	r3, [r2, #16]
 8009b14:	4b17      	ldr	r3, [pc, #92]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b1e:	4915      	ldr	r1, [pc, #84]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da08      	bge.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b2c:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b38:	490e      	ldr	r1, [pc, #56]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b58:	4906      	ldr	r1, [pc, #24]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009b5e:	7dbb      	ldrb	r3, [r7, #22]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	58024400 	.word	0x58024400

08009b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b86:	4b53      	ldr	r3, [pc, #332]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d101      	bne.n	8009b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e099      	b.n	8009cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b96:	4b4f      	ldr	r3, [pc, #316]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a4e      	ldr	r2, [pc, #312]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba2:	f7fa f9f3 	bl	8003f8c <HAL_GetTick>
 8009ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ba8:	e008      	b.n	8009bbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009baa:	f7fa f9ef 	bl	8003f8c <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d901      	bls.n	8009bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e086      	b.n	8009cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bbc:	4b45      	ldr	r3, [pc, #276]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1f0      	bne.n	8009baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bc8:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	031b      	lsls	r3, r3, #12
 8009bd6:	493f      	ldr	r1, [pc, #252]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	628b      	str	r3, [r1, #40]	; 0x28
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	025b      	lsls	r3, r3, #9
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	041b      	lsls	r3, r3, #16
 8009bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c0c:	4931      	ldr	r1, [pc, #196]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c12:	4b30      	ldr	r3, [pc, #192]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	492d      	ldr	r1, [pc, #180]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c24:	4b2b      	ldr	r3, [pc, #172]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	f023 0220 	bic.w	r2, r3, #32
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	4928      	ldr	r1, [pc, #160]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c36:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	4a26      	ldr	r2, [pc, #152]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	f023 0310 	bic.w	r3, r3, #16
 8009c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c42:	4b24      	ldr	r3, [pc, #144]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c46:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <RCCEx_PLL2_Config+0x160>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	69d2      	ldr	r2, [r2, #28]
 8009c4e:	00d2      	lsls	r2, r2, #3
 8009c50:	4920      	ldr	r1, [pc, #128]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c56:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	f043 0310 	orr.w	r3, r3, #16
 8009c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c68:	4b1a      	ldr	r3, [pc, #104]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a19      	ldr	r2, [pc, #100]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c74:	e00f      	b.n	8009c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d106      	bne.n	8009c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c7c:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a14      	ldr	r2, [pc, #80]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c88:	e005      	b.n	8009c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c8a:	4b12      	ldr	r3, [pc, #72]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	4a11      	ldr	r2, [pc, #68]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a0e      	ldr	r2, [pc, #56]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca2:	f7fa f973 	bl	8003f8c <HAL_GetTick>
 8009ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ca8:	e008      	b.n	8009cbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009caa:	f7fa f96f 	bl	8003f8c <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e006      	b.n	8009cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <RCCEx_PLL2_Config+0x15c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0f0      	beq.n	8009caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	ffff0007 	.word	0xffff0007

08009cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cea:	4b53      	ldr	r3, [pc, #332]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d101      	bne.n	8009cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e099      	b.n	8009e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009cfa:	4b4f      	ldr	r3, [pc, #316]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a4e      	ldr	r2, [pc, #312]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d06:	f7fa f941 	bl	8003f8c <HAL_GetTick>
 8009d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d0c:	e008      	b.n	8009d20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d0e:	f7fa f93d 	bl	8003f8c <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d901      	bls.n	8009d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e086      	b.n	8009e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d20:	4b45      	ldr	r3, [pc, #276]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f0      	bne.n	8009d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d2c:	4b42      	ldr	r3, [pc, #264]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	051b      	lsls	r3, r3, #20
 8009d3a:	493f      	ldr	r1, [pc, #252]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	025b      	lsls	r3, r3, #9
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	061b      	lsls	r3, r3, #24
 8009d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d70:	4931      	ldr	r1, [pc, #196]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d76:	4b30      	ldr	r3, [pc, #192]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	492d      	ldr	r1, [pc, #180]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d88:	4b2b      	ldr	r3, [pc, #172]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	4928      	ldr	r1, [pc, #160]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d9a:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	4a26      	ldr	r2, [pc, #152]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009daa:	4b24      	ldr	r3, [pc, #144]	; (8009e3c <RCCEx_PLL3_Config+0x160>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	69d2      	ldr	r2, [r2, #28]
 8009db2:	00d2      	lsls	r2, r2, #3
 8009db4:	4920      	ldr	r1, [pc, #128]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dba:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	4a1e      	ldr	r2, [pc, #120]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dd8:	e00f      	b.n	8009dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d106      	bne.n	8009dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009de0:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dec:	e005      	b.n	8009dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dee:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	4a11      	ldr	r2, [pc, #68]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a0e      	ldr	r2, [pc, #56]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e06:	f7fa f8c1 	bl	8003f8c <HAL_GetTick>
 8009e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e0c:	e008      	b.n	8009e20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e0e:	f7fa f8bd 	bl	8003f8c <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d901      	bls.n	8009e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e006      	b.n	8009e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <RCCEx_PLL3_Config+0x15c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0f0      	beq.n	8009e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400
 8009e3c:	ffff0007 	.word	0xffff0007

08009e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e049      	b.n	8009ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f841 	bl	8009eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f000 fa0e 	bl	800a2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
	...

08009f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d001      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e05e      	b.n	8009fda <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68da      	ldr	r2, [r3, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a2b      	ldr	r2, [pc, #172]	; (8009fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d02c      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f46:	d027      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a27      	ldr	r2, [pc, #156]	; (8009fec <HAL_TIM_Base_Start_IT+0xe8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d022      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a26      	ldr	r2, [pc, #152]	; (8009ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d01d      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a24      	ldr	r2, [pc, #144]	; (8009ff4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d018      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a23      	ldr	r2, [pc, #140]	; (8009ff8 <HAL_TIM_Base_Start_IT+0xf4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a21      	ldr	r2, [pc, #132]	; (8009ffc <HAL_TIM_Base_Start_IT+0xf8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00e      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a20      	ldr	r2, [pc, #128]	; (800a000 <HAL_TIM_Base_Start_IT+0xfc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d009      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <HAL_TIM_Base_Start_IT+0x100>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d004      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0x94>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1d      	ldr	r2, [pc, #116]	; (800a008 <HAL_TIM_Base_Start_IT+0x104>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d115      	bne.n	8009fc4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <HAL_TIM_Base_Start_IT+0x108>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	d015      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0xd2>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb0:	d011      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0201 	orr.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc2:	e008      	b.n	8009fd6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e000      	b.n	8009fd8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40001800 	.word	0x40001800
 800a000:	40014000 	.word	0x40014000
 800a004:	4000e000 	.word	0x4000e000
 800a008:	4000e400 	.word	0x4000e400
 800a00c:	00010007 	.word	0x00010007

0800a010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b02      	cmp	r3, #2
 800a024:	d122      	bne.n	800a06c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b02      	cmp	r3, #2
 800a032:	d11b      	bne.n	800a06c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f06f 0202 	mvn.w	r2, #2
 800a03c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f905 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 800a058:	e005      	b.n	800a066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f8f7 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f908 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	2b04      	cmp	r3, #4
 800a078:	d122      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b04      	cmp	r3, #4
 800a086:	d11b      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f06f 0204 	mvn.w	r2, #4
 800a090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f8db 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 800a0ac:	e005      	b.n	800a0ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f8cd 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f8de 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d122      	bne.n	800a114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d11b      	bne.n	800a114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0208 	mvn.w	r2, #8
 800a0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f8b1 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 800a100:	e005      	b.n	800a10e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8a3 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f8b4 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f003 0310 	and.w	r3, r3, #16
 800a11e:	2b10      	cmp	r3, #16
 800a120:	d122      	bne.n	800a168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	2b10      	cmp	r3, #16
 800a12e:	d11b      	bne.n	800a168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0210 	mvn.w	r2, #16
 800a138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2208      	movs	r2, #8
 800a13e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f887 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 800a154:	e005      	b.n	800a162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f879 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f88a 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10e      	bne.n	800a194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b01      	cmp	r3, #1
 800a182:	d107      	bne.n	800a194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f06f 0201 	mvn.w	r2, #1
 800a18c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7f7 fb78 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19e:	2b80      	cmp	r3, #128	; 0x80
 800a1a0:	d10e      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ac:	2b80      	cmp	r3, #128	; 0x80
 800a1ae:	d107      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f920 	bl	800a400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ce:	d10e      	bne.n	800a1ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1da:	2b80      	cmp	r3, #128	; 0x80
 800a1dc:	d107      	bne.n	800a1ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f913 	bl	800a414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d10e      	bne.n	800a21a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a206:	2b40      	cmp	r3, #64	; 0x40
 800a208:	d107      	bne.n	800a21a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f838 	bl	800a28a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b20      	cmp	r3, #32
 800a226:	d10e      	bne.n	800a246 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b20      	cmp	r3, #32
 800a234:	d107      	bne.n	800a246 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f06f 0220 	mvn.w	r2, #32
 800a23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8d3 	bl	800a3ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a246:	bf00      	nop
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a292:	bf00      	nop
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
	...

0800a2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a44      	ldr	r2, [pc, #272]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d00f      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a41      	ldr	r2, [pc, #260]	; (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a40      	ldr	r2, [pc, #256]	; (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3f      	ldr	r2, [pc, #252]	; (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3e      	ldr	r2, [pc, #248]	; (800a3d4 <TIM_Base_SetConfig+0x134>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d108      	bne.n	800a2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a33      	ldr	r2, [pc, #204]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d027      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a300:	d023      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a30      	ldr	r2, [pc, #192]	; (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01f      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2f      	ldr	r2, [pc, #188]	; (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01b      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2e      	ldr	r2, [pc, #184]	; (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d017      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2d      	ldr	r2, [pc, #180]	; (800a3d4 <TIM_Base_SetConfig+0x134>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d013      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a2c      	ldr	r2, [pc, #176]	; (800a3d8 <TIM_Base_SetConfig+0x138>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00f      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2b      	ldr	r2, [pc, #172]	; (800a3dc <TIM_Base_SetConfig+0x13c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00b      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a2a      	ldr	r2, [pc, #168]	; (800a3e0 <TIM_Base_SetConfig+0x140>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d007      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a29      	ldr	r2, [pc, #164]	; (800a3e4 <TIM_Base_SetConfig+0x144>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <TIM_Base_SetConfig+0xaa>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a28      	ldr	r2, [pc, #160]	; (800a3e8 <TIM_Base_SetConfig+0x148>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d108      	bne.n	800a35c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a10      	ldr	r2, [pc, #64]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00f      	beq.n	800a3a8 <TIM_Base_SetConfig+0x108>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a12      	ldr	r2, [pc, #72]	; (800a3d4 <TIM_Base_SetConfig+0x134>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d00b      	beq.n	800a3a8 <TIM_Base_SetConfig+0x108>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a11      	ldr	r2, [pc, #68]	; (800a3d8 <TIM_Base_SetConfig+0x138>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d007      	beq.n	800a3a8 <TIM_Base_SetConfig+0x108>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <TIM_Base_SetConfig+0x13c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_Base_SetConfig+0x108>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a0f      	ldr	r2, [pc, #60]	; (800a3e0 <TIM_Base_SetConfig+0x140>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d103      	bne.n	800a3b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	615a      	str	r2, [r3, #20]
}
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	40010000 	.word	0x40010000
 800a3c8:	40000400 	.word	0x40000400
 800a3cc:	40000800 	.word	0x40000800
 800a3d0:	40000c00 	.word	0x40000c00
 800a3d4:	40010400 	.word	0x40010400
 800a3d8:	40014000 	.word	0x40014000
 800a3dc:	40014400 	.word	0x40014400
 800a3e0:	40014800 	.word	0x40014800
 800a3e4:	4000e000 	.word	0x4000e000
 800a3e8:	4000e400 	.word	0x4000e400

0800a3ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f103 0208 	add.w	r2, r3, #8
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f103 0208 	add.w	r2, r3, #8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f103 0208 	add.w	r2, r3, #8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4e0:	d103      	bne.n	800a4ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	e00c      	b.n	800a504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	e002      	b.n	800a4f8 <vListInsert+0x2e>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	429a      	cmp	r2, r3
 800a502:	d2f6      	bcs.n	800a4f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6892      	ldr	r2, [r2, #8]
 800a552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6852      	ldr	r2, [r2, #4]
 800a55c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	429a      	cmp	r2, r3
 800a566:	d103      	bne.n	800a570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	1e5a      	subs	r2, r3, #1
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5ba:	f003 ffdb 	bl	800e574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c6:	68f9      	ldr	r1, [r7, #12]
 800a5c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	441a      	add	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	68f9      	ldr	r1, [r7, #12]
 800a5ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	22ff      	movs	r2, #255	; 0xff
 800a5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	22ff      	movs	r2, #255	; 0xff
 800a606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d114      	bne.n	800a63a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d01a      	beq.n	800a64e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3310      	adds	r3, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	f001 fe8f 	bl	800c340 <xTaskRemoveFromEventList>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d012      	beq.n	800a64e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a628:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <xQueueGenericReset+0xcc>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	e009      	b.n	800a64e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3310      	adds	r3, #16
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fef2 	bl	800a428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3324      	adds	r3, #36	; 0x24
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff feed 	bl	800a428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a64e:	f003 ffc1 	bl	800e5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a652:	2301      	movs	r3, #1
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af02      	add	r7, sp, #8
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <xQueueGenericCreateStatic+0x52>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <xQueueGenericCreateStatic+0x56>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e000      	b.n	800a6b8 <xQueueGenericCreateStatic+0x58>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	623b      	str	r3, [r7, #32]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <xQueueGenericCreateStatic+0x7e>
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <xQueueGenericCreateStatic+0x82>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <xQueueGenericCreateStatic+0x84>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	61fb      	str	r3, [r7, #28]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6fe:	2350      	movs	r3, #80	; 0x50
 800a700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b50      	cmp	r3, #80	; 0x50
 800a706:	d00a      	beq.n	800a71e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	61bb      	str	r3, [r7, #24]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a71e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00d      	beq.n	800a746 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	4613      	mov	r3, r2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f83f 	bl	800a7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a748:	4618      	mov	r0, r3
 800a74a:	3730      	adds	r7, #48	; 0x30
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08a      	sub	sp, #40	; 0x28
 800a754:	af02      	add	r7, sp, #8
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	613b      	str	r3, [r7, #16]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
 800a782:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	3350      	adds	r3, #80	; 0x50
 800a788:	4618      	mov	r0, r3
 800a78a:	f003 fbdd 	bl	800df48 <pvPortMalloc>
 800a78e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d011      	beq.n	800a7ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	3350      	adds	r3, #80	; 0x50
 800a79e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7a8:	79fa      	ldrb	r2, [r7, #7]
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	68b9      	ldr	r1, [r7, #8]
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f805 	bl	800a7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3720      	adds	r7, #32
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	69b8      	ldr	r0, [r7, #24]
 800a7f6:	f7ff fecb 	bl	800a590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a802:	bf00      	nop
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00e      	beq.n	800a836 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f90b 	bl	800aa4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	4603      	mov	r3, r0
 800a846:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	2300      	movs	r3, #0
 800a84e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	461a      	mov	r2, r3
 800a854:	6939      	ldr	r1, [r7, #16]
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff ff7a 	bl	800a750 <xQueueGenericCreate>
 800a85c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff ffd3 	bl	800a80a <prvInitialiseMutex>

		return xNewQueue;
 800a864:	68fb      	ldr	r3, [r7, #12]
	}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b088      	sub	sp, #32
 800a872:	af02      	add	r7, sp, #8
 800a874:	4603      	mov	r3, r0
 800a876:	6039      	str	r1, [r7, #0]
 800a878:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a87a:	2301      	movs	r3, #1
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	2300      	movs	r3, #0
 800a880:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2200      	movs	r2, #0
 800a88a:	6939      	ldr	r1, [r7, #16]
 800a88c:	6978      	ldr	r0, [r7, #20]
 800a88e:	f7ff fee7 	bl	800a660 <xQueueGenericCreateStatic>
 800a892:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff ffb8 	bl	800a80a <prvInitialiseMutex>

		return xNewQueue;
 800a89a:	68fb      	ldr	r3, [r7, #12]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60fb      	str	r3, [r7, #12]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	689c      	ldr	r4, [r3, #8]
 800a8d0:	f001 ffc8 	bl	800c864 <xTaskGetCurrentTaskHandle>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	429c      	cmp	r4, r3
 800a8d8:	d111      	bne.n	800a8fe <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	1e5a      	subs	r2, r3, #1
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d105      	bne.n	800a8f8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	6938      	ldr	r0, [r7, #16]
 800a8f4:	f000 f8aa 	bl	800aa4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e001      	b.n	800a902 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a902:	697b      	ldr	r3, [r7, #20]
	}
 800a904:	4618      	mov	r0, r3
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd90      	pop	{r4, r7, pc}

0800a90c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a90c:	b590      	push	{r4, r7, lr}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	60fb      	str	r3, [r7, #12]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	689c      	ldr	r4, [r3, #8]
 800a93a:	f001 ff93 	bl	800c864 <xTaskGetCurrentTaskHandle>
 800a93e:	4603      	mov	r3, r0
 800a940:	429c      	cmp	r4, r3
 800a942:	d107      	bne.n	800a954 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	e00c      	b.n	800a96e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6938      	ldr	r0, [r7, #16]
 800a958:	f000 fb7e 	bl	800b058 <xQueueSemaphoreTake>
 800a95c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a96e:	697b      	ldr	r3, [r7, #20]
	}
 800a970:	4618      	mov	r0, r3
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd90      	pop	{r4, r7, pc}

0800a978 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af02      	add	r7, sp, #8
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10a      	bne.n	800a9a0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	61bb      	str	r3, [r7, #24]
}
 800a99c:	bf00      	nop
 800a99e:	e7fe      	b.n	800a99e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d90a      	bls.n	800a9be <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	617b      	str	r3, [r7, #20]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a9be:	2302      	movs	r3, #2
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7ff fe49 	bl	800a660 <xQueueGenericCreateStatic>
 800a9ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
	}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3720      	adds	r7, #32
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	613b      	str	r3, [r7, #16]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d90a      	bls.n	800aa2a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	60fb      	str	r3, [r7, #12]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff fe8e 	bl	800a750 <xQueueGenericCreate>
 800aa34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa42:	697b      	ldr	r3, [r7, #20]
	}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08e      	sub	sp, #56	; 0x38
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
 800aa58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <xQueueGenericSend+0x32>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <xQueueGenericSend+0x40>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <xQueueGenericSend+0x44>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <xQueueGenericSend+0x46>
 800aa90:	2300      	movs	r3, #0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10a      	bne.n	800aaac <xQueueGenericSend+0x60>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d103      	bne.n	800aaba <xQueueGenericSend+0x6e>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <xQueueGenericSend+0x72>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <xQueueGenericSend+0x74>
 800aabe:	2300      	movs	r3, #0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueGenericSend+0x8e>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	623b      	str	r3, [r7, #32]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aada:	f001 fed3 	bl	800c884 <xTaskGetSchedulerState>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <xQueueGenericSend+0x9e>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xQueueGenericSend+0xa2>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xQueueGenericSend+0xa4>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueGenericSend+0xbe>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	61fb      	str	r3, [r7, #28]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab0a:	f003 fd33 	bl	800e574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d302      	bcc.n	800ab20 <xQueueGenericSend+0xd4>
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d129      	bne.n	800ab74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab26:	f000 fc9a 	bl	800b45e <prvCopyDataToQueue>
 800ab2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d010      	beq.n	800ab56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	3324      	adds	r3, #36	; 0x24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 fc01 	bl	800c340 <xTaskRemoveFromEventList>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d013      	beq.n	800ab6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab44:	4b3f      	ldr	r3, [pc, #252]	; (800ac44 <xQueueGenericSend+0x1f8>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	e00a      	b.n	800ab6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d007      	beq.n	800ab6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab5c:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <xQueueGenericSend+0x1f8>)
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab6c:	f003 fd32 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e063      	b.n	800ac3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d103      	bne.n	800ab82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab7a:	f003 fd2b 	bl	800e5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e05c      	b.n	800ac3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab88:	f107 0314 	add.w	r3, r7, #20
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fc3b 	bl	800c408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab92:	2301      	movs	r3, #1
 800ab94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab96:	f003 fd1d 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab9a:	f001 f90d 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab9e:	f003 fce9 	bl	800e574 <vPortEnterCritical>
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abae:	d103      	bne.n	800abb8 <xQueueGenericSend+0x16c>
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc4:	d103      	bne.n	800abce <xQueueGenericSend+0x182>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abce:	f003 fd01 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abd2:	1d3a      	adds	r2, r7, #4
 800abd4:	f107 0314 	add.w	r3, r7, #20
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 fc2a 	bl	800c434 <xTaskCheckForTimeOut>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d124      	bne.n	800ac30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe8:	f000 fd31 	bl	800b64e <prvIsQueueFull>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d018      	beq.n	800ac24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	3310      	adds	r3, #16
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	4611      	mov	r1, r2
 800abfa:	4618      	mov	r0, r3
 800abfc:	f001 fb50 	bl	800c2a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac02:	f000 fcbc 	bl	800b57e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac06:	f001 f8e5 	bl	800bdd4 <xTaskResumeAll>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f47f af7c 	bne.w	800ab0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <xQueueGenericSend+0x1f8>)
 800ac14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	e772      	b.n	800ab0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac26:	f000 fcaa 	bl	800b57e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2a:	f001 f8d3 	bl	800bdd4 <xTaskResumeAll>
 800ac2e:	e76c      	b.n	800ab0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac32:	f000 fca4 	bl	800b57e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac36:	f001 f8cd 	bl	800bdd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3738      	adds	r7, #56	; 0x38
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	e000ed04 	.word	0xe000ed04

0800ac48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b090      	sub	sp, #64	; 0x40
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d103      	bne.n	800ac84 <xQueueGenericSendFromISR+0x3c>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <xQueueGenericSendFromISR+0x40>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e000      	b.n	800ac8a <xQueueGenericSendFromISR+0x42>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d103      	bne.n	800acb2 <xQueueGenericSendFromISR+0x6a>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <xQueueGenericSendFromISR+0x6e>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <xQueueGenericSendFromISR+0x70>
 800acb6:	2300      	movs	r3, #0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	623b      	str	r3, [r7, #32]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acd2:	f003 fd31 	bl	800e738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acd6:	f3ef 8211 	mrs	r2, BASEPRI
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61fa      	str	r2, [r7, #28]
 800acec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d302      	bcc.n	800ad04 <xQueueGenericSendFromISR+0xbc>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d12f      	bne.n	800ad64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad1a:	f000 fba0 	bl	800b45e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad26:	d112      	bne.n	800ad4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d016      	beq.n	800ad5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	3324      	adds	r3, #36	; 0x24
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 fb03 	bl	800c340 <xTaskRemoveFromEventList>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00b      	beq.n	800ad5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e007      	b.n	800ad5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad52:	3301      	adds	r3, #1
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	b25a      	sxtb	r2, r3
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad62:	e001      	b.n	800ad68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3740      	adds	r7, #64	; 0x40
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b08e      	sub	sp, #56	; 0x38
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	623b      	str	r3, [r7, #32]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	61fb      	str	r3, [r7, #28]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <xQueueGiveFromISR+0x58>
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <xQueueGiveFromISR+0x5c>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <xQueueGiveFromISR+0x5e>
 800adda:	2300      	movs	r3, #0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	61bb      	str	r3, [r7, #24]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adf6:	f003 fc9f 	bl	800e738 <vPortValidateInterruptPriority>
	__asm volatile
 800adfa:	f3ef 8211 	mrs	r2, BASEPRI
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	617a      	str	r2, [r7, #20]
 800ae10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d22b      	bcs.n	800ae7e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae40:	d112      	bne.n	800ae68 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d016      	beq.n	800ae78 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	3324      	adds	r3, #36	; 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 fa76 	bl	800c340 <xTaskRemoveFromEventList>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00e      	beq.n	800ae78 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00b      	beq.n	800ae78 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2201      	movs	r2, #1
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	e007      	b.n	800ae78 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	b25a      	sxtb	r2, r3
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae7c:	e001      	b.n	800ae82 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f383 8811 	msr	BASEPRI, r3
}
 800ae8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3738      	adds	r7, #56	; 0x38
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08c      	sub	sp, #48	; 0x30
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aea4:	2300      	movs	r3, #0
 800aea6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <xQueueReceive+0x30>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	623b      	str	r3, [r7, #32]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d103      	bne.n	800aed6 <xQueueReceive+0x3e>
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <xQueueReceive+0x42>
 800aed6:	2301      	movs	r3, #1
 800aed8:	e000      	b.n	800aedc <xQueueReceive+0x44>
 800aeda:	2300      	movs	r3, #0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <xQueueReceive+0x5e>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	61fb      	str	r3, [r7, #28]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aef6:	f001 fcc5 	bl	800c884 <xTaskGetSchedulerState>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <xQueueReceive+0x6e>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <xQueueReceive+0x72>
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <xQueueReceive+0x74>
 800af0a:	2300      	movs	r3, #0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <xQueueReceive+0x8e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	61bb      	str	r3, [r7, #24]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af26:	f003 fb25 	bl	800e574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	d01f      	beq.n	800af76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3a:	f000 fafa 	bl	800b532 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	1e5a      	subs	r2, r3, #1
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00f      	beq.n	800af6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	3310      	adds	r3, #16
 800af52:	4618      	mov	r0, r3
 800af54:	f001 f9f4 	bl	800c340 <xTaskRemoveFromEventList>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af5e:	4b3d      	ldr	r3, [pc, #244]	; (800b054 <xQueueReceive+0x1bc>)
 800af60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af6e:	f003 fb31 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800af72:	2301      	movs	r3, #1
 800af74:	e069      	b.n	800b04a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d103      	bne.n	800af84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af7c:	f003 fb2a 	bl	800e5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af80:	2300      	movs	r3, #0
 800af82:	e062      	b.n	800b04a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af8a:	f107 0310 	add.w	r3, r7, #16
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 fa3a 	bl	800c408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af94:	2301      	movs	r3, #1
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af98:	f003 fb1c 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af9c:	f000 ff0c 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afa0:	f003 fae8 	bl	800e574 <vPortEnterCritical>
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afaa:	b25b      	sxtb	r3, r3
 800afac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afb0:	d103      	bne.n	800afba <xQueueReceive+0x122>
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afc0:	b25b      	sxtb	r3, r3
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afc6:	d103      	bne.n	800afd0 <xQueueReceive+0x138>
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afd0:	f003 fb00 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afd4:	1d3a      	adds	r2, r7, #4
 800afd6:	f107 0310 	add.w	r3, r7, #16
 800afda:	4611      	mov	r1, r2
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 fa29 	bl	800c434 <xTaskCheckForTimeOut>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d123      	bne.n	800b030 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afea:	f000 fb1a 	bl	800b622 <prvIsQueueEmpty>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d017      	beq.n	800b024 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	3324      	adds	r3, #36	; 0x24
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	4611      	mov	r1, r2
 800affc:	4618      	mov	r0, r3
 800affe:	f001 f94f 	bl	800c2a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b004:	f000 fabb 	bl	800b57e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b008:	f000 fee4 	bl	800bdd4 <xTaskResumeAll>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d189      	bne.n	800af26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <xQueueReceive+0x1bc>)
 800b014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	e780      	b.n	800af26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b026:	f000 faaa 	bl	800b57e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b02a:	f000 fed3 	bl	800bdd4 <xTaskResumeAll>
 800b02e:	e77a      	b.n	800af26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b032:	f000 faa4 	bl	800b57e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b036:	f000 fecd 	bl	800bdd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b03c:	f000 faf1 	bl	800b622 <prvIsQueueEmpty>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	f43f af6f 	beq.w	800af26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3730      	adds	r7, #48	; 0x30
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	e000ed04 	.word	0xe000ed04

0800b058 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08e      	sub	sp, #56	; 0x38
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b06a:	2300      	movs	r3, #0
 800b06c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	623b      	str	r3, [r7, #32]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	61fb      	str	r3, [r7, #28]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0a8:	f001 fbec 	bl	800c884 <xTaskGetSchedulerState>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <xQueueSemaphoreTake+0x60>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <xQueueSemaphoreTake+0x64>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <xQueueSemaphoreTake+0x66>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	61bb      	str	r3, [r7, #24]
}
 800b0d4:	bf00      	nop
 800b0d6:	e7fe      	b.n	800b0d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0d8:	f003 fa4c 	bl	800e574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d024      	beq.n	800b132 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	1e5a      	subs	r2, r3, #1
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b0f8:	f001 fdf6 	bl	800cce8 <pvTaskIncrementMutexHeldCount>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	3310      	adds	r3, #16
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 f916 	bl	800c340 <xTaskRemoveFromEventList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b11a:	4b54      	ldr	r3, [pc, #336]	; (800b26c <xQueueSemaphoreTake+0x214>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b12a:	f003 fa53 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800b12e:	2301      	movs	r3, #1
 800b130:	e097      	b.n	800b262 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d111      	bne.n	800b15c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	617b      	str	r3, [r7, #20]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b154:	f003 fa3e 	bl	800e5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b158:	2300      	movs	r3, #0
 800b15a:	e082      	b.n	800b262 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b162:	f107 030c 	add.w	r3, r7, #12
 800b166:	4618      	mov	r0, r3
 800b168:	f001 f94e 	bl	800c408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b16c:	2301      	movs	r3, #1
 800b16e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b170:	f003 fa30 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b174:	f000 fe20 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b178:	f003 f9fc 	bl	800e574 <vPortEnterCritical>
 800b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b182:	b25b      	sxtb	r3, r3
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b188:	d103      	bne.n	800b192 <xQueueSemaphoreTake+0x13a>
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b198:	b25b      	sxtb	r3, r3
 800b19a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b19e:	d103      	bne.n	800b1a8 <xQueueSemaphoreTake+0x150>
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1a8:	f003 fa14 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1ac:	463a      	mov	r2, r7
 800b1ae:	f107 030c 	add.w	r3, r7, #12
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f001 f93d 	bl	800c434 <xTaskCheckForTimeOut>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d132      	bne.n	800b226 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1c2:	f000 fa2e 	bl	800b622 <prvIsQueueEmpty>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d026      	beq.n	800b21a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d109      	bne.n	800b1e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b1d4:	f003 f9ce 	bl	800e574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fb6f 	bl	800c8c0 <xTaskPriorityInherit>
 800b1e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b1e4:	f003 f9f6 	bl	800e5d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	3324      	adds	r3, #36	; 0x24
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f001 f855 	bl	800c2a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1f8:	f000 f9c1 	bl	800b57e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1fc:	f000 fdea 	bl	800bdd4 <xTaskResumeAll>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f47f af68 	bne.w	800b0d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b208:	4b18      	ldr	r3, [pc, #96]	; (800b26c <xQueueSemaphoreTake+0x214>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	e75e      	b.n	800b0d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b21c:	f000 f9af 	bl	800b57e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b220:	f000 fdd8 	bl	800bdd4 <xTaskResumeAll>
 800b224:	e758      	b.n	800b0d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b228:	f000 f9a9 	bl	800b57e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b22c:	f000 fdd2 	bl	800bdd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b232:	f000 f9f6 	bl	800b622 <prvIsQueueEmpty>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f43f af4d 	beq.w	800b0d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00d      	beq.n	800b260 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b244:	f003 f996 	bl	800e574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b24a:	f000 f8f0 	bl	800b42e <prvGetDisinheritPriorityAfterTimeout>
 800b24e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b256:	4618      	mov	r0, r3
 800b258:	f001 fc08 	bl	800ca6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b25c:	f003 f9ba 	bl	800e5d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b260:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b262:	4618      	mov	r0, r3
 800b264:	3738      	adds	r7, #56	; 0x38
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	e000ed04 	.word	0xe000ed04

0800b270 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08e      	sub	sp, #56	; 0x38
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10a      	bne.n	800b29c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	623b      	str	r3, [r7, #32]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d103      	bne.n	800b2aa <xQueueReceiveFromISR+0x3a>
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <xQueueReceiveFromISR+0x3e>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <xQueueReceiveFromISR+0x40>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	61fb      	str	r3, [r7, #28]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2ca:	f003 fa35 	bl	800e738 <vPortValidateInterruptPriority>
	__asm volatile
 800b2ce:	f3ef 8211 	mrs	r2, BASEPRI
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	61ba      	str	r2, [r7, #24]
 800b2e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b2e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d02f      	beq.n	800b356 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b304:	f000 f915 	bl	800b532 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	1e5a      	subs	r2, r3, #1
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b318:	d112      	bne.n	800b340 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d016      	beq.n	800b350 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	3310      	adds	r3, #16
 800b326:	4618      	mov	r0, r3
 800b328:	f001 f80a 	bl	800c340 <xTaskRemoveFromEventList>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00e      	beq.n	800b350 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	e007      	b.n	800b350 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b344:	3301      	adds	r3, #1
 800b346:	b2db      	uxtb	r3, r3
 800b348:	b25a      	sxtb	r2, r3
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b350:	2301      	movs	r3, #1
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
 800b354:	e001      	b.n	800b35a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b356:	2300      	movs	r3, #0
 800b358:	637b      	str	r3, [r7, #52]	; 0x34
 800b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f383 8811 	msr	BASEPRI, r3
}
 800b364:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3738      	adds	r7, #56	; 0x38
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10a      	bne.n	800b394 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	60bb      	str	r3, [r7, #8]
}
 800b390:	bf00      	nop
 800b392:	e7fe      	b.n	800b392 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b394:	f003 f8ee 	bl	800e574 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b39e:	f003 f919 	bl	800e5d4 <vPortExitCritical>

	return uxReturn;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	60fb      	str	r3, [r7, #12]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b3da:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b3dc:	4618      	mov	r0, r3
 800b3de:	371c      	adds	r7, #28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <vQueueDelete+0x28>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	60bb      	str	r3, [r7, #8]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f95f 	bl	800b6d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f002 fe5d 	bl	800e0e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d006      	beq.n	800b44c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	e001      	b.n	800b450 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b450:	68fb      	ldr	r3, [r7, #12]
	}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10d      	bne.n	800b498 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d14d      	bne.n	800b520 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fa81 	bl	800c990 <xTaskPriorityDisinherit>
 800b48e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	609a      	str	r2, [r3, #8]
 800b496:	e043      	b.n	800b520 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d119      	bne.n	800b4d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6858      	ldr	r0, [r3, #4]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	68b9      	ldr	r1, [r7, #8]
 800b4aa:	f013 fc3f 	bl	801ed2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b6:	441a      	add	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d32b      	bcc.n	800b520 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]
 800b4d0:	e026      	b.n	800b520 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68d8      	ldr	r0, [r3, #12]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	f013 fc25 	bl	801ed2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ea:	425b      	negs	r3, r3
 800b4ec:	441a      	add	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	68da      	ldr	r2, [r3, #12]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d207      	bcs.n	800b50e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	425b      	negs	r3, r3
 800b508:	441a      	add	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b02      	cmp	r3, #2
 800b512:	d105      	bne.n	800b520 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b528:	697b      	ldr	r3, [r7, #20]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d018      	beq.n	800b576 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	441a      	add	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68da      	ldr	r2, [r3, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d303      	bcc.n	800b566 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68d9      	ldr	r1, [r3, #12]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	461a      	mov	r2, r3
 800b570:	6838      	ldr	r0, [r7, #0]
 800b572:	f013 fbdb 	bl	801ed2c <memcpy>
	}
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b586:	f002 fff5 	bl	800e574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b590:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b592:	e011      	b.n	800b5b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d012      	beq.n	800b5c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 fecd 	bl	800c340 <xTaskRemoveFromEventList>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5ac:	f000 ffa4 	bl	800c4f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dce9      	bgt.n	800b594 <prvUnlockQueue+0x16>
 800b5c0:	e000      	b.n	800b5c4 <prvUnlockQueue+0x46>
					break;
 800b5c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	22ff      	movs	r2, #255	; 0xff
 800b5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5cc:	f003 f802 	bl	800e5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5d0:	f002 ffd0 	bl	800e574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5dc:	e011      	b.n	800b602 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d012      	beq.n	800b60c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3310      	adds	r3, #16
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fea8 	bl	800c340 <xTaskRemoveFromEventList>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5f6:	f000 ff7f 	bl	800c4f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dce9      	bgt.n	800b5de <prvUnlockQueue+0x60>
 800b60a:	e000      	b.n	800b60e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b60c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	22ff      	movs	r2, #255	; 0xff
 800b612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b616:	f002 ffdd 	bl	800e5d4 <vPortExitCritical>
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b62a:	f002 ffa3 	bl	800e574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b636:	2301      	movs	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	e001      	b.n	800b640 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b63c:	2300      	movs	r3, #0
 800b63e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b640:	f002 ffc8 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800b644:	68fb      	ldr	r3, [r7, #12]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b656:	f002 ff8d 	bl	800e574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b662:	429a      	cmp	r2, r3
 800b664:	d102      	bne.n	800b66c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	e001      	b.n	800b670 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b670:	f002 ffb0 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800b674:	68fb      	ldr	r3, [r7, #12]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	e014      	b.n	800b6ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10b      	bne.n	800b6b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b69c:	490c      	ldr	r1, [pc, #48]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6a6:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6b2:	e006      	b.n	800b6c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b07      	cmp	r3, #7
 800b6be:	d9e7      	bls.n	800b690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	2000942c 	.word	0x2000942c

0800b6d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e016      	b.n	800b710 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b6e2:	4a10      	ldr	r2, [pc, #64]	; (800b724 <vQueueUnregisterQueue+0x50>)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	4413      	add	r3, r2
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d10b      	bne.n	800b70a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b6f2:	4a0c      	ldr	r2, [pc, #48]	; (800b724 <vQueueUnregisterQueue+0x50>)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b6fc:	4a09      	ldr	r2, [pc, #36]	; (800b724 <vQueueUnregisterQueue+0x50>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	2200      	movs	r2, #0
 800b706:	605a      	str	r2, [r3, #4]
				break;
 800b708:	e006      	b.n	800b718 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b07      	cmp	r3, #7
 800b714:	d9e5      	bls.n	800b6e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	2000942c 	.word	0x2000942c

0800b728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b738:	f002 ff1c 	bl	800e574 <vPortEnterCritical>
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b742:	b25b      	sxtb	r3, r3
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b748:	d103      	bne.n	800b752 <vQueueWaitForMessageRestricted+0x2a>
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b75e:	d103      	bne.n	800b768 <vQueueWaitForMessageRestricted+0x40>
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b768:	f002 ff34 	bl	800e5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	3324      	adds	r3, #36	; 0x24
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fdb3 	bl	800c2e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f7ff fefb 	bl	800b57e <prvUnlockQueue>
	}
 800b788:	bf00      	nop
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08e      	sub	sp, #56	; 0x38
 800b794:	af04      	add	r7, sp, #16
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10a      	bne.n	800b7ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	623b      	str	r3, [r7, #32]
}
 800b7b6:	bf00      	nop
 800b7b8:	e7fe      	b.n	800b7b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10a      	bne.n	800b7d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	61fb      	str	r3, [r7, #28]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7d6:	235c      	movs	r3, #92	; 0x5c
 800b7d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b7de:	d00a      	beq.n	800b7f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	61bb      	str	r3, [r7, #24]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01e      	beq.n	800b83c <xTaskCreateStatic+0xac>
 800b7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01b      	beq.n	800b83c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b80c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	2202      	movs	r2, #2
 800b812:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b816:	2300      	movs	r3, #0
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 f850 	bl	800b8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b836:	f000 f8dd 	bl	800b9f4 <prvAddNewTaskToReadyList>
 800b83a:	e001      	b.n	800b840 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b840:	697b      	ldr	r3, [r7, #20]
	}
 800b842:	4618      	mov	r0, r3
 800b844:	3728      	adds	r7, #40	; 0x28
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b08c      	sub	sp, #48	; 0x30
 800b84e:	af04      	add	r7, sp, #16
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	603b      	str	r3, [r7, #0]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 fb72 	bl	800df48 <pvPortMalloc>
 800b864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00e      	beq.n	800b88a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b86c:	205c      	movs	r0, #92	; 0x5c
 800b86e:	f002 fb6b 	bl	800df48 <pvPortMalloc>
 800b872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	631a      	str	r2, [r3, #48]	; 0x30
 800b880:	e005      	b.n	800b88e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b882:	6978      	ldr	r0, [r7, #20]
 800b884:	f002 fc2c 	bl	800e0e0 <vPortFree>
 800b888:	e001      	b.n	800b88e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d017      	beq.n	800b8c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b89c:	88fa      	ldrh	r2, [r7, #6]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	9302      	str	r3, [sp, #8]
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 f80e 	bl	800b8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8b8:	69f8      	ldr	r0, [r7, #28]
 800b8ba:	f000 f89b 	bl	800b9f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	61bb      	str	r3, [r7, #24]
 800b8c2:	e002      	b.n	800b8ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
	}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3720      	adds	r7, #32
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	21a5      	movs	r1, #165	; 0xa5
 800b8ee:	f013 fa45 	bl	801ed7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b8fc:	440b      	add	r3, r1
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	f003 0307 	and.w	r3, r3, #7
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00a      	beq.n	800b92c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	617b      	str	r3, [r7, #20]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01f      	beq.n	800b972 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e012      	b.n	800b95e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	4413      	add	r3, r2
 800b93e:	7819      	ldrb	r1, [r3, #0]
 800b940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	3334      	adds	r3, #52	; 0x34
 800b948:	460a      	mov	r2, r1
 800b94a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	3301      	adds	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b0f      	cmp	r3, #15
 800b962:	d9e9      	bls.n	800b938 <prvInitialiseNewTask+0x64>
 800b964:	e000      	b.n	800b968 <prvInitialiseNewTask+0x94>
			{
				break;
 800b966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b970:	e003      	b.n	800b97a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	2b37      	cmp	r3, #55	; 0x37
 800b97e:	d901      	bls.n	800b984 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b980:	2337      	movs	r3, #55	; 0x37
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b98e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	2200      	movs	r2, #0
 800b994:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	3304      	adds	r3, #4
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fd64 	bl	800a468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	3318      	adds	r3, #24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fd5f 	bl	800a468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	68f9      	ldr	r1, [r7, #12]
 800b9d2:	69b8      	ldr	r0, [r7, #24]
 800b9d4:	f002 fca2 	bl	800e31c <pxPortInitialiseStack>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ea:	bf00      	nop
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9fc:	f002 fdba 	bl	800e574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba00:	4b2d      	ldr	r3, [pc, #180]	; (800bab8 <prvAddNewTaskToReadyList+0xc4>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	4a2c      	ldr	r2, [pc, #176]	; (800bab8 <prvAddNewTaskToReadyList+0xc4>)
 800ba08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba0a:	4b2c      	ldr	r3, [pc, #176]	; (800babc <prvAddNewTaskToReadyList+0xc8>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba12:	4a2a      	ldr	r2, [pc, #168]	; (800babc <prvAddNewTaskToReadyList+0xc8>)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba18:	4b27      	ldr	r3, [pc, #156]	; (800bab8 <prvAddNewTaskToReadyList+0xc4>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d110      	bne.n	800ba42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba20:	f000 fd8e 	bl	800c540 <prvInitialiseTaskLists>
 800ba24:	e00d      	b.n	800ba42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba26:	4b26      	ldr	r3, [pc, #152]	; (800bac0 <prvAddNewTaskToReadyList+0xcc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d109      	bne.n	800ba42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba2e:	4b23      	ldr	r3, [pc, #140]	; (800babc <prvAddNewTaskToReadyList+0xc8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d802      	bhi.n	800ba42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba3c:	4a1f      	ldr	r2, [pc, #124]	; (800babc <prvAddNewTaskToReadyList+0xc8>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba42:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <prvAddNewTaskToReadyList+0xd0>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	4a1e      	ldr	r2, [pc, #120]	; (800bac4 <prvAddNewTaskToReadyList+0xd0>)
 800ba4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba4c:	4b1d      	ldr	r3, [pc, #116]	; (800bac4 <prvAddNewTaskToReadyList+0xd0>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	4b1b      	ldr	r3, [pc, #108]	; (800bac8 <prvAddNewTaskToReadyList+0xd4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d903      	bls.n	800ba68 <prvAddNewTaskToReadyList+0x74>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <prvAddNewTaskToReadyList+0xd4>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4a15      	ldr	r2, [pc, #84]	; (800bacc <prvAddNewTaskToReadyList+0xd8>)
 800ba76:	441a      	add	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe fcff 	bl	800a482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba84:	f002 fda6 	bl	800e5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba88:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <prvAddNewTaskToReadyList+0xcc>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <prvAddNewTaskToReadyList+0xc8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d207      	bcs.n	800baae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <prvAddNewTaskToReadyList+0xdc>)
 800baa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	200010e4 	.word	0x200010e4
 800babc:	20000c10 	.word	0x20000c10
 800bac0:	200010f0 	.word	0x200010f0
 800bac4:	20001100 	.word	0x20001100
 800bac8:	200010ec 	.word	0x200010ec
 800bacc:	20000c14 	.word	0x20000c14
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800badc:	f002 fd4a 	bl	800e574 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <vTaskDelete+0x18>
 800bae6:	4b2c      	ldr	r3, [pc, #176]	; (800bb98 <vTaskDelete+0xc4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	e000      	b.n	800baee <vTaskDelete+0x1a>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fd21 	bl	800a53c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3318      	adds	r3, #24
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fe fd18 	bl	800a53c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bb0c:	4b23      	ldr	r3, [pc, #140]	; (800bb9c <vTaskDelete+0xc8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3301      	adds	r3, #1
 800bb12:	4a22      	ldr	r2, [pc, #136]	; (800bb9c <vTaskDelete+0xc8>)
 800bb14:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bb16:	4b20      	ldr	r3, [pc, #128]	; (800bb98 <vTaskDelete+0xc4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d10b      	bne.n	800bb38 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4619      	mov	r1, r3
 800bb26:	481e      	ldr	r0, [pc, #120]	; (800bba0 <vTaskDelete+0xcc>)
 800bb28:	f7fe fcab 	bl	800a482 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bb2c:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <vTaskDelete+0xd0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3301      	adds	r3, #1
 800bb32:	4a1c      	ldr	r2, [pc, #112]	; (800bba4 <vTaskDelete+0xd0>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	e009      	b.n	800bb4c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bb38:	4b1b      	ldr	r3, [pc, #108]	; (800bba8 <vTaskDelete+0xd4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	4a1a      	ldr	r2, [pc, #104]	; (800bba8 <vTaskDelete+0xd4>)
 800bb40:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 fe3e 	bl	800c7c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bb48:	f000 fe6c 	bl	800c824 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800bb4c:	f002 fd42 	bl	800e5d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <vTaskDelete+0xd8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01b      	beq.n	800bb90 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800bb58:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <vTaskDelete+0xc4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d116      	bne.n	800bb90 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bb62:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <vTaskDelete+0xdc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <vTaskDelete+0xac>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60bb      	str	r3, [r7, #8]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800bb80:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <vTaskDelete+0xe0>)
 800bb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20000c10 	.word	0x20000c10
 800bb9c:	20001100 	.word	0x20001100
 800bba0:	200010b8 	.word	0x200010b8
 800bba4:	200010cc 	.word	0x200010cc
 800bba8:	200010e4 	.word	0x200010e4
 800bbac:	200010f0 	.word	0x200010f0
 800bbb0:	2000110c 	.word	0x2000110c
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d017      	beq.n	800bbfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <vTaskDelay+0x60>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <vTaskDelay+0x30>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbe8:	f000 f8e6 	bl	800bdb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 f88e 	bl	800cd10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbf4:	f000 f8ee 	bl	800bdd4 <xTaskResumeAll>
 800bbf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d107      	bne.n	800bc10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bc00:	4b06      	ldr	r3, [pc, #24]	; (800bc1c <vTaskDelay+0x64>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	2000110c 	.word	0x2000110c
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <eTaskGetState+0x28>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	60bb      	str	r3, [r7, #8]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800bc48:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <eTaskGetState+0xb8>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d102      	bne.n	800bc58 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800bc52:	2300      	movs	r3, #0
 800bc54:	77fb      	strb	r3, [r7, #31]
 800bc56:	e03a      	b.n	800bcce <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800bc58:	f002 fc8c 	bl	800e574 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800bc62:	4b1e      	ldr	r3, [pc, #120]	; (800bcdc <eTaskGetState+0xbc>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800bc68:	4b1d      	ldr	r3, [pc, #116]	; (800bce0 <eTaskGetState+0xc0>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800bc6e:	f002 fcb1 	bl	800e5d4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d003      	beq.n	800bc82 <eTaskGetState+0x62>
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d102      	bne.n	800bc88 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800bc82:	2302      	movs	r3, #2
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e022      	b.n	800bcce <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	4a16      	ldr	r2, [pc, #88]	; (800bce4 <eTaskGetState+0xc4>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d112      	bne.n	800bcb6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10b      	bne.n	800bcb0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d102      	bne.n	800bcaa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800bca4:	2302      	movs	r3, #2
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e011      	b.n	800bcce <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e00e      	b.n	800bcce <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	e00b      	b.n	800bcce <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	4a0b      	ldr	r2, [pc, #44]	; (800bce8 <eTaskGetState+0xc8>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d002      	beq.n	800bcc4 <eTaskGetState+0xa4>
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d102      	bne.n	800bcca <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800bcc4:	2304      	movs	r3, #4
 800bcc6:	77fb      	strb	r3, [r7, #31]
 800bcc8:	e001      	b.n	800bcce <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800bcca:	2301      	movs	r3, #1
 800bccc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800bcce:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3720      	adds	r7, #32
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20000c10 	.word	0x20000c10
 800bcdc:	2000109c 	.word	0x2000109c
 800bce0:	200010a0 	.word	0x200010a0
 800bce4:	200010d0 	.word	0x200010d0
 800bce8:	200010b8 	.word	0x200010b8

0800bcec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08a      	sub	sp, #40	; 0x28
 800bcf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcfa:	463a      	mov	r2, r7
 800bcfc:	1d39      	adds	r1, r7, #4
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	4618      	mov	r0, r3
 800bd04:	f002 f8ec 	bl	800dee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	9202      	str	r2, [sp, #8]
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	2300      	movs	r3, #0
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	2300      	movs	r3, #0
 800bd18:	460a      	mov	r2, r1
 800bd1a:	4921      	ldr	r1, [pc, #132]	; (800bda0 <vTaskStartScheduler+0xb4>)
 800bd1c:	4821      	ldr	r0, [pc, #132]	; (800bda4 <vTaskStartScheduler+0xb8>)
 800bd1e:	f7ff fd37 	bl	800b790 <xTaskCreateStatic>
 800bd22:	4603      	mov	r3, r0
 800bd24:	4a20      	ldr	r2, [pc, #128]	; (800bda8 <vTaskStartScheduler+0xbc>)
 800bd26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd28:	4b1f      	ldr	r3, [pc, #124]	; (800bda8 <vTaskStartScheduler+0xbc>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd30:	2301      	movs	r3, #1
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	e001      	b.n	800bd3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d102      	bne.n	800bd46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd40:	f001 f83a 	bl	800cdb8 <xTimerCreateTimerTask>
 800bd44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d116      	bne.n	800bd7a <vTaskStartScheduler+0x8e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd60:	4b12      	ldr	r3, [pc, #72]	; (800bdac <vTaskStartScheduler+0xc0>)
 800bd62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd68:	4b11      	ldr	r3, [pc, #68]	; (800bdb0 <vTaskStartScheduler+0xc4>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd6e:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <vTaskStartScheduler+0xc8>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd74:	f002 fb5c 	bl	800e430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd78:	e00e      	b.n	800bd98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd80:	d10a      	bne.n	800bd98 <vTaskStartScheduler+0xac>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	60fb      	str	r3, [r7, #12]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <vTaskStartScheduler+0xaa>
}
 800bd98:	bf00      	nop
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	08020640 	.word	0x08020640
 800bda4:	0800c511 	.word	0x0800c511
 800bda8:	20001108 	.word	0x20001108
 800bdac:	20001104 	.word	0x20001104
 800bdb0:	200010f0 	.word	0x200010f0
 800bdb4:	200010e8 	.word	0x200010e8

0800bdb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdbc:	4b04      	ldr	r3, [pc, #16]	; (800bdd0 <vTaskSuspendAll+0x18>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	4a03      	ldr	r2, [pc, #12]	; (800bdd0 <vTaskSuspendAll+0x18>)
 800bdc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bdc6:	bf00      	nop
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	2000110c 	.word	0x2000110c

0800bdd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bde2:	4b42      	ldr	r3, [pc, #264]	; (800beec <xTaskResumeAll+0x118>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10a      	bne.n	800be00 <xTaskResumeAll+0x2c>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	603b      	str	r3, [r7, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	e7fe      	b.n	800bdfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be00:	f002 fbb8 	bl	800e574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be04:	4b39      	ldr	r3, [pc, #228]	; (800beec <xTaskResumeAll+0x118>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3b01      	subs	r3, #1
 800be0a:	4a38      	ldr	r2, [pc, #224]	; (800beec <xTaskResumeAll+0x118>)
 800be0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be0e:	4b37      	ldr	r3, [pc, #220]	; (800beec <xTaskResumeAll+0x118>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d162      	bne.n	800bedc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be16:	4b36      	ldr	r3, [pc, #216]	; (800bef0 <xTaskResumeAll+0x11c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d05e      	beq.n	800bedc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be1e:	e02f      	b.n	800be80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be20:	4b34      	ldr	r3, [pc, #208]	; (800bef4 <xTaskResumeAll+0x120>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3318      	adds	r3, #24
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fe fb85 	bl	800a53c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3304      	adds	r3, #4
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fb80 	bl	800a53c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be40:	4b2d      	ldr	r3, [pc, #180]	; (800bef8 <xTaskResumeAll+0x124>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d903      	bls.n	800be50 <xTaskResumeAll+0x7c>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	4a2a      	ldr	r2, [pc, #168]	; (800bef8 <xTaskResumeAll+0x124>)
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4a27      	ldr	r2, [pc, #156]	; (800befc <xTaskResumeAll+0x128>)
 800be5e:	441a      	add	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe fb0b 	bl	800a482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be70:	4b23      	ldr	r3, [pc, #140]	; (800bf00 <xTaskResumeAll+0x12c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	429a      	cmp	r2, r3
 800be78:	d302      	bcc.n	800be80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800be7a:	4b22      	ldr	r3, [pc, #136]	; (800bf04 <xTaskResumeAll+0x130>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be80:	4b1c      	ldr	r3, [pc, #112]	; (800bef4 <xTaskResumeAll+0x120>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1cb      	bne.n	800be20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be8e:	f000 fcc9 	bl	800c824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be92:	4b1d      	ldr	r3, [pc, #116]	; (800bf08 <xTaskResumeAll+0x134>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d010      	beq.n	800bec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be9e:	f000 f8e7 	bl	800c070 <xTaskIncrementTick>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bea8:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <xTaskResumeAll+0x130>)
 800beaa:	2201      	movs	r2, #1
 800beac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3b01      	subs	r3, #1
 800beb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1f1      	bne.n	800be9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800beba:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <xTaskResumeAll+0x134>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bec0:	4b10      	ldr	r3, [pc, #64]	; (800bf04 <xTaskResumeAll+0x130>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d009      	beq.n	800bedc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bec8:	2301      	movs	r3, #1
 800beca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800becc:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <xTaskResumeAll+0x138>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bedc:	f002 fb7a 	bl	800e5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800bee0:	68bb      	ldr	r3, [r7, #8]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	2000110c 	.word	0x2000110c
 800bef0:	200010e4 	.word	0x200010e4
 800bef4:	200010a4 	.word	0x200010a4
 800bef8:	200010ec 	.word	0x200010ec
 800befc:	20000c14 	.word	0x20000c14
 800bf00:	20000c10 	.word	0x20000c10
 800bf04:	200010f8 	.word	0x200010f8
 800bf08:	200010f4 	.word	0x200010f4
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf16:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <xTaskGetTickCount+0x1c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf1c:	687b      	ldr	r3, [r7, #4]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	200010e8 	.word	0x200010e8

0800bf30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf36:	f002 fbff 	bl	800e738 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bf3e:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <xTaskGetTickCountFromISR+0x20>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf44:	683b      	ldr	r3, [r7, #0]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	200010e8 	.word	0x200010e8

0800bf54 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	2338      	movs	r3, #56	; 0x38
 800bf66:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800bf68:	f7ff ff26 	bl	800bdb8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800bf6c:	4b3a      	ldr	r3, [pc, #232]	; (800c058 <uxTaskGetSystemState+0x104>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d368      	bcc.n	800c048 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	4413      	add	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	461a      	mov	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	1898      	adds	r0, r3, r2
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4a31      	ldr	r2, [pc, #196]	; (800c05c <uxTaskGetSystemState+0x108>)
 800bf98:	4413      	add	r3, r2
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f000 fba3 	bl	800c6e8 <prvListTasksWithinSingleList>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e2      	bne.n	800bf76 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	4a27      	ldr	r2, [pc, #156]	; (800c060 <uxTaskGetSystemState+0x10c>)
 800bfc2:	6811      	ldr	r1, [r2, #0]
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fb8e 	bl	800c6e8 <prvListTasksWithinSingleList>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	461a      	mov	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4a1f      	ldr	r2, [pc, #124]	; (800c064 <uxTaskGetSystemState+0x110>)
 800bfe6:	6811      	ldr	r1, [r2, #0]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 fb7c 	bl	800c6e8 <prvListTasksWithinSingleList>
 800bff0:	4602      	mov	r2, r0
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4413      	add	r3, r2
 800bff6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4613      	mov	r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	461a      	mov	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	2204      	movs	r2, #4
 800c00a:	4917      	ldr	r1, [pc, #92]	; (800c068 <uxTaskGetSystemState+0x114>)
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 fb6b 	bl	800c6e8 <prvListTasksWithinSingleList>
 800c012:	4602      	mov	r2, r0
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	4413      	add	r3, r2
 800c018:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	4613      	mov	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	461a      	mov	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	4413      	add	r3, r2
 800c02a:	2203      	movs	r2, #3
 800c02c:	490f      	ldr	r1, [pc, #60]	; (800c06c <uxTaskGetSystemState+0x118>)
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fb5a 	bl	800c6e8 <prvListTasksWithinSingleList>
 800c034:	4602      	mov	r2, r0
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	4413      	add	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800c048:	f7ff fec4 	bl	800bdd4 <xTaskResumeAll>

		return uxTask;
 800c04c:	697b      	ldr	r3, [r7, #20]
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200010e4 	.word	0x200010e4
 800c05c:	20000c14 	.word	0x20000c14
 800c060:	2000109c 	.word	0x2000109c
 800c064:	200010a0 	.word	0x200010a0
 800c068:	200010b8 	.word	0x200010b8
 800c06c:	200010d0 	.word	0x200010d0

0800c070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c07a:	4b4f      	ldr	r3, [pc, #316]	; (800c1b8 <xTaskIncrementTick+0x148>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f040 808f 	bne.w	800c1a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c084:	4b4d      	ldr	r3, [pc, #308]	; (800c1bc <xTaskIncrementTick+0x14c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c08c:	4a4b      	ldr	r2, [pc, #300]	; (800c1bc <xTaskIncrementTick+0x14c>)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d120      	bne.n	800c0da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c098:	4b49      	ldr	r3, [pc, #292]	; (800c1c0 <xTaskIncrementTick+0x150>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00a      	beq.n	800c0b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	603b      	str	r3, [r7, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <xTaskIncrementTick+0x46>
 800c0b8:	4b41      	ldr	r3, [pc, #260]	; (800c1c0 <xTaskIncrementTick+0x150>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60fb      	str	r3, [r7, #12]
 800c0be:	4b41      	ldr	r3, [pc, #260]	; (800c1c4 <xTaskIncrementTick+0x154>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a3f      	ldr	r2, [pc, #252]	; (800c1c0 <xTaskIncrementTick+0x150>)
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	4a3f      	ldr	r2, [pc, #252]	; (800c1c4 <xTaskIncrementTick+0x154>)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	4b3e      	ldr	r3, [pc, #248]	; (800c1c8 <xTaskIncrementTick+0x158>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	4a3d      	ldr	r2, [pc, #244]	; (800c1c8 <xTaskIncrementTick+0x158>)
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	f000 fba5 	bl	800c824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c0da:	4b3c      	ldr	r3, [pc, #240]	; (800c1cc <xTaskIncrementTick+0x15c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d349      	bcc.n	800c178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0e4:	4b36      	ldr	r3, [pc, #216]	; (800c1c0 <xTaskIncrementTick+0x150>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d104      	bne.n	800c0f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ee:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <xTaskIncrementTick+0x15c>)
 800c0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0f4:	601a      	str	r2, [r3, #0]
					break;
 800c0f6:	e03f      	b.n	800c178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f8:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <xTaskIncrementTick+0x150>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d203      	bcs.n	800c118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c110:	4a2e      	ldr	r2, [pc, #184]	; (800c1cc <xTaskIncrementTick+0x15c>)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c116:	e02f      	b.n	800c178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fa0d 	bl	800a53c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	2b00      	cmp	r3, #0
 800c128:	d004      	beq.n	800c134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	3318      	adds	r3, #24
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fa04 	bl	800a53c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c138:	4b25      	ldr	r3, [pc, #148]	; (800c1d0 <xTaskIncrementTick+0x160>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d903      	bls.n	800c148 <xTaskIncrementTick+0xd8>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	4a22      	ldr	r2, [pc, #136]	; (800c1d0 <xTaskIncrementTick+0x160>)
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14c:	4613      	mov	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4413      	add	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <xTaskIncrementTick+0x164>)
 800c156:	441a      	add	r2, r3
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3304      	adds	r3, #4
 800c15c:	4619      	mov	r1, r3
 800c15e:	4610      	mov	r0, r2
 800c160:	f7fe f98f 	bl	800a482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c168:	4b1b      	ldr	r3, [pc, #108]	; (800c1d8 <xTaskIncrementTick+0x168>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	429a      	cmp	r2, r3
 800c170:	d3b8      	bcc.n	800c0e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c176:	e7b5      	b.n	800c0e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c178:	4b17      	ldr	r3, [pc, #92]	; (800c1d8 <xTaskIncrementTick+0x168>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17e:	4915      	ldr	r1, [pc, #84]	; (800c1d4 <xTaskIncrementTick+0x164>)
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d901      	bls.n	800c194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c190:	2301      	movs	r3, #1
 800c192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c194:	4b11      	ldr	r3, [pc, #68]	; (800c1dc <xTaskIncrementTick+0x16c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c19c:	2301      	movs	r3, #1
 800c19e:	617b      	str	r3, [r7, #20]
 800c1a0:	e004      	b.n	800c1ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <xTaskIncrementTick+0x170>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	4a0d      	ldr	r2, [pc, #52]	; (800c1e0 <xTaskIncrementTick+0x170>)
 800c1aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c1ac:	697b      	ldr	r3, [r7, #20]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	2000110c 	.word	0x2000110c
 800c1bc:	200010e8 	.word	0x200010e8
 800c1c0:	2000109c 	.word	0x2000109c
 800c1c4:	200010a0 	.word	0x200010a0
 800c1c8:	200010fc 	.word	0x200010fc
 800c1cc:	20001104 	.word	0x20001104
 800c1d0:	200010ec 	.word	0x200010ec
 800c1d4:	20000c14 	.word	0x20000c14
 800c1d8:	20000c10 	.word	0x20000c10
 800c1dc:	200010f8 	.word	0x200010f8
 800c1e0:	200010f4 	.word	0x200010f4

0800c1e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1ea:	4b28      	ldr	r3, [pc, #160]	; (800c28c <vTaskSwitchContext+0xa8>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1f2:	4b27      	ldr	r3, [pc, #156]	; (800c290 <vTaskSwitchContext+0xac>)
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1f8:	e041      	b.n	800c27e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c1fa:	4b25      	ldr	r3, [pc, #148]	; (800c290 <vTaskSwitchContext+0xac>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c200:	4b24      	ldr	r3, [pc, #144]	; (800c294 <vTaskSwitchContext+0xb0>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	e010      	b.n	800c22a <vTaskSwitchContext+0x46>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <vTaskSwitchContext+0x40>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	607b      	str	r3, [r7, #4]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <vTaskSwitchContext+0x3e>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3b01      	subs	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	491b      	ldr	r1, [pc, #108]	; (800c298 <vTaskSwitchContext+0xb4>)
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	440b      	add	r3, r1
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0e4      	beq.n	800c208 <vTaskSwitchContext+0x24>
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4a13      	ldr	r2, [pc, #76]	; (800c298 <vTaskSwitchContext+0xb4>)
 800c24a:	4413      	add	r3, r2
 800c24c:	60bb      	str	r3, [r7, #8]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	605a      	str	r2, [r3, #4]
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3308      	adds	r3, #8
 800c260:	429a      	cmp	r2, r3
 800c262:	d104      	bne.n	800c26e <vTaskSwitchContext+0x8a>
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	605a      	str	r2, [r3, #4]
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	4a09      	ldr	r2, [pc, #36]	; (800c29c <vTaskSwitchContext+0xb8>)
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	4a06      	ldr	r2, [pc, #24]	; (800c294 <vTaskSwitchContext+0xb0>)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6013      	str	r3, [r2, #0]
}
 800c27e:	bf00      	nop
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	2000110c 	.word	0x2000110c
 800c290:	200010f8 	.word	0x200010f8
 800c294:	200010ec 	.word	0x200010ec
 800c298:	20000c14 	.word	0x20000c14
 800c29c:	20000c10 	.word	0x20000c10

0800c2a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60fb      	str	r3, [r7, #12]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2c6:	4b07      	ldr	r3, [pc, #28]	; (800c2e4 <vTaskPlaceOnEventList+0x44>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3318      	adds	r3, #24
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7fe f8fb 	bl	800a4ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	6838      	ldr	r0, [r7, #0]
 800c2d8:	f000 fd1a 	bl	800cd10 <prvAddCurrentTaskToDelayedList>
}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20000c10 	.word	0x20000c10

0800c2e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10a      	bne.n	800c310 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	617b      	str	r3, [r7, #20]
}
 800c30c:	bf00      	nop
 800c30e:	e7fe      	b.n	800c30e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c310:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <vTaskPlaceOnEventListRestricted+0x54>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3318      	adds	r3, #24
 800c316:	4619      	mov	r1, r3
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7fe f8b2 	bl	800a482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c328:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	68b8      	ldr	r0, [r7, #8]
 800c32e:	f000 fcef 	bl	800cd10 <prvAddCurrentTaskToDelayedList>
	}
 800c332:	bf00      	nop
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000c10 	.word	0x20000c10

0800c340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	60fb      	str	r3, [r7, #12]
}
 800c368:	bf00      	nop
 800c36a:	e7fe      	b.n	800c36a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	3318      	adds	r3, #24
 800c370:	4618      	mov	r0, r3
 800c372:	f7fe f8e3 	bl	800a53c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c376:	4b1e      	ldr	r3, [pc, #120]	; (800c3f0 <xTaskRemoveFromEventList+0xb0>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d11d      	bne.n	800c3ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	3304      	adds	r3, #4
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe f8da 	bl	800a53c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38c:	4b19      	ldr	r3, [pc, #100]	; (800c3f4 <xTaskRemoveFromEventList+0xb4>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d903      	bls.n	800c39c <xTaskRemoveFromEventList+0x5c>
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	4a16      	ldr	r2, [pc, #88]	; (800c3f4 <xTaskRemoveFromEventList+0xb4>)
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4a13      	ldr	r2, [pc, #76]	; (800c3f8 <xTaskRemoveFromEventList+0xb8>)
 800c3aa:	441a      	add	r2, r3
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f7fe f865 	bl	800a482 <vListInsertEnd>
 800c3b8:	e005      	b.n	800c3c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	3318      	adds	r3, #24
 800c3be:	4619      	mov	r1, r3
 800c3c0:	480e      	ldr	r0, [pc, #56]	; (800c3fc <xTaskRemoveFromEventList+0xbc>)
 800c3c2:	f7fe f85e 	bl	800a482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <xTaskRemoveFromEventList+0xc0>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d905      	bls.n	800c3e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	; (800c404 <xTaskRemoveFromEventList+0xc4>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e001      	b.n	800c3e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3e4:	697b      	ldr	r3, [r7, #20]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	2000110c 	.word	0x2000110c
 800c3f4:	200010ec 	.word	0x200010ec
 800c3f8:	20000c14 	.word	0x20000c14
 800c3fc:	200010a4 	.word	0x200010a4
 800c400:	20000c10 	.word	0x20000c10
 800c404:	200010f8 	.word	0x200010f8

0800c408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c410:	4b06      	ldr	r3, [pc, #24]	; (800c42c <vTaskInternalSetTimeOutState+0x24>)
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <vTaskInternalSetTimeOutState+0x28>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	605a      	str	r2, [r3, #4]
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	200010fc 	.word	0x200010fc
 800c430:	200010e8 	.word	0x200010e8

0800c434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	613b      	str	r3, [r7, #16]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10a      	bne.n	800c476 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	60fb      	str	r3, [r7, #12]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c476:	f002 f87d 	bl	800e574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c47a:	4b1d      	ldr	r3, [pc, #116]	; (800c4f0 <xTaskCheckForTimeOut+0xbc>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c492:	d102      	bne.n	800c49a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c494:	2300      	movs	r3, #0
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	e023      	b.n	800c4e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b15      	ldr	r3, [pc, #84]	; (800c4f4 <xTaskCheckForTimeOut+0xc0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d007      	beq.n	800c4b6 <xTaskCheckForTimeOut+0x82>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d302      	bcc.n	800c4b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	e015      	b.n	800c4e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d20b      	bcs.n	800c4d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	1ad2      	subs	r2, r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ff9b 	bl	800c408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	61fb      	str	r3, [r7, #28]
 800c4d6:	e004      	b.n	800c4e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4e2:	f002 f877 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3720      	adds	r7, #32
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	200010e8 	.word	0x200010e8
 800c4f4:	200010fc 	.word	0x200010fc

0800c4f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4fc:	4b03      	ldr	r3, [pc, #12]	; (800c50c <vTaskMissedYield+0x14>)
 800c4fe:	2201      	movs	r2, #1
 800c500:	601a      	str	r2, [r3, #0]
}
 800c502:	bf00      	nop
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	200010f8 	.word	0x200010f8

0800c510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c518:	f000 f852 	bl	800c5c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <prvIdleTask+0x28>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d9f9      	bls.n	800c518 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <prvIdleTask+0x2c>)
 800c526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c534:	e7f0      	b.n	800c518 <prvIdleTask+0x8>
 800c536:	bf00      	nop
 800c538:	20000c14 	.word	0x20000c14
 800c53c:	e000ed04 	.word	0xe000ed04

0800c540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c546:	2300      	movs	r3, #0
 800c548:	607b      	str	r3, [r7, #4]
 800c54a:	e00c      	b.n	800c566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	4613      	mov	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4a12      	ldr	r2, [pc, #72]	; (800c5a0 <prvInitialiseTaskLists+0x60>)
 800c558:	4413      	add	r3, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fd ff64 	bl	800a428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3301      	adds	r3, #1
 800c564:	607b      	str	r3, [r7, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b37      	cmp	r3, #55	; 0x37
 800c56a:	d9ef      	bls.n	800c54c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c56c:	480d      	ldr	r0, [pc, #52]	; (800c5a4 <prvInitialiseTaskLists+0x64>)
 800c56e:	f7fd ff5b 	bl	800a428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c572:	480d      	ldr	r0, [pc, #52]	; (800c5a8 <prvInitialiseTaskLists+0x68>)
 800c574:	f7fd ff58 	bl	800a428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c578:	480c      	ldr	r0, [pc, #48]	; (800c5ac <prvInitialiseTaskLists+0x6c>)
 800c57a:	f7fd ff55 	bl	800a428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c57e:	480c      	ldr	r0, [pc, #48]	; (800c5b0 <prvInitialiseTaskLists+0x70>)
 800c580:	f7fd ff52 	bl	800a428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c584:	480b      	ldr	r0, [pc, #44]	; (800c5b4 <prvInitialiseTaskLists+0x74>)
 800c586:	f7fd ff4f 	bl	800a428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c58a:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <prvInitialiseTaskLists+0x78>)
 800c58c:	4a05      	ldr	r2, [pc, #20]	; (800c5a4 <prvInitialiseTaskLists+0x64>)
 800c58e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c590:	4b0a      	ldr	r3, [pc, #40]	; (800c5bc <prvInitialiseTaskLists+0x7c>)
 800c592:	4a05      	ldr	r2, [pc, #20]	; (800c5a8 <prvInitialiseTaskLists+0x68>)
 800c594:	601a      	str	r2, [r3, #0]
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20000c14 	.word	0x20000c14
 800c5a4:	20001074 	.word	0x20001074
 800c5a8:	20001088 	.word	0x20001088
 800c5ac:	200010a4 	.word	0x200010a4
 800c5b0:	200010b8 	.word	0x200010b8
 800c5b4:	200010d0 	.word	0x200010d0
 800c5b8:	2000109c 	.word	0x2000109c
 800c5bc:	200010a0 	.word	0x200010a0

0800c5c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5c6:	e019      	b.n	800c5fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c5c8:	f001 ffd4 	bl	800e574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <prvCheckTasksWaitingTermination+0x50>)
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fd ffaf 	bl	800a53c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5de:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <prvCheckTasksWaitingTermination+0x54>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	4a0b      	ldr	r2, [pc, #44]	; (800c614 <prvCheckTasksWaitingTermination+0x54>)
 800c5e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5e8:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <prvCheckTasksWaitingTermination+0x58>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4a0a      	ldr	r2, [pc, #40]	; (800c618 <prvCheckTasksWaitingTermination+0x58>)
 800c5f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5f2:	f001 ffef 	bl	800e5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f8e4 	bl	800c7c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <prvCheckTasksWaitingTermination+0x58>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e1      	bne.n	800c5c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	200010b8 	.word	0x200010b8
 800c614:	200010e4 	.word	0x200010e4
 800c618:	200010cc 	.word	0x200010cc

0800c61c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <vTaskGetInfo+0x1a>
 800c630:	4b2c      	ldr	r3, [pc, #176]	; (800c6e4 <vTaskGetInfo+0xc8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	e000      	b.n	800c638 <vTaskGetInfo+0x1c>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2200      	movs	r2, #0
 800c66e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	2b05      	cmp	r3, #5
 800c674:	d01a      	beq.n	800c6ac <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800c676:	4b1b      	ldr	r3, [pc, #108]	; (800c6e4 <vTaskGetInfo+0xc8>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d103      	bne.n	800c688 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2200      	movs	r2, #0
 800c684:	731a      	strb	r2, [r3, #12]
 800c686:	e018      	b.n	800c6ba <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	78fa      	ldrb	r2, [r7, #3]
 800c68c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c68e:	78fb      	ldrb	r3, [r7, #3]
 800c690:	2b03      	cmp	r3, #3
 800c692:	d112      	bne.n	800c6ba <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800c694:	f7ff fb90 	bl	800bdb8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c6a6:	f7ff fb95 	bl	800bdd4 <xTaskResumeAll>
 800c6aa:	e006      	b.n	800c6ba <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c6ac:	6978      	ldr	r0, [r7, #20]
 800c6ae:	f7ff fab7 	bl	800bc20 <eTaskGetState>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d009      	beq.n	800c6d4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 f861 	bl	800c78c <prvTaskCheckFreeStackSpace>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c6d2:	e002      	b.n	800c6da <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	841a      	strh	r2, [r3, #32]
	}
 800c6da:	bf00      	nop
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20000c10 	.word	0x20000c10

0800c6e8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d03f      	beq.n	800c782 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	623b      	str	r3, [r7, #32]
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	605a      	str	r2, [r3, #4]
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	3308      	adds	r3, #8
 800c718:	429a      	cmp	r2, r3
 800c71a:	d104      	bne.n	800c726 <prvListTasksWithinSingleList+0x3e>
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	605a      	str	r2, [r3, #4]
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	61bb      	str	r3, [r7, #24]
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	685a      	ldr	r2, [r3, #4]
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	605a      	str	r2, [r3, #4]
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	3308      	adds	r3, #8
 800c744:	429a      	cmp	r2, r3
 800c746:	d104      	bne.n	800c752 <prvListTasksWithinSingleList+0x6a>
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	605a      	str	r2, [r3, #4]
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	461a      	mov	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	1899      	adds	r1, r3, r2
 800c76a:	79fb      	ldrb	r3, [r7, #7]
 800c76c:	2201      	movs	r2, #1
 800c76e:	6978      	ldr	r0, [r7, #20]
 800c770:	f7ff ff54 	bl	800c61c <vTaskGetInfo>
				uxTask++;
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	3301      	adds	r3, #1
 800c778:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d1d5      	bne.n	800c72e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c784:	4618      	mov	r0, r3
 800c786:	3728      	adds	r7, #40	; 0x28
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c798:	e005      	b.n	800c7a6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3301      	adds	r3, #1
 800c79e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2ba5      	cmp	r3, #165	; 0xa5
 800c7ac:	d0f5      	beq.n	800c79a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	089b      	lsrs	r3, r3, #2
 800c7b2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	b29b      	uxth	r3, r3
	}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d108      	bne.n	800c7e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f001 fc80 	bl	800e0e0 <vPortFree>
				vPortFree( pxTCB );
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f001 fc7d 	bl	800e0e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7e6:	e018      	b.n	800c81a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d103      	bne.n	800c7fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fc74 	bl	800e0e0 <vPortFree>
	}
 800c7f8:	e00f      	b.n	800c81a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c800:	2b02      	cmp	r3, #2
 800c802:	d00a      	beq.n	800c81a <prvDeleteTCB+0x56>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	60fb      	str	r3, [r7, #12]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <prvDeleteTCB+0x54>
	}
 800c81a:	bf00      	nop
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c82a:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <prvResetNextTaskUnblockTime+0x38>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d104      	bne.n	800c83e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c834:	4b0a      	ldr	r3, [pc, #40]	; (800c860 <prvResetNextTaskUnblockTime+0x3c>)
 800c836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c83a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c83c:	e008      	b.n	800c850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c83e:	4b07      	ldr	r3, [pc, #28]	; (800c85c <prvResetNextTaskUnblockTime+0x38>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a04      	ldr	r2, [pc, #16]	; (800c860 <prvResetNextTaskUnblockTime+0x3c>)
 800c84e:	6013      	str	r3, [r2, #0]
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	2000109c 	.word	0x2000109c
 800c860:	20001104 	.word	0x20001104

0800c864 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <xTaskGetCurrentTaskHandle+0x1c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c870:	687b      	ldr	r3, [r7, #4]
	}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20000c10 	.word	0x20000c10

0800c884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c88a:	4b0b      	ldr	r3, [pc, #44]	; (800c8b8 <xTaskGetSchedulerState+0x34>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c892:	2301      	movs	r3, #1
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e008      	b.n	800c8aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c898:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <xTaskGetSchedulerState+0x38>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	607b      	str	r3, [r7, #4]
 800c8a4:	e001      	b.n	800c8aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8aa:	687b      	ldr	r3, [r7, #4]
	}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	200010f0 	.word	0x200010f0
 800c8bc:	2000110c 	.word	0x2000110c

0800c8c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d051      	beq.n	800c97a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8da:	4b2a      	ldr	r3, [pc, #168]	; (800c984 <xTaskPriorityInherit+0xc4>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d241      	bcs.n	800c968 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db06      	blt.n	800c8fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ec:	4b25      	ldr	r3, [pc, #148]	; (800c984 <xTaskPriorityInherit+0xc4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6959      	ldr	r1, [r3, #20]
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c902:	4613      	mov	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4413      	add	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4a1f      	ldr	r2, [pc, #124]	; (800c988 <xTaskPriorityInherit+0xc8>)
 800c90c:	4413      	add	r3, r2
 800c90e:	4299      	cmp	r1, r3
 800c910:	d122      	bne.n	800c958 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3304      	adds	r3, #4
 800c916:	4618      	mov	r0, r3
 800c918:	f7fd fe10 	bl	800a53c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c91c:	4b19      	ldr	r3, [pc, #100]	; (800c984 <xTaskPriorityInherit+0xc4>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92a:	4b18      	ldr	r3, [pc, #96]	; (800c98c <xTaskPriorityInherit+0xcc>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d903      	bls.n	800c93a <xTaskPriorityInherit+0x7a>
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c936:	4a15      	ldr	r2, [pc, #84]	; (800c98c <xTaskPriorityInherit+0xcc>)
 800c938:	6013      	str	r3, [r2, #0]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93e:	4613      	mov	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4a10      	ldr	r2, [pc, #64]	; (800c988 <xTaskPriorityInherit+0xc8>)
 800c948:	441a      	add	r2, r3
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	3304      	adds	r3, #4
 800c94e:	4619      	mov	r1, r3
 800c950:	4610      	mov	r0, r2
 800c952:	f7fd fd96 	bl	800a482 <vListInsertEnd>
 800c956:	e004      	b.n	800c962 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <xTaskPriorityInherit+0xc4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c962:	2301      	movs	r3, #1
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	e008      	b.n	800c97a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c96c:	4b05      	ldr	r3, [pc, #20]	; (800c984 <xTaskPriorityInherit+0xc4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c972:	429a      	cmp	r2, r3
 800c974:	d201      	bcs.n	800c97a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c976:	2301      	movs	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c97a:	68fb      	ldr	r3, [r7, #12]
	}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20000c10 	.word	0x20000c10
 800c988:	20000c14 	.word	0x20000c14
 800c98c:	200010ec 	.word	0x200010ec

0800c990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c99c:	2300      	movs	r3, #0
 800c99e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d056      	beq.n	800ca54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ca60 <xTaskPriorityDisinherit+0xd0>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d00a      	beq.n	800c9c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10a      	bne.n	800c9e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	60bb      	str	r3, [r7, #8]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e8:	1e5a      	subs	r2, r3, #1
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d02c      	beq.n	800ca54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d128      	bne.n	800ca54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd fd98 	bl	800a53c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca24:	4b0f      	ldr	r3, [pc, #60]	; (800ca64 <xTaskPriorityDisinherit+0xd4>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d903      	bls.n	800ca34 <xTaskPriorityDisinherit+0xa4>
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	4a0c      	ldr	r2, [pc, #48]	; (800ca64 <xTaskPriorityDisinherit+0xd4>)
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4a09      	ldr	r2, [pc, #36]	; (800ca68 <xTaskPriorityDisinherit+0xd8>)
 800ca42:	441a      	add	r2, r3
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	3304      	adds	r3, #4
 800ca48:	4619      	mov	r1, r3
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	f7fd fd19 	bl	800a482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca50:	2301      	movs	r3, #1
 800ca52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca54:	697b      	ldr	r3, [r7, #20]
	}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20000c10 	.word	0x20000c10
 800ca64:	200010ec 	.word	0x200010ec
 800ca68:	20000c14 	.word	0x20000c14

0800ca6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d06a      	beq.n	800cb5a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	60fb      	str	r3, [r7, #12]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d902      	bls.n	800cab2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e002      	b.n	800cab8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d04b      	beq.n	800cb5a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d146      	bne.n	800cb5a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cacc:	4b25      	ldr	r3, [pc, #148]	; (800cb64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d10a      	bne.n	800caec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60bb      	str	r3, [r7, #8]
}
 800cae8:	bf00      	nop
 800caea:	e7fe      	b.n	800caea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	db04      	blt.n	800cb0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	6959      	ldr	r1, [r3, #20]
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	4613      	mov	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4a13      	ldr	r2, [pc, #76]	; (800cb68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cb1a:	4413      	add	r3, r2
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	d11c      	bne.n	800cb5a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	3304      	adds	r3, #4
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fd fd09 	bl	800a53c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2e:	4b0f      	ldr	r3, [pc, #60]	; (800cb6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d903      	bls.n	800cb3e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	4a0c      	ldr	r2, [pc, #48]	; (800cb6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	4613      	mov	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4a07      	ldr	r2, [pc, #28]	; (800cb68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cb4c:	441a      	add	r2, r3
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	3304      	adds	r3, #4
 800cb52:	4619      	mov	r1, r3
 800cb54:	4610      	mov	r0, r2
 800cb56:	f7fd fc94 	bl	800a482 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb5a:	bf00      	nop
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000c10 	.word	0x20000c10
 800cb68:	20000c14 	.word	0x20000c14
 800cb6c:	200010ec 	.word	0x200010ec

0800cb70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f012 fa02 	bl	801ef86 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7f3 fbce 	bl	8000324 <strlen>
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	e007      	b.n	800cb9c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4413      	add	r3, r2
 800cb92:	2220      	movs	r2, #32
 800cb94:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b0e      	cmp	r3, #14
 800cba0:	d9f4      	bls.n	800cb8c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4413      	add	r3, r2
	}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b089      	sub	sp, #36	; 0x24
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800cbca:	4b45      	ldr	r3, [pc, #276]	; (800cce0 <vTaskList+0x124>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800cbd0:	4b43      	ldr	r3, [pc, #268]	; (800cce0 <vTaskList+0x124>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	4413      	add	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f001 f9b3 	bl	800df48 <pvPortMalloc>
 800cbe2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d076      	beq.n	800ccd8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800cbea:	2200      	movs	r2, #0
 800cbec:	68f9      	ldr	r1, [r7, #12]
 800cbee:	68b8      	ldr	r0, [r7, #8]
 800cbf0:	f7ff f9b0 	bl	800bf54 <uxTaskGetSystemState>
 800cbf4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	617b      	str	r3, [r7, #20]
 800cbfa:	e066      	b.n	800ccca <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	4413      	add	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	461a      	mov	r2, r3
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	7b1b      	ldrb	r3, [r3, #12]
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d81b      	bhi.n	800cc4a <vTaskList+0x8e>
 800cc12:	a201      	add	r2, pc, #4	; (adr r2, 800cc18 <vTaskList+0x5c>)
 800cc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc18:	0800cc2d 	.word	0x0800cc2d
 800cc1c:	0800cc33 	.word	0x0800cc33
 800cc20:	0800cc39 	.word	0x0800cc39
 800cc24:	0800cc3f 	.word	0x0800cc3f
 800cc28:	0800cc45 	.word	0x0800cc45
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800cc2c:	2358      	movs	r3, #88	; 0x58
 800cc2e:	74fb      	strb	r3, [r7, #19]
										break;
 800cc30:	e00e      	b.n	800cc50 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800cc32:	2352      	movs	r3, #82	; 0x52
 800cc34:	74fb      	strb	r3, [r7, #19]
										break;
 800cc36:	e00b      	b.n	800cc50 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800cc38:	2342      	movs	r3, #66	; 0x42
 800cc3a:	74fb      	strb	r3, [r7, #19]
										break;
 800cc3c:	e008      	b.n	800cc50 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800cc3e:	2353      	movs	r3, #83	; 0x53
 800cc40:	74fb      	strb	r3, [r7, #19]
										break;
 800cc42:	e005      	b.n	800cc50 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800cc44:	2344      	movs	r3, #68	; 0x44
 800cc46:	74fb      	strb	r3, [r7, #19]
										break;
 800cc48:	e002      	b.n	800cc50 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	74fb      	strb	r3, [r7, #19]
										break;
 800cc4e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	4613      	mov	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	4413      	add	r3, r2
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ff83 	bl	800cb70 <prvWriteNameToBuffer>
 800cc6a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800cc6c:	7cf9      	ldrb	r1, [r7, #19]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	4613      	mov	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	461a      	mov	r2, r3
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	6918      	ldr	r0, [r3, #16]
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	4613      	mov	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	4413      	add	r3, r2
 800cc90:	8c1b      	ldrh	r3, [r3, #32]
 800cc92:	461c      	mov	r4, r3
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4613      	mov	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	4413      	add	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	461a      	mov	r2, r3
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	4413      	add	r3, r2
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	9400      	str	r4, [sp, #0]
 800ccaa:	4603      	mov	r3, r0
 800ccac:	460a      	mov	r2, r1
 800ccae:	490d      	ldr	r1, [pc, #52]	; (800cce4 <vTaskList+0x128>)
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f012 f939 	bl	801ef28 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7f3 fb34 	bl	8000324 <strlen>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d394      	bcc.n	800cbfc <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ccd2:	68b8      	ldr	r0, [r7, #8]
 800ccd4:	f001 fa04 	bl	800e0e0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccd8:	bf00      	nop
 800ccda:	371c      	adds	r7, #28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd90      	pop	{r4, r7, pc}
 800cce0:	200010e4 	.word	0x200010e4
 800cce4:	08020648 	.word	0x08020648

0800cce8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ccec:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d004      	beq.n	800ccfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ccfe:	4b03      	ldr	r3, [pc, #12]	; (800cd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd00:	681b      	ldr	r3, [r3, #0]
	}
 800cd02:	4618      	mov	r0, r3
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	20000c10 	.word	0x20000c10

0800cd10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd1a:	4b21      	ldr	r3, [pc, #132]	; (800cda0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd20:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3304      	adds	r3, #4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fd fc08 	bl	800a53c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd32:	d10a      	bne.n	800cd4a <prvAddCurrentTaskToDelayedList+0x3a>
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d007      	beq.n	800cd4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd3a:	4b1a      	ldr	r3, [pc, #104]	; (800cda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4619      	mov	r1, r3
 800cd42:	4819      	ldr	r0, [pc, #100]	; (800cda8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd44:	f7fd fb9d 	bl	800a482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd48:	e026      	b.n	800cd98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4413      	add	r3, r2
 800cd50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd52:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d209      	bcs.n	800cd76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd62:	4b12      	ldr	r3, [pc, #72]	; (800cdac <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4610      	mov	r0, r2
 800cd70:	f7fd fbab 	bl	800a4ca <vListInsert>
}
 800cd74:	e010      	b.n	800cd98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd76:	4b0e      	ldr	r3, [pc, #56]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	4619      	mov	r1, r3
 800cd82:	4610      	mov	r0, r2
 800cd84:	f7fd fba1 	bl	800a4ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d202      	bcs.n	800cd98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd92:	4a08      	ldr	r2, [pc, #32]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	6013      	str	r3, [r2, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	200010e8 	.word	0x200010e8
 800cda4:	20000c10 	.word	0x20000c10
 800cda8:	200010d0 	.word	0x200010d0
 800cdac:	200010a0 	.word	0x200010a0
 800cdb0:	2000109c 	.word	0x2000109c
 800cdb4:	20001104 	.word	0x20001104

0800cdb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08a      	sub	sp, #40	; 0x28
 800cdbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdc2:	f000 fb07 	bl	800d3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdc6:	4b1c      	ldr	r3, [pc, #112]	; (800ce38 <xTimerCreateTimerTask+0x80>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d021      	beq.n	800ce12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cdd6:	1d3a      	adds	r2, r7, #4
 800cdd8:	f107 0108 	add.w	r1, r7, #8
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	4618      	mov	r0, r3
 800cde2:	f001 f897 	bl	800df14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	9202      	str	r2, [sp, #8]
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	460a      	mov	r2, r1
 800cdf8:	4910      	ldr	r1, [pc, #64]	; (800ce3c <xTimerCreateTimerTask+0x84>)
 800cdfa:	4811      	ldr	r0, [pc, #68]	; (800ce40 <xTimerCreateTimerTask+0x88>)
 800cdfc:	f7fe fcc8 	bl	800b790 <xTaskCreateStatic>
 800ce00:	4603      	mov	r3, r0
 800ce02:	4a10      	ldr	r2, [pc, #64]	; (800ce44 <xTimerCreateTimerTask+0x8c>)
 800ce04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <xTimerCreateTimerTask+0x8c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	613b      	str	r3, [r7, #16]
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce2e:	697b      	ldr	r3, [r7, #20]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20001140 	.word	0x20001140
 800ce3c:	08020658 	.word	0x08020658
 800ce40:	0800cf7d 	.word	0x0800cf7d
 800ce44:	20001144 	.word	0x20001144

0800ce48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08a      	sub	sp, #40	; 0x28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	623b      	str	r3, [r7, #32]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce76:	4b1a      	ldr	r3, [pc, #104]	; (800cee0 <xTimerGenericCommand+0x98>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d02a      	beq.n	800ced4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b05      	cmp	r3, #5
 800ce8e:	dc18      	bgt.n	800cec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce90:	f7ff fcf8 	bl	800c884 <xTaskGetSchedulerState>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d109      	bne.n	800ceae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce9a:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <xTimerGenericCommand+0x98>)
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	f107 0110 	add.w	r1, r7, #16
 800cea2:	2300      	movs	r3, #0
 800cea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea6:	f7fd fdd1 	bl	800aa4c <xQueueGenericSend>
 800ceaa:	6278      	str	r0, [r7, #36]	; 0x24
 800ceac:	e012      	b.n	800ced4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <xTimerGenericCommand+0x98>)
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f107 0110 	add.w	r1, r7, #16
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f7fd fdc7 	bl	800aa4c <xQueueGenericSend>
 800cebe:	6278      	str	r0, [r7, #36]	; 0x24
 800cec0:	e008      	b.n	800ced4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <xTimerGenericCommand+0x98>)
 800cec4:	6818      	ldr	r0, [r3, #0]
 800cec6:	f107 0110 	add.w	r1, r7, #16
 800ceca:	2300      	movs	r3, #0
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	f7fd febb 	bl	800ac48 <xQueueGenericSendFromISR>
 800ced2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3728      	adds	r7, #40	; 0x28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20001140 	.word	0x20001140

0800cee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceee:	4b22      	ldr	r3, [pc, #136]	; (800cf78 <prvProcessExpiredTimer+0x94>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	3304      	adds	r3, #4
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fd fb1d 	bl	800a53c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf08:	f003 0304 	and.w	r3, r3, #4
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d022      	beq.n	800cf56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	699a      	ldr	r2, [r3, #24]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	18d1      	adds	r1, r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	6978      	ldr	r0, [r7, #20]
 800cf1e:	f000 f8d1 	bl	800d0c4 <prvInsertTimerInActiveList>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01f      	beq.n	800cf68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	2100      	movs	r1, #0
 800cf32:	6978      	ldr	r0, [r7, #20]
 800cf34:	f7ff ff88 	bl	800ce48 <xTimerGenericCommand>
 800cf38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d113      	bne.n	800cf68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	60fb      	str	r3, [r7, #12]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf5c:	f023 0301 	bic.w	r3, r3, #1
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	6a1b      	ldr	r3, [r3, #32]
 800cf6c:	6978      	ldr	r0, [r7, #20]
 800cf6e:	4798      	blx	r3
}
 800cf70:	bf00      	nop
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	20001138 	.word	0x20001138

0800cf7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf84:	f107 0308 	add.w	r3, r7, #8
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 f857 	bl	800d03c <prvGetNextExpireTime>
 800cf8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	4619      	mov	r1, r3
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f000 f803 	bl	800cfa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf9a:	f000 f8d5 	bl	800d148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf9e:	e7f1      	b.n	800cf84 <prvTimerTask+0x8>

0800cfa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfaa:	f7fe ff05 	bl	800bdb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 f866 	bl	800d084 <prvSampleTimeNow>
 800cfb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d130      	bne.n	800d022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <prvProcessTimerOrBlockTask+0x3c>
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d806      	bhi.n	800cfdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cfce:	f7fe ff01 	bl	800bdd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff ff85 	bl	800cee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cfda:	e024      	b.n	800d026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d008      	beq.n	800cff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cfe2:	4b13      	ldr	r3, [pc, #76]	; (800d030 <prvProcessTimerOrBlockTask+0x90>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d101      	bne.n	800cff0 <prvProcessTimerOrBlockTask+0x50>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e000      	b.n	800cff2 <prvProcessTimerOrBlockTask+0x52>
 800cff0:	2300      	movs	r3, #0
 800cff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cff4:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <prvProcessTimerOrBlockTask+0x94>)
 800cff6:	6818      	ldr	r0, [r3, #0]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	4619      	mov	r1, r3
 800d002:	f7fe fb91 	bl	800b728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d006:	f7fe fee5 	bl	800bdd4 <xTaskResumeAll>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d010:	4b09      	ldr	r3, [pc, #36]	; (800d038 <prvProcessTimerOrBlockTask+0x98>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
}
 800d020:	e001      	b.n	800d026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d022:	f7fe fed7 	bl	800bdd4 <xTaskResumeAll>
}
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	2000113c 	.word	0x2000113c
 800d034:	20001140 	.word	0x20001140
 800d038:	e000ed04 	.word	0xe000ed04

0800d03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d044:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <prvGetNextExpireTime+0x44>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <prvGetNextExpireTime+0x16>
 800d04e:	2201      	movs	r2, #1
 800d050:	e000      	b.n	800d054 <prvGetNextExpireTime+0x18>
 800d052:	2200      	movs	r2, #0
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d105      	bne.n	800d06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <prvGetNextExpireTime+0x44>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	e001      	b.n	800d070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d070:	68fb      	ldr	r3, [r7, #12]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20001138 	.word	0x20001138

0800d084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d08c:	f7fe ff40 	bl	800bf10 <xTaskGetTickCount>
 800d090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d092:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <prvSampleTimeNow+0x3c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d205      	bcs.n	800d0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d09c:	f000 f936 	bl	800d30c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	e002      	b.n	800d0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0ae:	4a04      	ldr	r2, [pc, #16]	; (800d0c0 <prvSampleTimeNow+0x3c>)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20001148 	.word	0x20001148

0800d0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d812      	bhi.n	800d110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	1ad2      	subs	r2, r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d302      	bcc.n	800d0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	617b      	str	r3, [r7, #20]
 800d0fc:	e01b      	b.n	800d136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <prvInsertTimerInActiveList+0x7c>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3304      	adds	r3, #4
 800d106:	4619      	mov	r1, r3
 800d108:	4610      	mov	r0, r2
 800d10a:	f7fd f9de 	bl	800a4ca <vListInsert>
 800d10e:	e012      	b.n	800d136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d206      	bcs.n	800d126 <prvInsertTimerInActiveList+0x62>
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d302      	bcc.n	800d126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d120:	2301      	movs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	e007      	b.n	800d136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d126:	4b07      	ldr	r3, [pc, #28]	; (800d144 <prvInsertTimerInActiveList+0x80>)
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3304      	adds	r3, #4
 800d12e:	4619      	mov	r1, r3
 800d130:	4610      	mov	r0, r2
 800d132:	f7fd f9ca 	bl	800a4ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d136:	697b      	ldr	r3, [r7, #20]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000113c 	.word	0x2000113c
 800d144:	20001138 	.word	0x20001138

0800d148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08e      	sub	sp, #56	; 0x38
 800d14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d14e:	e0ca      	b.n	800d2e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	da18      	bge.n	800d188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d156:	1d3b      	adds	r3, r7, #4
 800d158:	3304      	adds	r3, #4
 800d15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	61fb      	str	r3, [r7, #28]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d17e:	6850      	ldr	r0, [r2, #4]
 800d180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d182:	6892      	ldr	r2, [r2, #8]
 800d184:	4611      	mov	r1, r2
 800d186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f2c0 80aa 	blt.w	800d2e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d004      	beq.n	800d1a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fd f9cb 	bl	800a53c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1a6:	463b      	mov	r3, r7
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff ff6b 	bl	800d084 <prvSampleTimeNow>
 800d1ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	f200 8097 	bhi.w	800d2e6 <prvProcessReceivedCommands+0x19e>
 800d1b8:	a201      	add	r2, pc, #4	; (adr r2, 800d1c0 <prvProcessReceivedCommands+0x78>)
 800d1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1be:	bf00      	nop
 800d1c0:	0800d1e9 	.word	0x0800d1e9
 800d1c4:	0800d1e9 	.word	0x0800d1e9
 800d1c8:	0800d1e9 	.word	0x0800d1e9
 800d1cc:	0800d25d 	.word	0x0800d25d
 800d1d0:	0800d271 	.word	0x0800d271
 800d1d4:	0800d2bb 	.word	0x0800d2bb
 800d1d8:	0800d1e9 	.word	0x0800d1e9
 800d1dc:	0800d1e9 	.word	0x0800d1e9
 800d1e0:	0800d25d 	.word	0x0800d25d
 800d1e4:	0800d271 	.word	0x0800d271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ee:	f043 0301 	orr.w	r3, r3, #1
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	18d1      	adds	r1, r2, r3
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d208:	f7ff ff5c 	bl	800d0c4 <prvInsertTimerInActiveList>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d069      	beq.n	800d2e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d05e      	beq.n	800d2e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	441a      	add	r2, r3
 800d230:	2300      	movs	r3, #0
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	2300      	movs	r3, #0
 800d236:	2100      	movs	r1, #0
 800d238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d23a:	f7ff fe05 	bl	800ce48 <xTimerGenericCommand>
 800d23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d14f      	bne.n	800d2e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	61bb      	str	r3, [r7, #24]
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d262:	f023 0301 	bic.w	r3, r3, #1
 800d266:	b2da      	uxtb	r2, r3
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d26e:	e03a      	b.n	800d2e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d276:	f043 0301 	orr.w	r3, r3, #1
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10a      	bne.n	800d2a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	617b      	str	r3, [r7, #20]
}
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	699a      	ldr	r2, [r3, #24]
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	18d1      	adds	r1, r2, r3
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b4:	f7ff ff06 	bl	800d0c4 <prvInsertTimerInActiveList>
					break;
 800d2b8:	e015      	b.n	800d2e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d103      	bne.n	800d2d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ca:	f000 ff09 	bl	800e0e0 <vPortFree>
 800d2ce:	e00a      	b.n	800d2e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2d6:	f023 0301 	bic.w	r3, r3, #1
 800d2da:	b2da      	uxtb	r2, r3
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d2e2:	e000      	b.n	800d2e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d2e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2e6:	4b08      	ldr	r3, [pc, #32]	; (800d308 <prvProcessReceivedCommands+0x1c0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	1d39      	adds	r1, r7, #4
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fd fdd2 	bl	800ae98 <xQueueReceive>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f47f af2a 	bne.w	800d150 <prvProcessReceivedCommands+0x8>
	}
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	3730      	adds	r7, #48	; 0x30
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20001140 	.word	0x20001140

0800d30c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d312:	e048      	b.n	800d3a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d314:	4b2d      	ldr	r3, [pc, #180]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d31e:	4b2b      	ldr	r3, [pc, #172]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3304      	adds	r3, #4
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fd f905 	bl	800a53c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d02e      	beq.n	800d3a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	4413      	add	r3, r2
 800d350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	429a      	cmp	r2, r3
 800d358:	d90e      	bls.n	800d378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d366:	4b19      	ldr	r3, [pc, #100]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3304      	adds	r3, #4
 800d36e:	4619      	mov	r1, r3
 800d370:	4610      	mov	r0, r2
 800d372:	f7fd f8aa 	bl	800a4ca <vListInsert>
 800d376:	e016      	b.n	800d3a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d378:	2300      	movs	r3, #0
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	2300      	movs	r3, #0
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff fd60 	bl	800ce48 <xTimerGenericCommand>
 800d388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10a      	bne.n	800d3a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	603b      	str	r3, [r7, #0]
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3a6:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1b1      	bne.n	800d314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3b6:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <prvSwitchTimerLists+0xc4>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a04      	ldr	r2, [pc, #16]	; (800d3cc <prvSwitchTimerLists+0xc0>)
 800d3bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3be:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <prvSwitchTimerLists+0xc4>)
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	6013      	str	r3, [r2, #0]
}
 800d3c4:	bf00      	nop
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20001138 	.word	0x20001138
 800d3d0:	2000113c 	.word	0x2000113c

0800d3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d3da:	f001 f8cb 	bl	800e574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d3de:	4b15      	ldr	r3, [pc, #84]	; (800d434 <prvCheckForValidListAndQueue+0x60>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d120      	bne.n	800d428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d3e6:	4814      	ldr	r0, [pc, #80]	; (800d438 <prvCheckForValidListAndQueue+0x64>)
 800d3e8:	f7fd f81e 	bl	800a428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3ec:	4813      	ldr	r0, [pc, #76]	; (800d43c <prvCheckForValidListAndQueue+0x68>)
 800d3ee:	f7fd f81b 	bl	800a428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3f2:	4b13      	ldr	r3, [pc, #76]	; (800d440 <prvCheckForValidListAndQueue+0x6c>)
 800d3f4:	4a10      	ldr	r2, [pc, #64]	; (800d438 <prvCheckForValidListAndQueue+0x64>)
 800d3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d3f8:	4b12      	ldr	r3, [pc, #72]	; (800d444 <prvCheckForValidListAndQueue+0x70>)
 800d3fa:	4a10      	ldr	r2, [pc, #64]	; (800d43c <prvCheckForValidListAndQueue+0x68>)
 800d3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3fe:	2300      	movs	r3, #0
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	4b11      	ldr	r3, [pc, #68]	; (800d448 <prvCheckForValidListAndQueue+0x74>)
 800d404:	4a11      	ldr	r2, [pc, #68]	; (800d44c <prvCheckForValidListAndQueue+0x78>)
 800d406:	2110      	movs	r1, #16
 800d408:	200a      	movs	r0, #10
 800d40a:	f7fd f929 	bl	800a660 <xQueueGenericCreateStatic>
 800d40e:	4603      	mov	r3, r0
 800d410:	4a08      	ldr	r2, [pc, #32]	; (800d434 <prvCheckForValidListAndQueue+0x60>)
 800d412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d414:	4b07      	ldr	r3, [pc, #28]	; (800d434 <prvCheckForValidListAndQueue+0x60>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <prvCheckForValidListAndQueue+0x60>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	490b      	ldr	r1, [pc, #44]	; (800d450 <prvCheckForValidListAndQueue+0x7c>)
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe f92c 	bl	800b680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d428:	f001 f8d4 	bl	800e5d4 <vPortExitCritical>
}
 800d42c:	bf00      	nop
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20001140 	.word	0x20001140
 800d438:	20001110 	.word	0x20001110
 800d43c:	20001124 	.word	0x20001124
 800d440:	20001138 	.word	0x20001138
 800d444:	2000113c 	.word	0x2000113c
 800d448:	200011ec 	.word	0x200011ec
 800d44c:	2000114c 	.word	0x2000114c
 800d450:	08020660 	.word	0x08020660

0800d454 <__NVIC_SetPriority>:
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	6039      	str	r1, [r7, #0]
 800d45e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	db0a      	blt.n	800d47e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	490c      	ldr	r1, [pc, #48]	; (800d4a0 <__NVIC_SetPriority+0x4c>)
 800d46e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d472:	0112      	lsls	r2, r2, #4
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	440b      	add	r3, r1
 800d478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d47c:	e00a      	b.n	800d494 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	b2da      	uxtb	r2, r3
 800d482:	4908      	ldr	r1, [pc, #32]	; (800d4a4 <__NVIC_SetPriority+0x50>)
 800d484:	88fb      	ldrh	r3, [r7, #6]
 800d486:	f003 030f 	and.w	r3, r3, #15
 800d48a:	3b04      	subs	r3, #4
 800d48c:	0112      	lsls	r2, r2, #4
 800d48e:	b2d2      	uxtb	r2, r2
 800d490:	440b      	add	r3, r1
 800d492:	761a      	strb	r2, [r3, #24]
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	e000e100 	.word	0xe000e100
 800d4a4:	e000ed00 	.word	0xe000ed00

0800d4a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d4ac:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <SysTick_Handler+0x1c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d4b0:	f7ff f9e8 	bl	800c884 <xTaskGetSchedulerState>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d001      	beq.n	800d4be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d4ba:	f001 f8ed 	bl	800e698 <xPortSysTickHandler>
  }
}
 800d4be:	bf00      	nop
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	e000e010 	.word	0xe000e010

0800d4c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	f06f 0004 	mvn.w	r0, #4
 800d4d2:	f7ff ffbf 	bl	800d454 <__NVIC_SetPriority>
#endif
}
 800d4d6:	bf00      	nop
 800d4d8:	bd80      	pop	{r7, pc}
	...

0800d4dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4e2:	f3ef 8305 	mrs	r3, IPSR
 800d4e6:	603b      	str	r3, [r7, #0]
  return(result);
 800d4e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d4ee:	f06f 0305 	mvn.w	r3, #5
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	e00c      	b.n	800d510 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <osKernelInitialize+0x44>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d4fe:	4b08      	ldr	r3, [pc, #32]	; (800d520 <osKernelInitialize+0x44>)
 800d500:	2201      	movs	r2, #1
 800d502:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d504:	2300      	movs	r3, #0
 800d506:	607b      	str	r3, [r7, #4]
 800d508:	e002      	b.n	800d510 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d50a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d50e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d510:	687b      	ldr	r3, [r7, #4]
}
 800d512:	4618      	mov	r0, r3
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2000123c 	.word	0x2000123c

0800d524 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d52a:	f3ef 8305 	mrs	r3, IPSR
 800d52e:	603b      	str	r3, [r7, #0]
  return(result);
 800d530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d536:	f06f 0305 	mvn.w	r3, #5
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	e010      	b.n	800d560 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d53e:	4b0b      	ldr	r3, [pc, #44]	; (800d56c <osKernelStart+0x48>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d109      	bne.n	800d55a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d546:	f7ff ffbf 	bl	800d4c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d54a:	4b08      	ldr	r3, [pc, #32]	; (800d56c <osKernelStart+0x48>)
 800d54c:	2202      	movs	r2, #2
 800d54e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d550:	f7fe fbcc 	bl	800bcec <vTaskStartScheduler>
      stat = osOK;
 800d554:	2300      	movs	r3, #0
 800d556:	607b      	str	r3, [r7, #4]
 800d558:	e002      	b.n	800d560 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d55a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d55e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d560:	687b      	ldr	r3, [r7, #4]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	2000123c 	.word	0x2000123c

0800d570 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d576:	f3ef 8305 	mrs	r3, IPSR
 800d57a:	603b      	str	r3, [r7, #0]
  return(result);
 800d57c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d582:	f7fe fcd5 	bl	800bf30 <xTaskGetTickCountFromISR>
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	e002      	b.n	800d590 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d58a:	f7fe fcc1 	bl	800bf10 <xTaskGetTickCount>
 800d58e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d590:	687b      	ldr	r3, [r7, #4]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b08e      	sub	sp, #56	; 0x38
 800d59e:	af04      	add	r7, sp, #16
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5aa:	f3ef 8305 	mrs	r3, IPSR
 800d5ae:	617b      	str	r3, [r7, #20]
  return(result);
 800d5b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d17f      	bne.n	800d6b6 <osThreadNew+0x11c>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d07c      	beq.n	800d6b6 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d5bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d5c2:	2318      	movs	r3, #24
 800d5c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d045      	beq.n	800d662 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d002      	beq.n	800d5e4 <osThreadNew+0x4a>
        name = attr->name;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d008      	beq.n	800d60a <osThreadNew+0x70>
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	2b38      	cmp	r3, #56	; 0x38
 800d5fc:	d805      	bhi.n	800d60a <osThreadNew+0x70>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <osThreadNew+0x74>
        return (NULL);
 800d60a:	2300      	movs	r3, #0
 800d60c:	e054      	b.n	800d6b8 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	089b      	lsrs	r3, r3, #2
 800d61c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00e      	beq.n	800d644 <osThreadNew+0xaa>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	2b5b      	cmp	r3, #91	; 0x5b
 800d62c:	d90a      	bls.n	800d644 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d632:	2b00      	cmp	r3, #0
 800d634:	d006      	beq.n	800d644 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <osThreadNew+0xaa>
        mem = 1;
 800d63e:	2301      	movs	r3, #1
 800d640:	61bb      	str	r3, [r7, #24]
 800d642:	e010      	b.n	800d666 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10c      	bne.n	800d666 <osThreadNew+0xcc>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d108      	bne.n	800d666 <osThreadNew+0xcc>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d104      	bne.n	800d666 <osThreadNew+0xcc>
          mem = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61bb      	str	r3, [r7, #24]
 800d660:	e001      	b.n	800d666 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d662:	2300      	movs	r3, #0
 800d664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d110      	bne.n	800d68e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d674:	9202      	str	r2, [sp, #8]
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	6a3a      	ldr	r2, [r7, #32]
 800d680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7fe f884 	bl	800b790 <xTaskCreateStatic>
 800d688:	4603      	mov	r3, r0
 800d68a:	613b      	str	r3, [r7, #16]
 800d68c:	e013      	b.n	800d6b6 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d110      	bne.n	800d6b6 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	b29a      	uxth	r2, r3
 800d698:	f107 0310 	add.w	r3, r7, #16
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7fe f8cf 	bl	800b84a <xTaskCreate>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d001      	beq.n	800d6b6 <osThreadNew+0x11c>
            hTask = NULL;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d6b6:	693b      	ldr	r3, [r7, #16]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3728      	adds	r7, #40	; 0x28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6cc:	f3ef 8305 	mrs	r3, IPSR
 800d6d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800d6d8:	f06f 0305 	mvn.w	r3, #5
 800d6dc:	617b      	str	r3, [r7, #20]
 800d6de:	e017      	b.n	800d710 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d103      	bne.n	800d6ee <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800d6e6:	f06f 0303 	mvn.w	r3, #3
 800d6ea:	617b      	str	r3, [r7, #20]
 800d6ec:	e010      	b.n	800d710 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800d6ee:	6938      	ldr	r0, [r7, #16]
 800d6f0:	f7fe fa96 	bl	800bc20 <eTaskGetState>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	d005      	beq.n	800d70a <osThreadTerminate+0x4a>
      stat = osOK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800d702:	6938      	ldr	r0, [r7, #16]
 800d704:	f7fe f9e6 	bl	800bad4 <vTaskDelete>
 800d708:	e002      	b.n	800d710 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800d70a:	f06f 0302 	mvn.w	r3, #2
 800d70e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800d710:	697b      	ldr	r3, [r7, #20]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d722:	f3ef 8305 	mrs	r3, IPSR
 800d726:	60bb      	str	r3, [r7, #8]
  return(result);
 800d728:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d003      	beq.n	800d736 <osDelay+0x1c>
    stat = osErrorISR;
 800d72e:	f06f 0305 	mvn.w	r3, #5
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e007      	b.n	800d746 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d736:	2300      	movs	r3, #0
 800d738:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7fe fa39 	bl	800bbb8 <vTaskDelay>
    }
  }

  return (stat);
 800d746:	68fb      	ldr	r3, [r7, #12]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d75c:	f3ef 8305 	mrs	r3, IPSR
 800d760:	60bb      	str	r3, [r7, #8]
  return(result);
 800d762:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d764:	2b00      	cmp	r3, #0
 800d766:	d174      	bne.n	800d852 <osMutexNew+0x102>
    if (attr != NULL) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	61bb      	str	r3, [r7, #24]
 800d774:	e001      	b.n	800d77a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <osMutexNew+0x3a>
      rmtx = 1U;
 800d784:	2301      	movs	r3, #1
 800d786:	617b      	str	r3, [r7, #20]
 800d788:	e001      	b.n	800d78e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	f003 0308 	and.w	r3, r3, #8
 800d794:	2b00      	cmp	r3, #0
 800d796:	d15c      	bne.n	800d852 <osMutexNew+0x102>
      mem = -1;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d79c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d015      	beq.n	800d7d0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d006      	beq.n	800d7ba <osMutexNew+0x6a>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	2b4f      	cmp	r3, #79	; 0x4f
 800d7b2:	d902      	bls.n	800d7ba <osMutexNew+0x6a>
          mem = 1;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	613b      	str	r3, [r7, #16]
 800d7b8:	e00c      	b.n	800d7d4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d108      	bne.n	800d7d4 <osMutexNew+0x84>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d104      	bne.n	800d7d4 <osMutexNew+0x84>
            mem = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	e001      	b.n	800d7d4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d112      	bne.n	800d800 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d007      	beq.n	800d7f0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	2004      	movs	r0, #4
 800d7e8:	f7fd f841 	bl	800a86e <xQueueCreateMutexStatic>
 800d7ec:	61f8      	str	r0, [r7, #28]
 800d7ee:	e016      	b.n	800d81e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	f7fd f839 	bl	800a86e <xQueueCreateMutexStatic>
 800d7fc:	61f8      	str	r0, [r7, #28]
 800d7fe:	e00e      	b.n	800d81e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d80c:	2004      	movs	r0, #4
 800d80e:	f7fd f816 	bl	800a83e <xQueueCreateMutex>
 800d812:	61f8      	str	r0, [r7, #28]
 800d814:	e003      	b.n	800d81e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d816:	2001      	movs	r0, #1
 800d818:	f7fd f811 	bl	800a83e <xQueueCreateMutex>
 800d81c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00c      	beq.n	800d83e <osMutexNew+0xee>
        if (attr != NULL) {
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <osMutexNew+0xe2>
          name = attr->name;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	e001      	b.n	800d836 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d836:	68f9      	ldr	r1, [r7, #12]
 800d838:	69f8      	ldr	r0, [r7, #28]
 800d83a:	f7fd ff21 	bl	800b680 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d006      	beq.n	800d852 <osMutexNew+0x102>
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	f043 0301 	orr.w	r3, r3, #1
 800d850:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d852:	69fb      	ldr	r3, [r7, #28]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3720      	adds	r7, #32
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f023 0301 	bic.w	r3, r3, #1
 800d86c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d876:	2300      	movs	r3, #0
 800d878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d87a:	f3ef 8305 	mrs	r3, IPSR
 800d87e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d880:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d886:	f06f 0305 	mvn.w	r3, #5
 800d88a:	617b      	str	r3, [r7, #20]
 800d88c:	e02c      	b.n	800d8e8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d103      	bne.n	800d89c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d894:	f06f 0303 	mvn.w	r3, #3
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	e025      	b.n	800d8e8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d011      	beq.n	800d8c6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d8a2:	6839      	ldr	r1, [r7, #0]
 800d8a4:	6938      	ldr	r0, [r7, #16]
 800d8a6:	f7fd f831 	bl	800a90c <xQueueTakeMutexRecursive>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d01b      	beq.n	800d8e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d003      	beq.n	800d8be <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d8b6:	f06f 0301 	mvn.w	r3, #1
 800d8ba:	617b      	str	r3, [r7, #20]
 800d8bc:	e014      	b.n	800d8e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d8be:	f06f 0302 	mvn.w	r3, #2
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	e010      	b.n	800d8e8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f7fd fbc5 	bl	800b058 <xQueueSemaphoreTake>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d009      	beq.n	800d8e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d8da:	f06f 0301 	mvn.w	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	e002      	b.n	800d8e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d8e2:	f06f 0302 	mvn.w	r3, #2
 800d8e6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d8e8:	697b      	ldr	r3, [r7, #20]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f023 0301 	bic.w	r3, r3, #1
 800d900:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d90e:	f3ef 8305 	mrs	r3, IPSR
 800d912:	60bb      	str	r3, [r7, #8]
  return(result);
 800d914:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d91a:	f06f 0305 	mvn.w	r3, #5
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e01f      	b.n	800d962 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d103      	bne.n	800d930 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d928:	f06f 0303 	mvn.w	r3, #3
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e018      	b.n	800d962 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d936:	6938      	ldr	r0, [r7, #16]
 800d938:	f7fc ffb4 	bl	800a8a4 <xQueueGiveMutexRecursive>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d00f      	beq.n	800d962 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d942:	f06f 0302 	mvn.w	r3, #2
 800d946:	617b      	str	r3, [r7, #20]
 800d948:	e00b      	b.n	800d962 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d94a:	2300      	movs	r3, #0
 800d94c:	2200      	movs	r2, #0
 800d94e:	2100      	movs	r1, #0
 800d950:	6938      	ldr	r0, [r7, #16]
 800d952:	f7fd f87b 	bl	800aa4c <xQueueGenericSend>
 800d956:	4603      	mov	r3, r0
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d002      	beq.n	800d962 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d95c:	f06f 0302 	mvn.w	r3, #2
 800d960:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d962:	697b      	ldr	r3, [r7, #20]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3718      	adds	r7, #24
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	; 0x28
 800d970:	af02      	add	r7, sp, #8
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d97c:	f3ef 8305 	mrs	r3, IPSR
 800d980:	613b      	str	r3, [r7, #16]
  return(result);
 800d982:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d984:	2b00      	cmp	r3, #0
 800d986:	d175      	bne.n	800da74 <osSemaphoreNew+0x108>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d072      	beq.n	800da74 <osSemaphoreNew+0x108>
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	429a      	cmp	r2, r3
 800d994:	d86e      	bhi.n	800da74 <osSemaphoreNew+0x108>
    mem = -1;
 800d996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d99a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d015      	beq.n	800d9ce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d006      	beq.n	800d9b8 <osSemaphoreNew+0x4c>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	2b4f      	cmp	r3, #79	; 0x4f
 800d9b0:	d902      	bls.n	800d9b8 <osSemaphoreNew+0x4c>
        mem = 1;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	61bb      	str	r3, [r7, #24]
 800d9b6:	e00c      	b.n	800d9d2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d108      	bne.n	800d9d2 <osSemaphoreNew+0x66>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <osSemaphoreNew+0x66>
          mem = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	61bb      	str	r3, [r7, #24]
 800d9cc:	e001      	b.n	800d9d2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9d8:	d04c      	beq.n	800da74 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d128      	bne.n	800da32 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d10a      	bne.n	800d9fc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	2203      	movs	r2, #3
 800d9ec:	9200      	str	r2, [sp, #0]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	2001      	movs	r0, #1
 800d9f4:	f7fc fe34 	bl	800a660 <xQueueGenericCreateStatic>
 800d9f8:	61f8      	str	r0, [r7, #28]
 800d9fa:	e005      	b.n	800da08 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	2100      	movs	r1, #0
 800da00:	2001      	movs	r0, #1
 800da02:	f7fc fea5 	bl	800a750 <xQueueGenericCreate>
 800da06:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d022      	beq.n	800da54 <osSemaphoreNew+0xe8>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01f      	beq.n	800da54 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da14:	2300      	movs	r3, #0
 800da16:	2200      	movs	r2, #0
 800da18:	2100      	movs	r1, #0
 800da1a:	69f8      	ldr	r0, [r7, #28]
 800da1c:	f7fd f816 	bl	800aa4c <xQueueGenericSend>
 800da20:	4603      	mov	r3, r0
 800da22:	2b01      	cmp	r3, #1
 800da24:	d016      	beq.n	800da54 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800da26:	69f8      	ldr	r0, [r7, #28]
 800da28:	f7fd fcde 	bl	800b3e8 <vQueueDelete>
            hSemaphore = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	e010      	b.n	800da54 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d108      	bne.n	800da4a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	461a      	mov	r2, r3
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7fc ff99 	bl	800a978 <xQueueCreateCountingSemaphoreStatic>
 800da46:	61f8      	str	r0, [r7, #28]
 800da48:	e004      	b.n	800da54 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7fc ffca 	bl	800a9e6 <xQueueCreateCountingSemaphore>
 800da52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00c      	beq.n	800da74 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <osSemaphoreNew+0xfc>
          name = attr->name;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	e001      	b.n	800da6c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800da6c:	6979      	ldr	r1, [r7, #20]
 800da6e:	69f8      	ldr	r0, [r7, #28]
 800da70:	f7fd fe06 	bl	800b680 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800da74:	69fb      	ldr	r3, [r7, #28]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3720      	adds	r7, #32
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800da8e:	2300      	movs	r3, #0
 800da90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d103      	bne.n	800daa0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800da98:	f06f 0303 	mvn.w	r3, #3
 800da9c:	617b      	str	r3, [r7, #20]
 800da9e:	e039      	b.n	800db14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daa0:	f3ef 8305 	mrs	r3, IPSR
 800daa4:	60fb      	str	r3, [r7, #12]
  return(result);
 800daa6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d022      	beq.n	800daf2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d003      	beq.n	800daba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dab2:	f06f 0303 	mvn.w	r3, #3
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	e02c      	b.n	800db14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800daba:	2300      	movs	r3, #0
 800dabc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dabe:	f107 0308 	add.w	r3, r7, #8
 800dac2:	461a      	mov	r2, r3
 800dac4:	2100      	movs	r1, #0
 800dac6:	6938      	ldr	r0, [r7, #16]
 800dac8:	f7fd fbd2 	bl	800b270 <xQueueReceiveFromISR>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d003      	beq.n	800dada <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dad2:	f06f 0302 	mvn.w	r3, #2
 800dad6:	617b      	str	r3, [r7, #20]
 800dad8:	e01c      	b.n	800db14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d019      	beq.n	800db14 <osSemaphoreAcquire+0x94>
 800dae0:	4b0f      	ldr	r3, [pc, #60]	; (800db20 <osSemaphoreAcquire+0xa0>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	e010      	b.n	800db14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6938      	ldr	r0, [r7, #16]
 800daf6:	f7fd faaf 	bl	800b058 <xQueueSemaphoreTake>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d009      	beq.n	800db14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800db06:	f06f 0301 	mvn.w	r3, #1
 800db0a:	617b      	str	r3, [r7, #20]
 800db0c:	e002      	b.n	800db14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800db0e:	f06f 0302 	mvn.w	r3, #2
 800db12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800db14:	697b      	ldr	r3, [r7, #20]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	e000ed04 	.word	0xe000ed04

0800db24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800db30:	2300      	movs	r3, #0
 800db32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d103      	bne.n	800db42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800db3a:	f06f 0303 	mvn.w	r3, #3
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	e02c      	b.n	800db9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db42:	f3ef 8305 	mrs	r3, IPSR
 800db46:	60fb      	str	r3, [r7, #12]
  return(result);
 800db48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01a      	beq.n	800db84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800db4e:	2300      	movs	r3, #0
 800db50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	4619      	mov	r1, r3
 800db58:	6938      	ldr	r0, [r7, #16]
 800db5a:	f7fd f910 	bl	800ad7e <xQueueGiveFromISR>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b01      	cmp	r3, #1
 800db62:	d003      	beq.n	800db6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800db64:	f06f 0302 	mvn.w	r3, #2
 800db68:	617b      	str	r3, [r7, #20]
 800db6a:	e017      	b.n	800db9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d014      	beq.n	800db9c <osSemaphoreRelease+0x78>
 800db72:	4b0d      	ldr	r3, [pc, #52]	; (800dba8 <osSemaphoreRelease+0x84>)
 800db74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	e00b      	b.n	800db9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800db84:	2300      	movs	r3, #0
 800db86:	2200      	movs	r2, #0
 800db88:	2100      	movs	r1, #0
 800db8a:	6938      	ldr	r0, [r7, #16]
 800db8c:	f7fc ff5e 	bl	800aa4c <xQueueGenericSend>
 800db90:	4603      	mov	r3, r0
 800db92:	2b01      	cmp	r3, #1
 800db94:	d002      	beq.n	800db9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800db96:	f06f 0302 	mvn.w	r3, #2
 800db9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800db9c:	697b      	ldr	r3, [r7, #20]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	e000ed04 	.word	0xe000ed04

0800dbac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbb8:	f3ef 8305 	mrs	r3, IPSR
 800dbbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d003      	beq.n	800dbcc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800dbc4:	f06f 0305 	mvn.w	r3, #5
 800dbc8:	617b      	str	r3, [r7, #20]
 800dbca:	e00e      	b.n	800dbea <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d103      	bne.n	800dbda <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800dbd2:	f06f 0303 	mvn.w	r3, #3
 800dbd6:	617b      	str	r3, [r7, #20]
 800dbd8:	e007      	b.n	800dbea <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800dbda:	6938      	ldr	r0, [r7, #16]
 800dbdc:	f7fd fd7a 	bl	800b6d4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800dbe4:	6938      	ldr	r0, [r7, #16]
 800dbe6:	f7fd fbff 	bl	800b3e8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800dbea:	697b      	ldr	r3, [r7, #20]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	; 0x28
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc00:	2300      	movs	r3, #0
 800dc02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc04:	f3ef 8305 	mrs	r3, IPSR
 800dc08:	613b      	str	r3, [r7, #16]
  return(result);
 800dc0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d15f      	bne.n	800dcd0 <osMessageQueueNew+0xdc>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d05c      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d059      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
    mem = -1;
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d029      	beq.n	800dc7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d012      	beq.n	800dc56 <osMessageQueueNew+0x62>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	2b4f      	cmp	r3, #79	; 0x4f
 800dc36:	d90e      	bls.n	800dc56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00a      	beq.n	800dc56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	695a      	ldr	r2, [r3, #20]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	fb01 f303 	mul.w	r3, r1, r3
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d302      	bcc.n	800dc56 <osMessageQueueNew+0x62>
        mem = 1;
 800dc50:	2301      	movs	r3, #1
 800dc52:	61bb      	str	r3, [r7, #24]
 800dc54:	e014      	b.n	800dc80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d110      	bne.n	800dc80 <osMessageQueueNew+0x8c>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10c      	bne.n	800dc80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d108      	bne.n	800dc80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <osMessageQueueNew+0x8c>
          mem = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	e001      	b.n	800dc80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d10b      	bne.n	800dc9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	2100      	movs	r1, #0
 800dc90:	9100      	str	r1, [sp, #0]
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f7fc fce3 	bl	800a660 <xQueueGenericCreateStatic>
 800dc9a:	61f8      	str	r0, [r7, #28]
 800dc9c:	e008      	b.n	800dcb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d105      	bne.n	800dcb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dca4:	2200      	movs	r2, #0
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7fc fd51 	bl	800a750 <xQueueGenericCreate>
 800dcae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e001      	b.n	800dcc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dcc8:	6979      	ldr	r1, [r7, #20]
 800dcca:	69f8      	ldr	r0, [r7, #28]
 800dccc:	f7fd fcd8 	bl	800b680 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dcd0:	69fb      	ldr	r3, [r7, #28]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
	...

0800dcdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	4613      	mov	r3, r2
 800dcea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf4:	f3ef 8305 	mrs	r3, IPSR
 800dcf8:	617b      	str	r3, [r7, #20]
  return(result);
 800dcfa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d028      	beq.n	800dd52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <osMessageQueuePut+0x36>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <osMessageQueuePut+0x36>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dd12:	f06f 0303 	mvn.w	r3, #3
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	e038      	b.n	800dd8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd1e:	f107 0210 	add.w	r2, r7, #16
 800dd22:	2300      	movs	r3, #0
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	69b8      	ldr	r0, [r7, #24]
 800dd28:	f7fc ff8e 	bl	800ac48 <xQueueGenericSendFromISR>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d003      	beq.n	800dd3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dd32:	f06f 0302 	mvn.w	r3, #2
 800dd36:	61fb      	str	r3, [r7, #28]
 800dd38:	e028      	b.n	800dd8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d025      	beq.n	800dd8c <osMessageQueuePut+0xb0>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <osMessageQueuePut+0xbc>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e01c      	b.n	800dd8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <osMessageQueuePut+0x82>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d103      	bne.n	800dd66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dd5e:	f06f 0303 	mvn.w	r3, #3
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	e012      	b.n	800dd8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd66:	2300      	movs	r3, #0
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	69b8      	ldr	r0, [r7, #24]
 800dd6e:	f7fc fe6d 	bl	800aa4c <xQueueGenericSend>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d009      	beq.n	800dd8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd7e:	f06f 0301 	mvn.w	r3, #1
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	e002      	b.n	800dd8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd86:	f06f 0302 	mvn.w	r3, #2
 800dd8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd8c:	69fb      	ldr	r3, [r7, #28]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3720      	adds	r7, #32
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddb2:	f3ef 8305 	mrs	r3, IPSR
 800ddb6:	617b      	str	r3, [r7, #20]
  return(result);
 800ddb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d028      	beq.n	800de10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <osMessageQueueGet+0x34>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d002      	beq.n	800ddd0 <osMessageQueueGet+0x34>
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d003      	beq.n	800ddd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ddd0:	f06f 0303 	mvn.w	r3, #3
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	e037      	b.n	800de48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dddc:	f107 0310 	add.w	r3, r7, #16
 800dde0:	461a      	mov	r2, r3
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	69b8      	ldr	r0, [r7, #24]
 800dde6:	f7fd fa43 	bl	800b270 <xQueueReceiveFromISR>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d003      	beq.n	800ddf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ddf0:	f06f 0302 	mvn.w	r3, #2
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	e027      	b.n	800de48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d024      	beq.n	800de48 <osMessageQueueGet+0xac>
 800ddfe:	4b15      	ldr	r3, [pc, #84]	; (800de54 <osMessageQueueGet+0xb8>)
 800de00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	e01b      	b.n	800de48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <osMessageQueueGet+0x80>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d103      	bne.n	800de24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800de1c:	f06f 0303 	mvn.w	r3, #3
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	e011      	b.n	800de48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	69b8      	ldr	r0, [r7, #24]
 800de2a:	f7fd f835 	bl	800ae98 <xQueueReceive>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b01      	cmp	r3, #1
 800de32:	d009      	beq.n	800de48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800de3a:	f06f 0301 	mvn.w	r3, #1
 800de3e:	61fb      	str	r3, [r7, #28]
 800de40:	e002      	b.n	800de48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800de42:	f06f 0302 	mvn.w	r3, #2
 800de46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800de48:	69fb      	ldr	r3, [r7, #28]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3720      	adds	r7, #32
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	e000ed04 	.word	0xe000ed04

0800de58 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d102      	bne.n	800de70 <osMessageQueueGetCount+0x18>
    count = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e00e      	b.n	800de8e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de70:	f3ef 8305 	mrs	r3, IPSR
 800de74:	60fb      	str	r3, [r7, #12]
  return(result);
 800de76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d004      	beq.n	800de86 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800de7c:	6938      	ldr	r0, [r7, #16]
 800de7e:	f7fd fa95 	bl	800b3ac <uxQueueMessagesWaitingFromISR>
 800de82:	6178      	str	r0, [r7, #20]
 800de84:	e003      	b.n	800de8e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800de86:	6938      	ldr	r0, [r7, #16]
 800de88:	f7fd fa72 	bl	800b370 <uxQueueMessagesWaiting>
 800de8c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800de8e:	697b      	ldr	r3, [r7, #20]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dea4:	f3ef 8305 	mrs	r3, IPSR
 800dea8:	60fb      	str	r3, [r7, #12]
  return(result);
 800deaa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800deb0:	f06f 0305 	mvn.w	r3, #5
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	e00e      	b.n	800ded6 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d103      	bne.n	800dec6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800debe:	f06f 0303 	mvn.w	r3, #3
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	e007      	b.n	800ded6 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800dec6:	6938      	ldr	r0, [r7, #16]
 800dec8:	f7fd fc04 	bl	800b6d4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800ded0:	6938      	ldr	r0, [r7, #16]
 800ded2:	f7fd fa89 	bl	800b3e8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ded6:	697b      	ldr	r3, [r7, #20]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4a07      	ldr	r2, [pc, #28]	; (800df0c <vApplicationGetIdleTaskMemory+0x2c>)
 800def0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	4a06      	ldr	r2, [pc, #24]	; (800df10 <vApplicationGetIdleTaskMemory+0x30>)
 800def6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	bf00      	nop
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20001240 	.word	0x20001240
 800df10:	2000129c 	.word	0x2000129c

0800df14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	4a07      	ldr	r2, [pc, #28]	; (800df40 <vApplicationGetTimerTaskMemory+0x2c>)
 800df24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4a06      	ldr	r2, [pc, #24]	; (800df44 <vApplicationGetTimerTaskMemory+0x30>)
 800df2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df32:	601a      	str	r2, [r3, #0]
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	20001a9c 	.word	0x20001a9c
 800df44:	20001af8 	.word	0x20001af8

0800df48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08a      	sub	sp, #40	; 0x28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df50:	2300      	movs	r3, #0
 800df52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df54:	f7fd ff30 	bl	800bdb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df58:	4b5b      	ldr	r3, [pc, #364]	; (800e0c8 <pvPortMalloc+0x180>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df60:	f000 f920 	bl	800e1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df64:	4b59      	ldr	r3, [pc, #356]	; (800e0cc <pvPortMalloc+0x184>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4013      	ands	r3, r2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f040 8093 	bne.w	800e098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01d      	beq.n	800dfb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df78:	2208      	movs	r2, #8
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4413      	add	r3, r2
 800df7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	2b00      	cmp	r3, #0
 800df88:	d014      	beq.n	800dfb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f023 0307 	bic.w	r3, r3, #7
 800df90:	3308      	adds	r3, #8
 800df92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <pvPortMalloc+0x6c>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	617b      	str	r3, [r7, #20]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d06e      	beq.n	800e098 <pvPortMalloc+0x150>
 800dfba:	4b45      	ldr	r3, [pc, #276]	; (800e0d0 <pvPortMalloc+0x188>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d869      	bhi.n	800e098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfc4:	4b43      	ldr	r3, [pc, #268]	; (800e0d4 <pvPortMalloc+0x18c>)
 800dfc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfc8:	4b42      	ldr	r3, [pc, #264]	; (800e0d4 <pvPortMalloc+0x18c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfce:	e004      	b.n	800dfda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d903      	bls.n	800dfec <pvPortMalloc+0xa4>
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1f1      	bne.n	800dfd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfec:	4b36      	ldr	r3, [pc, #216]	; (800e0c8 <pvPortMalloc+0x180>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d050      	beq.n	800e098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2208      	movs	r2, #8
 800dffc:	4413      	add	r3, r2
 800dffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	1ad2      	subs	r2, r2, r3
 800e010:	2308      	movs	r3, #8
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	429a      	cmp	r2, r3
 800e016:	d91f      	bls.n	800e058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4413      	add	r3, r2
 800e01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <pvPortMalloc+0xf8>
	__asm volatile
 800e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	613b      	str	r3, [r7, #16]
}
 800e03c:	bf00      	nop
 800e03e:	e7fe      	b.n	800e03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e052:	69b8      	ldr	r0, [r7, #24]
 800e054:	f000 f908 	bl	800e268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e058:	4b1d      	ldr	r3, [pc, #116]	; (800e0d0 <pvPortMalloc+0x188>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	4a1b      	ldr	r2, [pc, #108]	; (800e0d0 <pvPortMalloc+0x188>)
 800e064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e066:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <pvPortMalloc+0x188>)
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	4b1b      	ldr	r3, [pc, #108]	; (800e0d8 <pvPortMalloc+0x190>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d203      	bcs.n	800e07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e072:	4b17      	ldr	r3, [pc, #92]	; (800e0d0 <pvPortMalloc+0x188>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a18      	ldr	r2, [pc, #96]	; (800e0d8 <pvPortMalloc+0x190>)
 800e078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	4b13      	ldr	r3, [pc, #76]	; (800e0cc <pvPortMalloc+0x184>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	431a      	orrs	r2, r3
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	2200      	movs	r2, #0
 800e08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e08e:	4b13      	ldr	r3, [pc, #76]	; (800e0dc <pvPortMalloc+0x194>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3301      	adds	r3, #1
 800e094:	4a11      	ldr	r2, [pc, #68]	; (800e0dc <pvPortMalloc+0x194>)
 800e096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e098:	f7fd fe9c 	bl	800bdd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <pvPortMalloc+0x174>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	60fb      	str	r3, [r7, #12]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <pvPortMalloc+0x172>
	return pvReturn;
 800e0bc:	69fb      	ldr	r3, [r7, #28]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3728      	adds	r7, #40	; 0x28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	20008f00 	.word	0x20008f00
 800e0cc:	20008f14 	.word	0x20008f14
 800e0d0:	20008f04 	.word	0x20008f04
 800e0d4:	20008ef8 	.word	0x20008ef8
 800e0d8:	20008f08 	.word	0x20008f08
 800e0dc:	20008f0c 	.word	0x20008f0c

0800e0e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d04d      	beq.n	800e18e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0f2:	2308      	movs	r3, #8
 800e0f4:	425b      	negs	r3, r3
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	4b24      	ldr	r3, [pc, #144]	; (800e198 <vPortFree+0xb8>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4013      	ands	r3, r2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <vPortFree+0x44>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60fb      	str	r3, [r7, #12]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00a      	beq.n	800e142 <vPortFree+0x62>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	60bb      	str	r3, [r7, #8]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	4b14      	ldr	r3, [pc, #80]	; (800e198 <vPortFree+0xb8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4013      	ands	r3, r2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01e      	beq.n	800e18e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d11a      	bne.n	800e18e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <vPortFree+0xb8>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	43db      	mvns	r3, r3
 800e162:	401a      	ands	r2, r3
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e168:	f7fd fe26 	bl	800bdb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <vPortFree+0xbc>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4413      	add	r3, r2
 800e176:	4a09      	ldr	r2, [pc, #36]	; (800e19c <vPortFree+0xbc>)
 800e178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f000 f874 	bl	800e268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <vPortFree+0xc0>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3301      	adds	r3, #1
 800e186:	4a06      	ldr	r2, [pc, #24]	; (800e1a0 <vPortFree+0xc0>)
 800e188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e18a:	f7fd fe23 	bl	800bdd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e18e:	bf00      	nop
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20008f14 	.word	0x20008f14
 800e19c:	20008f04 	.word	0x20008f04
 800e1a0:	20008f10 	.word	0x20008f10

0800e1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1aa:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1b0:	4b27      	ldr	r3, [pc, #156]	; (800e250 <prvHeapInit+0xac>)
 800e1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00c      	beq.n	800e1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3307      	adds	r3, #7
 800e1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f023 0307 	bic.w	r3, r3, #7
 800e1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	4a1f      	ldr	r2, [pc, #124]	; (800e250 <prvHeapInit+0xac>)
 800e1d4:	4413      	add	r3, r2
 800e1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1dc:	4a1d      	ldr	r2, [pc, #116]	; (800e254 <prvHeapInit+0xb0>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1e2:	4b1c      	ldr	r3, [pc, #112]	; (800e254 <prvHeapInit+0xb0>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1f0:	2208      	movs	r2, #8
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	1a9b      	subs	r3, r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f023 0307 	bic.w	r3, r3, #7
 800e1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a15      	ldr	r2, [pc, #84]	; (800e258 <prvHeapInit+0xb4>)
 800e204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e206:	4b14      	ldr	r3, [pc, #80]	; (800e258 <prvHeapInit+0xb4>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2200      	movs	r2, #0
 800e20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <prvHeapInit+0xb4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e224:	4b0c      	ldr	r3, [pc, #48]	; (800e258 <prvHeapInit+0xb4>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <prvHeapInit+0xb8>)
 800e232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	4a09      	ldr	r2, [pc, #36]	; (800e260 <prvHeapInit+0xbc>)
 800e23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e23c:	4b09      	ldr	r3, [pc, #36]	; (800e264 <prvHeapInit+0xc0>)
 800e23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e242:	601a      	str	r2, [r3, #0]
}
 800e244:	bf00      	nop
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	20002af8 	.word	0x20002af8
 800e254:	20008ef8 	.word	0x20008ef8
 800e258:	20008f00 	.word	0x20008f00
 800e25c:	20008f08 	.word	0x20008f08
 800e260:	20008f04 	.word	0x20008f04
 800e264:	20008f14 	.word	0x20008f14

0800e268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e270:	4b28      	ldr	r3, [pc, #160]	; (800e314 <prvInsertBlockIntoFreeList+0xac>)
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	e002      	b.n	800e27c <prvInsertBlockIntoFreeList+0x14>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	429a      	cmp	r2, r3
 800e284:	d8f7      	bhi.n	800e276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	4413      	add	r3, r2
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	429a      	cmp	r2, r3
 800e296:	d108      	bne.n	800e2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	441a      	add	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	441a      	add	r2, r3
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d118      	bne.n	800e2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	4b15      	ldr	r3, [pc, #84]	; (800e318 <prvInsertBlockIntoFreeList+0xb0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d00d      	beq.n	800e2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685a      	ldr	r2, [r3, #4]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	441a      	add	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	e008      	b.n	800e2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2e6:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <prvInsertBlockIntoFreeList+0xb0>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	e003      	b.n	800e2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d002      	beq.n	800e306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e306:	bf00      	nop
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	20008ef8 	.word	0x20008ef8
 800e318:	20008f00 	.word	0x20008f00

0800e31c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3b04      	subs	r3, #4
 800e32c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	3b04      	subs	r3, #4
 800e33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f023 0201 	bic.w	r2, r3, #1
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3b04      	subs	r3, #4
 800e34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e34c:	4a0c      	ldr	r2, [pc, #48]	; (800e380 <pxPortInitialiseStack+0x64>)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3b14      	subs	r3, #20
 800e356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3b04      	subs	r3, #4
 800e362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f06f 0202 	mvn.w	r2, #2
 800e36a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3b20      	subs	r3, #32
 800e370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e372:	68fb      	ldr	r3, [r7, #12]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	0800e385 	.word	0x0800e385

0800e384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e38e:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <prvTaskExitError+0x54>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e396:	d00a      	beq.n	800e3ae <prvTaskExitError+0x2a>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	60fb      	str	r3, [r7, #12]
}
 800e3aa:	bf00      	nop
 800e3ac:	e7fe      	b.n	800e3ac <prvTaskExitError+0x28>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	60bb      	str	r3, [r7, #8]
}
 800e3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3c2:	bf00      	nop
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0fc      	beq.n	800e3c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3ca:	bf00      	nop
 800e3cc:	bf00      	nop
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	2000002c 	.word	0x2000002c
 800e3dc:	00000000 	.word	0x00000000

0800e3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3e0:	4b07      	ldr	r3, [pc, #28]	; (800e400 <pxCurrentTCBConst2>)
 800e3e2:	6819      	ldr	r1, [r3, #0]
 800e3e4:	6808      	ldr	r0, [r1, #0]
 800e3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ea:	f380 8809 	msr	PSP, r0
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f04f 0000 	mov.w	r0, #0
 800e3f6:	f380 8811 	msr	BASEPRI, r0
 800e3fa:	4770      	bx	lr
 800e3fc:	f3af 8000 	nop.w

0800e400 <pxCurrentTCBConst2>:
 800e400:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop

0800e408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e408:	4808      	ldr	r0, [pc, #32]	; (800e42c <prvPortStartFirstTask+0x24>)
 800e40a:	6800      	ldr	r0, [r0, #0]
 800e40c:	6800      	ldr	r0, [r0, #0]
 800e40e:	f380 8808 	msr	MSP, r0
 800e412:	f04f 0000 	mov.w	r0, #0
 800e416:	f380 8814 	msr	CONTROL, r0
 800e41a:	b662      	cpsie	i
 800e41c:	b661      	cpsie	f
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	df00      	svc	0
 800e428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e42a:	bf00      	nop
 800e42c:	e000ed08 	.word	0xe000ed08

0800e430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e436:	4b46      	ldr	r3, [pc, #280]	; (800e550 <xPortStartScheduler+0x120>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a46      	ldr	r2, [pc, #280]	; (800e554 <xPortStartScheduler+0x124>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d10a      	bne.n	800e456 <xPortStartScheduler+0x26>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	613b      	str	r3, [r7, #16]
}
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e456:	4b3e      	ldr	r3, [pc, #248]	; (800e550 <xPortStartScheduler+0x120>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a3f      	ldr	r2, [pc, #252]	; (800e558 <xPortStartScheduler+0x128>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d10a      	bne.n	800e476 <xPortStartScheduler+0x46>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	60fb      	str	r3, [r7, #12]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e476:	4b39      	ldr	r3, [pc, #228]	; (800e55c <xPortStartScheduler+0x12c>)
 800e478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	22ff      	movs	r2, #255	; 0xff
 800e486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e490:	78fb      	ldrb	r3, [r7, #3]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	4b31      	ldr	r3, [pc, #196]	; (800e560 <xPortStartScheduler+0x130>)
 800e49c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e49e:	4b31      	ldr	r3, [pc, #196]	; (800e564 <xPortStartScheduler+0x134>)
 800e4a0:	2207      	movs	r2, #7
 800e4a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4a4:	e009      	b.n	800e4ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e4a6:	4b2f      	ldr	r3, [pc, #188]	; (800e564 <xPortStartScheduler+0x134>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	4a2d      	ldr	r2, [pc, #180]	; (800e564 <xPortStartScheduler+0x134>)
 800e4ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4b0:	78fb      	ldrb	r3, [r7, #3]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	005b      	lsls	r3, r3, #1
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4ba:	78fb      	ldrb	r3, [r7, #3]
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4c2:	2b80      	cmp	r3, #128	; 0x80
 800e4c4:	d0ef      	beq.n	800e4a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4c6:	4b27      	ldr	r3, [pc, #156]	; (800e564 <xPortStartScheduler+0x134>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f1c3 0307 	rsb	r3, r3, #7
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	d00a      	beq.n	800e4e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	60bb      	str	r3, [r7, #8]
}
 800e4e4:	bf00      	nop
 800e4e6:	e7fe      	b.n	800e4e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4e8:	4b1e      	ldr	r3, [pc, #120]	; (800e564 <xPortStartScheduler+0x134>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	021b      	lsls	r3, r3, #8
 800e4ee:	4a1d      	ldr	r2, [pc, #116]	; (800e564 <xPortStartScheduler+0x134>)
 800e4f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4f2:	4b1c      	ldr	r3, [pc, #112]	; (800e564 <xPortStartScheduler+0x134>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4fa:	4a1a      	ldr	r2, [pc, #104]	; (800e564 <xPortStartScheduler+0x134>)
 800e4fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	b2da      	uxtb	r2, r3
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e506:	4b18      	ldr	r3, [pc, #96]	; (800e568 <xPortStartScheduler+0x138>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a17      	ldr	r2, [pc, #92]	; (800e568 <xPortStartScheduler+0x138>)
 800e50c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e512:	4b15      	ldr	r3, [pc, #84]	; (800e568 <xPortStartScheduler+0x138>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a14      	ldr	r2, [pc, #80]	; (800e568 <xPortStartScheduler+0x138>)
 800e518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e51c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e51e:	f000 f8dd 	bl	800e6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e522:	4b12      	ldr	r3, [pc, #72]	; (800e56c <xPortStartScheduler+0x13c>)
 800e524:	2200      	movs	r2, #0
 800e526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e528:	f000 f8fc 	bl	800e724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e52c:	4b10      	ldr	r3, [pc, #64]	; (800e570 <xPortStartScheduler+0x140>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a0f      	ldr	r2, [pc, #60]	; (800e570 <xPortStartScheduler+0x140>)
 800e532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e538:	f7ff ff66 	bl	800e408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e53c:	f7fd fe52 	bl	800c1e4 <vTaskSwitchContext>
	prvTaskExitError();
 800e540:	f7ff ff20 	bl	800e384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	e000ed00 	.word	0xe000ed00
 800e554:	410fc271 	.word	0x410fc271
 800e558:	410fc270 	.word	0x410fc270
 800e55c:	e000e400 	.word	0xe000e400
 800e560:	20008f18 	.word	0x20008f18
 800e564:	20008f1c 	.word	0x20008f1c
 800e568:	e000ed20 	.word	0xe000ed20
 800e56c:	2000002c 	.word	0x2000002c
 800e570:	e000ef34 	.word	0xe000ef34

0800e574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	607b      	str	r3, [r7, #4]
}
 800e58c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e58e:	4b0f      	ldr	r3, [pc, #60]	; (800e5cc <vPortEnterCritical+0x58>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3301      	adds	r3, #1
 800e594:	4a0d      	ldr	r2, [pc, #52]	; (800e5cc <vPortEnterCritical+0x58>)
 800e596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e598:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <vPortEnterCritical+0x58>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d10f      	bne.n	800e5c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <vPortEnterCritical+0x5c>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00a      	beq.n	800e5c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	603b      	str	r3, [r7, #0]
}
 800e5bc:	bf00      	nop
 800e5be:	e7fe      	b.n	800e5be <vPortEnterCritical+0x4a>
	}
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	2000002c 	.word	0x2000002c
 800e5d0:	e000ed04 	.word	0xe000ed04

0800e5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5da:	4b12      	ldr	r3, [pc, #72]	; (800e624 <vPortExitCritical+0x50>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10a      	bne.n	800e5f8 <vPortExitCritical+0x24>
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	607b      	str	r3, [r7, #4]
}
 800e5f4:	bf00      	nop
 800e5f6:	e7fe      	b.n	800e5f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5f8:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <vPortExitCritical+0x50>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	4a09      	ldr	r2, [pc, #36]	; (800e624 <vPortExitCritical+0x50>)
 800e600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e602:	4b08      	ldr	r3, [pc, #32]	; (800e624 <vPortExitCritical+0x50>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d105      	bne.n	800e616 <vPortExitCritical+0x42>
 800e60a:	2300      	movs	r3, #0
 800e60c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	f383 8811 	msr	BASEPRI, r3
}
 800e614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e616:	bf00      	nop
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	2000002c 	.word	0x2000002c
	...

0800e630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e630:	f3ef 8009 	mrs	r0, PSP
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	4b15      	ldr	r3, [pc, #84]	; (800e690 <pxCurrentTCBConst>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	f01e 0f10 	tst.w	lr, #16
 800e640:	bf08      	it	eq
 800e642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64a:	6010      	str	r0, [r2, #0]
 800e64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e654:	f380 8811 	msr	BASEPRI, r0
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f7fd fdc0 	bl	800c1e4 <vTaskSwitchContext>
 800e664:	f04f 0000 	mov.w	r0, #0
 800e668:	f380 8811 	msr	BASEPRI, r0
 800e66c:	bc09      	pop	{r0, r3}
 800e66e:	6819      	ldr	r1, [r3, #0]
 800e670:	6808      	ldr	r0, [r1, #0]
 800e672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e676:	f01e 0f10 	tst.w	lr, #16
 800e67a:	bf08      	it	eq
 800e67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e680:	f380 8809 	msr	PSP, r0
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w

0800e690 <pxCurrentTCBConst>:
 800e690:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop

0800e698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	607b      	str	r3, [r7, #4]
}
 800e6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6b2:	f7fd fcdd 	bl	800c070 <xTaskIncrementTick>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d003      	beq.n	800e6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6bc:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <xPortSysTickHandler+0x40>)
 800e6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	f383 8811 	msr	BASEPRI, r3
}
 800e6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	e000ed04 	.word	0xe000ed04

0800e6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6dc:	b480      	push	{r7}
 800e6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6e0:	4b0b      	ldr	r3, [pc, #44]	; (800e710 <vPortSetupTimerInterrupt+0x34>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6e6:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <vPortSetupTimerInterrupt+0x38>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <vPortSetupTimerInterrupt+0x3c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <vPortSetupTimerInterrupt+0x40>)
 800e6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f6:	099b      	lsrs	r3, r3, #6
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <vPortSetupTimerInterrupt+0x44>)
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6fe:	4b04      	ldr	r3, [pc, #16]	; (800e710 <vPortSetupTimerInterrupt+0x34>)
 800e700:	2207      	movs	r2, #7
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	bf00      	nop
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	e000e010 	.word	0xe000e010
 800e714:	e000e018 	.word	0xe000e018
 800e718:	2000001c 	.word	0x2000001c
 800e71c:	10624dd3 	.word	0x10624dd3
 800e720:	e000e014 	.word	0xe000e014

0800e724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e734 <vPortEnableVFP+0x10>
 800e728:	6801      	ldr	r1, [r0, #0]
 800e72a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e72e:	6001      	str	r1, [r0, #0]
 800e730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e732:	bf00      	nop
 800e734:	e000ed88 	.word	0xe000ed88

0800e738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e73e:	f3ef 8305 	mrs	r3, IPSR
 800e742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b0f      	cmp	r3, #15
 800e748:	d914      	bls.n	800e774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e74a:	4a17      	ldr	r2, [pc, #92]	; (800e7a8 <vPortValidateInterruptPriority+0x70>)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	4413      	add	r3, r2
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e754:	4b15      	ldr	r3, [pc, #84]	; (800e7ac <vPortValidateInterruptPriority+0x74>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	7afa      	ldrb	r2, [r7, #11]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d20a      	bcs.n	800e774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	607b      	str	r3, [r7, #4]
}
 800e770:	bf00      	nop
 800e772:	e7fe      	b.n	800e772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e774:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <vPortValidateInterruptPriority+0x78>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e77c:	4b0d      	ldr	r3, [pc, #52]	; (800e7b4 <vPortValidateInterruptPriority+0x7c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d90a      	bls.n	800e79a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	603b      	str	r3, [r7, #0]
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <vPortValidateInterruptPriority+0x60>
	}
 800e79a:	bf00      	nop
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	e000e3f0 	.word	0xe000e3f0
 800e7ac:	20008f18 	.word	0x20008f18
 800e7b0:	e000ed0c 	.word	0xe000ed0c
 800e7b4:	20008f1c 	.word	0x20008f1c

0800e7b8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	330c      	adds	r3, #12
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f002 fa71 	bl	8010cb4 <tcpip_send_msg_wait_sem>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d103      	bne.n	800e7e6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e7e4:	e001      	b.n	800e7ea <netconn_apimsg+0x32>
  }
  return err;
 800e7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
	...

0800e7f4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b08c      	sub	sp, #48	; 0x30
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	603a      	str	r2, [r7, #0]
 800e7fe:	71fb      	strb	r3, [r7, #7]
 800e800:	460b      	mov	r3, r1
 800e802:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e804:	79fb      	ldrb	r3, [r7, #7]
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	4618      	mov	r0, r3
 800e80a:	f001 f927 	bl	800fa5c <netconn_alloc>
 800e80e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d054      	beq.n	800e8c0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e816:	79bb      	ldrb	r3, [r7, #6]
 800e818:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e81e:	f107 0308 	add.w	r3, r7, #8
 800e822:	4619      	mov	r1, r3
 800e824:	4829      	ldr	r0, [pc, #164]	; (800e8cc <netconn_new_with_proto_and_callback+0xd8>)
 800e826:	f7ff ffc7 	bl	800e7b8 <netconn_apimsg>
 800e82a:	4603      	mov	r3, r0
 800e82c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e834:	2b00      	cmp	r3, #0
 800e836:	d043      	beq.n	800e8c0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d005      	beq.n	800e84c <netconn_new_with_proto_and_callback+0x58>
 800e840:	4b23      	ldr	r3, [pc, #140]	; (800e8d0 <netconn_new_with_proto_and_callback+0xdc>)
 800e842:	22a3      	movs	r2, #163	; 0xa3
 800e844:	4923      	ldr	r1, [pc, #140]	; (800e8d4 <netconn_new_with_proto_and_callback+0xe0>)
 800e846:	4824      	ldr	r0, [pc, #144]	; (800e8d8 <netconn_new_with_proto_and_callback+0xe4>)
 800e848:	f010 faa0 	bl	801ed8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	3310      	adds	r3, #16
 800e850:	4618      	mov	r0, r3
 800e852:	f00f fb1d 	bl	801de90 <sys_mbox_valid>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d105      	bne.n	800e868 <netconn_new_with_proto_and_callback+0x74>
 800e85c:	4b1c      	ldr	r3, [pc, #112]	; (800e8d0 <netconn_new_with_proto_and_callback+0xdc>)
 800e85e:	22a4      	movs	r2, #164	; 0xa4
 800e860:	491e      	ldr	r1, [pc, #120]	; (800e8dc <netconn_new_with_proto_and_callback+0xe8>)
 800e862:	481d      	ldr	r0, [pc, #116]	; (800e8d8 <netconn_new_with_proto_and_callback+0xe4>)
 800e864:	f010 fa92 	bl	801ed8c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	3314      	adds	r3, #20
 800e86c:	4618      	mov	r0, r3
 800e86e:	f00f fb0f 	bl	801de90 <sys_mbox_valid>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <netconn_new_with_proto_and_callback+0x90>
 800e878:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <netconn_new_with_proto_and_callback+0xdc>)
 800e87a:	22a6      	movs	r2, #166	; 0xa6
 800e87c:	4918      	ldr	r1, [pc, #96]	; (800e8e0 <netconn_new_with_proto_and_callback+0xec>)
 800e87e:	4816      	ldr	r0, [pc, #88]	; (800e8d8 <netconn_new_with_proto_and_callback+0xe4>)
 800e880:	f010 fa84 	bl	801ed8c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	330c      	adds	r3, #12
 800e888:	4618      	mov	r0, r3
 800e88a:	f00f fb8f 	bl	801dfac <sys_sem_valid>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <netconn_new_with_proto_and_callback+0xac>
 800e894:	4b0e      	ldr	r3, [pc, #56]	; (800e8d0 <netconn_new_with_proto_and_callback+0xdc>)
 800e896:	22a9      	movs	r2, #169	; 0xa9
 800e898:	4912      	ldr	r1, [pc, #72]	; (800e8e4 <netconn_new_with_proto_and_callback+0xf0>)
 800e89a:	480f      	ldr	r0, [pc, #60]	; (800e8d8 <netconn_new_with_proto_and_callback+0xe4>)
 800e89c:	f010 fa76 	bl	801ed8c <iprintf>
      sys_sem_free(&conn->op_completed);
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	330c      	adds	r3, #12
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f00f fb74 	bl	801df92 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ac:	3310      	adds	r3, #16
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f00f fa7a 	bl	801dda8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b6:	2007      	movs	r0, #7
 800e8b8:	f007 f962 	bl	8015b80 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	e000      	b.n	800e8c2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3730      	adds	r7, #48	; 0x30
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	0800fa31 	.word	0x0800fa31
 800e8d0:	08020668 	.word	0x08020668
 800e8d4:	08020704 	.word	0x08020704
 800e8d8:	08020728 	.word	0x08020728
 800e8dc:	08020750 	.word	0x08020750
 800e8e0:	08020768 	.word	0x08020768
 800e8e4:	0802078c 	.word	0x0802078c

0800e8e8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08c      	sub	sp, #48	; 0x30
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e014      	b.n	800e924 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e8fe:	2329      	movs	r3, #41	; 0x29
 800e900:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e902:	f107 030c 	add.w	r3, r7, #12
 800e906:	4619      	mov	r1, r3
 800e908:	4808      	ldr	r0, [pc, #32]	; (800e92c <netconn_prepare_delete+0x44>)
 800e90a:	f7ff ff55 	bl	800e7b8 <netconn_apimsg>
 800e90e:	4603      	mov	r3, r0
 800e910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e914:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <netconn_prepare_delete+0x3a>
    return err;
 800e91c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e920:	e000      	b.n	800e924 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3730      	adds	r7, #48	; 0x30
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	0800ff8d 	.word	0x0800ff8d

0800e930 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <netconn_delete+0x12>
    return ERR_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	e00d      	b.n	800e95e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff ffd0 	bl	800e8e8 <netconn_prepare_delete>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d102      	bne.n	800e95a <netconn_delete+0x2a>
    netconn_free(conn);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 f8eb 	bl	800fb30 <netconn_free>
  }
  return err;
 800e95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08e      	sub	sp, #56	; 0x38
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	4613      	mov	r3, r2
 800e974:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d109      	bne.n	800e990 <netconn_bind+0x28>
 800e97c:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <netconn_bind+0x5c>)
 800e97e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e982:	4911      	ldr	r1, [pc, #68]	; (800e9c8 <netconn_bind+0x60>)
 800e984:	4811      	ldr	r0, [pc, #68]	; (800e9cc <netconn_bind+0x64>)
 800e986:	f010 fa01 	bl	801ed8c <iprintf>
 800e98a:	f06f 030f 	mvn.w	r3, #15
 800e98e:	e015      	b.n	800e9bc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e996:	4b0e      	ldr	r3, [pc, #56]	; (800e9d0 <netconn_bind+0x68>)
 800e998:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e9a6:	f107 0314 	add.w	r3, r7, #20
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	4809      	ldr	r0, [pc, #36]	; (800e9d4 <netconn_bind+0x6c>)
 800e9ae:	f7ff ff03 	bl	800e7b8 <netconn_apimsg>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e9b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3738      	adds	r7, #56	; 0x38
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	08020668 	.word	0x08020668
 800e9c8:	08020808 	.word	0x08020808
 800e9cc:	08020728 	.word	0x08020728
 800e9d0:	08024da4 	.word	0x08024da4
 800e9d4:	08010155 	.word	0x08010155

0800e9d8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b08c      	sub	sp, #48	; 0x30
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <netconn_listen_with_backlog+0x26>
 800e9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <netconn_listen_with_backlog+0x48>)
 800e9ec:	f240 12bb 	movw	r2, #443	; 0x1bb
 800e9f0:	490c      	ldr	r1, [pc, #48]	; (800ea24 <netconn_listen_with_backlog+0x4c>)
 800e9f2:	480d      	ldr	r0, [pc, #52]	; (800ea28 <netconn_listen_with_backlog+0x50>)
 800e9f4:	f010 f9ca 	bl	801ed8c <iprintf>
 800e9f8:	f06f 030f 	mvn.w	r3, #15
 800e9fc:	e00c      	b.n	800ea18 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ea02:	f107 030c 	add.w	r3, r7, #12
 800ea06:	4619      	mov	r1, r3
 800ea08:	4808      	ldr	r0, [pc, #32]	; (800ea2c <netconn_listen_with_backlog+0x54>)
 800ea0a:	f7ff fed5 	bl	800e7b8 <netconn_apimsg>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ea14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3730      	adds	r7, #48	; 0x30
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	08020668 	.word	0x08020668
 800ea24:	08020888 	.word	0x08020888
 800ea28:	08020728 	.word	0x08020728
 800ea2c:	080101c9 	.word	0x080101c9

0800ea30 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d109      	bne.n	800ea54 <netconn_accept+0x24>
 800ea40:	4b3d      	ldr	r3, [pc, #244]	; (800eb38 <netconn_accept+0x108>)
 800ea42:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ea46:	493d      	ldr	r1, [pc, #244]	; (800eb3c <netconn_accept+0x10c>)
 800ea48:	483d      	ldr	r0, [pc, #244]	; (800eb40 <netconn_accept+0x110>)
 800ea4a:	f010 f99f 	bl	801ed8c <iprintf>
 800ea4e:	f06f 030f 	mvn.w	r3, #15
 800ea52:	e06c      	b.n	800eb2e <netconn_accept+0xfe>
  *new_conn = NULL;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d109      	bne.n	800ea74 <netconn_accept+0x44>
 800ea60:	4b35      	ldr	r3, [pc, #212]	; (800eb38 <netconn_accept+0x108>)
 800ea62:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ea66:	4937      	ldr	r1, [pc, #220]	; (800eb44 <netconn_accept+0x114>)
 800ea68:	4835      	ldr	r0, [pc, #212]	; (800eb40 <netconn_accept+0x110>)
 800ea6a:	f010 f98f 	bl	801ed8c <iprintf>
 800ea6e:	f06f 030f 	mvn.w	r3, #15
 800ea72:	e05c      	b.n	800eb2e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fb6c 	bl	800f152 <netconn_err>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ea7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ea86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea8a:	e050      	b.n	800eb2e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3314      	adds	r3, #20
 800ea90:	4618      	mov	r0, r3
 800ea92:	f00f f9fd 	bl	801de90 <sys_mbox_valid>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d005      	beq.n	800eaa8 <netconn_accept+0x78>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7e1b      	ldrb	r3, [r3, #24]
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800eaa8:	f06f 030e 	mvn.w	r3, #14
 800eaac:	e03f      	b.n	800eb2e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7e1b      	ldrb	r3, [r3, #24]
 800eab2:	f003 0302 	and.w	r3, r3, #2
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00e      	beq.n	800ead8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3314      	adds	r3, #20
 800eabe:	f107 020c 	add.w	r2, r7, #12
 800eac2:	4611      	mov	r1, r2
 800eac4:	4618      	mov	r0, r3
 800eac6:	f00f f9cc 	bl	801de62 <sys_arch_mbox_tryfetch>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead0:	d10a      	bne.n	800eae8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ead2:	f06f 0306 	mvn.w	r3, #6
 800ead6:	e02a      	b.n	800eb2e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3314      	adds	r3, #20
 800eadc:	f107 010c 	add.w	r1, r7, #12
 800eae0:	2200      	movs	r2, #0
 800eae2:	4618      	mov	r0, r3
 800eae4:	f00f f98c 	bl	801de00 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6a1b      	ldr	r3, [r3, #32]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d005      	beq.n	800eafc <netconn_accept+0xcc>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a1b      	ldr	r3, [r3, #32]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f107 0213 	add.w	r2, r7, #19
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fb75 	bl	800f1f4 <lwip_netconn_is_err_msg>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800eb10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb14:	e00b      	b.n	800eb2e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d102      	bne.n	800eb22 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800eb1c:	f06f 030e 	mvn.w	r3, #14
 800eb20:	e005      	b.n	800eb2e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800eb2c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	08020668 	.word	0x08020668
 800eb3c:	080208a8 	.word	0x080208a8
 800eb40:	08020728 	.word	0x08020728
 800eb44:	080208c8 	.word	0x080208c8

0800eb48 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b088      	sub	sp, #32
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	4613      	mov	r3, r2
 800eb54:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d109      	bne.n	800eb74 <netconn_recv_data+0x2c>
 800eb60:	4b58      	ldr	r3, [pc, #352]	; (800ecc4 <netconn_recv_data+0x17c>)
 800eb62:	f44f 7212 	mov.w	r2, #584	; 0x248
 800eb66:	4958      	ldr	r1, [pc, #352]	; (800ecc8 <netconn_recv_data+0x180>)
 800eb68:	4858      	ldr	r0, [pc, #352]	; (800eccc <netconn_recv_data+0x184>)
 800eb6a:	f010 f90f 	bl	801ed8c <iprintf>
 800eb6e:	f06f 030f 	mvn.w	r3, #15
 800eb72:	e0a2      	b.n	800ecba <netconn_recv_data+0x172>
  *new_buf = NULL;
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2200      	movs	r2, #0
 800eb78:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <netconn_recv_data+0x4c>
 800eb80:	4b50      	ldr	r3, [pc, #320]	; (800ecc4 <netconn_recv_data+0x17c>)
 800eb82:	f240 224a 	movw	r2, #586	; 0x24a
 800eb86:	4952      	ldr	r1, [pc, #328]	; (800ecd0 <netconn_recv_data+0x188>)
 800eb88:	4850      	ldr	r0, [pc, #320]	; (800eccc <netconn_recv_data+0x184>)
 800eb8a:	f010 f8ff 	bl	801ed8c <iprintf>
 800eb8e:	f06f 030f 	mvn.w	r3, #15
 800eb92:	e092      	b.n	800ecba <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	3310      	adds	r3, #16
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f00f f979 	bl	801de90 <sys_mbox_valid>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10e      	bne.n	800ebc2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 fad4 	bl	800f152 <netconn_err>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ebae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ebb6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ebba:	e07e      	b.n	800ecba <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ebbc:	f06f 030a 	mvn.w	r3, #10
 800ebc0:	e07b      	b.n	800ecba <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	7e1b      	ldrb	r3, [r3, #24]
 800ebc6:	f003 0302 	and.w	r3, r3, #2
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10f      	bne.n	800ebee <netconn_recv_data+0xa6>
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	f003 0304 	and.w	r3, r3, #4
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	7e1b      	ldrb	r3, [r3, #24]
 800ebdc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d104      	bne.n	800ebee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d023      	beq.n	800ec36 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3310      	adds	r3, #16
 800ebf2:	f107 0218 	add.w	r2, r7, #24
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f00f f932 	bl	801de62 <sys_arch_mbox_tryfetch>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec04:	d11f      	bne.n	800ec46 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f000 faa3 	bl	800f152 <netconn_err>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ec10:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ec18:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ec1c:	e04d      	b.n	800ecba <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	7e1b      	ldrb	r3, [r3, #24]
 800ec22:	f003 0301 	and.w	r3, r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ec2a:	f06f 030a 	mvn.w	r3, #10
 800ec2e:	e044      	b.n	800ecba <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ec30:	f06f 0306 	mvn.w	r3, #6
 800ec34:	e041      	b.n	800ecba <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3310      	adds	r3, #16
 800ec3a:	f107 0118 	add.w	r1, r7, #24
 800ec3e:	2200      	movs	r2, #0
 800ec40:	4618      	mov	r0, r3
 800ec42:	f00f f8dd 	bl	801de00 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec4e:	2b10      	cmp	r3, #16
 800ec50:	d117      	bne.n	800ec82 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	f107 0217 	add.w	r2, r7, #23
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f000 faca 	bl	800f1f4 <lwip_netconn_is_err_msg>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d009      	beq.n	800ec7a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ec66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec6a:	f113 0f0f 	cmn.w	r3, #15
 800ec6e:	d101      	bne.n	800ec74 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	e022      	b.n	800ecba <netconn_recv_data+0x172>
      }
      return err;
 800ec74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec78:	e01f      	b.n	800ecba <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	891b      	ldrh	r3, [r3, #8]
 800ec7e:	83fb      	strh	r3, [r7, #30]
 800ec80:	e00d      	b.n	800ec9e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d106      	bne.n	800ec96 <netconn_recv_data+0x14e>
 800ec88:	4b0e      	ldr	r3, [pc, #56]	; (800ecc4 <netconn_recv_data+0x17c>)
 800ec8a:	f240 2291 	movw	r2, #657	; 0x291
 800ec8e:	4911      	ldr	r1, [pc, #68]	; (800ecd4 <netconn_recv_data+0x18c>)
 800ec90:	480e      	ldr	r0, [pc, #56]	; (800eccc <netconn_recv_data+0x184>)
 800ec92:	f010 f87b 	bl	801ed8c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	891b      	ldrh	r3, [r3, #8]
 800ec9c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6a1b      	ldr	r3, [r3, #32]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <netconn_recv_data+0x16a>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	8bfa      	ldrh	r2, [r7, #30]
 800ecac:	2101      	movs	r1, #1
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3720      	adds	r7, #32
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	08020668 	.word	0x08020668
 800ecc8:	080208e8 	.word	0x080208e8
 800eccc:	08020728 	.word	0x08020728
 800ecd0:	08020908 	.word	0x08020908
 800ecd4:	08020924 	.word	0x08020924

0800ecd8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d005      	beq.n	800ecf6 <netconn_tcp_recvd_msg+0x1e>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecf2:	2b10      	cmp	r3, #16
 800ecf4:	d009      	beq.n	800ed0a <netconn_tcp_recvd_msg+0x32>
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <netconn_tcp_recvd_msg+0x50>)
 800ecf8:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ecfc:	490b      	ldr	r1, [pc, #44]	; (800ed2c <netconn_tcp_recvd_msg+0x54>)
 800ecfe:	480c      	ldr	r0, [pc, #48]	; (800ed30 <netconn_tcp_recvd_msg+0x58>)
 800ed00:	f010 f844 	bl	801ed8c <iprintf>
 800ed04:	f06f 030f 	mvn.w	r3, #15
 800ed08:	e00a      	b.n	800ed20 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	4806      	ldr	r0, [pc, #24]	; (800ed34 <netconn_tcp_recvd_msg+0x5c>)
 800ed1a:	f7ff fd4d 	bl	800e7b8 <netconn_apimsg>
 800ed1e:	4603      	mov	r3, r0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	08020668 	.word	0x08020668
 800ed2c:	08020930 	.word	0x08020930
 800ed30:	08020728 	.word	0x08020728
 800ed34:	080102f9 	.word	0x080102f9

0800ed38 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b090      	sub	sp, #64	; 0x40
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	4613      	mov	r3, r2
 800ed44:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	3310      	adds	r3, #16
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f00f f8a0 	bl	801de90 <sys_mbox_valid>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d102      	bne.n	800ed5c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ed56:	f06f 030a 	mvn.w	r3, #10
 800ed5a:	e06d      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	7e1b      	ldrb	r3, [r3, #24]
 800ed60:	b25b      	sxtb	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	da07      	bge.n	800ed76 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	7e1b      	ldrb	r3, [r3, #24]
 800ed6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	761a      	strb	r2, [r3, #24]
    goto handle_fin;
 800ed74:	e039      	b.n	800edea <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f7ff fee3 	bl	800eb48 <netconn_recv_data>
 800ed82:	4603      	mov	r3, r0
 800ed84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ed88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ed90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed94:	e050      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	f003 0308 	and.w	r3, r3, #8
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d10e      	bne.n	800edc4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <netconn_recv_data_tcp+0x7a>
 800edac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edae:	891b      	ldrh	r3, [r3, #8]
 800edb0:	e000      	b.n	800edb4 <netconn_recv_data_tcp+0x7c>
 800edb2:	2301      	movs	r3, #1
 800edb4:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800edb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800edb8:	f107 0214 	add.w	r2, r7, #20
 800edbc:	4619      	mov	r1, r3
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f7ff ff8a 	bl	800ecd8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800edc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d134      	bne.n	800ee34 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	f003 0310 	and.w	r3, r3, #16
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d009      	beq.n	800ede8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	7e1b      	ldrb	r3, [r3, #24]
 800edd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eddc:	b2da      	uxtb	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	761a      	strb	r2, [r3, #24]
      return ERR_WOULDBLOCK;
 800ede2:	f06f 0306 	mvn.w	r3, #6
 800ede6:	e027      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ede8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d005      	beq.n	800edfe <netconn_recv_data_tcp+0xc6>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	2200      	movs	r2, #0
 800edf8:	2101      	movs	r1, #1
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d10f      	bne.n	800ee26 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f000 f9a3 	bl	800f152 <netconn_err>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ee12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d002      	beq.n	800ee20 <netconn_recv_data_tcp+0xe8>
          return err;
 800ee1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee1e:	e00b      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ee20:	f06f 030d 	mvn.w	r3, #13
 800ee24:	e008      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ee26:	2101      	movs	r1, #1
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f000 f955 	bl	800f0d8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ee2e:	f06f 030e 	mvn.w	r3, #14
 800ee32:	e001      	b.n	800ee38 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ee34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3740      	adds	r7, #64	; 0x40
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d109      	bne.n	800ee68 <netconn_recv+0x28>
 800ee54:	4b32      	ldr	r3, [pc, #200]	; (800ef20 <netconn_recv+0xe0>)
 800ee56:	f240 3263 	movw	r2, #867	; 0x363
 800ee5a:	4932      	ldr	r1, [pc, #200]	; (800ef24 <netconn_recv+0xe4>)
 800ee5c:	4832      	ldr	r0, [pc, #200]	; (800ef28 <netconn_recv+0xe8>)
 800ee5e:	f00f ff95 	bl	801ed8c <iprintf>
 800ee62:	f06f 030f 	mvn.w	r3, #15
 800ee66:	e056      	b.n	800ef16 <netconn_recv+0xd6>
  *new_buf = NULL;
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d109      	bne.n	800ee88 <netconn_recv+0x48>
 800ee74:	4b2a      	ldr	r3, [pc, #168]	; (800ef20 <netconn_recv+0xe0>)
 800ee76:	f240 3265 	movw	r2, #869	; 0x365
 800ee7a:	492c      	ldr	r1, [pc, #176]	; (800ef2c <netconn_recv+0xec>)
 800ee7c:	482a      	ldr	r0, [pc, #168]	; (800ef28 <netconn_recv+0xe8>)
 800ee7e:	f00f ff85 	bl	801ed8c <iprintf>
 800ee82:	f06f 030f 	mvn.w	r3, #15
 800ee86:	e046      	b.n	800ef16 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee90:	2b10      	cmp	r3, #16
 800ee92:	d13a      	bne.n	800ef0a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ee94:	2300      	movs	r3, #0
 800ee96:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ee98:	2006      	movs	r0, #6
 800ee9a:	f006 fdfb 	bl	8015a94 <memp_malloc>
 800ee9e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d102      	bne.n	800eeac <netconn_recv+0x6c>
      return ERR_MEM;
 800eea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeaa:	e034      	b.n	800ef16 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800eeac:	f107 030c 	add.w	r3, r7, #12
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff ff3f 	bl	800ed38 <netconn_recv_data_tcp>
 800eeba:	4603      	mov	r3, r0
 800eebc:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800eebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800eec6:	6979      	ldr	r1, [r7, #20]
 800eec8:	2006      	movs	r0, #6
 800eeca:	f006 fe59 	bl	8015b80 <memp_free>
      return err;
 800eece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eed2:	e020      	b.n	800ef16 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <netconn_recv+0xa8>
 800eeda:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <netconn_recv+0xe0>)
 800eedc:	f240 3279 	movw	r2, #889	; 0x379
 800eee0:	4913      	ldr	r1, [pc, #76]	; (800ef30 <netconn_recv+0xf0>)
 800eee2:	4811      	ldr	r0, [pc, #68]	; (800ef28 <netconn_recv+0xe8>)
 800eee4:	f00f ff52 	bl	801ed8c <iprintf>

    buf->p = p;
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	2200      	movs	r2, #0
 800eef8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	2200      	movs	r2, #0
 800eefe:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e005      	b.n	800ef16 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff fe1a 	bl	800eb48 <netconn_recv_data>
 800ef14:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3718      	adds	r7, #24
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	08020668 	.word	0x08020668
 800ef24:	080208e8 	.word	0x080208e8
 800ef28:	08020728 	.word	0x08020728
 800ef2c:	08020908 	.word	0x08020908
 800ef30:	08020980 	.word	0x08020980

0800ef34 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ef4a:	78fa      	ldrb	r2, [r7, #3]
 800ef4c:	f107 0110 	add.w	r1, r7, #16
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	4613      	mov	r3, r2
 800ef56:	2201      	movs	r2, #1
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f000 f805 	bl	800ef68 <netconn_write_vectors_partly>
 800ef5e:	4603      	mov	r3, r0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3718      	adds	r7, #24
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b092      	sub	sp, #72	; 0x48
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	4611      	mov	r1, r2
 800ef74:	461a      	mov	r2, r3
 800ef76:	460b      	mov	r3, r1
 800ef78:	80fb      	strh	r3, [r7, #6]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d109      	bne.n	800ef98 <netconn_write_vectors_partly+0x30>
 800ef84:	4b4e      	ldr	r3, [pc, #312]	; (800f0c0 <netconn_write_vectors_partly+0x158>)
 800ef86:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ef8a:	494e      	ldr	r1, [pc, #312]	; (800f0c4 <netconn_write_vectors_partly+0x15c>)
 800ef8c:	484e      	ldr	r0, [pc, #312]	; (800f0c8 <netconn_write_vectors_partly+0x160>)
 800ef8e:	f00f fefd 	bl	801ed8c <iprintf>
 800ef92:	f06f 030f 	mvn.w	r3, #15
 800ef96:	e08e      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efa0:	2b10      	cmp	r3, #16
 800efa2:	d009      	beq.n	800efb8 <netconn_write_vectors_partly+0x50>
 800efa4:	4b46      	ldr	r3, [pc, #280]	; (800f0c0 <netconn_write_vectors_partly+0x158>)
 800efa6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800efaa:	4948      	ldr	r1, [pc, #288]	; (800f0cc <netconn_write_vectors_partly+0x164>)
 800efac:	4846      	ldr	r0, [pc, #280]	; (800f0c8 <netconn_write_vectors_partly+0x160>)
 800efae:	f00f feed 	bl	801ed8c <iprintf>
 800efb2:	f06f 0305 	mvn.w	r3, #5
 800efb6:	e07e      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	7e1b      	ldrb	r3, [r3, #24]
 800efbc:	f003 0302 	and.w	r3, r3, #2
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d104      	bne.n	800efce <netconn_write_vectors_partly+0x66>
 800efc4:	797b      	ldrb	r3, [r7, #5]
 800efc6:	f003 0304 	and.w	r3, r3, #4
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <netconn_write_vectors_partly+0x6a>
 800efce:	2301      	movs	r3, #1
 800efd0:	e000      	b.n	800efd4 <netconn_write_vectors_partly+0x6c>
 800efd2:	2300      	movs	r3, #0
 800efd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800efd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d005      	beq.n	800efec <netconn_write_vectors_partly+0x84>
 800efe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d102      	bne.n	800efec <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800efe6:	f06f 0305 	mvn.w	r3, #5
 800efea:	e064      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800efec:	2300      	movs	r3, #0
 800efee:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800eff0:	2300      	movs	r3, #0
 800eff2:	643b      	str	r3, [r7, #64]	; 0x40
 800eff4:	e015      	b.n	800f022 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800eff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	4413      	add	r3, r2
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f002:	4413      	add	r3, r2
 800f004:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f008:	00db      	lsls	r3, r3, #3
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	4413      	add	r3, r2
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f012:	429a      	cmp	r2, r3
 800f014:	d202      	bcs.n	800f01c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f016:	f06f 0305 	mvn.w	r3, #5
 800f01a:	e04c      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f01e:	3301      	adds	r3, #1
 800f020:	643b      	str	r3, [r7, #64]	; 0x40
 800f022:	88fb      	ldrh	r3, [r7, #6]
 800f024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f026:	429a      	cmp	r2, r3
 800f028:	dbe5      	blt.n	800eff6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	e040      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f036:	2b00      	cmp	r3, #0
 800f038:	da0a      	bge.n	800f050 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f03a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f040:	f06f 0305 	mvn.w	r3, #5
 800f044:	e037      	b.n	800f0b6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f04a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f058:	88fb      	ldrh	r3, [r7, #6]
 800f05a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f060:	797b      	ldrb	r3, [r7, #5]
 800f062:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f068:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f06e:	f107 0314 	add.w	r3, r7, #20
 800f072:	4619      	mov	r1, r3
 800f074:	4816      	ldr	r0, [pc, #88]	; (800f0d0 <netconn_write_vectors_partly+0x168>)
 800f076:	f7ff fb9f 	bl	800e7b8 <netconn_apimsg>
 800f07a:	4603      	mov	r3, r0
 800f07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f080:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f084:	2b00      	cmp	r3, #0
 800f086:	d114      	bne.n	800f0b2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f08e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f092:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10a      	bne.n	800f0b2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d006      	beq.n	800f0b2 <netconn_write_vectors_partly+0x14a>
 800f0a4:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <netconn_write_vectors_partly+0x158>)
 800f0a6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f0aa:	490a      	ldr	r1, [pc, #40]	; (800f0d4 <netconn_write_vectors_partly+0x16c>)
 800f0ac:	4806      	ldr	r0, [pc, #24]	; (800f0c8 <netconn_write_vectors_partly+0x160>)
 800f0ae:	f00f fe6d 	bl	801ed8c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f0b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3748      	adds	r7, #72	; 0x48
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08020668 	.word	0x08020668
 800f0c4:	080209a8 	.word	0x080209a8
 800f0c8:	08020728 	.word	0x08020728
 800f0cc:	080209c4 	.word	0x080209c4
 800f0d0:	08010701 	.word	0x08010701
 800f0d4:	080209e8 	.word	0x080209e8

0800f0d8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08c      	sub	sp, #48	; 0x30
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d109      	bne.n	800f0fe <netconn_close_shutdown+0x26>
 800f0ea:	4b0f      	ldr	r3, [pc, #60]	; (800f128 <netconn_close_shutdown+0x50>)
 800f0ec:	f240 4247 	movw	r2, #1095	; 0x447
 800f0f0:	490e      	ldr	r1, [pc, #56]	; (800f12c <netconn_close_shutdown+0x54>)
 800f0f2:	480f      	ldr	r0, [pc, #60]	; (800f130 <netconn_close_shutdown+0x58>)
 800f0f4:	f00f fe4a 	bl	801ed8c <iprintf>
 800f0f8:	f06f 030f 	mvn.w	r3, #15
 800f0fc:	e010      	b.n	800f120 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f102:	78fb      	ldrb	r3, [r7, #3]
 800f104:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f106:	2329      	movs	r3, #41	; 0x29
 800f108:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f10a:	f107 030c 	add.w	r3, r7, #12
 800f10e:	4619      	mov	r1, r3
 800f110:	4808      	ldr	r0, [pc, #32]	; (800f134 <netconn_close_shutdown+0x5c>)
 800f112:	f7ff fb51 	bl	800e7b8 <netconn_apimsg>
 800f116:	4603      	mov	r3, r0
 800f118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f11c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f120:	4618      	mov	r0, r3
 800f122:	3730      	adds	r7, #48	; 0x30
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	08020668 	.word	0x08020668
 800f12c:	08020a0c 	.word	0x08020a0c
 800f130:	08020728 	.word	0x08020728
 800f134:	08010819 	.word	0x08010819

0800f138 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f140:	2103      	movs	r1, #3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff ffc8 	bl	800f0d8 <netconn_close_shutdown>
 800f148:	4603      	mov	r3, r0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <netconn_err+0x12>
    return ERR_OK;
 800f160:	2300      	movs	r3, #0
 800f162:	e00d      	b.n	800f180 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f164:	f00e ff9e 	bl	801e0a4 <sys_arch_protect>
 800f168:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	7a1b      	ldrb	r3, [r3, #8]
 800f16e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f00e ffa2 	bl	801e0c0 <sys_arch_unprotect>
  return err;
 800f17c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f196:	f113 0f0d 	cmn.w	r3, #13
 800f19a:	d009      	beq.n	800f1b0 <lwip_netconn_err_to_msg+0x28>
 800f19c:	f113 0f0d 	cmn.w	r3, #13
 800f1a0:	dc0c      	bgt.n	800f1bc <lwip_netconn_err_to_msg+0x34>
 800f1a2:	f113 0f0f 	cmn.w	r3, #15
 800f1a6:	d007      	beq.n	800f1b8 <lwip_netconn_err_to_msg+0x30>
 800f1a8:	f113 0f0e 	cmn.w	r3, #14
 800f1ac:	d002      	beq.n	800f1b4 <lwip_netconn_err_to_msg+0x2c>
 800f1ae:	e005      	b.n	800f1bc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <lwip_netconn_err_to_msg+0x54>)
 800f1b2:	e00e      	b.n	800f1d2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f1b4:	4b0a      	ldr	r3, [pc, #40]	; (800f1e0 <lwip_netconn_err_to_msg+0x58>)
 800f1b6:	e00c      	b.n	800f1d2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f1b8:	4b0a      	ldr	r3, [pc, #40]	; (800f1e4 <lwip_netconn_err_to_msg+0x5c>)
 800f1ba:	e00a      	b.n	800f1d2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <lwip_netconn_err_to_msg+0x48>
 800f1c4:	4b08      	ldr	r3, [pc, #32]	; (800f1e8 <lwip_netconn_err_to_msg+0x60>)
 800f1c6:	227d      	movs	r2, #125	; 0x7d
 800f1c8:	4908      	ldr	r1, [pc, #32]	; (800f1ec <lwip_netconn_err_to_msg+0x64>)
 800f1ca:	4809      	ldr	r0, [pc, #36]	; (800f1f0 <lwip_netconn_err_to_msg+0x68>)
 800f1cc:	f00f fdde 	bl	801ed8c <iprintf>
      return NULL;
 800f1d0:	2300      	movs	r3, #0
  }
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	08024da0 	.word	0x08024da0
 800f1e0:	08024da1 	.word	0x08024da1
 800f1e4:	08024da2 	.word	0x08024da2
 800f1e8:	08020a28 	.word	0x08020a28
 800f1ec:	08020ac4 	.word	0x08020ac4
 800f1f0:	08020ad4 	.word	0x08020ad4

0800f1f4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d105      	bne.n	800f210 <lwip_netconn_is_err_msg+0x1c>
 800f204:	4b12      	ldr	r3, [pc, #72]	; (800f250 <lwip_netconn_is_err_msg+0x5c>)
 800f206:	2285      	movs	r2, #133	; 0x85
 800f208:	4912      	ldr	r1, [pc, #72]	; (800f254 <lwip_netconn_is_err_msg+0x60>)
 800f20a:	4813      	ldr	r0, [pc, #76]	; (800f258 <lwip_netconn_is_err_msg+0x64>)
 800f20c:	f00f fdbe 	bl	801ed8c <iprintf>

  if (msg == &netconn_aborted) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4a12      	ldr	r2, [pc, #72]	; (800f25c <lwip_netconn_is_err_msg+0x68>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d104      	bne.n	800f222 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	22f3      	movs	r2, #243	; 0xf3
 800f21c:	701a      	strb	r2, [r3, #0]
    return 1;
 800f21e:	2301      	movs	r3, #1
 800f220:	e012      	b.n	800f248 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a0e      	ldr	r2, [pc, #56]	; (800f260 <lwip_netconn_is_err_msg+0x6c>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d104      	bne.n	800f234 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	22f2      	movs	r2, #242	; 0xf2
 800f22e:	701a      	strb	r2, [r3, #0]
    return 1;
 800f230:	2301      	movs	r3, #1
 800f232:	e009      	b.n	800f248 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a0b      	ldr	r2, [pc, #44]	; (800f264 <lwip_netconn_is_err_msg+0x70>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d104      	bne.n	800f246 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	22f1      	movs	r2, #241	; 0xf1
 800f240:	701a      	strb	r2, [r3, #0]
    return 1;
 800f242:	2301      	movs	r3, #1
 800f244:	e000      	b.n	800f248 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	08020a28 	.word	0x08020a28
 800f254:	08020afc 	.word	0x08020afc
 800f258:	08020ad4 	.word	0x08020ad4
 800f25c:	08024da0 	.word	0x08024da0
 800f260:	08024da1 	.word	0x08024da1
 800f264:	08024da2 	.word	0x08024da2

0800f268 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b088      	sub	sp, #32
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d105      	bne.n	800f288 <recv_udp+0x20>
 800f27c:	4b34      	ldr	r3, [pc, #208]	; (800f350 <recv_udp+0xe8>)
 800f27e:	22e5      	movs	r2, #229	; 0xe5
 800f280:	4934      	ldr	r1, [pc, #208]	; (800f354 <recv_udp+0xec>)
 800f282:	4835      	ldr	r0, [pc, #212]	; (800f358 <recv_udp+0xf0>)
 800f284:	f00f fd82 	bl	801ed8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d105      	bne.n	800f29a <recv_udp+0x32>
 800f28e:	4b30      	ldr	r3, [pc, #192]	; (800f350 <recv_udp+0xe8>)
 800f290:	22e6      	movs	r2, #230	; 0xe6
 800f292:	4932      	ldr	r1, [pc, #200]	; (800f35c <recv_udp+0xf4>)
 800f294:	4830      	ldr	r0, [pc, #192]	; (800f358 <recv_udp+0xf0>)
 800f296:	f00f fd79 	bl	801ed8c <iprintf>
  conn = (struct netconn *)arg;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d103      	bne.n	800f2ac <recv_udp+0x44>
    pbuf_free(p);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f007 fb1b 	bl	80168e0 <pbuf_free>
    return;
 800f2aa:	e04d      	b.n	800f348 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d005      	beq.n	800f2c2 <recv_udp+0x5a>
 800f2b6:	4b26      	ldr	r3, [pc, #152]	; (800f350 <recv_udp+0xe8>)
 800f2b8:	22ee      	movs	r2, #238	; 0xee
 800f2ba:	4929      	ldr	r1, [pc, #164]	; (800f360 <recv_udp+0xf8>)
 800f2bc:	4826      	ldr	r0, [pc, #152]	; (800f358 <recv_udp+0xf0>)
 800f2be:	f00f fd65 	bl	801ed8c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	3310      	adds	r3, #16
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f00e fde2 	bl	801de90 <sys_mbox_valid>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d103      	bne.n	800f2da <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f007 fb04 	bl	80168e0 <pbuf_free>
    return;
 800f2d8:	e036      	b.n	800f348 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f2da:	2006      	movs	r0, #6
 800f2dc:	f006 fbda 	bl	8015a94 <memp_malloc>
 800f2e0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d103      	bne.n	800f2f0 <recv_udp+0x88>
    pbuf_free(p);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f007 faf9 	bl	80168e0 <pbuf_free>
    return;
 800f2ee:	e02b      	b.n	800f348 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <recv_udp+0xa0>
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	e000      	b.n	800f30a <recv_udp+0xa2>
 800f308:	2300      	movs	r3, #0
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f312:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	891b      	ldrh	r3, [r3, #8]
 800f318:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	3310      	adds	r3, #16
 800f31e:	69b9      	ldr	r1, [r7, #24]
 800f320:	4618      	mov	r0, r3
 800f322:	f00e fd53 	bl	801ddcc <sys_mbox_trypost>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f32c:	69b8      	ldr	r0, [r7, #24]
 800f32e:	f001 faff 	bl	8010930 <netbuf_delete>
    return;
 800f332:	e009      	b.n	800f348 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	6a1b      	ldr	r3, [r3, #32]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d005      	beq.n	800f348 <recv_udp+0xe0>
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	6a1b      	ldr	r3, [r3, #32]
 800f340:	8afa      	ldrh	r2, [r7, #22]
 800f342:	2100      	movs	r1, #0
 800f344:	69f8      	ldr	r0, [r7, #28]
 800f346:	4798      	blx	r3
  }
}
 800f348:	3720      	adds	r7, #32
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	08020a28 	.word	0x08020a28
 800f354:	08020b08 	.word	0x08020b08
 800f358:	08020ad4 	.word	0x08020ad4
 800f35c:	08020b2c 	.word	0x08020b2c
 800f360:	08020b4c 	.word	0x08020b4c

0800f364 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d106      	bne.n	800f386 <recv_tcp+0x22>
 800f378:	4b36      	ldr	r3, [pc, #216]	; (800f454 <recv_tcp+0xf0>)
 800f37a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f37e:	4936      	ldr	r1, [pc, #216]	; (800f458 <recv_tcp+0xf4>)
 800f380:	4836      	ldr	r0, [pc, #216]	; (800f45c <recv_tcp+0xf8>)
 800f382:	f00f fd03 	bl	801ed8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d106      	bne.n	800f39a <recv_tcp+0x36>
 800f38c:	4b31      	ldr	r3, [pc, #196]	; (800f454 <recv_tcp+0xf0>)
 800f38e:	f240 122d 	movw	r2, #301	; 0x12d
 800f392:	4933      	ldr	r1, [pc, #204]	; (800f460 <recv_tcp+0xfc>)
 800f394:	4831      	ldr	r0, [pc, #196]	; (800f45c <recv_tcp+0xf8>)
 800f396:	f00f fcf9 	bl	801ed8c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f39a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d006      	beq.n	800f3b0 <recv_tcp+0x4c>
 800f3a2:	4b2c      	ldr	r3, [pc, #176]	; (800f454 <recv_tcp+0xf0>)
 800f3a4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f3a8:	492e      	ldr	r1, [pc, #184]	; (800f464 <recv_tcp+0x100>)
 800f3aa:	482c      	ldr	r0, [pc, #176]	; (800f45c <recv_tcp+0xf8>)
 800f3ac:	f00f fcee 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d102      	bne.n	800f3c0 <recv_tcp+0x5c>
    return ERR_VAL;
 800f3ba:	f06f 0305 	mvn.w	r3, #5
 800f3be:	e045      	b.n	800f44c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d006      	beq.n	800f3d8 <recv_tcp+0x74>
 800f3ca:	4b22      	ldr	r3, [pc, #136]	; (800f454 <recv_tcp+0xf0>)
 800f3cc:	f240 1235 	movw	r2, #309	; 0x135
 800f3d0:	4925      	ldr	r1, [pc, #148]	; (800f468 <recv_tcp+0x104>)
 800f3d2:	4822      	ldr	r0, [pc, #136]	; (800f45c <recv_tcp+0xf8>)
 800f3d4:	f00f fcda 	bl	801ed8c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	3310      	adds	r3, #16
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f00e fd57 	bl	801de90 <sys_mbox_valid>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10d      	bne.n	800f404 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d008      	beq.n	800f400 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	891b      	ldrh	r3, [r3, #8]
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	68b8      	ldr	r0, [r7, #8]
 800f3f6:	f008 fa3b 	bl	8017870 <tcp_recved>
      pbuf_free(p);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f007 fa70 	bl	80168e0 <pbuf_free>
    }
    return ERR_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	e023      	b.n	800f44c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d005      	beq.n	800f416 <recv_tcp+0xb2>
    msg = p;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	891b      	ldrh	r3, [r3, #8]
 800f412:	83fb      	strh	r3, [r7, #30]
 800f414:	e003      	b.n	800f41e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f416:	4b15      	ldr	r3, [pc, #84]	; (800f46c <recv_tcp+0x108>)
 800f418:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	3310      	adds	r3, #16
 800f422:	69b9      	ldr	r1, [r7, #24]
 800f424:	4618      	mov	r0, r3
 800f426:	f00e fcd1 	bl	801ddcc <sys_mbox_trypost>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f434:	e00a      	b.n	800f44c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d005      	beq.n	800f44a <recv_tcp+0xe6>
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	8bfa      	ldrh	r2, [r7, #30]
 800f444:	2100      	movs	r1, #0
 800f446:	6978      	ldr	r0, [r7, #20]
 800f448:	4798      	blx	r3
  }

  return ERR_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3720      	adds	r7, #32
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	08020a28 	.word	0x08020a28
 800f458:	08020b6c 	.word	0x08020b6c
 800f45c:	08020ad4 	.word	0x08020ad4
 800f460:	08020b90 	.word	0x08020b90
 800f464:	08020bb0 	.word	0x08020bb0
 800f468:	08020bc8 	.word	0x08020bc8
 800f46c:	08024da2 	.word	0x08024da2

0800f470 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d106      	bne.n	800f492 <poll_tcp+0x22>
 800f484:	4b2a      	ldr	r3, [pc, #168]	; (800f530 <poll_tcp+0xc0>)
 800f486:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f48a:	492a      	ldr	r1, [pc, #168]	; (800f534 <poll_tcp+0xc4>)
 800f48c:	482a      	ldr	r0, [pc, #168]	; (800f538 <poll_tcp+0xc8>)
 800f48e:	f00f fc7d 	bl	801ed8c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	785b      	ldrb	r3, [r3, #1]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d104      	bne.n	800f4a4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f49a:	2101      	movs	r1, #1
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 ff61 	bl	8010364 <lwip_netconn_do_writemore>
 800f4a2:	e016      	b.n	800f4d2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	785b      	ldrb	r3, [r3, #1]
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d112      	bne.n	800f4d2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	69db      	ldr	r3, [r3, #28]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00a      	beq.n	800f4ca <poll_tcp+0x5a>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	7a5b      	ldrb	r3, [r3, #9]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	69db      	ldr	r3, [r3, #28]
 800f4c2:	7a5a      	ldrb	r2, [r3, #9]
 800f4c4:	3a01      	subs	r2, #1
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 fbf7 	bl	800fcc0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	7e1b      	ldrb	r3, [r3, #24]
 800f4d6:	f003 0310 	and.w	r3, r3, #16
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d022      	beq.n	800f524 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d01e      	beq.n	800f524 <poll_tcp+0xb4>
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f4ee:	f640 3269 	movw	r2, #2921	; 0xb69
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d916      	bls.n	800f524 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f4fe:	2b07      	cmp	r3, #7
 800f500:	d810      	bhi.n	800f524 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	7e1b      	ldrb	r3, [r3, #24]
 800f506:	f023 0310 	bic.w	r3, r3, #16
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <poll_tcp+0xb4>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	2200      	movs	r2, #0
 800f51e:	2102      	movs	r1, #2
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	08020a28 	.word	0x08020a28
 800f534:	08020be8 	.word	0x08020be8
 800f538:	08020ad4 	.word	0x08020ad4

0800f53c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b086      	sub	sp, #24
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	4613      	mov	r3, r2
 800f548:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d106      	bne.n	800f562 <sent_tcp+0x26>
 800f554:	4b21      	ldr	r3, [pc, #132]	; (800f5dc <sent_tcp+0xa0>)
 800f556:	f240 1293 	movw	r2, #403	; 0x193
 800f55a:	4921      	ldr	r1, [pc, #132]	; (800f5e0 <sent_tcp+0xa4>)
 800f55c:	4821      	ldr	r0, [pc, #132]	; (800f5e4 <sent_tcp+0xa8>)
 800f55e:	f00f fc15 	bl	801ed8c <iprintf>

  if (conn) {
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d033      	beq.n	800f5d0 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	785b      	ldrb	r3, [r3, #1]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d104      	bne.n	800f57a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f570:	2101      	movs	r1, #1
 800f572:	6978      	ldr	r0, [r7, #20]
 800f574:	f000 fef6 	bl	8010364 <lwip_netconn_do_writemore>
 800f578:	e007      	b.n	800f58a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	785b      	ldrb	r3, [r3, #1]
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d103      	bne.n	800f58a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f582:	2101      	movs	r1, #1
 800f584:	6978      	ldr	r0, [r7, #20]
 800f586:	f000 fb9b 	bl	800fcc0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d01e      	beq.n	800f5d0 <sent_tcp+0x94>
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f59a:	f640 3269 	movw	r2, #2921	; 0xb69
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d916      	bls.n	800f5d0 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f5aa:	2b07      	cmp	r3, #7
 800f5ac:	d810      	bhi.n	800f5d0 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	7e1b      	ldrb	r3, [r3, #24]
 800f5b2:	f023 0310 	bic.w	r3, r3, #16
 800f5b6:	b2da      	uxtb	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	6a1b      	ldr	r3, [r3, #32]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d005      	beq.n	800f5d0 <sent_tcp+0x94>
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	88fa      	ldrh	r2, [r7, #6]
 800f5ca:	2102      	movs	r1, #2
 800f5cc:	6978      	ldr	r0, [r7, #20]
 800f5ce:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3718      	adds	r7, #24
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	08020a28 	.word	0x08020a28
 800f5e0:	08020be8 	.word	0x08020be8
 800f5e4:	08020ad4 	.word	0x08020ad4

0800f5e8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b088      	sub	sp, #32
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d106      	bne.n	800f60c <err_tcp+0x24>
 800f5fe:	4b5f      	ldr	r3, [pc, #380]	; (800f77c <err_tcp+0x194>)
 800f600:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f604:	495e      	ldr	r1, [pc, #376]	; (800f780 <err_tcp+0x198>)
 800f606:	485f      	ldr	r0, [pc, #380]	; (800f784 <err_tcp+0x19c>)
 800f608:	f00f fbc0 	bl	801ed8c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f60c:	f00e fd4a 	bl	801e0a4 <sys_arch_protect>
 800f610:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	2200      	movs	r2, #0
 800f616:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	78fa      	ldrb	r2, [r7, #3]
 800f61c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	7e1b      	ldrb	r3, [r3, #24]
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	b2da      	uxtb	r2, r3
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	785b      	ldrb	r3, [r3, #1]
 800f630:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	2200      	movs	r2, #0
 800f636:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f638:	69b8      	ldr	r0, [r7, #24]
 800f63a:	f00e fd41 	bl	801e0c0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d005      	beq.n	800f652 <err_tcp+0x6a>
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	2200      	movs	r2, #0
 800f64c:	2104      	movs	r1, #4
 800f64e:	69f8      	ldr	r0, [r7, #28]
 800f650:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d005      	beq.n	800f666 <err_tcp+0x7e>
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	2200      	movs	r2, #0
 800f660:	2100      	movs	r1, #0
 800f662:	69f8      	ldr	r0, [r7, #28]
 800f664:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	6a1b      	ldr	r3, [r3, #32]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d005      	beq.n	800f67a <err_tcp+0x92>
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	2200      	movs	r2, #0
 800f674:	2102      	movs	r1, #2
 800f676:	69f8      	ldr	r0, [r7, #28]
 800f678:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f67a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f67e:	4618      	mov	r0, r3
 800f680:	f7ff fd82 	bl	800f188 <lwip_netconn_err_to_msg>
 800f684:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	3310      	adds	r3, #16
 800f68a:	4618      	mov	r0, r3
 800f68c:	f00e fc00 	bl	801de90 <sys_mbox_valid>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d005      	beq.n	800f6a2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	3310      	adds	r3, #16
 800f69a:	6939      	ldr	r1, [r7, #16]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f00e fb95 	bl	801ddcc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	3314      	adds	r3, #20
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f00e fbf2 	bl	801de90 <sys_mbox_valid>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d005      	beq.n	800f6be <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	3314      	adds	r3, #20
 800f6b6:	6939      	ldr	r1, [r7, #16]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f00e fb87 	bl	801ddcc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d005      	beq.n	800f6d0 <err_tcp+0xe8>
 800f6c4:	7dfb      	ldrb	r3, [r7, #23]
 800f6c6:	2b04      	cmp	r3, #4
 800f6c8:	d002      	beq.n	800f6d0 <err_tcp+0xe8>
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d143      	bne.n	800f758 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	7e1b      	ldrb	r3, [r3, #24]
 800f6d4:	f003 0304 	and.w	r3, r3, #4
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	bf14      	ite	ne
 800f6dc:	2301      	movne	r3, #1
 800f6de:	2300      	moveq	r3, #0
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	7e1b      	ldrb	r3, [r3, #24]
 800f6e8:	f023 0304 	bic.w	r3, r3, #4
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d13b      	bne.n	800f770 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d106      	bne.n	800f70e <err_tcp+0x126>
 800f700:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <err_tcp+0x194>)
 800f702:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f706:	4920      	ldr	r1, [pc, #128]	; (800f788 <err_tcp+0x1a0>)
 800f708:	481e      	ldr	r0, [pc, #120]	; (800f784 <err_tcp+0x19c>)
 800f70a:	f00f fb3f 	bl	801ed8c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
 800f710:	2b04      	cmp	r3, #4
 800f712:	d104      	bne.n	800f71e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	69db      	ldr	r3, [r3, #28]
 800f718:	2200      	movs	r2, #0
 800f71a:	711a      	strb	r2, [r3, #4]
 800f71c:	e003      	b.n	800f726 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	69db      	ldr	r3, [r3, #28]
 800f722:	78fa      	ldrb	r2, [r7, #3]
 800f724:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	69db      	ldr	r3, [r3, #28]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	330c      	adds	r3, #12
 800f72e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f730:	68b8      	ldr	r0, [r7, #8]
 800f732:	f00e fc3b 	bl	801dfac <sys_sem_valid>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d106      	bne.n	800f74a <err_tcp+0x162>
 800f73c:	4b0f      	ldr	r3, [pc, #60]	; (800f77c <err_tcp+0x194>)
 800f73e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f742:	4912      	ldr	r1, [pc, #72]	; (800f78c <err_tcp+0x1a4>)
 800f744:	480f      	ldr	r0, [pc, #60]	; (800f784 <err_tcp+0x19c>)
 800f746:	f00f fb21 	bl	801ed8c <iprintf>
      conn->current_msg = NULL;
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	2200      	movs	r2, #0
 800f74e:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f750:	68b8      	ldr	r0, [r7, #8]
 800f752:	f00e fc11 	bl	801df78 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f756:	e00b      	b.n	800f770 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	69db      	ldr	r3, [r3, #28]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d008      	beq.n	800f772 <err_tcp+0x18a>
 800f760:	4b06      	ldr	r3, [pc, #24]	; (800f77c <err_tcp+0x194>)
 800f762:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f766:	490a      	ldr	r1, [pc, #40]	; (800f790 <err_tcp+0x1a8>)
 800f768:	4806      	ldr	r0, [pc, #24]	; (800f784 <err_tcp+0x19c>)
 800f76a:	f00f fb0f 	bl	801ed8c <iprintf>
  }
}
 800f76e:	e000      	b.n	800f772 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f770:	bf00      	nop
}
 800f772:	bf00      	nop
 800f774:	3720      	adds	r7, #32
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	08020a28 	.word	0x08020a28
 800f780:	08020be8 	.word	0x08020be8
 800f784:	08020ad4 	.word	0x08020ad4
 800f788:	08020bf8 	.word	0x08020bf8
 800f78c:	08020c14 	.word	0x08020c14
 800f790:	08020c30 	.word	0x08020c30

0800f794 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f7a2:	6879      	ldr	r1, [r7, #4]
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f008 ff2d 	bl	8018604 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f7aa:	490a      	ldr	r1, [pc, #40]	; (800f7d4 <setup_tcp+0x40>)
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f008 ff3b 	bl	8018628 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f7b2:	4909      	ldr	r1, [pc, #36]	; (800f7d8 <setup_tcp+0x44>)
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f008 ff59 	bl	801866c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	4907      	ldr	r1, [pc, #28]	; (800f7dc <setup_tcp+0x48>)
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f008 ffb0 	bl	8018724 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f7c4:	4906      	ldr	r1, [pc, #24]	; (800f7e0 <setup_tcp+0x4c>)
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f008 ff72 	bl	80186b0 <tcp_err>
}
 800f7cc:	bf00      	nop
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	0800f365 	.word	0x0800f365
 800f7d8:	0800f53d 	.word	0x0800f53d
 800f7dc:	0800f471 	.word	0x0800f471
 800f7e0:	0800f5e9 	.word	0x0800f5e9

0800f7e4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f7e4:	b590      	push	{r4, r7, lr}
 800f7e6:	b089      	sub	sp, #36	; 0x24
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <accept_function+0x1e>
    return ERR_VAL;
 800f7fc:	f06f 0305 	mvn.w	r3, #5
 800f800:	e0a1      	b.n	800f946 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	3314      	adds	r3, #20
 800f806:	4618      	mov	r0, r3
 800f808:	f00e fb42 	bl	801de90 <sys_mbox_valid>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f812:	f06f 0305 	mvn.w	r3, #5
 800f816:	e096      	b.n	800f946 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d11b      	bne.n	800f856 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	f103 0414 	add.w	r4, r3, #20
 800f824:	f06f 000c 	mvn.w	r0, #12
 800f828:	f7ff fcae 	bl	800f188 <lwip_netconn_err_to_msg>
 800f82c:	4603      	mov	r3, r0
 800f82e:	4619      	mov	r1, r3
 800f830:	4620      	mov	r0, r4
 800f832:	f00e facb 	bl	801ddcc <sys_mbox_trypost>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d109      	bne.n	800f850 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d005      	beq.n	800f850 <accept_function+0x6c>
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	2200      	movs	r2, #0
 800f84a:	2100      	movs	r1, #0
 800f84c:	69f8      	ldr	r0, [r7, #28]
 800f84e:	4798      	blx	r3
    }
    return ERR_VAL;
 800f850:	f06f 0305 	mvn.w	r3, #5
 800f854:	e077      	b.n	800f946 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d006      	beq.n	800f86c <accept_function+0x88>
 800f85e:	4b3c      	ldr	r3, [pc, #240]	; (800f950 <accept_function+0x16c>)
 800f860:	f240 222a 	movw	r2, #554	; 0x22a
 800f864:	493b      	ldr	r1, [pc, #236]	; (800f954 <accept_function+0x170>)
 800f866:	483c      	ldr	r0, [pc, #240]	; (800f958 <accept_function+0x174>)
 800f868:	f00f fa90 	bl	801ed8c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	781a      	ldrb	r2, [r3, #0]
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	6a1b      	ldr	r3, [r3, #32]
 800f874:	4619      	mov	r1, r3
 800f876:	4610      	mov	r0, r2
 800f878:	f000 f8f0 	bl	800fa5c <netconn_alloc>
 800f87c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d11b      	bne.n	800f8bc <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	f103 0414 	add.w	r4, r3, #20
 800f88a:	f06f 000c 	mvn.w	r0, #12
 800f88e:	f7ff fc7b 	bl	800f188 <lwip_netconn_err_to_msg>
 800f892:	4603      	mov	r3, r0
 800f894:	4619      	mov	r1, r3
 800f896:	4620      	mov	r0, r4
 800f898:	f00e fa98 	bl	801ddcc <sys_mbox_trypost>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d109      	bne.n	800f8b6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d005      	beq.n	800f8b6 <accept_function+0xd2>
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	69f8      	ldr	r0, [r7, #28]
 800f8b4:	4798      	blx	r3
    }
    return ERR_MEM;
 800f8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8ba:	e044      	b.n	800f946 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	68ba      	ldr	r2, [r7, #8]
 800f8c0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f8c2:	69b8      	ldr	r0, [r7, #24]
 800f8c4:	f7ff ff66 	bl	800f794 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	3314      	adds	r3, #20
 800f8cc:	69b9      	ldr	r1, [r7, #24]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f00e fa7c 	bl	801ddcc <sys_mbox_trypost>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d02a      	beq.n	800f930 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6978      	ldr	r0, [r7, #20]
 800f8e4:	f008 fe8e 	bl	8018604 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	6978      	ldr	r0, [r7, #20]
 800f8ec:	f008 fe9c 	bl	8018628 <tcp_recv>
    tcp_sent(pcb, NULL);
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	6978      	ldr	r0, [r7, #20]
 800f8f4:	f008 feba 	bl	801866c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	6978      	ldr	r0, [r7, #20]
 800f8fe:	f008 ff11 	bl	8018724 <tcp_poll>
    tcp_err(pcb, NULL);
 800f902:	2100      	movs	r1, #0
 800f904:	6978      	ldr	r0, [r7, #20]
 800f906:	f008 fed3 	bl	80186b0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2200      	movs	r2, #0
 800f90e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	3310      	adds	r3, #16
 800f914:	4618      	mov	r0, r3
 800f916:	f00e fa47 	bl	801dda8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	3310      	adds	r3, #16
 800f91e:	4618      	mov	r0, r3
 800f920:	f00e fac7 	bl	801deb2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f924:	69b8      	ldr	r0, [r7, #24]
 800f926:	f000 f903 	bl	800fb30 <netconn_free>
    return ERR_MEM;
 800f92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f92e:	e00a      	b.n	800f946 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d005      	beq.n	800f944 <accept_function+0x160>
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	6a1b      	ldr	r3, [r3, #32]
 800f93c:	2200      	movs	r2, #0
 800f93e:	2100      	movs	r1, #0
 800f940:	69f8      	ldr	r0, [r7, #28]
 800f942:	4798      	blx	r3
  }

  return ERR_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3724      	adds	r7, #36	; 0x24
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd90      	pop	{r4, r7, pc}
 800f94e:	bf00      	nop
 800f950:	08020a28 	.word	0x08020a28
 800f954:	08020c4c 	.word	0x08020c4c
 800f958:	08020ad4 	.word	0x08020ad4

0800f95c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f95c:	b590      	push	{r4, r7, lr}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f964:	2300      	movs	r3, #0
 800f966:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <pcb_new+0x24>
 800f972:	4b2b      	ldr	r3, [pc, #172]	; (800fa20 <pcb_new+0xc4>)
 800f974:	f240 2265 	movw	r2, #613	; 0x265
 800f978:	492a      	ldr	r1, [pc, #168]	; (800fa24 <pcb_new+0xc8>)
 800f97a:	482b      	ldr	r0, [pc, #172]	; (800fa28 <pcb_new+0xcc>)
 800f97c:	f00f fa06 	bl	801ed8c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f98a:	2b10      	cmp	r3, #16
 800f98c:	d022      	beq.n	800f9d4 <pcb_new+0x78>
 800f98e:	2b20      	cmp	r3, #32
 800f990:	d133      	bne.n	800f9fa <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681c      	ldr	r4, [r3, #0]
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	4618      	mov	r0, r3
 800f99a:	f00e f8d8 	bl	801db4e <udp_new_ip_type>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02a      	beq.n	800fa02 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b22      	cmp	r3, #34	; 0x22
 800f9b4:	d104      	bne.n	800f9c0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6858      	ldr	r0, [r3, #4]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	4917      	ldr	r1, [pc, #92]	; (800fa2c <pcb_new+0xd0>)
 800f9ce:	f00e f845 	bl	801da5c <udp_recv>
      }
      break;
 800f9d2:	e016      	b.n	800fa02 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681c      	ldr	r4, [r3, #0]
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f008 fe04 	bl	80185e8 <tcp_new_ip_type>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00b      	beq.n	800fa06 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7ff fece 	bl	800f794 <setup_tcp>
      }
      break;
 800f9f8:	e005      	b.n	800fa06 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	22fa      	movs	r2, #250	; 0xfa
 800f9fe:	711a      	strb	r2, [r3, #4]
      return;
 800fa00:	e00a      	b.n	800fa18 <pcb_new+0xbc>
      break;
 800fa02:	bf00      	nop
 800fa04:	e000      	b.n	800fa08 <pcb_new+0xac>
      break;
 800fa06:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	22ff      	movs	r2, #255	; 0xff
 800fa16:	711a      	strb	r2, [r3, #4]
  }
}
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd90      	pop	{r4, r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	08020a28 	.word	0x08020a28
 800fa24:	08020c74 	.word	0x08020c74
 800fa28:	08020ad4 	.word	0x08020ad4
 800fa2c:	0800f269 	.word	0x0800f269

0800fa30 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d102      	bne.n	800fa52 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7ff ff85 	bl	800f95c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fa52:	bf00      	nop
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
	...

0800fa5c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4603      	mov	r3, r0
 800fa64:	6039      	str	r1, [r7, #0]
 800fa66:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fa6c:	2007      	movs	r0, #7
 800fa6e:	f006 f811 	bl	8015a94 <memp_malloc>
 800fa72:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <netconn_alloc+0x22>
    return NULL;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	e04e      	b.n	800fb1c <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	79fa      	ldrb	r2, [r7, #7]
 800fa88:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa96:	2b10      	cmp	r3, #16
 800fa98:	d004      	beq.n	800faa4 <netconn_alloc+0x48>
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	d105      	bne.n	800faaa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fa9e:	2306      	movs	r3, #6
 800faa0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800faa2:	e00a      	b.n	800faba <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800faa4:	2306      	movs	r3, #6
 800faa6:	617b      	str	r3, [r7, #20]
      break;
 800faa8:	e007      	b.n	800faba <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800faaa:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <netconn_alloc+0xc8>)
 800faac:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fab0:	491d      	ldr	r1, [pc, #116]	; (800fb28 <netconn_alloc+0xcc>)
 800fab2:	481e      	ldr	r0, [pc, #120]	; (800fb2c <netconn_alloc+0xd0>)
 800fab4:	f00f f96a 	bl	801ed8c <iprintf>
      goto free_and_return;
 800fab8:	e02b      	b.n	800fb12 <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	3310      	adds	r3, #16
 800fabe:	6979      	ldr	r1, [r7, #20]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f00e f957 	bl	801dd74 <sys_mbox_new>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d121      	bne.n	800fb10 <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	330c      	adds	r3, #12
 800fad0:	2100      	movs	r1, #0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f00e f9fa 	bl	801decc <sys_sem_new>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d005      	beq.n	800faea <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	3310      	adds	r3, #16
 800fae2:	4618      	mov	r0, r3
 800fae4:	f00e f960 	bl	801dda8 <sys_mbox_free>
    goto free_and_return;
 800fae8:	e013      	b.n	800fb12 <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3314      	adds	r3, #20
 800faee:	4618      	mov	r0, r3
 800faf0:	f00e f9df 	bl	801deb2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2200      	movs	r2, #0
 800faf8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2200      	movs	r2, #0
 800fb04:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	7cfa      	ldrb	r2, [r7, #19]
 800fb0a:	761a      	strb	r2, [r3, #24]
  return conn;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	e005      	b.n	800fb1c <netconn_alloc+0xc0>
    goto free_and_return;
 800fb10:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800fb12:	68f9      	ldr	r1, [r7, #12]
 800fb14:	2007      	movs	r0, #7
 800fb16:	f006 f833 	bl	8015b80 <memp_free>
  return NULL;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	08020a28 	.word	0x08020a28
 800fb28:	08020c94 	.word	0x08020c94
 800fb2c:	08020ad4 	.word	0x08020ad4

0800fb30 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d006      	beq.n	800fb4e <netconn_free+0x1e>
 800fb40:	4b1b      	ldr	r3, [pc, #108]	; (800fbb0 <netconn_free+0x80>)
 800fb42:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fb46:	491b      	ldr	r1, [pc, #108]	; (800fbb4 <netconn_free+0x84>)
 800fb48:	481b      	ldr	r0, [pc, #108]	; (800fbb8 <netconn_free+0x88>)
 800fb4a:	f00f f91f 	bl	801ed8c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3310      	adds	r3, #16
 800fb52:	4618      	mov	r0, r3
 800fb54:	f00e f99c 	bl	801de90 <sys_mbox_valid>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d006      	beq.n	800fb6c <netconn_free+0x3c>
 800fb5e:	4b14      	ldr	r3, [pc, #80]	; (800fbb0 <netconn_free+0x80>)
 800fb60:	f240 3223 	movw	r2, #803	; 0x323
 800fb64:	4915      	ldr	r1, [pc, #84]	; (800fbbc <netconn_free+0x8c>)
 800fb66:	4814      	ldr	r0, [pc, #80]	; (800fbb8 <netconn_free+0x88>)
 800fb68:	f00f f910 	bl	801ed8c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	3314      	adds	r3, #20
 800fb70:	4618      	mov	r0, r3
 800fb72:	f00e f98d 	bl	801de90 <sys_mbox_valid>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d006      	beq.n	800fb8a <netconn_free+0x5a>
 800fb7c:	4b0c      	ldr	r3, [pc, #48]	; (800fbb0 <netconn_free+0x80>)
 800fb7e:	f240 3226 	movw	r2, #806	; 0x326
 800fb82:	490f      	ldr	r1, [pc, #60]	; (800fbc0 <netconn_free+0x90>)
 800fb84:	480c      	ldr	r0, [pc, #48]	; (800fbb8 <netconn_free+0x88>)
 800fb86:	f00f f901 	bl	801ed8c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	330c      	adds	r3, #12
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f00e f9ff 	bl	801df92 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	330c      	adds	r3, #12
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f00e fa18 	bl	801dfce <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	2007      	movs	r0, #7
 800fba2:	f005 ffed 	bl	8015b80 <memp_free>
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	08020a28 	.word	0x08020a28
 800fbb4:	08020cbc 	.word	0x08020cbc
 800fbb8:	08020ad4 	.word	0x08020ad4
 800fbbc:	08020cec 	.word	0x08020cec
 800fbc0:	08020d28 	.word	0x08020d28

0800fbc4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3310      	adds	r3, #16
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f00e f95d 	bl	801de90 <sys_mbox_valid>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d02f      	beq.n	800fc3c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fbdc:	e018      	b.n	800fc10 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbe6:	2b10      	cmp	r3, #16
 800fbe8:	d10e      	bne.n	800fc08 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	f107 020f 	add.w	r2, r7, #15
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7ff fafe 	bl	800f1f4 <lwip_netconn_is_err_msg>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d108      	bne.n	800fc10 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f006 fe6d 	bl	80168e0 <pbuf_free>
 800fc06:	e003      	b.n	800fc10 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 fe90 	bl	8010930 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3310      	adds	r3, #16
 800fc14:	f107 0210 	add.w	r2, r7, #16
 800fc18:	4611      	mov	r1, r2
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f00e f921 	bl	801de62 <sys_arch_mbox_tryfetch>
 800fc20:	4603      	mov	r3, r0
 800fc22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc26:	d1da      	bne.n	800fbde <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3310      	adds	r3, #16
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f00e f8bb 	bl	801dda8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3310      	adds	r3, #16
 800fc36:	4618      	mov	r0, r3
 800fc38:	f00e f93b 	bl	801deb2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	3314      	adds	r3, #20
 800fc40:	4618      	mov	r0, r3
 800fc42:	f00e f925 	bl	801de90 <sys_mbox_valid>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d034      	beq.n	800fcb6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc4c:	e01d      	b.n	800fc8a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	f107 020e 	add.w	r2, r7, #14
 800fc54:	4611      	mov	r1, r2
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7ff facc 	bl	800f1f4 <lwip_netconn_is_err_msg>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d113      	bne.n	800fc8a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fc66:	6978      	ldr	r0, [r7, #20]
 800fc68:	f7ff ffac 	bl	800fbc4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d007      	beq.n	800fc84 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f007 fc31 	bl	80174e0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	2200      	movs	r2, #0
 800fc82:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fc84:	6978      	ldr	r0, [r7, #20]
 800fc86:	f7ff ff53 	bl	800fb30 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	3314      	adds	r3, #20
 800fc8e:	f107 0210 	add.w	r2, r7, #16
 800fc92:	4611      	mov	r1, r2
 800fc94:	4618      	mov	r0, r3
 800fc96:	f00e f8e4 	bl	801de62 <sys_arch_mbox_tryfetch>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fca0:	d1d5      	bne.n	800fc4e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	3314      	adds	r3, #20
 800fca6:	4618      	mov	r0, r3
 800fca8:	f00e f87e 	bl	801dda8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	3314      	adds	r3, #20
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f00e f8fe 	bl	801deb2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fcb6:	bf00      	nop
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
	...

0800fcc0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	460b      	mov	r3, r1
 800fcca:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <lwip_netconn_do_close_internal+0x24>
 800fcd6:	4ba1      	ldr	r3, [pc, #644]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800fcd8:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fcdc:	49a0      	ldr	r1, [pc, #640]	; (800ff60 <lwip_netconn_do_close_internal+0x2a0>)
 800fcde:	48a1      	ldr	r0, [pc, #644]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800fce0:	f00f f854 	bl	801ed8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcec:	2b10      	cmp	r3, #16
 800fcee:	d006      	beq.n	800fcfe <lwip_netconn_do_close_internal+0x3e>
 800fcf0:	4b9a      	ldr	r3, [pc, #616]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800fcf2:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fcf6:	499c      	ldr	r1, [pc, #624]	; (800ff68 <lwip_netconn_do_close_internal+0x2a8>)
 800fcf8:	489a      	ldr	r0, [pc, #616]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800fcfa:	f00f f847 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	785b      	ldrb	r3, [r3, #1]
 800fd02:	2b04      	cmp	r3, #4
 800fd04:	d006      	beq.n	800fd14 <lwip_netconn_do_close_internal+0x54>
 800fd06:	4b95      	ldr	r3, [pc, #596]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800fd08:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fd0c:	4997      	ldr	r1, [pc, #604]	; (800ff6c <lwip_netconn_do_close_internal+0x2ac>)
 800fd0e:	4895      	ldr	r0, [pc, #596]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800fd10:	f00f f83c 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d106      	bne.n	800fd2a <lwip_netconn_do_close_internal+0x6a>
 800fd1c:	4b8f      	ldr	r3, [pc, #572]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800fd1e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fd22:	4993      	ldr	r1, [pc, #588]	; (800ff70 <lwip_netconn_do_close_internal+0x2b0>)
 800fd24:	488f      	ldr	r0, [pc, #572]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800fd26:	f00f f831 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	69db      	ldr	r3, [r3, #28]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d106      	bne.n	800fd40 <lwip_netconn_do_close_internal+0x80>
 800fd32:	4b8a      	ldr	r3, [pc, #552]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800fd34:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fd38:	498e      	ldr	r1, [pc, #568]	; (800ff74 <lwip_netconn_do_close_internal+0x2b4>)
 800fd3a:	488a      	ldr	r0, [pc, #552]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800fd3c:	f00f f826 	bl	801ed8c <iprintf>

  tpcb = conn->pcb.tcp;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	7a1b      	ldrb	r3, [r3, #8]
 800fd4c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	f003 0301 	and.w	r3, r3, #1
 800fd54:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fd56:	7bfb      	ldrb	r3, [r7, #15]
 800fd58:	f003 0302 	and.w	r3, r3, #2
 800fd5c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d102      	bne.n	800fd6a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fd64:	2301      	movs	r3, #1
 800fd66:	75bb      	strb	r3, [r7, #22]
 800fd68:	e01f      	b.n	800fdaa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fd6a:	7bbb      	ldrb	r3, [r7, #14]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00e      	beq.n	800fd8e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fd74:	2b05      	cmp	r3, #5
 800fd76:	d007      	beq.n	800fd88 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fd7c:	2b06      	cmp	r3, #6
 800fd7e:	d003      	beq.n	800fd88 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fd84:	2b08      	cmp	r3, #8
 800fd86:	d102      	bne.n	800fd8e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	75bb      	strb	r3, [r7, #22]
 800fd8c:	e00d      	b.n	800fdaa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fd8e:	7b7b      	ldrb	r3, [r7, #13]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d008      	beq.n	800fda6 <lwip_netconn_do_close_internal+0xe6>
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	8b5b      	ldrh	r3, [r3, #26]
 800fd98:	f003 0310 	and.w	r3, r3, #16
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fda0:	2301      	movs	r3, #1
 800fda2:	75bb      	strb	r3, [r7, #22]
 800fda4:	e001      	b.n	800fdaa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fdaa:	7dbb      	ldrb	r3, [r7, #22]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d003      	beq.n	800fdb8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	6938      	ldr	r0, [r7, #16]
 800fdb4:	f008 fc26 	bl	8018604 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d104      	bne.n	800fdca <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	6938      	ldr	r0, [r7, #16]
 800fdc4:	f008 fc96 	bl	80186f4 <tcp_accept>
 800fdc8:	e01d      	b.n	800fe06 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fdca:	7bbb      	ldrb	r3, [r7, #14]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d007      	beq.n	800fde0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	6938      	ldr	r0, [r7, #16]
 800fdd4:	f008 fc28 	bl	8018628 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fdd8:	2100      	movs	r1, #0
 800fdda:	6938      	ldr	r0, [r7, #16]
 800fddc:	f008 fc8a 	bl	80186f4 <tcp_accept>
    }
    if (shut_tx) {
 800fde0:	7b7b      	ldrb	r3, [r7, #13]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fde6:	2100      	movs	r1, #0
 800fde8:	6938      	ldr	r0, [r7, #16]
 800fdea:	f008 fc3f 	bl	801866c <tcp_sent>
    }
    if (shut_close) {
 800fdee:	7dbb      	ldrb	r3, [r7, #22]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d008      	beq.n	800fe06 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	6938      	ldr	r0, [r7, #16]
 800fdfa:	f008 fc93 	bl	8018724 <tcp_poll>
      tcp_err(tpcb, NULL);
 800fdfe:	2100      	movs	r1, #0
 800fe00:	6938      	ldr	r0, [r7, #16]
 800fe02:	f008 fc55 	bl	80186b0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fe06:	7dbb      	ldrb	r3, [r7, #22]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d005      	beq.n	800fe18 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fe0c:	6938      	ldr	r0, [r7, #16]
 800fe0e:	f007 fa21 	bl	8017254 <tcp_close>
 800fe12:	4603      	mov	r3, r0
 800fe14:	75fb      	strb	r3, [r7, #23]
 800fe16:	e007      	b.n	800fe28 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
 800fe1a:	7b7a      	ldrb	r2, [r7, #13]
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	6938      	ldr	r0, [r7, #16]
 800fe20:	f007 fa44 	bl	80172ac <tcp_shutdown>
 800fe24:	4603      	mov	r3, r0
 800fe26:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800fe28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d102      	bne.n	800fe36 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800fe30:	2301      	movs	r3, #1
 800fe32:	757b      	strb	r3, [r7, #21]
 800fe34:	e016      	b.n	800fe64 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800fe36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe3e:	d10f      	bne.n	800fe60 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	69db      	ldr	r3, [r3, #28]
 800fe44:	7a5b      	ldrb	r3, [r3, #9]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d10c      	bne.n	800fe64 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fe4e:	7dbb      	ldrb	r3, [r7, #22]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d007      	beq.n	800fe64 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fe54:	6938      	ldr	r0, [r7, #16]
 800fe56:	f007 fb43 	bl	80174e0 <tcp_abort>
          err = ERR_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	75fb      	strb	r3, [r7, #23]
 800fe5e:	e001      	b.n	800fe64 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fe60:	2301      	movs	r3, #1
 800fe62:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fe64:	7d7b      	ldrb	r3, [r7, #21]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d044      	beq.n	800fef4 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	69db      	ldr	r3, [r3, #28]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	330c      	adds	r3, #12
 800fe72:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	69db      	ldr	r3, [r3, #28]
 800fe78:	7dfa      	ldrb	r2, [r7, #23]
 800fe7a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800fe88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d129      	bne.n	800fee4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800fe90:	7dbb      	ldrb	r3, [r7, #22]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00c      	beq.n	800feb0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a1b      	ldr	r3, [r3, #32]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d005      	beq.n	800feb0 <lwip_netconn_do_close_internal+0x1f0>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a1b      	ldr	r3, [r3, #32]
 800fea8:	2200      	movs	r2, #0
 800feaa:	2104      	movs	r1, #4
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	4798      	blx	r3
      }
      if (shut_rx) {
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a1b      	ldr	r3, [r3, #32]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <lwip_netconn_do_close_internal+0x20a>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	2200      	movs	r2, #0
 800fec4:	2100      	movs	r1, #0
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	4798      	blx	r3
      }
      if (shut_tx) {
 800feca:	7b7b      	ldrb	r3, [r7, #13]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d009      	beq.n	800fee4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a1b      	ldr	r3, [r3, #32]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d005      	beq.n	800fee4 <lwip_netconn_do_close_internal+0x224>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6a1b      	ldr	r3, [r3, #32]
 800fedc:	2200      	movs	r2, #0
 800fede:	2102      	movs	r1, #2
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800feea:	68b8      	ldr	r0, [r7, #8]
 800feec:	f00e f844 	bl	801df78 <sys_sem_signal>
    }
    return ERR_OK;
 800fef0:	2300      	movs	r3, #0
 800fef2:	e02e      	b.n	800ff52 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800fef4:	7d7b      	ldrb	r3, [r7, #21]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d11e      	bne.n	800ff38 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	7d1b      	ldrb	r3, [r3, #20]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d106      	bne.n	800ff10 <lwip_netconn_do_close_internal+0x250>
 800ff02:	4b16      	ldr	r3, [pc, #88]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800ff04:	f240 4241 	movw	r2, #1089	; 0x441
 800ff08:	491b      	ldr	r1, [pc, #108]	; (800ff78 <lwip_netconn_do_close_internal+0x2b8>)
 800ff0a:	4816      	ldr	r0, [pc, #88]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800ff0c:	f00e ff3e 	bl	801ed8c <iprintf>
    if (shut_tx) {
 800ff10:	7b7b      	ldrb	r3, [r7, #13]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800ff16:	4919      	ldr	r1, [pc, #100]	; (800ff7c <lwip_netconn_do_close_internal+0x2bc>)
 800ff18:	6938      	ldr	r0, [r7, #16]
 800ff1a:	f008 fba7 	bl	801866c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ff1e:	2201      	movs	r2, #1
 800ff20:	4917      	ldr	r1, [pc, #92]	; (800ff80 <lwip_netconn_do_close_internal+0x2c0>)
 800ff22:	6938      	ldr	r0, [r7, #16]
 800ff24:	f008 fbfe 	bl	8018724 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ff28:	4916      	ldr	r1, [pc, #88]	; (800ff84 <lwip_netconn_do_close_internal+0x2c4>)
 800ff2a:	6938      	ldr	r0, [r7, #16]
 800ff2c:	f008 fbc0 	bl	80186b0 <tcp_err>
    tcp_arg(tpcb, conn);
 800ff30:	6879      	ldr	r1, [r7, #4]
 800ff32:	6938      	ldr	r0, [r7, #16]
 800ff34:	f008 fb66 	bl	8018604 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ff38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <lwip_netconn_do_close_internal+0x28e>
 800ff40:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <lwip_netconn_do_close_internal+0x29c>)
 800ff42:	f240 424d 	movw	r2, #1101	; 0x44d
 800ff46:	4910      	ldr	r1, [pc, #64]	; (800ff88 <lwip_netconn_do_close_internal+0x2c8>)
 800ff48:	4806      	ldr	r0, [pc, #24]	; (800ff64 <lwip_netconn_do_close_internal+0x2a4>)
 800ff4a:	f00e ff1f 	bl	801ed8c <iprintf>
  return err;
 800ff4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3718      	adds	r7, #24
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	08020a28 	.word	0x08020a28
 800ff60:	08020d64 	.word	0x08020d64
 800ff64:	08020ad4 	.word	0x08020ad4
 800ff68:	08020d74 	.word	0x08020d74
 800ff6c:	08020d94 	.word	0x08020d94
 800ff70:	08020db8 	.word	0x08020db8
 800ff74:	08020bf8 	.word	0x08020bf8
 800ff78:	08020dcc 	.word	0x08020dcc
 800ff7c:	0800f53d 	.word	0x0800f53d
 800ff80:	0800f471 	.word	0x0800f471
 800ff84:	0800f5e9 	.word	0x0800f5e9
 800ff88:	08020df0 	.word	0x08020df0

0800ff8c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	785b      	ldrb	r3, [r3, #1]
 800ff9e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ffa0:	7afb      	ldrb	r3, [r7, #11]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00d      	beq.n	800ffc2 <lwip_netconn_do_delconn+0x36>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffb0:	2b10      	cmp	r3, #16
 800ffb2:	d006      	beq.n	800ffc2 <lwip_netconn_do_delconn+0x36>
 800ffb4:	4b60      	ldr	r3, [pc, #384]	; (8010138 <lwip_netconn_do_delconn+0x1ac>)
 800ffb6:	f240 425e 	movw	r2, #1118	; 0x45e
 800ffba:	4960      	ldr	r1, [pc, #384]	; (801013c <lwip_netconn_do_delconn+0x1b0>)
 800ffbc:	4860      	ldr	r0, [pc, #384]	; (8010140 <lwip_netconn_do_delconn+0x1b4>)
 800ffbe:	f00e fee5 	bl	801ed8c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ffc2:	7afb      	ldrb	r3, [r7, #11]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d005      	beq.n	800ffd4 <lwip_netconn_do_delconn+0x48>
 800ffc8:	7afb      	ldrb	r3, [r7, #11]
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d002      	beq.n	800ffd4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ffce:	7afb      	ldrb	r3, [r7, #11]
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d109      	bne.n	800ffe8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ffd4:	7afb      	ldrb	r3, [r7, #11]
 800ffd6:	2b03      	cmp	r3, #3
 800ffd8:	d10a      	bne.n	800fff0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	7e1b      	ldrb	r3, [r3, #24]
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	22fb      	movs	r2, #251	; 0xfb
 800ffec:	711a      	strb	r2, [r3, #4]
 800ffee:	e097      	b.n	8010120 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fff0:	7afb      	ldrb	r3, [r7, #11]
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d10d      	bne.n	8010012 <lwip_netconn_do_delconn+0x86>
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	7e1b      	ldrb	r3, [r3, #24]
 800fffc:	f003 0304 	and.w	r3, r3, #4
 8010000:	2b00      	cmp	r3, #0
 8010002:	d106      	bne.n	8010012 <lwip_netconn_do_delconn+0x86>
 8010004:	4b4c      	ldr	r3, [pc, #304]	; (8010138 <lwip_netconn_do_delconn+0x1ac>)
 8010006:	f240 427a 	movw	r2, #1146	; 0x47a
 801000a:	494e      	ldr	r1, [pc, #312]	; (8010144 <lwip_netconn_do_delconn+0x1b8>)
 801000c:	484c      	ldr	r0, [pc, #304]	; (8010140 <lwip_netconn_do_delconn+0x1b4>)
 801000e:	f00e febd 	bl	801ed8c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4618      	mov	r0, r3
 801001e:	f7ff fdd1 	bl	800fbc4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d05f      	beq.n	80100ec <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010036:	2b10      	cmp	r3, #16
 8010038:	d00d      	beq.n	8010056 <lwip_netconn_do_delconn+0xca>
 801003a:	2b20      	cmp	r3, #32
 801003c:	d151      	bne.n	80100e2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	4618      	mov	r0, r3
 8010050:	f00d fd24 	bl	801da9c <udp_remove>
          break;
 8010054:	e046      	b.n	80100e4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69db      	ldr	r3, [r3, #28]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d006      	beq.n	801006e <lwip_netconn_do_delconn+0xe2>
 8010060:	4b35      	ldr	r3, [pc, #212]	; (8010138 <lwip_netconn_do_delconn+0x1ac>)
 8010062:	f240 4294 	movw	r2, #1172	; 0x494
 8010066:	4938      	ldr	r1, [pc, #224]	; (8010148 <lwip_netconn_do_delconn+0x1bc>)
 8010068:	4835      	ldr	r0, [pc, #212]	; (8010140 <lwip_netconn_do_delconn+0x1b4>)
 801006a:	f00e fe8f 	bl	801ed8c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2204      	movs	r2, #4
 8010074:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2203      	movs	r2, #3
 801007a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2100      	movs	r1, #0
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff fe18 	bl	800fcc0 <lwip_netconn_do_close_internal>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d04b      	beq.n	801012e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	785b      	ldrb	r3, [r3, #1]
 801009c:	2b04      	cmp	r3, #4
 801009e:	d006      	beq.n	80100ae <lwip_netconn_do_delconn+0x122>
 80100a0:	4b25      	ldr	r3, [pc, #148]	; (8010138 <lwip_netconn_do_delconn+0x1ac>)
 80100a2:	f240 429a 	movw	r2, #1178	; 0x49a
 80100a6:	4929      	ldr	r1, [pc, #164]	; (801014c <lwip_netconn_do_delconn+0x1c0>)
 80100a8:	4825      	ldr	r0, [pc, #148]	; (8010140 <lwip_netconn_do_delconn+0x1b4>)
 80100aa:	f00e fe6f 	bl	801ed8c <iprintf>
            UNLOCK_TCPIP_CORE();
 80100ae:	4828      	ldr	r0, [pc, #160]	; (8010150 <lwip_netconn_do_delconn+0x1c4>)
 80100b0:	f00d ffcb 	bl	801e04a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	330c      	adds	r3, #12
 80100ba:	2100      	movs	r1, #0
 80100bc:	4618      	mov	r0, r3
 80100be:	f00d ff2a 	bl	801df16 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80100c2:	4823      	ldr	r0, [pc, #140]	; (8010150 <lwip_netconn_do_delconn+0x1c4>)
 80100c4:	f00d ffb2 	bl	801e02c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	785b      	ldrb	r3, [r3, #1]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d02d      	beq.n	801012e <lwip_netconn_do_delconn+0x1a2>
 80100d2:	4b19      	ldr	r3, [pc, #100]	; (8010138 <lwip_netconn_do_delconn+0x1ac>)
 80100d4:	f240 429e 	movw	r2, #1182	; 0x49e
 80100d8:	491c      	ldr	r1, [pc, #112]	; (801014c <lwip_netconn_do_delconn+0x1c0>)
 80100da:	4819      	ldr	r0, [pc, #100]	; (8010140 <lwip_netconn_do_delconn+0x1b4>)
 80100dc:	f00e fe56 	bl	801ed8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80100e0:	e025      	b.n	801012e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80100e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2200      	movs	r2, #0
 80100ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d007      	beq.n	8010106 <lwip_netconn_do_delconn+0x17a>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	6a1b      	ldr	r3, [r3, #32]
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	6810      	ldr	r0, [r2, #0]
 8010100:	2200      	movs	r2, #0
 8010102:	2100      	movs	r1, #0
 8010104:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d007      	beq.n	8010120 <lwip_netconn_do_delconn+0x194>
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	6810      	ldr	r0, [r2, #0]
 801011a:	2200      	movs	r2, #0
 801011c:	2102      	movs	r1, #2
 801011e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	330c      	adds	r3, #12
 8010126:	4618      	mov	r0, r3
 8010128:	f00d ff40 	bl	801dfac <sys_sem_valid>
 801012c:	e000      	b.n	8010130 <lwip_netconn_do_delconn+0x1a4>
          return;
 801012e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	08020a28 	.word	0x08020a28
 801013c:	08020e00 	.word	0x08020e00
 8010140:	08020ad4 	.word	0x08020ad4
 8010144:	08020e14 	.word	0x08020e14
 8010148:	08020e34 	.word	0x08020e34
 801014c:	08020e50 	.word	0x08020e50
 8010150:	2000946c 	.word	0x2000946c

08010154 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d025      	beq.n	80101b6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010174:	2b10      	cmp	r3, #16
 8010176:	d00e      	beq.n	8010196 <lwip_netconn_do_bind+0x42>
 8010178:	2b20      	cmp	r3, #32
 801017a:	d119      	bne.n	80101b0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	6858      	ldr	r0, [r3, #4]
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	6899      	ldr	r1, [r3, #8]
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	899b      	ldrh	r3, [r3, #12]
 801018a:	461a      	mov	r2, r3
 801018c:	f00d fb70 	bl	801d870 <udp_bind>
 8010190:	4603      	mov	r3, r0
 8010192:	73fb      	strb	r3, [r7, #15]
        break;
 8010194:	e011      	b.n	80101ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6858      	ldr	r0, [r3, #4]
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	6899      	ldr	r1, [r3, #8]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	899b      	ldrh	r3, [r3, #12]
 80101a4:	461a      	mov	r2, r3
 80101a6:	f007 f9a7 	bl	80174f8 <tcp_bind>
 80101aa:	4603      	mov	r3, r0
 80101ac:	73fb      	strb	r3, [r7, #15]
        break;
 80101ae:	e004      	b.n	80101ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80101b0:	23fa      	movs	r3, #250	; 0xfa
 80101b2:	73fb      	strb	r3, [r7, #15]
        break;
 80101b4:	e001      	b.n	80101ba <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80101b6:	23fa      	movs	r3, #250	; 0xfa
 80101b8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	7bfa      	ldrb	r2, [r7, #15]
 80101be:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d07f      	beq.n	80102de <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101e8:	2b10      	cmp	r3, #16
 80101ea:	d175      	bne.n	80102d8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	785b      	ldrb	r3, [r3, #1]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d165      	bne.n	80102c2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	7d1b      	ldrb	r3, [r3, #20]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8010202:	23fa      	movs	r3, #250	; 0xfa
 8010204:	72fb      	strb	r3, [r7, #11]
 8010206:	e06c      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010208:	23ff      	movs	r3, #255	; 0xff
 801020a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	f107 020b 	add.w	r2, r7, #11
 8010216:	7cf9      	ldrb	r1, [r7, #19]
 8010218:	4618      	mov	r0, r3
 801021a:	f007 fa25 	bl	8017668 <tcp_listen_with_backlog_and_err>
 801021e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d05d      	beq.n	80102e2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3310      	adds	r3, #16
 801022c:	4618      	mov	r0, r3
 801022e:	f00d fe2f 	bl	801de90 <sys_mbox_valid>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00b      	beq.n	8010250 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	3310      	adds	r3, #16
 801023e:	4618      	mov	r0, r3
 8010240:	f00d fdb2 	bl	801dda8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3310      	adds	r3, #16
 801024a:	4618      	mov	r0, r3
 801024c:	f00d fe31 	bl	801deb2 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8010250:	2300      	movs	r3, #0
 8010252:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	3314      	adds	r3, #20
 801025a:	4618      	mov	r0, r3
 801025c:	f00d fe18 	bl	801de90 <sys_mbox_valid>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d108      	bne.n	8010278 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3314      	adds	r3, #20
 801026c:	2106      	movs	r1, #6
 801026e:	4618      	mov	r0, r3
 8010270:	f00d fd80 	bl	801dd74 <sys_mbox_new>
 8010274:	4603      	mov	r3, r0
 8010276:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010278:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d118      	bne.n	80102b2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2202      	movs	r2, #2
 8010286:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4619      	mov	r1, r3
 801029c:	4610      	mov	r0, r2
 801029e:	f008 f9b1 	bl	8018604 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	4912      	ldr	r1, [pc, #72]	; (80102f4 <lwip_netconn_do_listen+0x12c>)
 80102aa:	4618      	mov	r0, r3
 80102ac:	f008 fa22 	bl	80186f4 <tcp_accept>
 80102b0:	e017      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f006 ffce 	bl	8017254 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2200      	movs	r2, #0
 80102be:	605a      	str	r2, [r3, #4]
 80102c0:	e00f      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	785b      	ldrb	r3, [r3, #1]
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	d102      	bne.n	80102d2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	72fb      	strb	r3, [r7, #11]
 80102d0:	e007      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80102d2:	23f5      	movs	r3, #245	; 0xf5
 80102d4:	72fb      	strb	r3, [r7, #11]
 80102d6:	e004      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80102d8:	23f0      	movs	r3, #240	; 0xf0
 80102da:	72fb      	strb	r3, [r7, #11]
 80102dc:	e001      	b.n	80102e2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80102de:	23f5      	movs	r3, #245	; 0xf5
 80102e0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80102e2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80102ea:	bf00      	nop
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	0800f7e5 	.word	0x0800f7e5

080102f8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	2200      	movs	r2, #0
 8010308:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d022      	beq.n	801035a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801031e:	2b10      	cmp	r3, #16
 8010320:	d11b      	bne.n	801035a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801032e:	d202      	bcs.n	8010336 <lwip_netconn_do_recv+0x3e>
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	b29b      	uxth	r3, r3
 8010334:	e001      	b.n	801033a <lwip_netconn_do_recv+0x42>
 8010336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801033a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	89fa      	ldrh	r2, [r7, #14]
 8010344:	4611      	mov	r1, r2
 8010346:	4618      	mov	r0, r3
 8010348:	f007 fa92 	bl	8017870 <tcp_recved>
        remaining -= recved;
 801034c:	89fb      	ldrh	r3, [r7, #14]
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d1e6      	bne.n	8010328 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801035a:	bf00      	nop
 801035c:	3718      	adds	r7, #24
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
	...

08010364 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <lwip_netconn_do_writemore+0x24>
 801037a:	4b96      	ldr	r3, [pc, #600]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 801037c:	f240 6273 	movw	r2, #1651	; 0x673
 8010380:	4995      	ldr	r1, [pc, #596]	; (80105d8 <lwip_netconn_do_writemore+0x274>)
 8010382:	4896      	ldr	r0, [pc, #600]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 8010384:	f00e fd02 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	785b      	ldrb	r3, [r3, #1]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d006      	beq.n	801039e <lwip_netconn_do_writemore+0x3a>
 8010390:	4b90      	ldr	r3, [pc, #576]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 8010392:	f240 6274 	movw	r2, #1652	; 0x674
 8010396:	4992      	ldr	r1, [pc, #584]	; (80105e0 <lwip_netconn_do_writemore+0x27c>)
 8010398:	4890      	ldr	r0, [pc, #576]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 801039a:	f00e fcf7 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	69db      	ldr	r3, [r3, #28]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d106      	bne.n	80103b4 <lwip_netconn_do_writemore+0x50>
 80103a6:	4b8b      	ldr	r3, [pc, #556]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 80103a8:	f240 6275 	movw	r2, #1653	; 0x675
 80103ac:	498d      	ldr	r1, [pc, #564]	; (80105e4 <lwip_netconn_do_writemore+0x280>)
 80103ae:	488b      	ldr	r0, [pc, #556]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 80103b0:	f00e fcec 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <lwip_netconn_do_writemore+0x66>
 80103bc:	4b85      	ldr	r3, [pc, #532]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 80103be:	f240 6276 	movw	r2, #1654	; 0x676
 80103c2:	4989      	ldr	r1, [pc, #548]	; (80105e8 <lwip_netconn_do_writemore+0x284>)
 80103c4:	4885      	ldr	r0, [pc, #532]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 80103c6:	f00e fce1 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	69db      	ldr	r3, [r3, #28]
 80103ce:	699a      	ldr	r2, [r3, #24]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	69db      	ldr	r3, [r3, #28]
 80103d4:	695b      	ldr	r3, [r3, #20]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d306      	bcc.n	80103e8 <lwip_netconn_do_writemore+0x84>
 80103da:	4b7e      	ldr	r3, [pc, #504]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 80103dc:	f240 6277 	movw	r2, #1655	; 0x677
 80103e0:	4982      	ldr	r1, [pc, #520]	; (80105ec <lwip_netconn_do_writemore+0x288>)
 80103e2:	487e      	ldr	r0, [pc, #504]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 80103e4:	f00e fcd2 	bl	801ed8c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	69db      	ldr	r3, [r3, #28]
 80103ec:	899b      	ldrh	r3, [r3, #12]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <lwip_netconn_do_writemore+0x9c>
 80103f2:	4b78      	ldr	r3, [pc, #480]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 80103f4:	f240 6279 	movw	r2, #1657	; 0x679
 80103f8:	497d      	ldr	r1, [pc, #500]	; (80105f0 <lwip_netconn_do_writemore+0x28c>)
 80103fa:	4878      	ldr	r0, [pc, #480]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 80103fc:	f00e fcc6 	bl	801ed8c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	69db      	ldr	r3, [r3, #28]
 8010404:	7f1b      	ldrb	r3, [r3, #28]
 8010406:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	7e1b      	ldrb	r3, [r3, #24]
 801040c:	f003 0302 	and.w	r3, r3, #2
 8010410:	2b00      	cmp	r3, #0
 8010412:	d104      	bne.n	801041e <lwip_netconn_do_writemore+0xba>
 8010414:	7ebb      	ldrb	r3, [r7, #26]
 8010416:	f003 0304 	and.w	r3, r3, #4
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <lwip_netconn_do_writemore+0xbe>
 801041e:	2301      	movs	r3, #1
 8010420:	e000      	b.n	8010424 <lwip_netconn_do_writemore+0xc0>
 8010422:	2300      	movs	r3, #0
 8010424:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	69db      	ldr	r3, [r3, #28]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	4413      	add	r3, r2
 8010436:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	69db      	ldr	r3, [r3, #28]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	69db      	ldr	r3, [r3, #28]
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010450:	d307      	bcc.n	8010462 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010456:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010458:	7ebb      	ldrb	r3, [r7, #26]
 801045a:	f043 0302 	orr.w	r3, r3, #2
 801045e:	76bb      	strb	r3, [r7, #26]
 8010460:	e001      	b.n	8010466 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801046e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010470:	89fa      	ldrh	r2, [r7, #14]
 8010472:	8bbb      	ldrh	r3, [r7, #28]
 8010474:	429a      	cmp	r2, r3
 8010476:	d216      	bcs.n	80104a6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010478:	89fb      	ldrh	r3, [r7, #14]
 801047a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801047c:	7e3b      	ldrb	r3, [r7, #24]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00d      	beq.n	801049e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010482:	8bbb      	ldrh	r3, [r7, #28]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d10e      	bne.n	80104a6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	69db      	ldr	r3, [r3, #28]
 801048c:	699b      	ldr	r3, [r3, #24]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <lwip_netconn_do_writemore+0x134>
 8010492:	f06f 0306 	mvn.w	r3, #6
 8010496:	e000      	b.n	801049a <lwip_netconn_do_writemore+0x136>
 8010498:	2300      	movs	r3, #0
 801049a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801049c:	e07d      	b.n	801059a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801049e:	7ebb      	ldrb	r3, [r7, #26]
 80104a0:	f043 0302 	orr.w	r3, r3, #2
 80104a4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	69db      	ldr	r3, [r3, #28]
 80104aa:	691a      	ldr	r2, [r3, #16]
 80104ac:	8bbb      	ldrh	r3, [r7, #28]
 80104ae:	441a      	add	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	69db      	ldr	r3, [r3, #28]
 80104b4:	689b      	ldr	r3, [r3, #8]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d906      	bls.n	80104ca <lwip_netconn_do_writemore+0x166>
 80104bc:	4b45      	ldr	r3, [pc, #276]	; (80105d4 <lwip_netconn_do_writemore+0x270>)
 80104be:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80104c2:	494c      	ldr	r1, [pc, #304]	; (80105f4 <lwip_netconn_do_writemore+0x290>)
 80104c4:	4845      	ldr	r0, [pc, #276]	; (80105dc <lwip_netconn_do_writemore+0x278>)
 80104c6:	f00e fc61 	bl	801ed8c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80104ca:	8bbb      	ldrh	r3, [r7, #28]
 80104cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d103      	bne.n	80104dc <lwip_netconn_do_writemore+0x178>
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104da:	d209      	bcs.n	80104f0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80104e0:	8bba      	ldrh	r2, [r7, #28]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d10b      	bne.n	80104fe <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	69db      	ldr	r3, [r3, #28]
 80104ea:	899b      	ldrh	r3, [r3, #12]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d906      	bls.n	80104fe <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80104f0:	2301      	movs	r3, #1
 80104f2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80104f4:	7ebb      	ldrb	r3, [r7, #26]
 80104f6:	f043 0302 	orr.w	r3, r3, #2
 80104fa:	76bb      	strb	r3, [r7, #26]
 80104fc:	e001      	b.n	8010502 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6858      	ldr	r0, [r3, #4]
 8010506:	7ebb      	ldrb	r3, [r7, #26]
 8010508:	8bba      	ldrh	r2, [r7, #28]
 801050a:	6979      	ldr	r1, [r7, #20]
 801050c:	f00a ffba 	bl	801b484 <tcp_write>
 8010510:	4603      	mov	r3, r0
 8010512:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010514:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d12c      	bne.n	8010576 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	69db      	ldr	r3, [r3, #28]
 8010520:	6999      	ldr	r1, [r3, #24]
 8010522:	8bba      	ldrh	r2, [r7, #28]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	440a      	add	r2, r1
 801052a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	69db      	ldr	r3, [r3, #28]
 8010530:	6919      	ldr	r1, [r3, #16]
 8010532:	8bba      	ldrh	r2, [r7, #28]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	69db      	ldr	r3, [r3, #28]
 8010538:	440a      	add	r2, r1
 801053a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	69db      	ldr	r3, [r3, #28]
 8010540:	691a      	ldr	r2, [r3, #16]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	69db      	ldr	r3, [r3, #28]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	429a      	cmp	r2, r3
 801054c:	d113      	bne.n	8010576 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	69db      	ldr	r3, [r3, #28]
 8010552:	899a      	ldrh	r2, [r3, #12]
 8010554:	3a01      	subs	r2, #1
 8010556:	b292      	uxth	r2, r2
 8010558:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	69db      	ldr	r3, [r3, #28]
 801055e:	899b      	ldrh	r3, [r3, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d008      	beq.n	8010576 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	689a      	ldr	r2, [r3, #8]
 801056a:	3208      	adds	r2, #8
 801056c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	69db      	ldr	r3, [r3, #28]
 8010572:	2200      	movs	r2, #0
 8010574:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010576:	7e7b      	ldrb	r3, [r7, #25]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d004      	beq.n	8010586 <lwip_netconn_do_writemore+0x222>
 801057c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010580:	2b00      	cmp	r3, #0
 8010582:	f43f af50 	beq.w	8010426 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010586:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d004      	beq.n	8010598 <lwip_netconn_do_writemore+0x234>
 801058e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010596:	d147      	bne.n	8010628 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8010598:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801059a:	7e3b      	ldrb	r3, [r7, #24]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d02b      	beq.n	80105f8 <lwip_netconn_do_writemore+0x294>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	69db      	ldr	r3, [r3, #28]
 80105a4:	699a      	ldr	r2, [r3, #24]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	69db      	ldr	r3, [r3, #28]
 80105aa:	695b      	ldr	r3, [r3, #20]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d223      	bcs.n	80105f8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6a1b      	ldr	r3, [r3, #32]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d005      	beq.n	80105c4 <lwip_netconn_do_writemore+0x260>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6a1b      	ldr	r3, [r3, #32]
 80105bc:	2200      	movs	r2, #0
 80105be:	2103      	movs	r1, #3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	7e1b      	ldrb	r3, [r3, #24]
 80105c8:	f043 0310 	orr.w	r3, r3, #16
 80105cc:	b2da      	uxtb	r2, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	761a      	strb	r2, [r3, #24]
 80105d2:	e029      	b.n	8010628 <lwip_netconn_do_writemore+0x2c4>
 80105d4:	08020a28 	.word	0x08020a28
 80105d8:	08020be8 	.word	0x08020be8
 80105dc:	08020ad4 	.word	0x08020ad4
 80105e0:	08020ef0 	.word	0x08020ef0
 80105e4:	08020bf8 	.word	0x08020bf8
 80105e8:	08020f10 	.word	0x08020f10
 80105ec:	08020f28 	.word	0x08020f28
 80105f0:	08020f68 	.word	0x08020f68
 80105f4:	08020f90 	.word	0x08020f90
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010600:	f640 3269 	movw	r2, #2921	; 0xb69
 8010604:	4293      	cmp	r3, r2
 8010606:	d905      	bls.n	8010614 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010610:	2b07      	cmp	r3, #7
 8010612:	d909      	bls.n	8010628 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6a1b      	ldr	r3, [r3, #32]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d005      	beq.n	8010628 <lwip_netconn_do_writemore+0x2c4>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6a1b      	ldr	r3, [r3, #32]
 8010620:	2200      	movs	r2, #0
 8010622:	2103      	movs	r1, #3
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010628:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d11d      	bne.n	801066c <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	69db      	ldr	r3, [r3, #28]
 8010634:	699a      	ldr	r2, [r3, #24]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	69db      	ldr	r3, [r3, #28]
 801063a:	695b      	ldr	r3, [r3, #20]
 801063c:	429a      	cmp	r2, r3
 801063e:	d002      	beq.n	8010646 <lwip_netconn_do_writemore+0x2e2>
 8010640:	7e3b      	ldrb	r3, [r7, #24]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010646:	2301      	movs	r3, #1
 8010648:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	4618      	mov	r0, r3
 8010650:	f00b fd02 	bl	801c058 <tcp_output>
 8010654:	4603      	mov	r3, r0
 8010656:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010658:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801065c:	f113 0f04 	cmn.w	r3, #4
 8010660:	d12c      	bne.n	80106bc <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010662:	7b3b      	ldrb	r3, [r7, #12]
 8010664:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010666:	2301      	movs	r3, #1
 8010668:	76fb      	strb	r3, [r7, #27]
 801066a:	e027      	b.n	80106bc <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 801066c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010674:	d120      	bne.n	80106b8 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	f00b fcec 	bl	801c058 <tcp_output>
 8010680:	4603      	mov	r3, r0
 8010682:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010684:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010688:	f113 0f04 	cmn.w	r3, #4
 801068c:	d104      	bne.n	8010698 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801068e:	7b7b      	ldrb	r3, [r7, #13]
 8010690:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010692:	2301      	movs	r3, #1
 8010694:	76fb      	strb	r3, [r7, #27]
 8010696:	e011      	b.n	80106bc <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8010698:	7e3b      	ldrb	r3, [r7, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00e      	beq.n	80106bc <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	699b      	ldr	r3, [r3, #24]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d102      	bne.n	80106ae <lwip_netconn_do_writemore+0x34a>
 80106a8:	f06f 0306 	mvn.w	r3, #6
 80106ac:	e000      	b.n	80106b0 <lwip_netconn_do_writemore+0x34c>
 80106ae:	2300      	movs	r3, #0
 80106b0:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80106b2:	2301      	movs	r3, #1
 80106b4:	76fb      	strb	r3, [r7, #27]
 80106b6:	e001      	b.n	80106bc <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80106b8:	2301      	movs	r3, #1
 80106ba:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80106bc:	7efb      	ldrb	r3, [r7, #27]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d015      	beq.n	80106ee <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	69db      	ldr	r3, [r3, #28]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	330c      	adds	r3, #12
 80106ca:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	69db      	ldr	r3, [r3, #28]
 80106d0:	7ffa      	ldrb	r2, [r7, #31]
 80106d2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d006      	beq.n	80106f4 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80106e6:	68b8      	ldr	r0, [r7, #8]
 80106e8:	f00d fc46 	bl	801df78 <sys_sem_signal>
 80106ec:	e002      	b.n	80106f4 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80106ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106f2:	e000      	b.n	80106f6 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop

08010700 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fd1e 	bl	800f152 <netconn_err>
 8010716:	4603      	mov	r3, r0
 8010718:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d166      	bne.n	80107f0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801072c:	2b10      	cmp	r3, #16
 801072e:	d15d      	bne.n	80107ec <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	785b      	ldrb	r3, [r3, #1]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d002      	beq.n	8010740 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801073a:	23fb      	movs	r3, #251	; 0xfb
 801073c:	73fb      	strb	r3, [r7, #15]
 801073e:	e057      	b.n	80107f0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d04d      	beq.n	80107e6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2201      	movs	r2, #1
 8010750:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d006      	beq.n	801076a <lwip_netconn_do_write+0x6a>
 801075c:	4b28      	ldr	r3, [pc, #160]	; (8010800 <lwip_netconn_do_write+0x100>)
 801075e:	f240 7223 	movw	r2, #1827	; 0x723
 8010762:	4928      	ldr	r1, [pc, #160]	; (8010804 <lwip_netconn_do_write+0x104>)
 8010764:	4828      	ldr	r0, [pc, #160]	; (8010808 <lwip_netconn_do_write+0x108>)
 8010766:	f00e fb11 	bl	801ed8c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	695b      	ldr	r3, [r3, #20]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <lwip_netconn_do_write+0x80>
 8010772:	4b23      	ldr	r3, [pc, #140]	; (8010800 <lwip_netconn_do_write+0x100>)
 8010774:	f240 7224 	movw	r2, #1828	; 0x724
 8010778:	4924      	ldr	r1, [pc, #144]	; (801080c <lwip_netconn_do_write+0x10c>)
 801077a:	4823      	ldr	r0, [pc, #140]	; (8010808 <lwip_netconn_do_write+0x108>)
 801077c:	f00e fb06 	bl	801ed8c <iprintf>
        msg->conn->current_msg = msg;
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2100      	movs	r1, #0
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff fde8 	bl	8010364 <lwip_netconn_do_writemore>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d02e      	beq.n	80107f8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	785b      	ldrb	r3, [r3, #1]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d006      	beq.n	80107b2 <lwip_netconn_do_write+0xb2>
 80107a4:	4b16      	ldr	r3, [pc, #88]	; (8010800 <lwip_netconn_do_write+0x100>)
 80107a6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80107aa:	4919      	ldr	r1, [pc, #100]	; (8010810 <lwip_netconn_do_write+0x110>)
 80107ac:	4816      	ldr	r0, [pc, #88]	; (8010808 <lwip_netconn_do_write+0x108>)
 80107ae:	f00e faed 	bl	801ed8c <iprintf>
          UNLOCK_TCPIP_CORE();
 80107b2:	4818      	ldr	r0, [pc, #96]	; (8010814 <lwip_netconn_do_write+0x114>)
 80107b4:	f00d fc49 	bl	801e04a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	330c      	adds	r3, #12
 80107be:	2100      	movs	r1, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	f00d fba8 	bl	801df16 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80107c6:	4813      	ldr	r0, [pc, #76]	; (8010814 <lwip_netconn_do_write+0x114>)
 80107c8:	f00d fc30 	bl	801e02c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	785b      	ldrb	r3, [r3, #1]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d110      	bne.n	80107f8 <lwip_netconn_do_write+0xf8>
 80107d6:	4b0a      	ldr	r3, [pc, #40]	; (8010800 <lwip_netconn_do_write+0x100>)
 80107d8:	f240 722c 	movw	r2, #1836	; 0x72c
 80107dc:	490c      	ldr	r1, [pc, #48]	; (8010810 <lwip_netconn_do_write+0x110>)
 80107de:	480a      	ldr	r0, [pc, #40]	; (8010808 <lwip_netconn_do_write+0x108>)
 80107e0:	f00e fad4 	bl	801ed8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80107e4:	e008      	b.n	80107f8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80107e6:	23f5      	movs	r3, #245	; 0xf5
 80107e8:	73fb      	strb	r3, [r7, #15]
 80107ea:	e001      	b.n	80107f0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80107ec:	23fa      	movs	r3, #250	; 0xfa
 80107ee:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	7bfa      	ldrb	r2, [r7, #15]
 80107f4:	711a      	strb	r2, [r3, #4]
 80107f6:	e000      	b.n	80107fa <lwip_netconn_do_write+0xfa>
        return;
 80107f8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	08020a28 	.word	0x08020a28
 8010804:	08020e34 	.word	0x08020e34
 8010808:	08020ad4 	.word	0x08020ad4
 801080c:	08020fbc 	.word	0x08020fbc
 8010810:	08020e50 	.word	0x08020e50
 8010814:	2000946c 	.word	0x2000946c

08010818 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	785b      	ldrb	r3, [r3, #1]
 801082a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d069      	beq.n	801090a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010840:	2b10      	cmp	r3, #16
 8010842:	d162      	bne.n	801090a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010848:	2b03      	cmp	r3, #3
 801084a:	d002      	beq.n	8010852 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801084c:	7afb      	ldrb	r3, [r7, #11]
 801084e:	2b02      	cmp	r3, #2
 8010850:	d05b      	beq.n	801090a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010852:	7afb      	ldrb	r3, [r7, #11]
 8010854:	2b03      	cmp	r3, #3
 8010856:	d103      	bne.n	8010860 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	22f5      	movs	r2, #245	; 0xf5
 801085c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801085e:	e059      	b.n	8010914 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010860:	7afb      	ldrb	r3, [r7, #11]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d103      	bne.n	801086e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	22fb      	movs	r2, #251	; 0xfb
 801086a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801086c:	e052      	b.n	8010914 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	7a1b      	ldrb	r3, [r3, #8]
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	d004      	beq.n	8010884 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff f9a0 	bl	800fbc4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	69db      	ldr	r3, [r3, #28]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d006      	beq.n	801089c <lwip_netconn_do_close+0x84>
 801088e:	4b23      	ldr	r3, [pc, #140]	; (801091c <lwip_netconn_do_close+0x104>)
 8010890:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010894:	4922      	ldr	r1, [pc, #136]	; (8010920 <lwip_netconn_do_close+0x108>)
 8010896:	4823      	ldr	r0, [pc, #140]	; (8010924 <lwip_netconn_do_close+0x10c>)
 8010898:	f00e fa78 	bl	801ed8c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2204      	movs	r2, #4
 80108a2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68fa      	ldr	r2, [r7, #12]
 80108aa:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2100      	movs	r1, #0
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff fa04 	bl	800fcc0 <lwip_netconn_do_close_internal>
 80108b8:	4603      	mov	r3, r0
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d029      	beq.n	8010912 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	785b      	ldrb	r3, [r3, #1]
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	d006      	beq.n	80108d6 <lwip_netconn_do_close+0xbe>
 80108c8:	4b14      	ldr	r3, [pc, #80]	; (801091c <lwip_netconn_do_close+0x104>)
 80108ca:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80108ce:	4916      	ldr	r1, [pc, #88]	; (8010928 <lwip_netconn_do_close+0x110>)
 80108d0:	4814      	ldr	r0, [pc, #80]	; (8010924 <lwip_netconn_do_close+0x10c>)
 80108d2:	f00e fa5b 	bl	801ed8c <iprintf>
        UNLOCK_TCPIP_CORE();
 80108d6:	4815      	ldr	r0, [pc, #84]	; (801092c <lwip_netconn_do_close+0x114>)
 80108d8:	f00d fbb7 	bl	801e04a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	330c      	adds	r3, #12
 80108e2:	2100      	movs	r1, #0
 80108e4:	4618      	mov	r0, r3
 80108e6:	f00d fb16 	bl	801df16 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80108ea:	4810      	ldr	r0, [pc, #64]	; (801092c <lwip_netconn_do_close+0x114>)
 80108ec:	f00d fb9e 	bl	801e02c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	785b      	ldrb	r3, [r3, #1]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00b      	beq.n	8010912 <lwip_netconn_do_close+0xfa>
 80108fa:	4b08      	ldr	r3, [pc, #32]	; (801091c <lwip_netconn_do_close+0x104>)
 80108fc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010900:	4909      	ldr	r1, [pc, #36]	; (8010928 <lwip_netconn_do_close+0x110>)
 8010902:	4808      	ldr	r0, [pc, #32]	; (8010924 <lwip_netconn_do_close+0x10c>)
 8010904:	f00e fa42 	bl	801ed8c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010908:	e003      	b.n	8010912 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	22f5      	movs	r2, #245	; 0xf5
 801090e:	711a      	strb	r2, [r3, #4]
 8010910:	e000      	b.n	8010914 <lwip_netconn_do_close+0xfc>
      return;
 8010912:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	08020a28 	.word	0x08020a28
 8010920:	08020e34 	.word	0x08020e34
 8010924:	08020ad4 	.word	0x08020ad4
 8010928:	08020e50 	.word	0x08020e50
 801092c:	2000946c 	.word	0x2000946c

08010930 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d013      	beq.n	8010966 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4618      	mov	r0, r3
 801094c:	f005 ffc8 	bl	80168e0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	605a      	str	r2, [r3, #4]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	685a      	ldr	r2, [r3, #4]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	2006      	movs	r0, #6
 8010962:	f005 f90d 	bl	8015b80 <memp_free>
  }
}
 8010966:	bf00      	nop
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
	...

08010970 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d108      	bne.n	8010994 <netbuf_data+0x24>
 8010982:	4b1b      	ldr	r3, [pc, #108]	; (80109f0 <netbuf_data+0x80>)
 8010984:	22c6      	movs	r2, #198	; 0xc6
 8010986:	491b      	ldr	r1, [pc, #108]	; (80109f4 <netbuf_data+0x84>)
 8010988:	481b      	ldr	r0, [pc, #108]	; (80109f8 <netbuf_data+0x88>)
 801098a:	f00e f9ff 	bl	801ed8c <iprintf>
 801098e:	f06f 030f 	mvn.w	r3, #15
 8010992:	e029      	b.n	80109e8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d108      	bne.n	80109ac <netbuf_data+0x3c>
 801099a:	4b15      	ldr	r3, [pc, #84]	; (80109f0 <netbuf_data+0x80>)
 801099c:	22c7      	movs	r2, #199	; 0xc7
 801099e:	4917      	ldr	r1, [pc, #92]	; (80109fc <netbuf_data+0x8c>)
 80109a0:	4815      	ldr	r0, [pc, #84]	; (80109f8 <netbuf_data+0x88>)
 80109a2:	f00e f9f3 	bl	801ed8c <iprintf>
 80109a6:	f06f 030f 	mvn.w	r3, #15
 80109aa:	e01d      	b.n	80109e8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d108      	bne.n	80109c4 <netbuf_data+0x54>
 80109b2:	4b0f      	ldr	r3, [pc, #60]	; (80109f0 <netbuf_data+0x80>)
 80109b4:	22c8      	movs	r2, #200	; 0xc8
 80109b6:	4912      	ldr	r1, [pc, #72]	; (8010a00 <netbuf_data+0x90>)
 80109b8:	480f      	ldr	r0, [pc, #60]	; (80109f8 <netbuf_data+0x88>)
 80109ba:	f00e f9e7 	bl	801ed8c <iprintf>
 80109be:	f06f 030f 	mvn.w	r3, #15
 80109c2:	e011      	b.n	80109e8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d102      	bne.n	80109d2 <netbuf_data+0x62>
    return ERR_BUF;
 80109cc:	f06f 0301 	mvn.w	r3, #1
 80109d0:	e00a      	b.n	80109e8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	685a      	ldr	r2, [r3, #4]
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	895a      	ldrh	r2, [r3, #10]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3710      	adds	r7, #16
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	08020fe8 	.word	0x08020fe8
 80109f4:	08021158 	.word	0x08021158
 80109f8:	080210a0 	.word	0x080210a0
 80109fc:	08021174 	.word	0x08021174
 8010a00:	08021194 	.word	0x08021194

08010a04 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010a0e:	f00c fbdb 	bl	801d1c8 <sys_timeouts_sleeptime>
 8010a12:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a1a:	d10b      	bne.n	8010a34 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010a1c:	4813      	ldr	r0, [pc, #76]	; (8010a6c <tcpip_timeouts_mbox_fetch+0x68>)
 8010a1e:	f00d fb14 	bl	801e04a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010a22:	2200      	movs	r2, #0
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f00d f9ea 	bl	801de00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010a2c:	480f      	ldr	r0, [pc, #60]	; (8010a6c <tcpip_timeouts_mbox_fetch+0x68>)
 8010a2e:	f00d fafd 	bl	801e02c <sys_mutex_lock>
    return;
 8010a32:	e018      	b.n	8010a66 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d102      	bne.n	8010a40 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010a3a:	f00c fb8b 	bl	801d154 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a3e:	e7e6      	b.n	8010a0e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010a40:	480a      	ldr	r0, [pc, #40]	; (8010a6c <tcpip_timeouts_mbox_fetch+0x68>)
 8010a42:	f00d fb02 	bl	801e04a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010a46:	68fa      	ldr	r2, [r7, #12]
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f00d f9d8 	bl	801de00 <sys_arch_mbox_fetch>
 8010a50:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010a52:	4806      	ldr	r0, [pc, #24]	; (8010a6c <tcpip_timeouts_mbox_fetch+0x68>)
 8010a54:	f00d faea 	bl	801e02c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a5e:	d102      	bne.n	8010a66 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010a60:	f00c fb78 	bl	801d154 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a64:	e7d3      	b.n	8010a0e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	2000946c 	.word	0x2000946c

08010a70 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010a78:	4810      	ldr	r0, [pc, #64]	; (8010abc <tcpip_thread+0x4c>)
 8010a7a:	f00d fad7 	bl	801e02c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010a7e:	4b10      	ldr	r3, [pc, #64]	; (8010ac0 <tcpip_thread+0x50>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d005      	beq.n	8010a92 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010a86:	4b0e      	ldr	r3, [pc, #56]	; (8010ac0 <tcpip_thread+0x50>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a0e      	ldr	r2, [pc, #56]	; (8010ac4 <tcpip_thread+0x54>)
 8010a8c:	6812      	ldr	r2, [r2, #0]
 8010a8e:	4610      	mov	r0, r2
 8010a90:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010a92:	f107 030c 	add.w	r3, r7, #12
 8010a96:	4619      	mov	r1, r3
 8010a98:	480b      	ldr	r0, [pc, #44]	; (8010ac8 <tcpip_thread+0x58>)
 8010a9a:	f7ff ffb3 	bl	8010a04 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d106      	bne.n	8010ab2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <tcpip_thread+0x5c>)
 8010aa6:	2291      	movs	r2, #145	; 0x91
 8010aa8:	4909      	ldr	r1, [pc, #36]	; (8010ad0 <tcpip_thread+0x60>)
 8010aaa:	480a      	ldr	r0, [pc, #40]	; (8010ad4 <tcpip_thread+0x64>)
 8010aac:	f00e f96e 	bl	801ed8c <iprintf>
      continue;
 8010ab0:	e003      	b.n	8010aba <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f000 f80f 	bl	8010ad8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010aba:	e7ea      	b.n	8010a92 <tcpip_thread+0x22>
 8010abc:	2000946c 	.word	0x2000946c
 8010ac0:	20008f20 	.word	0x20008f20
 8010ac4:	20008f24 	.word	0x20008f24
 8010ac8:	20008f28 	.word	0x20008f28
 8010acc:	080211e8 	.word	0x080211e8
 8010ad0:	08021280 	.word	0x08021280
 8010ad4:	080212a0 	.word	0x080212a0

08010ad8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d026      	beq.n	8010b36 <tcpip_thread_handle_msg+0x5e>
 8010ae8:	2b02      	cmp	r3, #2
 8010aea:	dc2b      	bgt.n	8010b44 <tcpip_thread_handle_msg+0x6c>
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d002      	beq.n	8010af6 <tcpip_thread_handle_msg+0x1e>
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d015      	beq.n	8010b20 <tcpip_thread_handle_msg+0x48>
 8010af4:	e026      	b.n	8010b44 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6850      	ldr	r0, [r2, #4]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	6892      	ldr	r2, [r2, #8]
 8010b02:	4611      	mov	r1, r2
 8010b04:	4798      	blx	r3
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d004      	beq.n	8010b16 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f005 fee5 	bl	80168e0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	2009      	movs	r0, #9
 8010b1a:	f005 f831 	bl	8015b80 <memp_free>
      break;
 8010b1e:	e018      	b.n	8010b52 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	6892      	ldr	r2, [r2, #8]
 8010b28:	4610      	mov	r0, r2
 8010b2a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010b2c:	6879      	ldr	r1, [r7, #4]
 8010b2e:	2008      	movs	r0, #8
 8010b30:	f005 f826 	bl	8015b80 <memp_free>
      break;
 8010b34:	e00d      	b.n	8010b52 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	6892      	ldr	r2, [r2, #8]
 8010b3e:	4610      	mov	r0, r2
 8010b40:	4798      	blx	r3
      break;
 8010b42:	e006      	b.n	8010b52 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010b44:	4b05      	ldr	r3, [pc, #20]	; (8010b5c <tcpip_thread_handle_msg+0x84>)
 8010b46:	22cf      	movs	r2, #207	; 0xcf
 8010b48:	4905      	ldr	r1, [pc, #20]	; (8010b60 <tcpip_thread_handle_msg+0x88>)
 8010b4a:	4806      	ldr	r0, [pc, #24]	; (8010b64 <tcpip_thread_handle_msg+0x8c>)
 8010b4c:	f00e f91e 	bl	801ed8c <iprintf>
      break;
 8010b50:	bf00      	nop
  }
}
 8010b52:	bf00      	nop
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	080211e8 	.word	0x080211e8
 8010b60:	08021280 	.word	0x08021280
 8010b64:	080212a0 	.word	0x080212a0

08010b68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010b74:	481a      	ldr	r0, [pc, #104]	; (8010be0 <tcpip_inpkt+0x78>)
 8010b76:	f00d f98b 	bl	801de90 <sys_mbox_valid>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d105      	bne.n	8010b8c <tcpip_inpkt+0x24>
 8010b80:	4b18      	ldr	r3, [pc, #96]	; (8010be4 <tcpip_inpkt+0x7c>)
 8010b82:	22fc      	movs	r2, #252	; 0xfc
 8010b84:	4918      	ldr	r1, [pc, #96]	; (8010be8 <tcpip_inpkt+0x80>)
 8010b86:	4819      	ldr	r0, [pc, #100]	; (8010bec <tcpip_inpkt+0x84>)
 8010b88:	f00e f900 	bl	801ed8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010b8c:	2009      	movs	r0, #9
 8010b8e:	f004 ff81 	bl	8015a94 <memp_malloc>
 8010b92:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d102      	bne.n	8010ba0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b9e:	e01a      	b.n	8010bd6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010bb8:	6979      	ldr	r1, [r7, #20]
 8010bba:	4809      	ldr	r0, [pc, #36]	; (8010be0 <tcpip_inpkt+0x78>)
 8010bbc:	f00d f906 	bl	801ddcc <sys_mbox_trypost>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d006      	beq.n	8010bd4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010bc6:	6979      	ldr	r1, [r7, #20]
 8010bc8:	2009      	movs	r0, #9
 8010bca:	f004 ffd9 	bl	8015b80 <memp_free>
    return ERR_MEM;
 8010bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bd2:	e000      	b.n	8010bd6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010bd4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3718      	adds	r7, #24
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	20008f28 	.word	0x20008f28
 8010be4:	080211e8 	.word	0x080211e8
 8010be8:	080212c8 	.word	0x080212c8
 8010bec:	080212a0 	.word	0x080212a0

08010bf0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c00:	f003 0318 	and.w	r3, r3, #24
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d006      	beq.n	8010c16 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010c08:	4a08      	ldr	r2, [pc, #32]	; (8010c2c <tcpip_input+0x3c>)
 8010c0a:	6839      	ldr	r1, [r7, #0]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7ff ffab 	bl	8010b68 <tcpip_inpkt>
 8010c12:	4603      	mov	r3, r0
 8010c14:	e005      	b.n	8010c22 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010c16:	4a06      	ldr	r2, [pc, #24]	; (8010c30 <tcpip_input+0x40>)
 8010c18:	6839      	ldr	r1, [r7, #0]
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7ff ffa4 	bl	8010b68 <tcpip_inpkt>
 8010c20:	4603      	mov	r3, r0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	0801dbc9 	.word	0x0801dbc9
 8010c30:	08013dc5 	.word	0x08013dc5

08010c34 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010c3e:	4819      	ldr	r0, [pc, #100]	; (8010ca4 <tcpip_try_callback+0x70>)
 8010c40:	f00d f926 	bl	801de90 <sys_mbox_valid>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <tcpip_try_callback+0x24>
 8010c4a:	4b17      	ldr	r3, [pc, #92]	; (8010ca8 <tcpip_try_callback+0x74>)
 8010c4c:	f240 125d 	movw	r2, #349	; 0x15d
 8010c50:	4916      	ldr	r1, [pc, #88]	; (8010cac <tcpip_try_callback+0x78>)
 8010c52:	4817      	ldr	r0, [pc, #92]	; (8010cb0 <tcpip_try_callback+0x7c>)
 8010c54:	f00e f89a 	bl	801ed8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010c58:	2008      	movs	r0, #8
 8010c5a:	f004 ff1b 	bl	8015a94 <memp_malloc>
 8010c5e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d102      	bne.n	8010c6c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c6a:	e017      	b.n	8010c9c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010c7e:	68f9      	ldr	r1, [r7, #12]
 8010c80:	4808      	ldr	r0, [pc, #32]	; (8010ca4 <tcpip_try_callback+0x70>)
 8010c82:	f00d f8a3 	bl	801ddcc <sys_mbox_trypost>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d006      	beq.n	8010c9a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010c8c:	68f9      	ldr	r1, [r7, #12]
 8010c8e:	2008      	movs	r0, #8
 8010c90:	f004 ff76 	bl	8015b80 <memp_free>
    return ERR_MEM;
 8010c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c98:	e000      	b.n	8010c9c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010c9a:	2300      	movs	r3, #0
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	20008f28 	.word	0x20008f28
 8010ca8:	080211e8 	.word	0x080211e8
 8010cac:	080212c8 	.word	0x080212c8
 8010cb0:	080212a0 	.word	0x080212a0

08010cb4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010cc0:	4806      	ldr	r0, [pc, #24]	; (8010cdc <tcpip_send_msg_wait_sem+0x28>)
 8010cc2:	f00d f9b3 	bl	801e02c <sys_mutex_lock>
  fn(apimsg);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	68b8      	ldr	r0, [r7, #8]
 8010cca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010ccc:	4803      	ldr	r0, [pc, #12]	; (8010cdc <tcpip_send_msg_wait_sem+0x28>)
 8010cce:	f00d f9bc 	bl	801e04a <sys_mutex_unlock>
  return ERR_OK;
 8010cd2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	2000946c 	.word	0x2000946c

08010ce0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010cea:	f004 fa2e 	bl	801514a <lwip_init>

  tcpip_init_done = initfunc;
 8010cee:	4a17      	ldr	r2, [pc, #92]	; (8010d4c <tcpip_init+0x6c>)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010cf4:	4a16      	ldr	r2, [pc, #88]	; (8010d50 <tcpip_init+0x70>)
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010cfa:	2106      	movs	r1, #6
 8010cfc:	4815      	ldr	r0, [pc, #84]	; (8010d54 <tcpip_init+0x74>)
 8010cfe:	f00d f839 	bl	801dd74 <sys_mbox_new>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d006      	beq.n	8010d16 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010d08:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <tcpip_init+0x78>)
 8010d0a:	f240 2261 	movw	r2, #609	; 0x261
 8010d0e:	4913      	ldr	r1, [pc, #76]	; (8010d5c <tcpip_init+0x7c>)
 8010d10:	4813      	ldr	r0, [pc, #76]	; (8010d60 <tcpip_init+0x80>)
 8010d12:	f00e f83b 	bl	801ed8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010d16:	4813      	ldr	r0, [pc, #76]	; (8010d64 <tcpip_init+0x84>)
 8010d18:	f00d f972 	bl	801e000 <sys_mutex_new>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d006      	beq.n	8010d30 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010d22:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <tcpip_init+0x78>)
 8010d24:	f240 2265 	movw	r2, #613	; 0x265
 8010d28:	490f      	ldr	r1, [pc, #60]	; (8010d68 <tcpip_init+0x88>)
 8010d2a:	480d      	ldr	r0, [pc, #52]	; (8010d60 <tcpip_init+0x80>)
 8010d2c:	f00e f82e 	bl	801ed8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010d30:	2328      	movs	r3, #40	; 0x28
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d38:	2200      	movs	r2, #0
 8010d3a:	490c      	ldr	r1, [pc, #48]	; (8010d6c <tcpip_init+0x8c>)
 8010d3c:	480c      	ldr	r0, [pc, #48]	; (8010d70 <tcpip_init+0x90>)
 8010d3e:	f00d f991 	bl	801e064 <sys_thread_new>
}
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20008f20 	.word	0x20008f20
 8010d50:	20008f24 	.word	0x20008f24
 8010d54:	20008f28 	.word	0x20008f28
 8010d58:	080211e8 	.word	0x080211e8
 8010d5c:	080212d8 	.word	0x080212d8
 8010d60:	080212a0 	.word	0x080212a0
 8010d64:	2000946c 	.word	0x2000946c
 8010d68:	080212fc 	.word	0x080212fc
 8010d6c:	08010a71 	.word	0x08010a71
 8010d70:	08021320 	.word	0x08021320

08010d74 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010d78:	4b20      	ldr	r3, [pc, #128]	; (8010dfc <dhcp_inc_pcb_refcount+0x88>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d133      	bne.n	8010de8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010d80:	4b1f      	ldr	r3, [pc, #124]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d005      	beq.n	8010d94 <dhcp_inc_pcb_refcount+0x20>
 8010d88:	4b1e      	ldr	r3, [pc, #120]	; (8010e04 <dhcp_inc_pcb_refcount+0x90>)
 8010d8a:	22e5      	movs	r2, #229	; 0xe5
 8010d8c:	491e      	ldr	r1, [pc, #120]	; (8010e08 <dhcp_inc_pcb_refcount+0x94>)
 8010d8e:	481f      	ldr	r0, [pc, #124]	; (8010e0c <dhcp_inc_pcb_refcount+0x98>)
 8010d90:	f00d fffc 	bl	801ed8c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010d94:	f00c fec4 	bl	801db20 <udp_new>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	4a19      	ldr	r2, [pc, #100]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010d9c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010d9e:	4b18      	ldr	r3, [pc, #96]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d102      	bne.n	8010dac <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010daa:	e024      	b.n	8010df6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010dac:	4b14      	ldr	r3, [pc, #80]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	7a5a      	ldrb	r2, [r3, #9]
 8010db2:	4b13      	ldr	r3, [pc, #76]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f042 0220 	orr.w	r2, r2, #32
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010dbe:	4b10      	ldr	r3, [pc, #64]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2244      	movs	r2, #68	; 0x44
 8010dc4:	4912      	ldr	r1, [pc, #72]	; (8010e10 <dhcp_inc_pcb_refcount+0x9c>)
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f00c fd52 	bl	801d870 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010dcc:	4b0c      	ldr	r3, [pc, #48]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2243      	movs	r2, #67	; 0x43
 8010dd2:	490f      	ldr	r1, [pc, #60]	; (8010e10 <dhcp_inc_pcb_refcount+0x9c>)
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f00c fdd3 	bl	801d980 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010dda:	4b09      	ldr	r3, [pc, #36]	; (8010e00 <dhcp_inc_pcb_refcount+0x8c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2200      	movs	r2, #0
 8010de0:	490c      	ldr	r1, [pc, #48]	; (8010e14 <dhcp_inc_pcb_refcount+0xa0>)
 8010de2:	4618      	mov	r0, r3
 8010de4:	f00c fe3a 	bl	801da5c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010de8:	4b04      	ldr	r3, [pc, #16]	; (8010dfc <dhcp_inc_pcb_refcount+0x88>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	3301      	adds	r3, #1
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	4b02      	ldr	r3, [pc, #8]	; (8010dfc <dhcp_inc_pcb_refcount+0x88>)
 8010df2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	20008f30 	.word	0x20008f30
 8010e00:	20008f2c 	.word	0x20008f2c
 8010e04:	08021328 	.word	0x08021328
 8010e08:	080213c8 	.word	0x080213c8
 8010e0c:	080213f0 	.word	0x080213f0
 8010e10:	08024da4 	.word	0x08024da4
 8010e14:	080126ad 	.word	0x080126ad

08010e18 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010e1c:	4b0e      	ldr	r3, [pc, #56]	; (8010e58 <dhcp_dec_pcb_refcount+0x40>)
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d105      	bne.n	8010e30 <dhcp_dec_pcb_refcount+0x18>
 8010e24:	4b0d      	ldr	r3, [pc, #52]	; (8010e5c <dhcp_dec_pcb_refcount+0x44>)
 8010e26:	22ff      	movs	r2, #255	; 0xff
 8010e28:	490d      	ldr	r1, [pc, #52]	; (8010e60 <dhcp_dec_pcb_refcount+0x48>)
 8010e2a:	480e      	ldr	r0, [pc, #56]	; (8010e64 <dhcp_dec_pcb_refcount+0x4c>)
 8010e2c:	f00d ffae 	bl	801ed8c <iprintf>
  dhcp_pcb_refcount--;
 8010e30:	4b09      	ldr	r3, [pc, #36]	; (8010e58 <dhcp_dec_pcb_refcount+0x40>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	3b01      	subs	r3, #1
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	4b07      	ldr	r3, [pc, #28]	; (8010e58 <dhcp_dec_pcb_refcount+0x40>)
 8010e3a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010e3c:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <dhcp_dec_pcb_refcount+0x40>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d107      	bne.n	8010e54 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010e44:	4b08      	ldr	r3, [pc, #32]	; (8010e68 <dhcp_dec_pcb_refcount+0x50>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f00c fe27 	bl	801da9c <udp_remove>
    dhcp_pcb = NULL;
 8010e4e:	4b06      	ldr	r3, [pc, #24]	; (8010e68 <dhcp_dec_pcb_refcount+0x50>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	601a      	str	r2, [r3, #0]
  }
}
 8010e54:	bf00      	nop
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	20008f30 	.word	0x20008f30
 8010e5c:	08021328 	.word	0x08021328
 8010e60:	08021418 	.word	0x08021418
 8010e64:	080213f0 	.word	0x080213f0
 8010e68:	20008f2c 	.word	0x20008f2c

08010e6c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e78:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010e7a:	210c      	movs	r1, #12
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f001 f857 	bl	8011f30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010e82:	4b06      	ldr	r3, [pc, #24]	; (8010e9c <dhcp_handle_nak+0x30>)
 8010e84:	4a05      	ldr	r2, [pc, #20]	; (8010e9c <dhcp_handle_nak+0x30>)
 8010e86:	4905      	ldr	r1, [pc, #20]	; (8010e9c <dhcp_handle_nak+0x30>)
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f005 f81b 	bl	8015ec4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 fc4a 	bl	8011728 <dhcp_discover>
}
 8010e94:	bf00      	nop
 8010e96:	3710      	adds	r7, #16
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	08024da4 	.word	0x08024da4

08010ea0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eac:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010eae:	2108      	movs	r1, #8
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f001 f83d 	bl	8011f30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	331c      	adds	r3, #28
 8010eba:	2200      	movs	r2, #0
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f002 fb3e 	bl	8013540 <etharp_query>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	799b      	ldrb	r3, [r3, #6]
 8010ecc:	2bff      	cmp	r3, #255	; 0xff
 8010ece:	d005      	beq.n	8010edc <dhcp_check+0x3c>
    dhcp->tries++;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	799b      	ldrb	r3, [r3, #6]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	b2da      	uxtb	r2, r3
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010edc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010ee0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010ee2:	893b      	ldrh	r3, [r7, #8]
 8010ee4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ee8:	4a06      	ldr	r2, [pc, #24]	; (8010f04 <dhcp_check+0x64>)
 8010eea:	fb82 1203 	smull	r1, r2, r2, r3
 8010eee:	1152      	asrs	r2, r2, #5
 8010ef0:	17db      	asrs	r3, r3, #31
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010efa:	bf00      	nop
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	10624dd3 	.word	0x10624dd3

08010f08 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f16:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <dhcp_handle_offer+0x44>)
 8010f1a:	789b      	ldrb	r3, [r3, #2]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d011      	beq.n	8010f44 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010f26:	4b0a      	ldr	r3, [pc, #40]	; (8010f50 <dhcp_handle_offer+0x48>)
 8010f28:	689b      	ldr	r3, [r3, #8]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f004 f885 	bl	801503a <lwip_htonl>
 8010f30:	4602      	mov	r2, r0
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	691a      	ldr	r2, [r3, #16]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f808 	bl	8010f54 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010f44:	bf00      	nop
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	20009470 	.word	0x20009470
 8010f50:	20009478 	.word	0x20009478

08010f54 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010f54:	b5b0      	push	{r4, r5, r7, lr}
 8010f56:	b08a      	sub	sp, #40	; 0x28
 8010f58:	af02      	add	r7, sp, #8
 8010f5a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d109      	bne.n	8010f76 <dhcp_select+0x22>
 8010f62:	4b71      	ldr	r3, [pc, #452]	; (8011128 <dhcp_select+0x1d4>)
 8010f64:	f240 1277 	movw	r2, #375	; 0x177
 8010f68:	4970      	ldr	r1, [pc, #448]	; (801112c <dhcp_select+0x1d8>)
 8010f6a:	4871      	ldr	r0, [pc, #452]	; (8011130 <dhcp_select+0x1dc>)
 8010f6c:	f00d ff0e 	bl	801ed8c <iprintf>
 8010f70:	f06f 030f 	mvn.w	r3, #15
 8010f74:	e0d3      	b.n	801111e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f7a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <dhcp_select+0x42>
 8010f82:	4b69      	ldr	r3, [pc, #420]	; (8011128 <dhcp_select+0x1d4>)
 8010f84:	f240 1279 	movw	r2, #377	; 0x179
 8010f88:	496a      	ldr	r1, [pc, #424]	; (8011134 <dhcp_select+0x1e0>)
 8010f8a:	4869      	ldr	r0, [pc, #420]	; (8011130 <dhcp_select+0x1dc>)
 8010f8c:	f00d fefe 	bl	801ed8c <iprintf>
 8010f90:	f06f 0305 	mvn.w	r3, #5
 8010f94:	e0c3      	b.n	801111e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010f96:	2101      	movs	r1, #1
 8010f98:	69b8      	ldr	r0, [r7, #24]
 8010f9a:	f000 ffc9 	bl	8011f30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010f9e:	f107 030c 	add.w	r3, r7, #12
 8010fa2:	2203      	movs	r2, #3
 8010fa4:	69b9      	ldr	r1, [r7, #24]
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f001 fc4e 	bl	8012848 <dhcp_create_msg>
 8010fac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f000 8085 	beq.w	80110c0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010fbc:	89b8      	ldrh	r0, [r7, #12]
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	2239      	movs	r2, #57	; 0x39
 8010fc8:	f000 ffcc 	bl	8011f64 <dhcp_option>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010fd0:	89b8      	ldrh	r0, [r7, #12]
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fdc:	461a      	mov	r2, r3
 8010fde:	f001 f81b 	bl	8012018 <dhcp_option_short>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010fe6:	89b8      	ldrh	r0, [r7, #12]
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010fee:	2304      	movs	r3, #4
 8010ff0:	2232      	movs	r2, #50	; 0x32
 8010ff2:	f000 ffb7 	bl	8011f64 <dhcp_option>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010ffa:	89bc      	ldrh	r4, [r7, #12]
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011002:	69bb      	ldr	r3, [r7, #24]
 8011004:	69db      	ldr	r3, [r3, #28]
 8011006:	4618      	mov	r0, r3
 8011008:	f004 f817 	bl	801503a <lwip_htonl>
 801100c:	4603      	mov	r3, r0
 801100e:	461a      	mov	r2, r3
 8011010:	4629      	mov	r1, r5
 8011012:	4620      	mov	r0, r4
 8011014:	f001 f832 	bl	801207c <dhcp_option_long>
 8011018:	4603      	mov	r3, r0
 801101a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801101c:	89b8      	ldrh	r0, [r7, #12]
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011024:	2304      	movs	r3, #4
 8011026:	2236      	movs	r2, #54	; 0x36
 8011028:	f000 ff9c 	bl	8011f64 <dhcp_option>
 801102c:	4603      	mov	r3, r0
 801102e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011030:	89bc      	ldrh	r4, [r7, #12]
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	699b      	ldr	r3, [r3, #24]
 801103c:	4618      	mov	r0, r3
 801103e:	f003 fffc 	bl	801503a <lwip_htonl>
 8011042:	4603      	mov	r3, r0
 8011044:	461a      	mov	r2, r3
 8011046:	4629      	mov	r1, r5
 8011048:	4620      	mov	r0, r4
 801104a:	f001 f817 	bl	801207c <dhcp_option_long>
 801104e:	4603      	mov	r3, r0
 8011050:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011052:	89b8      	ldrh	r0, [r7, #12]
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801105a:	2303      	movs	r3, #3
 801105c:	2237      	movs	r2, #55	; 0x37
 801105e:	f000 ff81 	bl	8011f64 <dhcp_option>
 8011062:	4603      	mov	r3, r0
 8011064:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011066:	2300      	movs	r3, #0
 8011068:	77bb      	strb	r3, [r7, #30]
 801106a:	e00e      	b.n	801108a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801106c:	89b8      	ldrh	r0, [r7, #12]
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011074:	7fbb      	ldrb	r3, [r7, #30]
 8011076:	4a30      	ldr	r2, [pc, #192]	; (8011138 <dhcp_select+0x1e4>)
 8011078:	5cd3      	ldrb	r3, [r2, r3]
 801107a:	461a      	mov	r2, r3
 801107c:	f000 ffa6 	bl	8011fcc <dhcp_option_byte>
 8011080:	4603      	mov	r3, r0
 8011082:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011084:	7fbb      	ldrb	r3, [r7, #30]
 8011086:	3301      	adds	r3, #1
 8011088:	77bb      	strb	r3, [r7, #30]
 801108a:	7fbb      	ldrb	r3, [r7, #30]
 801108c:	2b02      	cmp	r3, #2
 801108e:	d9ed      	bls.n	801106c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011090:	89b8      	ldrh	r0, [r7, #12]
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	33f0      	adds	r3, #240	; 0xf0
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	4619      	mov	r1, r3
 801109a:	f001 fcab 	bl	80129f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801109e:	4b27      	ldr	r3, [pc, #156]	; (801113c <dhcp_select+0x1e8>)
 80110a0:	6818      	ldr	r0, [r3, #0]
 80110a2:	4b27      	ldr	r3, [pc, #156]	; (8011140 <dhcp_select+0x1ec>)
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	2343      	movs	r3, #67	; 0x43
 80110ac:	4a25      	ldr	r2, [pc, #148]	; (8011144 <dhcp_select+0x1f0>)
 80110ae:	6979      	ldr	r1, [r7, #20]
 80110b0:	f00c faf8 	bl	801d6a4 <udp_sendto_if_src>
 80110b4:	4603      	mov	r3, r0
 80110b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80110b8:	6978      	ldr	r0, [r7, #20]
 80110ba:	f005 fc11 	bl	80168e0 <pbuf_free>
 80110be:	e001      	b.n	80110c4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80110c0:	23ff      	movs	r3, #255	; 0xff
 80110c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	799b      	ldrb	r3, [r3, #6]
 80110c8:	2bff      	cmp	r3, #255	; 0xff
 80110ca:	d005      	beq.n	80110d8 <dhcp_select+0x184>
    dhcp->tries++;
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	799b      	ldrb	r3, [r3, #6]
 80110d0:	3301      	adds	r3, #1
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	799b      	ldrb	r3, [r3, #6]
 80110dc:	2b05      	cmp	r3, #5
 80110de:	d80d      	bhi.n	80110fc <dhcp_select+0x1a8>
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	799b      	ldrb	r3, [r3, #6]
 80110e4:	461a      	mov	r2, r3
 80110e6:	2301      	movs	r3, #1
 80110e8:	4093      	lsls	r3, r2
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	461a      	mov	r2, r3
 80110ee:	0152      	lsls	r2, r2, #5
 80110f0:	1ad2      	subs	r2, r2, r3
 80110f2:	0092      	lsls	r2, r2, #2
 80110f4:	4413      	add	r3, r2
 80110f6:	00db      	lsls	r3, r3, #3
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	e001      	b.n	8011100 <dhcp_select+0x1ac>
 80110fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011100:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011102:	89fb      	ldrh	r3, [r7, #14]
 8011104:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011108:	4a0f      	ldr	r2, [pc, #60]	; (8011148 <dhcp_select+0x1f4>)
 801110a:	fb82 1203 	smull	r1, r2, r2, r3
 801110e:	1152      	asrs	r2, r2, #5
 8011110:	17db      	asrs	r3, r3, #31
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	b29a      	uxth	r2, r3
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801111a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3720      	adds	r7, #32
 8011122:	46bd      	mov	sp, r7
 8011124:	bdb0      	pop	{r4, r5, r7, pc}
 8011126:	bf00      	nop
 8011128:	08021328 	.word	0x08021328
 801112c:	0802143c 	.word	0x0802143c
 8011130:	080213f0 	.word	0x080213f0
 8011134:	08021458 	.word	0x08021458
 8011138:	20000030 	.word	0x20000030
 801113c:	20008f2c 	.word	0x20008f2c
 8011140:	08024da4 	.word	0x08024da4
 8011144:	08024da8 	.word	0x08024da8
 8011148:	10624dd3 	.word	0x10624dd3

0801114c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8011152:	4b27      	ldr	r3, [pc, #156]	; (80111f0 <dhcp_coarse_tmr+0xa4>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	607b      	str	r3, [r7, #4]
 8011158:	e042      	b.n	80111e0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801115e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d039      	beq.n	80111da <dhcp_coarse_tmr+0x8e>
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	795b      	ldrb	r3, [r3, #5]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d035      	beq.n	80111da <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	8a9b      	ldrh	r3, [r3, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d012      	beq.n	801119c <dhcp_coarse_tmr+0x50>
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	8a5b      	ldrh	r3, [r3, #18]
 801117a:	3301      	adds	r3, #1
 801117c:	b29a      	uxth	r2, r3
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	825a      	strh	r2, [r3, #18]
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	8a5a      	ldrh	r2, [r3, #18]
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	8a9b      	ldrh	r3, [r3, #20]
 801118a:	429a      	cmp	r2, r3
 801118c:	d106      	bne.n	801119c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fe34 	bl	8011dfc <dhcp_release_and_stop>
        dhcp_start(netif);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 f96b 	bl	8011470 <dhcp_start>
 801119a:	e01e      	b.n	80111da <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	8a1b      	ldrh	r3, [r3, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00b      	beq.n	80111bc <dhcp_coarse_tmr+0x70>
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	8a1b      	ldrh	r3, [r3, #16]
 80111a8:	1e5a      	subs	r2, r3, #1
 80111aa:	b291      	uxth	r1, r2
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	8211      	strh	r1, [r2, #16]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d103      	bne.n	80111bc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 f8c7 	bl	8011348 <dhcp_t2_timeout>
 80111ba:	e00e      	b.n	80111da <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	89db      	ldrh	r3, [r3, #14]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00a      	beq.n	80111da <dhcp_coarse_tmr+0x8e>
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	89db      	ldrh	r3, [r3, #14]
 80111c8:	1e5a      	subs	r2, r3, #1
 80111ca:	b291      	uxth	r1, r2
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	81d1      	strh	r1, [r2, #14]
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d102      	bne.n	80111da <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f888 	bl	80112ea <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	607b      	str	r3, [r7, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1b9      	bne.n	801115a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80111e6:	bf00      	nop
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	20010364 	.word	0x20010364

080111f4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80111fa:	4b16      	ldr	r3, [pc, #88]	; (8011254 <dhcp_fine_tmr+0x60>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	607b      	str	r3, [r7, #4]
 8011200:	e020      	b.n	8011244 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011206:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d017      	beq.n	801123e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	891b      	ldrh	r3, [r3, #8]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d906      	bls.n	8011224 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	891b      	ldrh	r3, [r3, #8]
 801121a:	3b01      	subs	r3, #1
 801121c:	b29a      	uxth	r2, r3
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	811a      	strh	r2, [r3, #8]
 8011222:	e00c      	b.n	801123e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	891b      	ldrh	r3, [r3, #8]
 8011228:	2b01      	cmp	r3, #1
 801122a:	d108      	bne.n	801123e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	891b      	ldrh	r3, [r3, #8]
 8011230:	3b01      	subs	r3, #1
 8011232:	b29a      	uxth	r2, r3
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f000 f80d 	bl	8011258 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	607b      	str	r3, [r7, #4]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d1db      	bne.n	8011202 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801124a:	bf00      	nop
 801124c:	bf00      	nop
 801124e:	3708      	adds	r7, #8
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	20010364 	.word	0x20010364

08011258 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011264:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	795b      	ldrb	r3, [r3, #5]
 801126a:	2b0c      	cmp	r3, #12
 801126c:	d003      	beq.n	8011276 <dhcp_timeout+0x1e>
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	795b      	ldrb	r3, [r3, #5]
 8011272:	2b06      	cmp	r3, #6
 8011274:	d103      	bne.n	801127e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fa56 	bl	8011728 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801127c:	e031      	b.n	80112e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	795b      	ldrb	r3, [r3, #5]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d10e      	bne.n	80112a4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	799b      	ldrb	r3, [r3, #6]
 801128a:	2b05      	cmp	r3, #5
 801128c:	d803      	bhi.n	8011296 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7ff fe60 	bl	8010f54 <dhcp_select>
}
 8011294:	e025      	b.n	80112e2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 fdb0 	bl	8011dfc <dhcp_release_and_stop>
      dhcp_start(netif);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 f8e7 	bl	8011470 <dhcp_start>
}
 80112a2:	e01e      	b.n	80112e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	795b      	ldrb	r3, [r3, #5]
 80112a8:	2b08      	cmp	r3, #8
 80112aa:	d10b      	bne.n	80112c4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	799b      	ldrb	r3, [r3, #6]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d803      	bhi.n	80112bc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f7ff fdf3 	bl	8010ea0 <dhcp_check>
}
 80112ba:	e012      	b.n	80112e2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 fad5 	bl	801186c <dhcp_bind>
}
 80112c2:	e00e      	b.n	80112e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	795b      	ldrb	r3, [r3, #5]
 80112c8:	2b03      	cmp	r3, #3
 80112ca:	d10a      	bne.n	80112e2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	799b      	ldrb	r3, [r3, #6]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d803      	bhi.n	80112dc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f000 fcdb 	bl	8011c90 <dhcp_reboot>
}
 80112da:	e002      	b.n	80112e2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fa23 	bl	8011728 <dhcp_discover>
}
 80112e2:	bf00      	nop
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b084      	sub	sp, #16
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	795b      	ldrb	r3, [r3, #5]
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d007      	beq.n	8011310 <dhcp_t1_timeout+0x26>
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	795b      	ldrb	r3, [r3, #5]
 8011304:	2b0a      	cmp	r3, #10
 8011306:	d003      	beq.n	8011310 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801130c:	2b05      	cmp	r3, #5
 801130e:	d117      	bne.n	8011340 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 fb85 	bl	8011a20 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	899b      	ldrh	r3, [r3, #12]
 801131a:	461a      	mov	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	8a5b      	ldrh	r3, [r3, #18]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	2b01      	cmp	r3, #1
 8011324:	dd0c      	ble.n	8011340 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	461a      	mov	r2, r3
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	8a5b      	ldrh	r3, [r3, #18]
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	da00      	bge.n	8011338 <dhcp_t1_timeout+0x4e>
 8011336:	3301      	adds	r3, #1
 8011338:	105b      	asrs	r3, r3, #1
 801133a:	b29a      	uxth	r2, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011340:	bf00      	nop
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011354:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	795b      	ldrb	r3, [r3, #5]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d00b      	beq.n	8011376 <dhcp_t2_timeout+0x2e>
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	795b      	ldrb	r3, [r3, #5]
 8011362:	2b0a      	cmp	r3, #10
 8011364:	d007      	beq.n	8011376 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801136a:	2b05      	cmp	r3, #5
 801136c:	d003      	beq.n	8011376 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	795b      	ldrb	r3, [r3, #5]
 8011372:	2b04      	cmp	r3, #4
 8011374:	d117      	bne.n	80113a6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fbee 	bl	8011b58 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	8a9b      	ldrh	r3, [r3, #20]
 8011380:	461a      	mov	r2, r3
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	8a5b      	ldrh	r3, [r3, #18]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	2b01      	cmp	r3, #1
 801138a:	dd0c      	ble.n	80113a6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	8a9b      	ldrh	r3, [r3, #20]
 8011390:	461a      	mov	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	8a5b      	ldrh	r3, [r3, #18]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	2b00      	cmp	r3, #0
 801139a:	da00      	bge.n	801139e <dhcp_t2_timeout+0x56>
 801139c:	3301      	adds	r3, #1
 801139e:	105b      	asrs	r3, r3, #1
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80113a6:	bf00      	nop
 80113a8:	3710      	adds	r7, #16
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
	...

080113b0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113be:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2200      	movs	r2, #0
 80113ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80113cc:	4b26      	ldr	r3, [pc, #152]	; (8011468 <dhcp_handle_ack+0xb8>)
 80113ce:	78db      	ldrb	r3, [r3, #3]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d003      	beq.n	80113dc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80113d4:	4b25      	ldr	r3, [pc, #148]	; (801146c <dhcp_handle_ack+0xbc>)
 80113d6:	68da      	ldr	r2, [r3, #12]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80113dc:	4b22      	ldr	r3, [pc, #136]	; (8011468 <dhcp_handle_ack+0xb8>)
 80113de:	791b      	ldrb	r3, [r3, #4]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d004      	beq.n	80113ee <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80113e4:	4b21      	ldr	r3, [pc, #132]	; (801146c <dhcp_handle_ack+0xbc>)
 80113e6:	691a      	ldr	r2, [r3, #16]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80113ec:	e004      	b.n	80113f8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f2:	085a      	lsrs	r2, r3, #1
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80113f8:	4b1b      	ldr	r3, [pc, #108]	; (8011468 <dhcp_handle_ack+0xb8>)
 80113fa:	795b      	ldrb	r3, [r3, #5]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d004      	beq.n	801140a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011400:	4b1a      	ldr	r3, [pc, #104]	; (801146c <dhcp_handle_ack+0xbc>)
 8011402:	695a      	ldr	r2, [r3, #20]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	631a      	str	r2, [r3, #48]	; 0x30
 8011408:	e007      	b.n	801141a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801140e:	4613      	mov	r3, r2
 8011410:	00db      	lsls	r3, r3, #3
 8011412:	1a9b      	subs	r3, r3, r2
 8011414:	08da      	lsrs	r2, r3, #3
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	691a      	ldr	r2, [r3, #16]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011422:	4b11      	ldr	r3, [pc, #68]	; (8011468 <dhcp_handle_ack+0xb8>)
 8011424:	799b      	ldrb	r3, [r3, #6]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00b      	beq.n	8011442 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <dhcp_handle_ack+0xbc>)
 801142c:	699b      	ldr	r3, [r3, #24]
 801142e:	4618      	mov	r0, r3
 8011430:	f003 fe03 	bl	801503a <lwip_htonl>
 8011434:	4602      	mov	r2, r0
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2201      	movs	r2, #1
 801143e:	71da      	strb	r2, [r3, #7]
 8011440:	e002      	b.n	8011448 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011448:	4b07      	ldr	r3, [pc, #28]	; (8011468 <dhcp_handle_ack+0xb8>)
 801144a:	79db      	ldrb	r3, [r3, #7]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d007      	beq.n	8011460 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011450:	4b06      	ldr	r3, [pc, #24]	; (801146c <dhcp_handle_ack+0xbc>)
 8011452:	69db      	ldr	r3, [r3, #28]
 8011454:	4618      	mov	r0, r3
 8011456:	f003 fdf0 	bl	801503a <lwip_htonl>
 801145a:	4602      	mov	r2, r0
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011460:	bf00      	nop
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	20009470 	.word	0x20009470
 801146c:	20009478 	.word	0x20009478

08011470 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <dhcp_start+0x22>
 801147e:	4b37      	ldr	r3, [pc, #220]	; (801155c <dhcp_start+0xec>)
 8011480:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011484:	4936      	ldr	r1, [pc, #216]	; (8011560 <dhcp_start+0xf0>)
 8011486:	4837      	ldr	r0, [pc, #220]	; (8011564 <dhcp_start+0xf4>)
 8011488:	f00d fc80 	bl	801ed8c <iprintf>
 801148c:	f06f 030f 	mvn.w	r3, #15
 8011490:	e060      	b.n	8011554 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011498:	f003 0301 	and.w	r3, r3, #1
 801149c:	2b00      	cmp	r3, #0
 801149e:	d109      	bne.n	80114b4 <dhcp_start+0x44>
 80114a0:	4b2e      	ldr	r3, [pc, #184]	; (801155c <dhcp_start+0xec>)
 80114a2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80114a6:	4930      	ldr	r1, [pc, #192]	; (8011568 <dhcp_start+0xf8>)
 80114a8:	482e      	ldr	r0, [pc, #184]	; (8011564 <dhcp_start+0xf4>)
 80114aa:	f00d fc6f 	bl	801ed8c <iprintf>
 80114ae:	f06f 030f 	mvn.w	r3, #15
 80114b2:	e04f      	b.n	8011554 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114be:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80114c2:	d202      	bcs.n	80114ca <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80114c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c8:	e044      	b.n	8011554 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10d      	bne.n	80114ec <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80114d0:	2034      	movs	r0, #52	; 0x34
 80114d2:	f004 f93b 	bl	801574c <mem_malloc>
 80114d6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d102      	bne.n	80114e4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80114de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114e2:	e037      	b.n	8011554 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	625a      	str	r2, [r3, #36]	; 0x24
 80114ea:	e005      	b.n	80114f8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	791b      	ldrb	r3, [r3, #4]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80114f4:	f7ff fc90 	bl	8010e18 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80114f8:	2234      	movs	r2, #52	; 0x34
 80114fa:	2100      	movs	r1, #0
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f00d fc3d 	bl	801ed7c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011502:	f7ff fc37 	bl	8010d74 <dhcp_inc_pcb_refcount>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <dhcp_start+0xa2>
    return ERR_MEM;
 801150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011510:	e020      	b.n	8011554 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2201      	movs	r2, #1
 8011516:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801151e:	f003 0304 	and.w	r3, r3, #4
 8011522:	2b00      	cmp	r3, #0
 8011524:	d105      	bne.n	8011532 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011526:	2102      	movs	r1, #2
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f000 fd01 	bl	8011f30 <dhcp_set_state>
    return ERR_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	e010      	b.n	8011554 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f000 f8f8 	bl	8011728 <dhcp_discover>
 8011538:	4603      	mov	r3, r0
 801153a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801153c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d005      	beq.n	8011550 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f000 fc59 	bl	8011dfc <dhcp_release_and_stop>
    return ERR_MEM;
 801154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801154e:	e001      	b.n	8011554 <dhcp_start+0xe4>
  }
  return result;
 8011550:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	08021328 	.word	0x08021328
 8011560:	08021474 	.word	0x08021474
 8011564:	080213f0 	.word	0x080213f0
 8011568:	080214b8 	.word	0x080214b8

0801156c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d025      	beq.n	80115cc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	795b      	ldrb	r3, [r3, #5]
 8011584:	2b0a      	cmp	r3, #10
 8011586:	d008      	beq.n	801159a <dhcp_network_changed+0x2e>
 8011588:	2b0a      	cmp	r3, #10
 801158a:	dc0d      	bgt.n	80115a8 <dhcp_network_changed+0x3c>
 801158c:	2b00      	cmp	r3, #0
 801158e:	d01f      	beq.n	80115d0 <dhcp_network_changed+0x64>
 8011590:	2b00      	cmp	r3, #0
 8011592:	db09      	blt.n	80115a8 <dhcp_network_changed+0x3c>
 8011594:	3b03      	subs	r3, #3
 8011596:	2b02      	cmp	r3, #2
 8011598:	d806      	bhi.n	80115a8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 fb75 	bl	8011c90 <dhcp_reboot>
      break;
 80115a6:	e014      	b.n	80115d2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	795b      	ldrb	r3, [r3, #5]
 80115ac:	2b0c      	cmp	r3, #12
 80115ae:	d906      	bls.n	80115be <dhcp_network_changed+0x52>
 80115b0:	4b09      	ldr	r3, [pc, #36]	; (80115d8 <dhcp_network_changed+0x6c>)
 80115b2:	f240 326d 	movw	r2, #877	; 0x36d
 80115b6:	4909      	ldr	r1, [pc, #36]	; (80115dc <dhcp_network_changed+0x70>)
 80115b8:	4809      	ldr	r0, [pc, #36]	; (80115e0 <dhcp_network_changed+0x74>)
 80115ba:	f00d fbe7 	bl	801ed8c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2200      	movs	r2, #0
 80115c2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 f8af 	bl	8011728 <dhcp_discover>
      break;
 80115ca:	e002      	b.n	80115d2 <dhcp_network_changed+0x66>
    return;
 80115cc:	bf00      	nop
 80115ce:	e000      	b.n	80115d2 <dhcp_network_changed+0x66>
      break;
 80115d0:	bf00      	nop
  }
}
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	08021328 	.word	0x08021328
 80115dc:	080214dc 	.word	0x080214dc
 80115e0:	080213f0 	.word	0x080213f0

080115e4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d107      	bne.n	8011604 <dhcp_arp_reply+0x20>
 80115f4:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <dhcp_arp_reply+0x4c>)
 80115f6:	f240 328b 	movw	r2, #907	; 0x38b
 80115fa:	490e      	ldr	r1, [pc, #56]	; (8011634 <dhcp_arp_reply+0x50>)
 80115fc:	480e      	ldr	r0, [pc, #56]	; (8011638 <dhcp_arp_reply+0x54>)
 80115fe:	f00d fbc5 	bl	801ed8c <iprintf>
 8011602:	e012      	b.n	801162a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011608:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00c      	beq.n	801162a <dhcp_arp_reply+0x46>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	795b      	ldrb	r3, [r3, #5]
 8011614:	2b08      	cmp	r3, #8
 8011616:	d108      	bne.n	801162a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	69db      	ldr	r3, [r3, #28]
 8011620:	429a      	cmp	r2, r3
 8011622:	d102      	bne.n	801162a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f809 	bl	801163c <dhcp_decline>
    }
  }
}
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	08021328 	.word	0x08021328
 8011634:	08021474 	.word	0x08021474
 8011638:	080213f0 	.word	0x080213f0

0801163c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801163c:	b5b0      	push	{r4, r5, r7, lr}
 801163e:	b08a      	sub	sp, #40	; 0x28
 8011640:	af02      	add	r7, sp, #8
 8011642:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011648:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801164a:	210c      	movs	r1, #12
 801164c:	69b8      	ldr	r0, [r7, #24]
 801164e:	f000 fc6f 	bl	8011f30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011652:	f107 030c 	add.w	r3, r7, #12
 8011656:	2204      	movs	r2, #4
 8011658:	69b9      	ldr	r1, [r7, #24]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f001 f8f4 	bl	8012848 <dhcp_create_msg>
 8011660:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d035      	beq.n	80116d4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801166e:	89b8      	ldrh	r0, [r7, #12]
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011676:	2304      	movs	r3, #4
 8011678:	2232      	movs	r2, #50	; 0x32
 801167a:	f000 fc73 	bl	8011f64 <dhcp_option>
 801167e:	4603      	mov	r3, r0
 8011680:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011682:	89bc      	ldrh	r4, [r7, #12]
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	69db      	ldr	r3, [r3, #28]
 801168e:	4618      	mov	r0, r3
 8011690:	f003 fcd3 	bl	801503a <lwip_htonl>
 8011694:	4603      	mov	r3, r0
 8011696:	461a      	mov	r2, r3
 8011698:	4629      	mov	r1, r5
 801169a:	4620      	mov	r0, r4
 801169c:	f000 fcee 	bl	801207c <dhcp_option_long>
 80116a0:	4603      	mov	r3, r0
 80116a2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80116a4:	89b8      	ldrh	r0, [r7, #12]
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	33f0      	adds	r3, #240	; 0xf0
 80116aa:	697a      	ldr	r2, [r7, #20]
 80116ac:	4619      	mov	r1, r3
 80116ae:	f001 f9a1 	bl	80129f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80116b2:	4b19      	ldr	r3, [pc, #100]	; (8011718 <dhcp_decline+0xdc>)
 80116b4:	6818      	ldr	r0, [r3, #0]
 80116b6:	4b19      	ldr	r3, [pc, #100]	; (801171c <dhcp_decline+0xe0>)
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	2343      	movs	r3, #67	; 0x43
 80116c0:	4a17      	ldr	r2, [pc, #92]	; (8011720 <dhcp_decline+0xe4>)
 80116c2:	6979      	ldr	r1, [r7, #20]
 80116c4:	f00b ffee 	bl	801d6a4 <udp_sendto_if_src>
 80116c8:	4603      	mov	r3, r0
 80116ca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80116cc:	6978      	ldr	r0, [r7, #20]
 80116ce:	f005 f907 	bl	80168e0 <pbuf_free>
 80116d2:	e001      	b.n	80116d8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80116d4:	23ff      	movs	r3, #255	; 0xff
 80116d6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	799b      	ldrb	r3, [r3, #6]
 80116dc:	2bff      	cmp	r3, #255	; 0xff
 80116de:	d005      	beq.n	80116ec <dhcp_decline+0xb0>
    dhcp->tries++;
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	799b      	ldrb	r3, [r3, #6]
 80116e4:	3301      	adds	r3, #1
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80116ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80116f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80116f2:	89fb      	ldrh	r3, [r7, #14]
 80116f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80116f8:	4a0a      	ldr	r2, [pc, #40]	; (8011724 <dhcp_decline+0xe8>)
 80116fa:	fb82 1203 	smull	r1, r2, r2, r3
 80116fe:	1152      	asrs	r2, r2, #5
 8011700:	17db      	asrs	r3, r3, #31
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	b29a      	uxth	r2, r3
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801170a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3720      	adds	r7, #32
 8011712:	46bd      	mov	sp, r7
 8011714:	bdb0      	pop	{r4, r5, r7, pc}
 8011716:	bf00      	nop
 8011718:	20008f2c 	.word	0x20008f2c
 801171c:	08024da4 	.word	0x08024da4
 8011720:	08024da8 	.word	0x08024da8
 8011724:	10624dd3 	.word	0x10624dd3

08011728 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b08a      	sub	sp, #40	; 0x28
 801172c:	af02      	add	r7, sp, #8
 801172e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	2200      	movs	r2, #0
 801173e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011740:	2106      	movs	r1, #6
 8011742:	69b8      	ldr	r0, [r7, #24]
 8011744:	f000 fbf4 	bl	8011f30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011748:	f107 0308 	add.w	r3, r7, #8
 801174c:	2201      	movs	r2, #1
 801174e:	69b9      	ldr	r1, [r7, #24]
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f001 f879 	bl	8012848 <dhcp_create_msg>
 8011756:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d04b      	beq.n	80117f6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011764:	8938      	ldrh	r0, [r7, #8]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801176c:	2302      	movs	r3, #2
 801176e:	2239      	movs	r2, #57	; 0x39
 8011770:	f000 fbf8 	bl	8011f64 <dhcp_option>
 8011774:	4603      	mov	r3, r0
 8011776:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011778:	8938      	ldrh	r0, [r7, #8]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011784:	461a      	mov	r2, r3
 8011786:	f000 fc47 	bl	8012018 <dhcp_option_short>
 801178a:	4603      	mov	r3, r0
 801178c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801178e:	8938      	ldrh	r0, [r7, #8]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011796:	2303      	movs	r3, #3
 8011798:	2237      	movs	r2, #55	; 0x37
 801179a:	f000 fbe3 	bl	8011f64 <dhcp_option>
 801179e:	4603      	mov	r3, r0
 80117a0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80117a2:	2300      	movs	r3, #0
 80117a4:	77fb      	strb	r3, [r7, #31]
 80117a6:	e00e      	b.n	80117c6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80117a8:	8938      	ldrh	r0, [r7, #8]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117b0:	7ffb      	ldrb	r3, [r7, #31]
 80117b2:	4a29      	ldr	r2, [pc, #164]	; (8011858 <dhcp_discover+0x130>)
 80117b4:	5cd3      	ldrb	r3, [r2, r3]
 80117b6:	461a      	mov	r2, r3
 80117b8:	f000 fc08 	bl	8011fcc <dhcp_option_byte>
 80117bc:	4603      	mov	r3, r0
 80117be:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80117c0:	7ffb      	ldrb	r3, [r7, #31]
 80117c2:	3301      	adds	r3, #1
 80117c4:	77fb      	strb	r3, [r7, #31]
 80117c6:	7ffb      	ldrb	r3, [r7, #31]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d9ed      	bls.n	80117a8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80117cc:	8938      	ldrh	r0, [r7, #8]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	33f0      	adds	r3, #240	; 0xf0
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	4619      	mov	r1, r3
 80117d6:	f001 f90d 	bl	80129f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80117da:	4b20      	ldr	r3, [pc, #128]	; (801185c <dhcp_discover+0x134>)
 80117dc:	6818      	ldr	r0, [r3, #0]
 80117de:	4b20      	ldr	r3, [pc, #128]	; (8011860 <dhcp_discover+0x138>)
 80117e0:	9301      	str	r3, [sp, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	2343      	movs	r3, #67	; 0x43
 80117e8:	4a1e      	ldr	r2, [pc, #120]	; (8011864 <dhcp_discover+0x13c>)
 80117ea:	6939      	ldr	r1, [r7, #16]
 80117ec:	f00b ff5a 	bl	801d6a4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80117f0:	6938      	ldr	r0, [r7, #16]
 80117f2:	f005 f875 	bl	80168e0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	799b      	ldrb	r3, [r3, #6]
 80117fa:	2bff      	cmp	r3, #255	; 0xff
 80117fc:	d005      	beq.n	801180a <dhcp_discover+0xe2>
    dhcp->tries++;
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	799b      	ldrb	r3, [r3, #6]
 8011802:	3301      	adds	r3, #1
 8011804:	b2da      	uxtb	r2, r3
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	799b      	ldrb	r3, [r3, #6]
 801180e:	2b05      	cmp	r3, #5
 8011810:	d80d      	bhi.n	801182e <dhcp_discover+0x106>
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	799b      	ldrb	r3, [r3, #6]
 8011816:	461a      	mov	r2, r3
 8011818:	2301      	movs	r3, #1
 801181a:	4093      	lsls	r3, r2
 801181c:	b29b      	uxth	r3, r3
 801181e:	461a      	mov	r2, r3
 8011820:	0152      	lsls	r2, r2, #5
 8011822:	1ad2      	subs	r2, r2, r3
 8011824:	0092      	lsls	r2, r2, #2
 8011826:	4413      	add	r3, r2
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	b29b      	uxth	r3, r3
 801182c:	e001      	b.n	8011832 <dhcp_discover+0x10a>
 801182e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011832:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011834:	897b      	ldrh	r3, [r7, #10]
 8011836:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801183a:	4a0b      	ldr	r2, [pc, #44]	; (8011868 <dhcp_discover+0x140>)
 801183c:	fb82 1203 	smull	r1, r2, r2, r3
 8011840:	1152      	asrs	r2, r2, #5
 8011842:	17db      	asrs	r3, r3, #31
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	b29a      	uxth	r2, r3
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801184c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011850:	4618      	mov	r0, r3
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	20000030 	.word	0x20000030
 801185c:	20008f2c 	.word	0x20008f2c
 8011860:	08024da4 	.word	0x08024da4
 8011864:	08024da8 	.word	0x08024da8
 8011868:	10624dd3 	.word	0x10624dd3

0801186c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b088      	sub	sp, #32
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d107      	bne.n	801188a <dhcp_bind+0x1e>
 801187a:	4b64      	ldr	r3, [pc, #400]	; (8011a0c <dhcp_bind+0x1a0>)
 801187c:	f240 4215 	movw	r2, #1045	; 0x415
 8011880:	4963      	ldr	r1, [pc, #396]	; (8011a10 <dhcp_bind+0x1a4>)
 8011882:	4864      	ldr	r0, [pc, #400]	; (8011a14 <dhcp_bind+0x1a8>)
 8011884:	f00d fa82 	bl	801ed8c <iprintf>
 8011888:	e0bc      	b.n	8011a04 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d107      	bne.n	80118a6 <dhcp_bind+0x3a>
 8011896:	4b5d      	ldr	r3, [pc, #372]	; (8011a0c <dhcp_bind+0x1a0>)
 8011898:	f240 4217 	movw	r2, #1047	; 0x417
 801189c:	495e      	ldr	r1, [pc, #376]	; (8011a18 <dhcp_bind+0x1ac>)
 801189e:	485d      	ldr	r0, [pc, #372]	; (8011a14 <dhcp_bind+0x1a8>)
 80118a0:	f00d fa74 	bl	801ed8c <iprintf>
 80118a4:	e0ae      	b.n	8011a04 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	2200      	movs	r2, #0
 80118aa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118b4:	d019      	beq.n	80118ea <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ba:	331e      	adds	r3, #30
 80118bc:	4a57      	ldr	r2, [pc, #348]	; (8011a1c <dhcp_bind+0x1b0>)
 80118be:	fba2 2303 	umull	r2, r3, r2, r3
 80118c2:	095b      	lsrs	r3, r3, #5
 80118c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118cc:	d302      	bcc.n	80118d4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80118ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80118dc:	69bb      	ldr	r3, [r7, #24]
 80118de:	8a9b      	ldrh	r3, [r3, #20]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d102      	bne.n	80118ea <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	2201      	movs	r2, #1
 80118e8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118f2:	d01d      	beq.n	8011930 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f8:	331e      	adds	r3, #30
 80118fa:	4a48      	ldr	r2, [pc, #288]	; (8011a1c <dhcp_bind+0x1b0>)
 80118fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011900:	095b      	lsrs	r3, r3, #5
 8011902:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801190a:	d302      	bcc.n	8011912 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801190c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011910:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	b29a      	uxth	r2, r3
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	895b      	ldrh	r3, [r3, #10]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d102      	bne.n	8011928 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	2201      	movs	r2, #1
 8011926:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	895a      	ldrh	r2, [r3, #10]
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011938:	d01d      	beq.n	8011976 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801193e:	331e      	adds	r3, #30
 8011940:	4a36      	ldr	r2, [pc, #216]	; (8011a1c <dhcp_bind+0x1b0>)
 8011942:	fba2 2303 	umull	r2, r3, r2, r3
 8011946:	095b      	lsrs	r3, r3, #5
 8011948:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011950:	d302      	bcc.n	8011958 <dhcp_bind+0xec>
      timeout = 0xffff;
 8011952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011956:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	b29a      	uxth	r2, r3
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	899b      	ldrh	r3, [r3, #12]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d102      	bne.n	801196e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	2201      	movs	r2, #1
 801196c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	899a      	ldrh	r2, [r3, #12]
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	895a      	ldrh	r2, [r3, #10]
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	899b      	ldrh	r3, [r3, #12]
 801197e:	429a      	cmp	r2, r3
 8011980:	d306      	bcc.n	8011990 <dhcp_bind+0x124>
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d002      	beq.n	8011990 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	2200      	movs	r2, #0
 801198e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	79db      	ldrb	r3, [r3, #7]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d003      	beq.n	80119a0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	6a1b      	ldr	r3, [r3, #32]
 801199c:	613b      	str	r3, [r7, #16]
 801199e:	e014      	b.n	80119ca <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	331c      	adds	r3, #28
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80119a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	db02      	blt.n	80119b6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80119b0:	23ff      	movs	r3, #255	; 0xff
 80119b2:	613b      	str	r3, [r7, #16]
 80119b4:	e009      	b.n	80119ca <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80119b6:	7dfb      	ldrb	r3, [r7, #23]
 80119b8:	2bbf      	cmp	r3, #191	; 0xbf
 80119ba:	d903      	bls.n	80119c4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80119bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80119c0:	613b      	str	r3, [r7, #16]
 80119c2:	e002      	b.n	80119ca <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80119c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119c8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ce:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d108      	bne.n	80119e8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	69da      	ldr	r2, [r3, #28]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	4013      	ands	r3, r2
 80119de:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80119e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80119e8:	210a      	movs	r1, #10
 80119ea:	69b8      	ldr	r0, [r7, #24]
 80119ec:	f000 faa0 	bl	8011f30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	f103 011c 	add.w	r1, r3, #28
 80119f6:	f107 030c 	add.w	r3, r7, #12
 80119fa:	f107 0210 	add.w	r2, r7, #16
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f004 fa60 	bl	8015ec4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011a04:	3720      	adds	r7, #32
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	08021328 	.word	0x08021328
 8011a10:	080214f0 	.word	0x080214f0
 8011a14:	080213f0 	.word	0x080213f0
 8011a18:	0802150c 	.word	0x0802150c
 8011a1c:	88888889 	.word	0x88888889

08011a20 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08a      	sub	sp, #40	; 0x28
 8011a24:	af02      	add	r7, sp, #8
 8011a26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011a2e:	2105      	movs	r1, #5
 8011a30:	69b8      	ldr	r0, [r7, #24]
 8011a32:	f000 fa7d 	bl	8011f30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011a36:	f107 030c 	add.w	r3, r7, #12
 8011a3a:	2203      	movs	r2, #3
 8011a3c:	69b9      	ldr	r1, [r7, #24]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 ff02 	bl	8012848 <dhcp_create_msg>
 8011a44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d04e      	beq.n	8011aea <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011a52:	89b8      	ldrh	r0, [r7, #12]
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	2239      	movs	r2, #57	; 0x39
 8011a5e:	f000 fa81 	bl	8011f64 <dhcp_option>
 8011a62:	4603      	mov	r3, r0
 8011a64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011a66:	89b8      	ldrh	r0, [r7, #12]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a72:	461a      	mov	r2, r3
 8011a74:	f000 fad0 	bl	8012018 <dhcp_option_short>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011a7c:	89b8      	ldrh	r0, [r7, #12]
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a84:	2303      	movs	r3, #3
 8011a86:	2237      	movs	r2, #55	; 0x37
 8011a88:	f000 fa6c 	bl	8011f64 <dhcp_option>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a90:	2300      	movs	r3, #0
 8011a92:	77bb      	strb	r3, [r7, #30]
 8011a94:	e00e      	b.n	8011ab4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011a96:	89b8      	ldrh	r0, [r7, #12]
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a9e:	7fbb      	ldrb	r3, [r7, #30]
 8011aa0:	4a2a      	ldr	r2, [pc, #168]	; (8011b4c <dhcp_renew+0x12c>)
 8011aa2:	5cd3      	ldrb	r3, [r2, r3]
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	f000 fa91 	bl	8011fcc <dhcp_option_byte>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011aae:	7fbb      	ldrb	r3, [r7, #30]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	77bb      	strb	r3, [r7, #30]
 8011ab4:	7fbb      	ldrb	r3, [r7, #30]
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d9ed      	bls.n	8011a96 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011aba:	89b8      	ldrh	r0, [r7, #12]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	33f0      	adds	r3, #240	; 0xf0
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	f000 ff96 	bl	80129f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011ac8:	4b21      	ldr	r3, [pc, #132]	; (8011b50 <dhcp_renew+0x130>)
 8011aca:	6818      	ldr	r0, [r3, #0]
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	f103 0218 	add.w	r2, r3, #24
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	9300      	str	r3, [sp, #0]
 8011ad6:	2343      	movs	r3, #67	; 0x43
 8011ad8:	6979      	ldr	r1, [r7, #20]
 8011ada:	f00b fd6f 	bl	801d5bc <udp_sendto_if>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011ae2:	6978      	ldr	r0, [r7, #20]
 8011ae4:	f004 fefc 	bl	80168e0 <pbuf_free>
 8011ae8:	e001      	b.n	8011aee <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011aea:	23ff      	movs	r3, #255	; 0xff
 8011aec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011aee:	69bb      	ldr	r3, [r7, #24]
 8011af0:	799b      	ldrb	r3, [r3, #6]
 8011af2:	2bff      	cmp	r3, #255	; 0xff
 8011af4:	d005      	beq.n	8011b02 <dhcp_renew+0xe2>
    dhcp->tries++;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	799b      	ldrb	r3, [r3, #6]
 8011afa:	3301      	adds	r3, #1
 8011afc:	b2da      	uxtb	r2, r3
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	799b      	ldrb	r3, [r3, #6]
 8011b06:	2b09      	cmp	r3, #9
 8011b08:	d80a      	bhi.n	8011b20 <dhcp_renew+0x100>
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	799b      	ldrb	r3, [r3, #6]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	461a      	mov	r2, r3
 8011b12:	0152      	lsls	r2, r2, #5
 8011b14:	1ad2      	subs	r2, r2, r3
 8011b16:	0092      	lsls	r2, r2, #2
 8011b18:	4413      	add	r3, r2
 8011b1a:	011b      	lsls	r3, r3, #4
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	e001      	b.n	8011b24 <dhcp_renew+0x104>
 8011b20:	f644 6320 	movw	r3, #20000	; 0x4e20
 8011b24:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b26:	89fb      	ldrh	r3, [r7, #14]
 8011b28:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011b2c:	4a09      	ldr	r2, [pc, #36]	; (8011b54 <dhcp_renew+0x134>)
 8011b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8011b32:	1152      	asrs	r2, r2, #5
 8011b34:	17db      	asrs	r3, r3, #31
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	b29a      	uxth	r2, r3
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011b3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3720      	adds	r7, #32
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20000030 	.word	0x20000030
 8011b50:	20008f2c 	.word	0x20008f2c
 8011b54:	10624dd3 	.word	0x10624dd3

08011b58 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b08a      	sub	sp, #40	; 0x28
 8011b5c:	af02      	add	r7, sp, #8
 8011b5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b64:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011b66:	2104      	movs	r1, #4
 8011b68:	69b8      	ldr	r0, [r7, #24]
 8011b6a:	f000 f9e1 	bl	8011f30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011b6e:	f107 030c 	add.w	r3, r7, #12
 8011b72:	2203      	movs	r2, #3
 8011b74:	69b9      	ldr	r1, [r7, #24]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fe66 	bl	8012848 <dhcp_create_msg>
 8011b7c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d04c      	beq.n	8011c1e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011b8a:	89b8      	ldrh	r0, [r7, #12]
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b92:	2302      	movs	r3, #2
 8011b94:	2239      	movs	r2, #57	; 0x39
 8011b96:	f000 f9e5 	bl	8011f64 <dhcp_option>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011b9e:	89b8      	ldrh	r0, [r7, #12]
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011baa:	461a      	mov	r2, r3
 8011bac:	f000 fa34 	bl	8012018 <dhcp_option_short>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011bb4:	89b8      	ldrh	r0, [r7, #12]
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	2237      	movs	r2, #55	; 0x37
 8011bc0:	f000 f9d0 	bl	8011f64 <dhcp_option>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011bc8:	2300      	movs	r3, #0
 8011bca:	77bb      	strb	r3, [r7, #30]
 8011bcc:	e00e      	b.n	8011bec <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011bce:	89b8      	ldrh	r0, [r7, #12]
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bd6:	7fbb      	ldrb	r3, [r7, #30]
 8011bd8:	4a29      	ldr	r2, [pc, #164]	; (8011c80 <dhcp_rebind+0x128>)
 8011bda:	5cd3      	ldrb	r3, [r2, r3]
 8011bdc:	461a      	mov	r2, r3
 8011bde:	f000 f9f5 	bl	8011fcc <dhcp_option_byte>
 8011be2:	4603      	mov	r3, r0
 8011be4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011be6:	7fbb      	ldrb	r3, [r7, #30]
 8011be8:	3301      	adds	r3, #1
 8011bea:	77bb      	strb	r3, [r7, #30]
 8011bec:	7fbb      	ldrb	r3, [r7, #30]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d9ed      	bls.n	8011bce <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011bf2:	89b8      	ldrh	r0, [r7, #12]
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	33f0      	adds	r3, #240	; 0xf0
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	f000 fefa 	bl	80129f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011c00:	4b20      	ldr	r3, [pc, #128]	; (8011c84 <dhcp_rebind+0x12c>)
 8011c02:	6818      	ldr	r0, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	2343      	movs	r3, #67	; 0x43
 8011c0a:	4a1f      	ldr	r2, [pc, #124]	; (8011c88 <dhcp_rebind+0x130>)
 8011c0c:	6979      	ldr	r1, [r7, #20]
 8011c0e:	f00b fcd5 	bl	801d5bc <udp_sendto_if>
 8011c12:	4603      	mov	r3, r0
 8011c14:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011c16:	6978      	ldr	r0, [r7, #20]
 8011c18:	f004 fe62 	bl	80168e0 <pbuf_free>
 8011c1c:	e001      	b.n	8011c22 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011c1e:	23ff      	movs	r3, #255	; 0xff
 8011c20:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	799b      	ldrb	r3, [r3, #6]
 8011c26:	2bff      	cmp	r3, #255	; 0xff
 8011c28:	d005      	beq.n	8011c36 <dhcp_rebind+0xde>
    dhcp->tries++;
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	799b      	ldrb	r3, [r3, #6]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	799b      	ldrb	r3, [r3, #6]
 8011c3a:	2b09      	cmp	r3, #9
 8011c3c:	d80a      	bhi.n	8011c54 <dhcp_rebind+0xfc>
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	799b      	ldrb	r3, [r3, #6]
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	461a      	mov	r2, r3
 8011c46:	0152      	lsls	r2, r2, #5
 8011c48:	1ad2      	subs	r2, r2, r3
 8011c4a:	0092      	lsls	r2, r2, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	e001      	b.n	8011c58 <dhcp_rebind+0x100>
 8011c54:	f242 7310 	movw	r3, #10000	; 0x2710
 8011c58:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011c5a:	89fb      	ldrh	r3, [r7, #14]
 8011c5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011c60:	4a0a      	ldr	r2, [pc, #40]	; (8011c8c <dhcp_rebind+0x134>)
 8011c62:	fb82 1203 	smull	r1, r2, r2, r3
 8011c66:	1152      	asrs	r2, r2, #5
 8011c68:	17db      	asrs	r3, r3, #31
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	b29a      	uxth	r2, r3
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011c72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3720      	adds	r7, #32
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	20000030 	.word	0x20000030
 8011c84:	20008f2c 	.word	0x20008f2c
 8011c88:	08024da8 	.word	0x08024da8
 8011c8c:	10624dd3 	.word	0x10624dd3

08011c90 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011c90:	b5b0      	push	{r4, r5, r7, lr}
 8011c92:	b08a      	sub	sp, #40	; 0x28
 8011c94:	af02      	add	r7, sp, #8
 8011c96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011c9e:	2103      	movs	r1, #3
 8011ca0:	69b8      	ldr	r0, [r7, #24]
 8011ca2:	f000 f945 	bl	8011f30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011ca6:	f107 030c 	add.w	r3, r7, #12
 8011caa:	2203      	movs	r2, #3
 8011cac:	69b9      	ldr	r1, [r7, #24]
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fdca 	bl	8012848 <dhcp_create_msg>
 8011cb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d066      	beq.n	8011d8a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011cc2:	89b8      	ldrh	r0, [r7, #12]
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cca:	2302      	movs	r3, #2
 8011ccc:	2239      	movs	r2, #57	; 0x39
 8011cce:	f000 f949 	bl	8011f64 <dhcp_option>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011cd6:	89b8      	ldrh	r0, [r7, #12]
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	33f0      	adds	r3, #240	; 0xf0
 8011cdc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	f000 f999 	bl	8012018 <dhcp_option_short>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011cea:	89b8      	ldrh	r0, [r7, #12]
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cf2:	2304      	movs	r3, #4
 8011cf4:	2232      	movs	r2, #50	; 0x32
 8011cf6:	f000 f935 	bl	8011f64 <dhcp_option>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011cfe:	89bc      	ldrh	r4, [r7, #12]
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	69db      	ldr	r3, [r3, #28]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f003 f995 	bl	801503a <lwip_htonl>
 8011d10:	4603      	mov	r3, r0
 8011d12:	461a      	mov	r2, r3
 8011d14:	4629      	mov	r1, r5
 8011d16:	4620      	mov	r0, r4
 8011d18:	f000 f9b0 	bl	801207c <dhcp_option_long>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011d20:	89b8      	ldrh	r0, [r7, #12]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d28:	2303      	movs	r3, #3
 8011d2a:	2237      	movs	r2, #55	; 0x37
 8011d2c:	f000 f91a 	bl	8011f64 <dhcp_option>
 8011d30:	4603      	mov	r3, r0
 8011d32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d34:	2300      	movs	r3, #0
 8011d36:	77bb      	strb	r3, [r7, #30]
 8011d38:	e00e      	b.n	8011d58 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011d3a:	89b8      	ldrh	r0, [r7, #12]
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d42:	7fbb      	ldrb	r3, [r7, #30]
 8011d44:	4a29      	ldr	r2, [pc, #164]	; (8011dec <dhcp_reboot+0x15c>)
 8011d46:	5cd3      	ldrb	r3, [r2, r3]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	f000 f93f 	bl	8011fcc <dhcp_option_byte>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d52:	7fbb      	ldrb	r3, [r7, #30]
 8011d54:	3301      	adds	r3, #1
 8011d56:	77bb      	strb	r3, [r7, #30]
 8011d58:	7fbb      	ldrb	r3, [r7, #30]
 8011d5a:	2b02      	cmp	r3, #2
 8011d5c:	d9ed      	bls.n	8011d3a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d5e:	89b8      	ldrh	r0, [r7, #12]
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	33f0      	adds	r3, #240	; 0xf0
 8011d64:	697a      	ldr	r2, [r7, #20]
 8011d66:	4619      	mov	r1, r3
 8011d68:	f000 fe44 	bl	80129f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011d6c:	4b20      	ldr	r3, [pc, #128]	; (8011df0 <dhcp_reboot+0x160>)
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	9300      	str	r3, [sp, #0]
 8011d74:	2343      	movs	r3, #67	; 0x43
 8011d76:	4a1f      	ldr	r2, [pc, #124]	; (8011df4 <dhcp_reboot+0x164>)
 8011d78:	6979      	ldr	r1, [r7, #20]
 8011d7a:	f00b fc1f 	bl	801d5bc <udp_sendto_if>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011d82:	6978      	ldr	r0, [r7, #20]
 8011d84:	f004 fdac 	bl	80168e0 <pbuf_free>
 8011d88:	e001      	b.n	8011d8e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011d8a:	23ff      	movs	r3, #255	; 0xff
 8011d8c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011d8e:	69bb      	ldr	r3, [r7, #24]
 8011d90:	799b      	ldrb	r3, [r3, #6]
 8011d92:	2bff      	cmp	r3, #255	; 0xff
 8011d94:	d005      	beq.n	8011da2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	799b      	ldrb	r3, [r3, #6]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	799b      	ldrb	r3, [r3, #6]
 8011da6:	2b09      	cmp	r3, #9
 8011da8:	d80a      	bhi.n	8011dc0 <dhcp_reboot+0x130>
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	799b      	ldrb	r3, [r3, #6]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	461a      	mov	r2, r3
 8011db2:	0152      	lsls	r2, r2, #5
 8011db4:	1ad2      	subs	r2, r2, r3
 8011db6:	0092      	lsls	r2, r2, #2
 8011db8:	4413      	add	r3, r2
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	e001      	b.n	8011dc4 <dhcp_reboot+0x134>
 8011dc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8011dc4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011dc6:	89fb      	ldrh	r3, [r7, #14]
 8011dc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011dcc:	4a0a      	ldr	r2, [pc, #40]	; (8011df8 <dhcp_reboot+0x168>)
 8011dce:	fb82 1203 	smull	r1, r2, r2, r3
 8011dd2:	1152      	asrs	r2, r2, #5
 8011dd4:	17db      	asrs	r3, r3, #31
 8011dd6:	1ad3      	subs	r3, r2, r3
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3720      	adds	r7, #32
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bdb0      	pop	{r4, r5, r7, pc}
 8011dea:	bf00      	nop
 8011dec:	20000030 	.word	0x20000030
 8011df0:	20008f2c 	.word	0x20008f2c
 8011df4:	08024da8 	.word	0x08024da8
 8011df8:	10624dd3 	.word	0x10624dd3

08011dfc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011dfc:	b5b0      	push	{r4, r5, r7, lr}
 8011dfe:	b08a      	sub	sp, #40	; 0x28
 8011e00:	af02      	add	r7, sp, #8
 8011e02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e08:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f000 8084 	beq.w	8011f1a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	795b      	ldrb	r3, [r3, #5]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f000 8081 	beq.w	8011f1e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	699b      	ldr	r3, [r3, #24]
 8011e20:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	2200      	movs	r2, #0
 8011e26:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	2200      	movs	r2, #0
 8011e32:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	2200      	movs	r2, #0
 8011e38:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	2200      	movs	r2, #0
 8011e54:	829a      	strh	r2, [r3, #20]
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	8a9a      	ldrh	r2, [r3, #20]
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	825a      	strh	r2, [r3, #18]
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	8a5a      	ldrh	r2, [r3, #18]
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	821a      	strh	r2, [r3, #16]
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	8a1a      	ldrh	r2, [r3, #16]
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 fdee 	bl	8012a50 <dhcp_supplied_address>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d03b      	beq.n	8011ef2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011e7a:	f107 030e 	add.w	r3, r7, #14
 8011e7e:	2207      	movs	r2, #7
 8011e80:	69f9      	ldr	r1, [r7, #28]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 fce0 	bl	8012848 <dhcp_create_msg>
 8011e88:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d030      	beq.n	8011ef2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011e96:	89f8      	ldrh	r0, [r7, #14]
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e9e:	2304      	movs	r3, #4
 8011ea0:	2236      	movs	r2, #54	; 0x36
 8011ea2:	f000 f85f 	bl	8011f64 <dhcp_option>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011eaa:	89fc      	ldrh	r4, [r7, #14]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f003 f8c0 	bl	801503a <lwip_htonl>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f000 f8db 	bl	801207c <dhcp_option_long>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011eca:	89f8      	ldrh	r0, [r7, #14]
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	33f0      	adds	r3, #240	; 0xf0
 8011ed0:	69ba      	ldr	r2, [r7, #24]
 8011ed2:	4619      	mov	r1, r3
 8011ed4:	f000 fd8e 	bl	80129f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011ed8:	4b13      	ldr	r3, [pc, #76]	; (8011f28 <dhcp_release_and_stop+0x12c>)
 8011eda:	6818      	ldr	r0, [r3, #0]
 8011edc:	f107 0210 	add.w	r2, r7, #16
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	9300      	str	r3, [sp, #0]
 8011ee4:	2343      	movs	r3, #67	; 0x43
 8011ee6:	69b9      	ldr	r1, [r7, #24]
 8011ee8:	f00b fb68 	bl	801d5bc <udp_sendto_if>
      pbuf_free(p_out);
 8011eec:	69b8      	ldr	r0, [r7, #24]
 8011eee:	f004 fcf7 	bl	80168e0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011ef2:	4b0e      	ldr	r3, [pc, #56]	; (8011f2c <dhcp_release_and_stop+0x130>)
 8011ef4:	4a0d      	ldr	r2, [pc, #52]	; (8011f2c <dhcp_release_and_stop+0x130>)
 8011ef6:	490d      	ldr	r1, [pc, #52]	; (8011f2c <dhcp_release_and_stop+0x130>)
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f003 ffe3 	bl	8015ec4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011efe:	2100      	movs	r1, #0
 8011f00:	69f8      	ldr	r0, [r7, #28]
 8011f02:	f000 f815 	bl	8011f30 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	791b      	ldrb	r3, [r3, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d008      	beq.n	8011f20 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011f0e:	f7fe ff83 	bl	8010e18 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	2200      	movs	r2, #0
 8011f16:	711a      	strb	r2, [r3, #4]
 8011f18:	e002      	b.n	8011f20 <dhcp_release_and_stop+0x124>
    return;
 8011f1a:	bf00      	nop
 8011f1c:	e000      	b.n	8011f20 <dhcp_release_and_stop+0x124>
    return;
 8011f1e:	bf00      	nop
  }
}
 8011f20:	3720      	adds	r7, #32
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bdb0      	pop	{r4, r5, r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20008f2c 	.word	0x20008f2c
 8011f2c:	08024da4 	.word	0x08024da4

08011f30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	795b      	ldrb	r3, [r3, #5]
 8011f40:	78fa      	ldrb	r2, [r7, #3]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d008      	beq.n	8011f58 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	78fa      	ldrb	r2, [r7, #3]
 8011f4a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	811a      	strh	r2, [r3, #8]
  }
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6039      	str	r1, [r7, #0]
 8011f6c:	4611      	mov	r1, r2
 8011f6e:	461a      	mov	r2, r3
 8011f70:	4603      	mov	r3, r0
 8011f72:	80fb      	strh	r3, [r7, #6]
 8011f74:	460b      	mov	r3, r1
 8011f76:	717b      	strb	r3, [r7, #5]
 8011f78:	4613      	mov	r3, r2
 8011f7a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011f7c:	88fa      	ldrh	r2, [r7, #6]
 8011f7e:	793b      	ldrb	r3, [r7, #4]
 8011f80:	4413      	add	r3, r2
 8011f82:	3302      	adds	r3, #2
 8011f84:	2b44      	cmp	r3, #68	; 0x44
 8011f86:	d906      	bls.n	8011f96 <dhcp_option+0x32>
 8011f88:	4b0d      	ldr	r3, [pc, #52]	; (8011fc0 <dhcp_option+0x5c>)
 8011f8a:	f240 529a 	movw	r2, #1434	; 0x59a
 8011f8e:	490d      	ldr	r1, [pc, #52]	; (8011fc4 <dhcp_option+0x60>)
 8011f90:	480d      	ldr	r0, [pc, #52]	; (8011fc8 <dhcp_option+0x64>)
 8011f92:	f00c fefb 	bl	801ed8c <iprintf>
  options[options_out_len++] = option_type;
 8011f96:	88fb      	ldrh	r3, [r7, #6]
 8011f98:	1c5a      	adds	r2, r3, #1
 8011f9a:	80fa      	strh	r2, [r7, #6]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	797a      	ldrb	r2, [r7, #5]
 8011fa4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011fa6:	88fb      	ldrh	r3, [r7, #6]
 8011fa8:	1c5a      	adds	r2, r3, #1
 8011faa:	80fa      	strh	r2, [r7, #6]
 8011fac:	461a      	mov	r2, r3
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	793a      	ldrb	r2, [r7, #4]
 8011fb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011fb6:	88fb      	ldrh	r3, [r7, #6]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	08021328 	.word	0x08021328
 8011fc4:	08021524 	.word	0x08021524
 8011fc8:	080213f0 	.word	0x080213f0

08011fcc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	6039      	str	r1, [r7, #0]
 8011fd6:	80fb      	strh	r3, [r7, #6]
 8011fd8:	4613      	mov	r3, r2
 8011fda:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011fdc:	88fb      	ldrh	r3, [r7, #6]
 8011fde:	2b43      	cmp	r3, #67	; 0x43
 8011fe0:	d906      	bls.n	8011ff0 <dhcp_option_byte+0x24>
 8011fe2:	4b0a      	ldr	r3, [pc, #40]	; (801200c <dhcp_option_byte+0x40>)
 8011fe4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011fe8:	4909      	ldr	r1, [pc, #36]	; (8012010 <dhcp_option_byte+0x44>)
 8011fea:	480a      	ldr	r0, [pc, #40]	; (8012014 <dhcp_option_byte+0x48>)
 8011fec:	f00c fece 	bl	801ed8c <iprintf>
  options[options_out_len++] = value;
 8011ff0:	88fb      	ldrh	r3, [r7, #6]
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	80fa      	strh	r2, [r7, #6]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	797a      	ldrb	r2, [r7, #5]
 8011ffe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012000:	88fb      	ldrh	r3, [r7, #6]
}
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	08021328 	.word	0x08021328
 8012010:	08021568 	.word	0x08021568
 8012014:	080213f0 	.word	0x080213f0

08012018 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	6039      	str	r1, [r7, #0]
 8012022:	80fb      	strh	r3, [r7, #6]
 8012024:	4613      	mov	r3, r2
 8012026:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012028:	88fb      	ldrh	r3, [r7, #6]
 801202a:	3302      	adds	r3, #2
 801202c:	2b44      	cmp	r3, #68	; 0x44
 801202e:	d906      	bls.n	801203e <dhcp_option_short+0x26>
 8012030:	4b0f      	ldr	r3, [pc, #60]	; (8012070 <dhcp_option_short+0x58>)
 8012032:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012036:	490f      	ldr	r1, [pc, #60]	; (8012074 <dhcp_option_short+0x5c>)
 8012038:	480f      	ldr	r0, [pc, #60]	; (8012078 <dhcp_option_short+0x60>)
 801203a:	f00c fea7 	bl	801ed8c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801203e:	88bb      	ldrh	r3, [r7, #4]
 8012040:	0a1b      	lsrs	r3, r3, #8
 8012042:	b29a      	uxth	r2, r3
 8012044:	88fb      	ldrh	r3, [r7, #6]
 8012046:	1c59      	adds	r1, r3, #1
 8012048:	80f9      	strh	r1, [r7, #6]
 801204a:	4619      	mov	r1, r3
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	440b      	add	r3, r1
 8012050:	b2d2      	uxtb	r2, r2
 8012052:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012054:	88fb      	ldrh	r3, [r7, #6]
 8012056:	1c5a      	adds	r2, r3, #1
 8012058:	80fa      	strh	r2, [r7, #6]
 801205a:	461a      	mov	r2, r3
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	4413      	add	r3, r2
 8012060:	88ba      	ldrh	r2, [r7, #4]
 8012062:	b2d2      	uxtb	r2, r2
 8012064:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012066:	88fb      	ldrh	r3, [r7, #6]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	08021328 	.word	0x08021328
 8012074:	080215a0 	.word	0x080215a0
 8012078:	080213f0 	.word	0x080213f0

0801207c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	607a      	str	r2, [r7, #4]
 8012088:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801208a:	89fb      	ldrh	r3, [r7, #14]
 801208c:	3304      	adds	r3, #4
 801208e:	2b44      	cmp	r3, #68	; 0x44
 8012090:	d906      	bls.n	80120a0 <dhcp_option_long+0x24>
 8012092:	4b19      	ldr	r3, [pc, #100]	; (80120f8 <dhcp_option_long+0x7c>)
 8012094:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012098:	4918      	ldr	r1, [pc, #96]	; (80120fc <dhcp_option_long+0x80>)
 801209a:	4819      	ldr	r0, [pc, #100]	; (8012100 <dhcp_option_long+0x84>)
 801209c:	f00c fe76 	bl	801ed8c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	0e1a      	lsrs	r2, r3, #24
 80120a4:	89fb      	ldrh	r3, [r7, #14]
 80120a6:	1c59      	adds	r1, r3, #1
 80120a8:	81f9      	strh	r1, [r7, #14]
 80120aa:	4619      	mov	r1, r3
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	440b      	add	r3, r1
 80120b0:	b2d2      	uxtb	r2, r2
 80120b2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	0c1a      	lsrs	r2, r3, #16
 80120b8:	89fb      	ldrh	r3, [r7, #14]
 80120ba:	1c59      	adds	r1, r3, #1
 80120bc:	81f9      	strh	r1, [r7, #14]
 80120be:	4619      	mov	r1, r3
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	440b      	add	r3, r1
 80120c4:	b2d2      	uxtb	r2, r2
 80120c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	0a1a      	lsrs	r2, r3, #8
 80120cc:	89fb      	ldrh	r3, [r7, #14]
 80120ce:	1c59      	adds	r1, r3, #1
 80120d0:	81f9      	strh	r1, [r7, #14]
 80120d2:	4619      	mov	r1, r3
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	440b      	add	r3, r1
 80120d8:	b2d2      	uxtb	r2, r2
 80120da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80120dc:	89fb      	ldrh	r3, [r7, #14]
 80120de:	1c5a      	adds	r2, r3, #1
 80120e0:	81fa      	strh	r2, [r7, #14]
 80120e2:	461a      	mov	r2, r3
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	4413      	add	r3, r2
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	b2d2      	uxtb	r2, r2
 80120ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80120ee:	89fb      	ldrh	r3, [r7, #14]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3710      	adds	r7, #16
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	08021328 	.word	0x08021328
 80120fc:	080215dc 	.word	0x080215dc
 8012100:	080213f0 	.word	0x080213f0

08012104 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b090      	sub	sp, #64	; 0x40
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8012112:	2300      	movs	r3, #0
 8012114:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012116:	2208      	movs	r2, #8
 8012118:	2100      	movs	r1, #0
 801211a:	48be      	ldr	r0, [pc, #760]	; (8012414 <dhcp_parse_reply+0x310>)
 801211c:	f00c fe2e 	bl	801ed7c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	895b      	ldrh	r3, [r3, #10]
 8012124:	2b2b      	cmp	r3, #43	; 0x2b
 8012126:	d802      	bhi.n	801212e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012128:	f06f 0301 	mvn.w	r3, #1
 801212c:	e2a8      	b.n	8012680 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012134:	23f0      	movs	r3, #240	; 0xf0
 8012136:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	891b      	ldrh	r3, [r3, #8]
 801213c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012142:	e00c      	b.n	801215e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	895b      	ldrh	r3, [r3, #10]
 8012148:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012150:	895b      	ldrh	r3, [r3, #10]
 8012152:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012154:	1ad3      	subs	r3, r2, r3
 8012156:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	2b00      	cmp	r3, #0
 8012162:	d004      	beq.n	801216e <dhcp_parse_reply+0x6a>
 8012164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012166:	895b      	ldrh	r3, [r3, #10]
 8012168:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801216a:	429a      	cmp	r2, r3
 801216c:	d2ea      	bcs.n	8012144 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012174:	f06f 0301 	mvn.w	r3, #1
 8012178:	e282      	b.n	8012680 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801217a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801217c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801217e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012180:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012188:	e23a      	b.n	8012600 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801218a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801218c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801218e:	4413      	add	r3, r2
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012194:	2300      	movs	r3, #0
 8012196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801219e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80121a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121a2:	3302      	adds	r3, #2
 80121a4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80121a6:	8bfa      	ldrh	r2, [r7, #30]
 80121a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d202      	bcs.n	80121b4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80121ae:	f06f 0301 	mvn.w	r3, #1
 80121b2:	e265      	b.n	8012680 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80121b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121b6:	3301      	adds	r3, #1
 80121b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121ba:	8952      	ldrh	r2, [r2, #10]
 80121bc:	4293      	cmp	r3, r2
 80121be:	da07      	bge.n	80121d0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80121c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121c2:	3301      	adds	r3, #1
 80121c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121c6:	4413      	add	r3, r2
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121ce:	e00b      	b.n	80121e8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80121d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d004      	beq.n	80121e2 <dhcp_parse_reply+0xde>
 80121d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	e000      	b.n	80121e4 <dhcp_parse_reply+0xe0>
 80121e2:	2300      	movs	r3, #0
 80121e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80121e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80121f0:	7dfb      	ldrb	r3, [r7, #23]
 80121f2:	2b3b      	cmp	r3, #59	; 0x3b
 80121f4:	f200 812d 	bhi.w	8012452 <dhcp_parse_reply+0x34e>
 80121f8:	a201      	add	r2, pc, #4	; (adr r2, 8012200 <dhcp_parse_reply+0xfc>)
 80121fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fe:	bf00      	nop
 8012200:	080122f1 	.word	0x080122f1
 8012204:	08012301 	.word	0x08012301
 8012208:	08012453 	.word	0x08012453
 801220c:	08012323 	.word	0x08012323
 8012210:	08012453 	.word	0x08012453
 8012214:	08012453 	.word	0x08012453
 8012218:	08012453 	.word	0x08012453
 801221c:	08012453 	.word	0x08012453
 8012220:	08012453 	.word	0x08012453
 8012224:	08012453 	.word	0x08012453
 8012228:	08012453 	.word	0x08012453
 801222c:	08012453 	.word	0x08012453
 8012230:	08012453 	.word	0x08012453
 8012234:	08012453 	.word	0x08012453
 8012238:	08012453 	.word	0x08012453
 801223c:	08012453 	.word	0x08012453
 8012240:	08012453 	.word	0x08012453
 8012244:	08012453 	.word	0x08012453
 8012248:	08012453 	.word	0x08012453
 801224c:	08012453 	.word	0x08012453
 8012250:	08012453 	.word	0x08012453
 8012254:	08012453 	.word	0x08012453
 8012258:	08012453 	.word	0x08012453
 801225c:	08012453 	.word	0x08012453
 8012260:	08012453 	.word	0x08012453
 8012264:	08012453 	.word	0x08012453
 8012268:	08012453 	.word	0x08012453
 801226c:	08012453 	.word	0x08012453
 8012270:	08012453 	.word	0x08012453
 8012274:	08012453 	.word	0x08012453
 8012278:	08012453 	.word	0x08012453
 801227c:	08012453 	.word	0x08012453
 8012280:	08012453 	.word	0x08012453
 8012284:	08012453 	.word	0x08012453
 8012288:	08012453 	.word	0x08012453
 801228c:	08012453 	.word	0x08012453
 8012290:	08012453 	.word	0x08012453
 8012294:	08012453 	.word	0x08012453
 8012298:	08012453 	.word	0x08012453
 801229c:	08012453 	.word	0x08012453
 80122a0:	08012453 	.word	0x08012453
 80122a4:	08012453 	.word	0x08012453
 80122a8:	08012453 	.word	0x08012453
 80122ac:	08012453 	.word	0x08012453
 80122b0:	08012453 	.word	0x08012453
 80122b4:	08012453 	.word	0x08012453
 80122b8:	08012453 	.word	0x08012453
 80122bc:	08012453 	.word	0x08012453
 80122c0:	08012453 	.word	0x08012453
 80122c4:	08012453 	.word	0x08012453
 80122c8:	08012453 	.word	0x08012453
 80122cc:	0801234f 	.word	0x0801234f
 80122d0:	08012371 	.word	0x08012371
 80122d4:	080123ad 	.word	0x080123ad
 80122d8:	080123cf 	.word	0x080123cf
 80122dc:	08012453 	.word	0x08012453
 80122e0:	08012453 	.word	0x08012453
 80122e4:	08012453 	.word	0x08012453
 80122e8:	080123f1 	.word	0x080123f1
 80122ec:	08012431 	.word	0x08012431
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80122f0:	2300      	movs	r3, #0
 80122f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80122fe:	e0ac      	b.n	801245a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012304:	2b04      	cmp	r3, #4
 8012306:	d009      	beq.n	801231c <dhcp_parse_reply+0x218>
 8012308:	4b43      	ldr	r3, [pc, #268]	; (8012418 <dhcp_parse_reply+0x314>)
 801230a:	f240 622e 	movw	r2, #1582	; 0x62e
 801230e:	4943      	ldr	r1, [pc, #268]	; (801241c <dhcp_parse_reply+0x318>)
 8012310:	4843      	ldr	r0, [pc, #268]	; (8012420 <dhcp_parse_reply+0x31c>)
 8012312:	f00c fd3b 	bl	801ed8c <iprintf>
 8012316:	f06f 0305 	mvn.w	r3, #5
 801231a:	e1b1      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801231c:	2306      	movs	r3, #6
 801231e:	623b      	str	r3, [r7, #32]
        break;
 8012320:	e09b      	b.n	801245a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012322:	2304      	movs	r3, #4
 8012324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012328:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801232c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012330:	429a      	cmp	r2, r3
 8012332:	d209      	bcs.n	8012348 <dhcp_parse_reply+0x244>
 8012334:	4b38      	ldr	r3, [pc, #224]	; (8012418 <dhcp_parse_reply+0x314>)
 8012336:	f240 6233 	movw	r2, #1587	; 0x633
 801233a:	493a      	ldr	r1, [pc, #232]	; (8012424 <dhcp_parse_reply+0x320>)
 801233c:	4838      	ldr	r0, [pc, #224]	; (8012420 <dhcp_parse_reply+0x31c>)
 801233e:	f00c fd25 	bl	801ed8c <iprintf>
 8012342:	f06f 0305 	mvn.w	r3, #5
 8012346:	e19b      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012348:	2307      	movs	r3, #7
 801234a:	623b      	str	r3, [r7, #32]
        break;
 801234c:	e085      	b.n	801245a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801234e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012352:	2b04      	cmp	r3, #4
 8012354:	d009      	beq.n	801236a <dhcp_parse_reply+0x266>
 8012356:	4b30      	ldr	r3, [pc, #192]	; (8012418 <dhcp_parse_reply+0x314>)
 8012358:	f240 6241 	movw	r2, #1601	; 0x641
 801235c:	492f      	ldr	r1, [pc, #188]	; (801241c <dhcp_parse_reply+0x318>)
 801235e:	4830      	ldr	r0, [pc, #192]	; (8012420 <dhcp_parse_reply+0x31c>)
 8012360:	f00c fd14 	bl	801ed8c <iprintf>
 8012364:	f06f 0305 	mvn.w	r3, #5
 8012368:	e18a      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801236a:	2303      	movs	r3, #3
 801236c:	623b      	str	r3, [r7, #32]
        break;
 801236e:	e074      	b.n	801245a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012374:	2b01      	cmp	r3, #1
 8012376:	d009      	beq.n	801238c <dhcp_parse_reply+0x288>
 8012378:	4b27      	ldr	r3, [pc, #156]	; (8012418 <dhcp_parse_reply+0x314>)
 801237a:	f240 624f 	movw	r2, #1615	; 0x64f
 801237e:	492a      	ldr	r1, [pc, #168]	; (8012428 <dhcp_parse_reply+0x324>)
 8012380:	4827      	ldr	r0, [pc, #156]	; (8012420 <dhcp_parse_reply+0x31c>)
 8012382:	f00c fd03 	bl	801ed8c <iprintf>
 8012386:	f06f 0305 	mvn.w	r3, #5
 801238a:	e179      	b.n	8012680 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801238c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801238e:	2bf0      	cmp	r3, #240	; 0xf0
 8012390:	d009      	beq.n	80123a6 <dhcp_parse_reply+0x2a2>
 8012392:	4b21      	ldr	r3, [pc, #132]	; (8012418 <dhcp_parse_reply+0x314>)
 8012394:	f240 6251 	movw	r2, #1617	; 0x651
 8012398:	4924      	ldr	r1, [pc, #144]	; (801242c <dhcp_parse_reply+0x328>)
 801239a:	4821      	ldr	r0, [pc, #132]	; (8012420 <dhcp_parse_reply+0x31c>)
 801239c:	f00c fcf6 	bl	801ed8c <iprintf>
 80123a0:	f06f 0305 	mvn.w	r3, #5
 80123a4:	e16c      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80123a6:	2300      	movs	r3, #0
 80123a8:	623b      	str	r3, [r7, #32]
        break;
 80123aa:	e056      	b.n	801245a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d009      	beq.n	80123c8 <dhcp_parse_reply+0x2c4>
 80123b4:	4b18      	ldr	r3, [pc, #96]	; (8012418 <dhcp_parse_reply+0x314>)
 80123b6:	f240 6255 	movw	r2, #1621	; 0x655
 80123ba:	491b      	ldr	r1, [pc, #108]	; (8012428 <dhcp_parse_reply+0x324>)
 80123bc:	4818      	ldr	r0, [pc, #96]	; (8012420 <dhcp_parse_reply+0x31c>)
 80123be:	f00c fce5 	bl	801ed8c <iprintf>
 80123c2:	f06f 0305 	mvn.w	r3, #5
 80123c6:	e15b      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80123c8:	2301      	movs	r3, #1
 80123ca:	623b      	str	r3, [r7, #32]
        break;
 80123cc:	e045      	b.n	801245a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80123ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123d2:	2b04      	cmp	r3, #4
 80123d4:	d009      	beq.n	80123ea <dhcp_parse_reply+0x2e6>
 80123d6:	4b10      	ldr	r3, [pc, #64]	; (8012418 <dhcp_parse_reply+0x314>)
 80123d8:	f240 6259 	movw	r2, #1625	; 0x659
 80123dc:	490f      	ldr	r1, [pc, #60]	; (801241c <dhcp_parse_reply+0x318>)
 80123de:	4810      	ldr	r0, [pc, #64]	; (8012420 <dhcp_parse_reply+0x31c>)
 80123e0:	f00c fcd4 	bl	801ed8c <iprintf>
 80123e4:	f06f 0305 	mvn.w	r3, #5
 80123e8:	e14a      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80123ea:	2302      	movs	r3, #2
 80123ec:	623b      	str	r3, [r7, #32]
        break;
 80123ee:	e034      	b.n	801245a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80123f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123f4:	2b04      	cmp	r3, #4
 80123f6:	d009      	beq.n	801240c <dhcp_parse_reply+0x308>
 80123f8:	4b07      	ldr	r3, [pc, #28]	; (8012418 <dhcp_parse_reply+0x314>)
 80123fa:	f240 625d 	movw	r2, #1629	; 0x65d
 80123fe:	4907      	ldr	r1, [pc, #28]	; (801241c <dhcp_parse_reply+0x318>)
 8012400:	4807      	ldr	r0, [pc, #28]	; (8012420 <dhcp_parse_reply+0x31c>)
 8012402:	f00c fcc3 	bl	801ed8c <iprintf>
 8012406:	f06f 0305 	mvn.w	r3, #5
 801240a:	e139      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801240c:	2304      	movs	r3, #4
 801240e:	623b      	str	r3, [r7, #32]
        break;
 8012410:	e023      	b.n	801245a <dhcp_parse_reply+0x356>
 8012412:	bf00      	nop
 8012414:	20009470 	.word	0x20009470
 8012418:	08021328 	.word	0x08021328
 801241c:	08021618 	.word	0x08021618
 8012420:	080213f0 	.word	0x080213f0
 8012424:	08021624 	.word	0x08021624
 8012428:	08021638 	.word	0x08021638
 801242c:	08021644 	.word	0x08021644
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012434:	2b04      	cmp	r3, #4
 8012436:	d009      	beq.n	801244c <dhcp_parse_reply+0x348>
 8012438:	4b93      	ldr	r3, [pc, #588]	; (8012688 <dhcp_parse_reply+0x584>)
 801243a:	f240 6261 	movw	r2, #1633	; 0x661
 801243e:	4993      	ldr	r1, [pc, #588]	; (801268c <dhcp_parse_reply+0x588>)
 8012440:	4893      	ldr	r0, [pc, #588]	; (8012690 <dhcp_parse_reply+0x58c>)
 8012442:	f00c fca3 	bl	801ed8c <iprintf>
 8012446:	f06f 0305 	mvn.w	r3, #5
 801244a:	e119      	b.n	8012680 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801244c:	2305      	movs	r3, #5
 801244e:	623b      	str	r3, [r7, #32]
        break;
 8012450:	e003      	b.n	801245a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012458:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801245a:	7dfb      	ldrb	r3, [r7, #23]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d103      	bne.n	8012468 <dhcp_parse_reply+0x364>
      offset++;
 8012460:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012462:	3301      	adds	r3, #1
 8012464:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012466:	e0a1      	b.n	80125ac <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012468:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801246a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801246e:	4413      	add	r3, r2
 8012470:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8012474:	4293      	cmp	r3, r2
 8012476:	dd02      	ble.n	801247e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8012478:	f06f 0301 	mvn.w	r3, #1
 801247c:	e100      	b.n	8012680 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801247e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012482:	b29a      	uxth	r2, r3
 8012484:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012486:	4413      	add	r3, r2
 8012488:	b29b      	uxth	r3, r3
 801248a:	3302      	adds	r3, #2
 801248c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801248e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012492:	2b00      	cmp	r3, #0
 8012494:	f000 808a 	beq.w	80125ac <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8012498:	2300      	movs	r3, #0
 801249a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801249c:	6a3b      	ldr	r3, [r7, #32]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	db02      	blt.n	80124a8 <dhcp_parse_reply+0x3a4>
 80124a2:	6a3b      	ldr	r3, [r7, #32]
 80124a4:	2b07      	cmp	r3, #7
 80124a6:	dd06      	ble.n	80124b6 <dhcp_parse_reply+0x3b2>
 80124a8:	4b77      	ldr	r3, [pc, #476]	; (8012688 <dhcp_parse_reply+0x584>)
 80124aa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80124ae:	4979      	ldr	r1, [pc, #484]	; (8012694 <dhcp_parse_reply+0x590>)
 80124b0:	4877      	ldr	r0, [pc, #476]	; (8012690 <dhcp_parse_reply+0x58c>)
 80124b2:	f00c fc6b 	bl	801ed8c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80124b6:	4a78      	ldr	r2, [pc, #480]	; (8012698 <dhcp_parse_reply+0x594>)
 80124b8:	6a3b      	ldr	r3, [r7, #32]
 80124ba:	4413      	add	r3, r2
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d174      	bne.n	80125ac <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80124c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	bf28      	it	cs
 80124ca:	2304      	movcs	r3, #4
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80124d0:	8bfb      	ldrh	r3, [r7, #30]
 80124d2:	8aba      	ldrh	r2, [r7, #20]
 80124d4:	f107 0108 	add.w	r1, r7, #8
 80124d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124da:	f004 fc07 	bl	8016cec <pbuf_copy_partial>
 80124de:	4603      	mov	r3, r0
 80124e0:	461a      	mov	r2, r3
 80124e2:	8abb      	ldrh	r3, [r7, #20]
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d002      	beq.n	80124ee <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80124e8:	f06f 0301 	mvn.w	r3, #1
 80124ec:	e0c8      	b.n	8012680 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80124ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124f2:	2b04      	cmp	r3, #4
 80124f4:	d933      	bls.n	801255e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80124f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124fa:	f003 0303 	and.w	r3, r3, #3
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	2b00      	cmp	r3, #0
 8012502:	d009      	beq.n	8012518 <dhcp_parse_reply+0x414>
 8012504:	4b60      	ldr	r3, [pc, #384]	; (8012688 <dhcp_parse_reply+0x584>)
 8012506:	f240 6281 	movw	r2, #1665	; 0x681
 801250a:	4964      	ldr	r1, [pc, #400]	; (801269c <dhcp_parse_reply+0x598>)
 801250c:	4860      	ldr	r0, [pc, #384]	; (8012690 <dhcp_parse_reply+0x58c>)
 801250e:	f00c fc3d 	bl	801ed8c <iprintf>
 8012512:	f06f 0305 	mvn.w	r3, #5
 8012516:	e0b3      	b.n	8012680 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8012518:	4a5f      	ldr	r2, [pc, #380]	; (8012698 <dhcp_parse_reply+0x594>)
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	4413      	add	r3, r2
 801251e:	2201      	movs	r2, #1
 8012520:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	4618      	mov	r0, r3
 8012526:	f002 fd88 	bl	801503a <lwip_htonl>
 801252a:	4602      	mov	r2, r0
 801252c:	495c      	ldr	r1, [pc, #368]	; (80126a0 <dhcp_parse_reply+0x59c>)
 801252e:	6a3b      	ldr	r3, [r7, #32]
 8012530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012538:	3b04      	subs	r3, #4
 801253a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801253e:	8bfb      	ldrh	r3, [r7, #30]
 8012540:	3304      	adds	r3, #4
 8012542:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012544:	8a7a      	ldrh	r2, [r7, #18]
 8012546:	8bfb      	ldrh	r3, [r7, #30]
 8012548:	429a      	cmp	r2, r3
 801254a:	d202      	bcs.n	8012552 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801254c:	f06f 0301 	mvn.w	r3, #1
 8012550:	e096      	b.n	8012680 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8012552:	8a7b      	ldrh	r3, [r7, #18]
 8012554:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	3301      	adds	r3, #1
 801255a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801255c:	e79e      	b.n	801249c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801255e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012562:	2b04      	cmp	r3, #4
 8012564:	d106      	bne.n	8012574 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	4618      	mov	r0, r3
 801256a:	f002 fd66 	bl	801503a <lwip_htonl>
 801256e:	4603      	mov	r3, r0
 8012570:	60bb      	str	r3, [r7, #8]
 8012572:	e011      	b.n	8012598 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012578:	2b01      	cmp	r3, #1
 801257a:	d009      	beq.n	8012590 <dhcp_parse_reply+0x48c>
 801257c:	4b42      	ldr	r3, [pc, #264]	; (8012688 <dhcp_parse_reply+0x584>)
 801257e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012582:	4948      	ldr	r1, [pc, #288]	; (80126a4 <dhcp_parse_reply+0x5a0>)
 8012584:	4842      	ldr	r0, [pc, #264]	; (8012690 <dhcp_parse_reply+0x58c>)
 8012586:	f00c fc01 	bl	801ed8c <iprintf>
 801258a:	f06f 0305 	mvn.w	r3, #5
 801258e:	e077      	b.n	8012680 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8012590:	f107 0308 	add.w	r3, r7, #8
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012598:	4a3f      	ldr	r2, [pc, #252]	; (8012698 <dhcp_parse_reply+0x594>)
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	4413      	add	r3, r2
 801259e:	2201      	movs	r2, #1
 80125a0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	493e      	ldr	r1, [pc, #248]	; (80126a0 <dhcp_parse_reply+0x59c>)
 80125a6:	6a3b      	ldr	r3, [r7, #32]
 80125a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80125ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ae:	895b      	ldrh	r3, [r3, #10]
 80125b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d324      	bcc.n	8012600 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80125b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b8:	895b      	ldrh	r3, [r3, #10]
 80125ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80125bc:	1ad3      	subs	r3, r2, r3
 80125be:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80125c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c2:	895b      	ldrh	r3, [r3, #10]
 80125c4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80125ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80125cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d213      	bcs.n	80125fa <dhcp_parse_reply+0x4f6>
        q = q->next;
 80125d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d109      	bne.n	80125f2 <dhcp_parse_reply+0x4ee>
 80125de:	4b2a      	ldr	r3, [pc, #168]	; (8012688 <dhcp_parse_reply+0x584>)
 80125e0:	f240 629d 	movw	r2, #1693	; 0x69d
 80125e4:	4930      	ldr	r1, [pc, #192]	; (80126a8 <dhcp_parse_reply+0x5a4>)
 80125e6:	482a      	ldr	r0, [pc, #168]	; (8012690 <dhcp_parse_reply+0x58c>)
 80125e8:	f00c fbd0 	bl	801ed8c <iprintf>
 80125ec:	f06f 0305 	mvn.w	r3, #5
 80125f0:	e046      	b.n	8012680 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80125f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80125f8:	e002      	b.n	8012600 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80125fa:	f06f 0301 	mvn.w	r3, #1
 80125fe:	e03f      	b.n	8012680 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00a      	beq.n	801261c <dhcp_parse_reply+0x518>
 8012606:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012608:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801260a:	429a      	cmp	r2, r3
 801260c:	d206      	bcs.n	801261c <dhcp_parse_reply+0x518>
 801260e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012612:	4413      	add	r3, r2
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	2bff      	cmp	r3, #255	; 0xff
 8012618:	f47f adb7 	bne.w	801218a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801261c:	4b1e      	ldr	r3, [pc, #120]	; (8012698 <dhcp_parse_reply+0x594>)
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d018      	beq.n	8012656 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012624:	4b1e      	ldr	r3, [pc, #120]	; (80126a0 <dhcp_parse_reply+0x59c>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801262a:	4b1b      	ldr	r3, [pc, #108]	; (8012698 <dhcp_parse_reply+0x594>)
 801262c:	2200      	movs	r2, #0
 801262e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d102      	bne.n	801263c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8012636:	2301      	movs	r3, #1
 8012638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801263a:	e00c      	b.n	8012656 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2b02      	cmp	r3, #2
 8012640:	d102      	bne.n	8012648 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8012642:	2301      	movs	r3, #1
 8012644:	62bb      	str	r3, [r7, #40]	; 0x28
 8012646:	e006      	b.n	8012656 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b03      	cmp	r3, #3
 801264c:	d103      	bne.n	8012656 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801264e:	2301      	movs	r3, #1
 8012650:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012652:	2301      	movs	r3, #1
 8012654:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d006      	beq.n	801266a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801265c:	2300      	movs	r3, #0
 801265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012660:	236c      	movs	r3, #108	; 0x6c
 8012662:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012664:	23ec      	movs	r3, #236	; 0xec
 8012666:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012668:	e569      	b.n	801213e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	2b00      	cmp	r3, #0
 801266e:	d006      	beq.n	801267e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8012670:	2300      	movs	r3, #0
 8012672:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012674:	232c      	movs	r3, #44	; 0x2c
 8012676:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012678:	236c      	movs	r3, #108	; 0x6c
 801267a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801267c:	e55f      	b.n	801213e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3740      	adds	r7, #64	; 0x40
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	08021328 	.word	0x08021328
 801268c:	08021618 	.word	0x08021618
 8012690:	080213f0 	.word	0x080213f0
 8012694:	0802165c 	.word	0x0802165c
 8012698:	20009470 	.word	0x20009470
 801269c:	08021670 	.word	0x08021670
 80126a0:	20009478 	.word	0x20009478
 80126a4:	08021688 	.word	0x08021688
 80126a8:	0802169c 	.word	0x0802169c

080126ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08a      	sub	sp, #40	; 0x28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
 80126b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80126ba:	4b60      	ldr	r3, [pc, #384]	; (801283c <dhcp_recv+0x190>)
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f000 809d 	beq.w	801280e <dhcp_recv+0x162>
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	791b      	ldrb	r3, [r3, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 8098 	beq.w	801280e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	895b      	ldrh	r3, [r3, #10]
 80126e2:	2b2b      	cmp	r3, #43	; 0x2b
 80126e4:	f240 8095 	bls.w	8012812 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	f040 8092 	bne.w	8012816 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80126f2:	2300      	movs	r3, #0
 80126f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126f8:	e012      	b.n	8012720 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80126fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126fe:	6a3a      	ldr	r2, [r7, #32]
 8012700:	4413      	add	r3, r2
 8012702:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801270a:	69b9      	ldr	r1, [r7, #24]
 801270c:	440b      	add	r3, r1
 801270e:	7f1b      	ldrb	r3, [r3, #28]
 8012710:	429a      	cmp	r2, r3
 8012712:	f040 8082 	bne.w	801281a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801271a:	3301      	adds	r3, #1
 801271c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012726:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801272a:	429a      	cmp	r2, r3
 801272c:	d203      	bcs.n	8012736 <dhcp_recv+0x8a>
 801272e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012732:	2b05      	cmp	r3, #5
 8012734:	d9e1      	bls.n	80126fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	4618      	mov	r0, r3
 801273c:	f002 fc7d 	bl	801503a <lwip_htonl>
 8012740:	4602      	mov	r2, r0
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	429a      	cmp	r2, r3
 8012748:	d169      	bne.n	801281e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801274a:	69f9      	ldr	r1, [r7, #28]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff fcd9 	bl	8012104 <dhcp_parse_reply>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d164      	bne.n	8012822 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012758:	4b39      	ldr	r3, [pc, #228]	; (8012840 <dhcp_recv+0x194>)
 801275a:	785b      	ldrb	r3, [r3, #1]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d062      	beq.n	8012826 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012766:	4b37      	ldr	r3, [pc, #220]	; (8012844 <dhcp_recv+0x198>)
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801276c:	7cfb      	ldrb	r3, [r7, #19]
 801276e:	2b05      	cmp	r3, #5
 8012770:	d12a      	bne.n	80127c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	795b      	ldrb	r3, [r3, #5]
 8012776:	2b01      	cmp	r3, #1
 8012778:	d112      	bne.n	80127a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801277a:	6979      	ldr	r1, [r7, #20]
 801277c:	6a38      	ldr	r0, [r7, #32]
 801277e:	f7fe fe17 	bl	80113b0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012782:	6a3b      	ldr	r3, [r7, #32]
 8012784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012788:	f003 0308 	and.w	r3, r3, #8
 801278c:	2b00      	cmp	r3, #0
 801278e:	d003      	beq.n	8012798 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012790:	6a38      	ldr	r0, [r7, #32]
 8012792:	f7fe fb85 	bl	8010ea0 <dhcp_check>
 8012796:	e049      	b.n	801282c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012798:	6a38      	ldr	r0, [r7, #32]
 801279a:	f7ff f867 	bl	801186c <dhcp_bind>
 801279e:	e045      	b.n	801282c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	795b      	ldrb	r3, [r3, #5]
 80127a4:	2b03      	cmp	r3, #3
 80127a6:	d007      	beq.n	80127b8 <dhcp_recv+0x10c>
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	795b      	ldrb	r3, [r3, #5]
 80127ac:	2b04      	cmp	r3, #4
 80127ae:	d003      	beq.n	80127b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80127b4:	2b05      	cmp	r3, #5
 80127b6:	d139      	bne.n	801282c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80127b8:	6979      	ldr	r1, [r7, #20]
 80127ba:	6a38      	ldr	r0, [r7, #32]
 80127bc:	f7fe fdf8 	bl	80113b0 <dhcp_handle_ack>
      dhcp_bind(netif);
 80127c0:	6a38      	ldr	r0, [r7, #32]
 80127c2:	f7ff f853 	bl	801186c <dhcp_bind>
 80127c6:	e031      	b.n	801282c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80127c8:	7cfb      	ldrb	r3, [r7, #19]
 80127ca:	2b06      	cmp	r3, #6
 80127cc:	d113      	bne.n	80127f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80127d2:	2b03      	cmp	r3, #3
 80127d4:	d00b      	beq.n	80127ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	795b      	ldrb	r3, [r3, #5]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d007      	beq.n	80127ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80127e2:	2b04      	cmp	r3, #4
 80127e4:	d003      	beq.n	80127ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	795b      	ldrb	r3, [r3, #5]
 80127ea:	2b05      	cmp	r3, #5
 80127ec:	d103      	bne.n	80127f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80127ee:	6a38      	ldr	r0, [r7, #32]
 80127f0:	f7fe fb3c 	bl	8010e6c <dhcp_handle_nak>
 80127f4:	e01a      	b.n	801282c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80127f6:	7cfb      	ldrb	r3, [r7, #19]
 80127f8:	2b02      	cmp	r3, #2
 80127fa:	d116      	bne.n	801282a <dhcp_recv+0x17e>
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	795b      	ldrb	r3, [r3, #5]
 8012800:	2b06      	cmp	r3, #6
 8012802:	d112      	bne.n	801282a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012804:	6979      	ldr	r1, [r7, #20]
 8012806:	6a38      	ldr	r0, [r7, #32]
 8012808:	f7fe fb7e 	bl	8010f08 <dhcp_handle_offer>
 801280c:	e00e      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801280e:	bf00      	nop
 8012810:	e00c      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012812:	bf00      	nop
 8012814:	e00a      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012816:	bf00      	nop
 8012818:	e008      	b.n	801282c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801281a:	bf00      	nop
 801281c:	e006      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801281e:	bf00      	nop
 8012820:	e004      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012822:	bf00      	nop
 8012824:	e002      	b.n	801282c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012826:	bf00      	nop
 8012828:	e000      	b.n	801282c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801282a:	bf00      	nop
  pbuf_free(p);
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f004 f857 	bl	80168e0 <pbuf_free>
}
 8012832:	bf00      	nop
 8012834:	3728      	adds	r7, #40	; 0x28
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	20009498 	.word	0x20009498
 8012840:	20009470 	.word	0x20009470
 8012844:	20009478 	.word	0x20009478

08012848 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	603b      	str	r3, [r7, #0]
 8012854:	4613      	mov	r3, r2
 8012856:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d108      	bne.n	8012870 <dhcp_create_msg+0x28>
 801285e:	4b5f      	ldr	r3, [pc, #380]	; (80129dc <dhcp_create_msg+0x194>)
 8012860:	f240 7269 	movw	r2, #1897	; 0x769
 8012864:	495e      	ldr	r1, [pc, #376]	; (80129e0 <dhcp_create_msg+0x198>)
 8012866:	485f      	ldr	r0, [pc, #380]	; (80129e4 <dhcp_create_msg+0x19c>)
 8012868:	f00c fa90 	bl	801ed8c <iprintf>
 801286c:	2300      	movs	r3, #0
 801286e:	e0b1      	b.n	80129d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d108      	bne.n	8012888 <dhcp_create_msg+0x40>
 8012876:	4b59      	ldr	r3, [pc, #356]	; (80129dc <dhcp_create_msg+0x194>)
 8012878:	f240 726a 	movw	r2, #1898	; 0x76a
 801287c:	495a      	ldr	r1, [pc, #360]	; (80129e8 <dhcp_create_msg+0x1a0>)
 801287e:	4859      	ldr	r0, [pc, #356]	; (80129e4 <dhcp_create_msg+0x19c>)
 8012880:	f00c fa84 	bl	801ed8c <iprintf>
 8012884:	2300      	movs	r3, #0
 8012886:	e0a5      	b.n	80129d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012888:	f44f 7220 	mov.w	r2, #640	; 0x280
 801288c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012890:	2036      	movs	r0, #54	; 0x36
 8012892:	f003 fd41 	bl	8016318 <pbuf_alloc>
 8012896:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d101      	bne.n	80128a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801289e:	2300      	movs	r3, #0
 80128a0:	e098      	b.n	80129d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	895b      	ldrh	r3, [r3, #10]
 80128a6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80128aa:	d206      	bcs.n	80128ba <dhcp_create_msg+0x72>
 80128ac:	4b4b      	ldr	r3, [pc, #300]	; (80129dc <dhcp_create_msg+0x194>)
 80128ae:	f240 7271 	movw	r2, #1905	; 0x771
 80128b2:	494e      	ldr	r1, [pc, #312]	; (80129ec <dhcp_create_msg+0x1a4>)
 80128b4:	484b      	ldr	r0, [pc, #300]	; (80129e4 <dhcp_create_msg+0x19c>)
 80128b6:	f00c fa69 	bl	801ed8c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80128ba:	79fb      	ldrb	r3, [r7, #7]
 80128bc:	2b03      	cmp	r3, #3
 80128be:	d103      	bne.n	80128c8 <dhcp_create_msg+0x80>
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	795b      	ldrb	r3, [r3, #5]
 80128c4:	2b03      	cmp	r3, #3
 80128c6:	d10d      	bne.n	80128e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	799b      	ldrb	r3, [r3, #6]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d105      	bne.n	80128dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80128d0:	f00c faea 	bl	801eea8 <rand>
 80128d4:	4603      	mov	r3, r0
 80128d6:	461a      	mov	r2, r3
 80128d8:	4b45      	ldr	r3, [pc, #276]	; (80129f0 <dhcp_create_msg+0x1a8>)
 80128da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80128dc:	4b44      	ldr	r3, [pc, #272]	; (80129f0 <dhcp_create_msg+0x1a8>)
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80128ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80128ee:	2100      	movs	r1, #0
 80128f0:	6978      	ldr	r0, [r7, #20]
 80128f2:	f00c fa43 	bl	801ed7c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	2201      	movs	r2, #1
 80128fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2201      	movs	r2, #1
 8012900:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4618      	mov	r0, r3
 8012912:	f002 fb92 	bl	801503a <lwip_htonl>
 8012916:	4602      	mov	r2, r0
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	2b08      	cmp	r3, #8
 8012920:	d010      	beq.n	8012944 <dhcp_create_msg+0xfc>
 8012922:	79fb      	ldrb	r3, [r7, #7]
 8012924:	2b04      	cmp	r3, #4
 8012926:	d00d      	beq.n	8012944 <dhcp_create_msg+0xfc>
 8012928:	79fb      	ldrb	r3, [r7, #7]
 801292a:	2b07      	cmp	r3, #7
 801292c:	d00a      	beq.n	8012944 <dhcp_create_msg+0xfc>
 801292e:	79fb      	ldrb	r3, [r7, #7]
 8012930:	2b03      	cmp	r3, #3
 8012932:	d10c      	bne.n	801294e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012938:	2b05      	cmp	r3, #5
 801293a:	d003      	beq.n	8012944 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	795b      	ldrb	r3, [r3, #5]
 8012940:	2b04      	cmp	r3, #4
 8012942:	d104      	bne.n	801294e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	3304      	adds	r3, #4
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801294e:	2300      	movs	r3, #0
 8012950:	83fb      	strh	r3, [r7, #30]
 8012952:	e00c      	b.n	801296e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012954:	8bfa      	ldrh	r2, [r7, #30]
 8012956:	8bfb      	ldrh	r3, [r7, #30]
 8012958:	68f9      	ldr	r1, [r7, #12]
 801295a:	440a      	add	r2, r1
 801295c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	4413      	add	r3, r2
 8012964:	460a      	mov	r2, r1
 8012966:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012968:	8bfb      	ldrh	r3, [r7, #30]
 801296a:	3301      	adds	r3, #1
 801296c:	83fb      	strh	r3, [r7, #30]
 801296e:	8bfb      	ldrh	r3, [r7, #30]
 8012970:	2b05      	cmp	r3, #5
 8012972:	d9ef      	bls.n	8012954 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	2200      	movs	r2, #0
 8012978:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801297c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012980:	2200      	movs	r2, #0
 8012982:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012986:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801298a:	2200      	movs	r2, #0
 801298c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012990:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012994:	2200      	movs	r2, #0
 8012996:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801299a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129a4:	2301      	movs	r3, #1
 80129a6:	2235      	movs	r2, #53	; 0x35
 80129a8:	2000      	movs	r0, #0
 80129aa:	f7ff fadb 	bl	8011f64 <dhcp_option>
 80129ae:	4603      	mov	r3, r0
 80129b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129b8:	79fa      	ldrb	r2, [r7, #7]
 80129ba:	8a7b      	ldrh	r3, [r7, #18]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7ff fb05 	bl	8011fcc <dhcp_option_byte>
 80129c2:	4603      	mov	r3, r0
 80129c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d002      	beq.n	80129d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	8a7a      	ldrh	r2, [r7, #18]
 80129d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80129d2:	69bb      	ldr	r3, [r7, #24]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3720      	adds	r7, #32
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	08021328 	.word	0x08021328
 80129e0:	080216b0 	.word	0x080216b0
 80129e4:	080213f0 	.word	0x080213f0
 80129e8:	080216d0 	.word	0x080216d0
 80129ec:	080216f0 	.word	0x080216f0
 80129f0:	20008f34 	.word	0x20008f34

080129f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
 8012a00:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012a02:	89fb      	ldrh	r3, [r7, #14]
 8012a04:	1c5a      	adds	r2, r3, #1
 8012a06:	81fa      	strh	r2, [r7, #14]
 8012a08:	461a      	mov	r2, r3
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	22ff      	movs	r2, #255	; 0xff
 8012a10:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012a12:	e007      	b.n	8012a24 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012a14:	89fb      	ldrh	r3, [r7, #14]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	81fa      	strh	r2, [r7, #14]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	4413      	add	r3, r2
 8012a20:	2200      	movs	r2, #0
 8012a22:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012a24:	89fb      	ldrh	r3, [r7, #14]
 8012a26:	2b43      	cmp	r3, #67	; 0x43
 8012a28:	d904      	bls.n	8012a34 <dhcp_option_trailer+0x40>
 8012a2a:	89fb      	ldrh	r3, [r7, #14]
 8012a2c:	f003 0303 	and.w	r3, r3, #3
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <dhcp_option_trailer+0x46>
 8012a34:	89fb      	ldrh	r3, [r7, #14]
 8012a36:	2b43      	cmp	r3, #67	; 0x43
 8012a38:	d9ec      	bls.n	8012a14 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012a3a:	89fb      	ldrh	r3, [r7, #14]
 8012a3c:	33f0      	adds	r3, #240	; 0xf0
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	4619      	mov	r1, r3
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f003 fdc6 	bl	80165d4 <pbuf_realloc>
}
 8012a48:	bf00      	nop
 8012a4a:	3710      	adds	r7, #16
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012a50:	b480      	push	{r7}
 8012a52:	b085      	sub	sp, #20
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d017      	beq.n	8012a8e <dhcp_supplied_address+0x3e>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d013      	beq.n	8012a8e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a6a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	795b      	ldrb	r3, [r3, #5]
 8012a70:	2b0a      	cmp	r3, #10
 8012a72:	d007      	beq.n	8012a84 <dhcp_supplied_address+0x34>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	795b      	ldrb	r3, [r3, #5]
 8012a78:	2b05      	cmp	r3, #5
 8012a7a:	d003      	beq.n	8012a84 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012a80:	2b04      	cmp	r3, #4
 8012a82:	d101      	bne.n	8012a88 <dhcp_supplied_address+0x38>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e000      	b.n	8012a8a <dhcp_supplied_address+0x3a>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	e000      	b.n	8012a90 <dhcp_supplied_address+0x40>
  }
  return 0;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3714      	adds	r7, #20
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012aa4:	4915      	ldr	r1, [pc, #84]	; (8012afc <etharp_free_entry+0x60>)
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	4413      	add	r3, r2
 8012aae:	00db      	lsls	r3, r3, #3
 8012ab0:	440b      	add	r3, r1
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d013      	beq.n	8012ae0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012ab8:	4910      	ldr	r1, [pc, #64]	; (8012afc <etharp_free_entry+0x60>)
 8012aba:	687a      	ldr	r2, [r7, #4]
 8012abc:	4613      	mov	r3, r2
 8012abe:	005b      	lsls	r3, r3, #1
 8012ac0:	4413      	add	r3, r2
 8012ac2:	00db      	lsls	r3, r3, #3
 8012ac4:	440b      	add	r3, r1
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f003 ff09 	bl	80168e0 <pbuf_free>
    arp_table[i].q = NULL;
 8012ace:	490b      	ldr	r1, [pc, #44]	; (8012afc <etharp_free_entry+0x60>)
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	440b      	add	r3, r1
 8012adc:	2200      	movs	r2, #0
 8012ade:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012ae0:	4906      	ldr	r1, [pc, #24]	; (8012afc <etharp_free_entry+0x60>)
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	005b      	lsls	r3, r3, #1
 8012ae8:	4413      	add	r3, r2
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	440b      	add	r3, r1
 8012aee:	3314      	adds	r3, #20
 8012af0:	2200      	movs	r2, #0
 8012af2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012af4:	bf00      	nop
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	20008f38 	.word	0x20008f38

08012b00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b06:	2300      	movs	r3, #0
 8012b08:	607b      	str	r3, [r7, #4]
 8012b0a:	e096      	b.n	8012c3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012b0c:	494f      	ldr	r1, [pc, #316]	; (8012c4c <etharp_tmr+0x14c>)
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	4613      	mov	r3, r2
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	00db      	lsls	r3, r3, #3
 8012b18:	440b      	add	r3, r1
 8012b1a:	3314      	adds	r3, #20
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 8086 	beq.w	8012c34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012b28:	4948      	ldr	r1, [pc, #288]	; (8012c4c <etharp_tmr+0x14c>)
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3312      	adds	r3, #18
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	b298      	uxth	r0, r3
 8012b3e:	4943      	ldr	r1, [pc, #268]	; (8012c4c <etharp_tmr+0x14c>)
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	4613      	mov	r3, r2
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	4413      	add	r3, r2
 8012b48:	00db      	lsls	r3, r3, #3
 8012b4a:	440b      	add	r3, r1
 8012b4c:	3312      	adds	r3, #18
 8012b4e:	4602      	mov	r2, r0
 8012b50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012b52:	493e      	ldr	r1, [pc, #248]	; (8012c4c <etharp_tmr+0x14c>)
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	440b      	add	r3, r1
 8012b60:	3312      	adds	r3, #18
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012b68:	d215      	bcs.n	8012b96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b6a:	4938      	ldr	r1, [pc, #224]	; (8012c4c <etharp_tmr+0x14c>)
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	4413      	add	r3, r2
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	440b      	add	r3, r1
 8012b78:	3314      	adds	r3, #20
 8012b7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d10e      	bne.n	8012b9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012b80:	4932      	ldr	r1, [pc, #200]	; (8012c4c <etharp_tmr+0x14c>)
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	4613      	mov	r3, r2
 8012b86:	005b      	lsls	r3, r3, #1
 8012b88:	4413      	add	r3, r2
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	440b      	add	r3, r1
 8012b8e:	3312      	adds	r3, #18
 8012b90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b92:	2b04      	cmp	r3, #4
 8012b94:	d903      	bls.n	8012b9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7ff ff80 	bl	8012a9c <etharp_free_entry>
 8012b9c:	e04a      	b.n	8012c34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012b9e:	492b      	ldr	r1, [pc, #172]	; (8012c4c <etharp_tmr+0x14c>)
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	005b      	lsls	r3, r3, #1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	00db      	lsls	r3, r3, #3
 8012baa:	440b      	add	r3, r1
 8012bac:	3314      	adds	r3, #20
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b03      	cmp	r3, #3
 8012bb2:	d10a      	bne.n	8012bca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012bb4:	4925      	ldr	r1, [pc, #148]	; (8012c4c <etharp_tmr+0x14c>)
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	4613      	mov	r3, r2
 8012bba:	005b      	lsls	r3, r3, #1
 8012bbc:	4413      	add	r3, r2
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	440b      	add	r3, r1
 8012bc2:	3314      	adds	r3, #20
 8012bc4:	2204      	movs	r2, #4
 8012bc6:	701a      	strb	r2, [r3, #0]
 8012bc8:	e034      	b.n	8012c34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012bca:	4920      	ldr	r1, [pc, #128]	; (8012c4c <etharp_tmr+0x14c>)
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	4613      	mov	r3, r2
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	4413      	add	r3, r2
 8012bd4:	00db      	lsls	r3, r3, #3
 8012bd6:	440b      	add	r3, r1
 8012bd8:	3314      	adds	r3, #20
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2b04      	cmp	r3, #4
 8012bde:	d10a      	bne.n	8012bf6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012be0:	491a      	ldr	r1, [pc, #104]	; (8012c4c <etharp_tmr+0x14c>)
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	4613      	mov	r3, r2
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	4413      	add	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	440b      	add	r3, r1
 8012bee:	3314      	adds	r3, #20
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	701a      	strb	r2, [r3, #0]
 8012bf4:	e01e      	b.n	8012c34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012bf6:	4915      	ldr	r1, [pc, #84]	; (8012c4c <etharp_tmr+0x14c>)
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	440b      	add	r3, r1
 8012c04:	3314      	adds	r3, #20
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d113      	bne.n	8012c34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012c0c:	490f      	ldr	r1, [pc, #60]	; (8012c4c <etharp_tmr+0x14c>)
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	4613      	mov	r3, r2
 8012c12:	005b      	lsls	r3, r3, #1
 8012c14:	4413      	add	r3, r2
 8012c16:	00db      	lsls	r3, r3, #3
 8012c18:	440b      	add	r3, r1
 8012c1a:	3308      	adds	r3, #8
 8012c1c:	6818      	ldr	r0, [r3, #0]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	4613      	mov	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	00db      	lsls	r3, r3, #3
 8012c28:	4a08      	ldr	r2, [pc, #32]	; (8012c4c <etharp_tmr+0x14c>)
 8012c2a:	4413      	add	r3, r2
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	4619      	mov	r1, r3
 8012c30:	f000 fe72 	bl	8013918 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	3301      	adds	r3, #1
 8012c38:	607b      	str	r3, [r7, #4]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b09      	cmp	r3, #9
 8012c3e:	f77f af65 	ble.w	8012b0c <etharp_tmr+0xc>
      }
    }
  }
}
 8012c42:	bf00      	nop
 8012c44:	bf00      	nop
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	20008f38 	.word	0x20008f38

08012c50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b08a      	sub	sp, #40	; 0x28
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	460b      	mov	r3, r1
 8012c5a:	607a      	str	r2, [r7, #4]
 8012c5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012c5e:	230a      	movs	r3, #10
 8012c60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012c62:	230a      	movs	r3, #10
 8012c64:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012c66:	230a      	movs	r3, #10
 8012c68:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012c6e:	230a      	movs	r3, #10
 8012c70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	83bb      	strh	r3, [r7, #28]
 8012c76:	2300      	movs	r3, #0
 8012c78:	837b      	strh	r3, [r7, #26]
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c7e:	2300      	movs	r3, #0
 8012c80:	843b      	strh	r3, [r7, #32]
 8012c82:	e0ae      	b.n	8012de2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012c84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c88:	49a6      	ldr	r1, [pc, #664]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	005b      	lsls	r3, r3, #1
 8012c8e:	4413      	add	r3, r2
 8012c90:	00db      	lsls	r3, r3, #3
 8012c92:	440b      	add	r3, r1
 8012c94:	3314      	adds	r3, #20
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012c9e:	2b0a      	cmp	r3, #10
 8012ca0:	d105      	bne.n	8012cae <etharp_find_entry+0x5e>
 8012ca2:	7dfb      	ldrb	r3, [r7, #23]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d102      	bne.n	8012cae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012ca8:	8c3b      	ldrh	r3, [r7, #32]
 8012caa:	847b      	strh	r3, [r7, #34]	; 0x22
 8012cac:	e095      	b.n	8012dda <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012cae:	7dfb      	ldrb	r3, [r7, #23]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f000 8092 	beq.w	8012dda <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012cb6:	7dfb      	ldrb	r3, [r7, #23]
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d009      	beq.n	8012cd0 <etharp_find_entry+0x80>
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d806      	bhi.n	8012cd0 <etharp_find_entry+0x80>
 8012cc2:	4b99      	ldr	r3, [pc, #612]	; (8012f28 <etharp_find_entry+0x2d8>)
 8012cc4:	f240 1223 	movw	r2, #291	; 0x123
 8012cc8:	4998      	ldr	r1, [pc, #608]	; (8012f2c <etharp_find_entry+0x2dc>)
 8012cca:	4899      	ldr	r0, [pc, #612]	; (8012f30 <etharp_find_entry+0x2e0>)
 8012ccc:	f00c f85e 	bl	801ed8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d020      	beq.n	8012d18 <etharp_find_entry+0xc8>
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cde:	4891      	ldr	r0, [pc, #580]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012ce0:	4613      	mov	r3, r2
 8012ce2:	005b      	lsls	r3, r3, #1
 8012ce4:	4413      	add	r3, r2
 8012ce6:	00db      	lsls	r3, r3, #3
 8012ce8:	4403      	add	r3, r0
 8012cea:	3304      	adds	r3, #4
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	4299      	cmp	r1, r3
 8012cf0:	d112      	bne.n	8012d18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d00c      	beq.n	8012d12 <etharp_find_entry+0xc2>
 8012cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cfc:	4989      	ldr	r1, [pc, #548]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	440b      	add	r3, r1
 8012d08:	3308      	adds	r3, #8
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d102      	bne.n	8012d18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012d12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d16:	e100      	b.n	8012f1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d140      	bne.n	8012da0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012d1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d22:	4980      	ldr	r1, [pc, #512]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	440b      	add	r3, r1
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d01a      	beq.n	8012d6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012d34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d38:	497a      	ldr	r1, [pc, #488]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	005b      	lsls	r3, r3, #1
 8012d3e:	4413      	add	r3, r2
 8012d40:	00db      	lsls	r3, r3, #3
 8012d42:	440b      	add	r3, r1
 8012d44:	3312      	adds	r3, #18
 8012d46:	881b      	ldrh	r3, [r3, #0]
 8012d48:	8bba      	ldrh	r2, [r7, #28]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d845      	bhi.n	8012dda <etharp_find_entry+0x18a>
            old_queue = i;
 8012d4e:	8c3b      	ldrh	r3, [r7, #32]
 8012d50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012d52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d56:	4973      	ldr	r1, [pc, #460]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012d58:	4613      	mov	r3, r2
 8012d5a:	005b      	lsls	r3, r3, #1
 8012d5c:	4413      	add	r3, r2
 8012d5e:	00db      	lsls	r3, r3, #3
 8012d60:	440b      	add	r3, r1
 8012d62:	3312      	adds	r3, #18
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	83bb      	strh	r3, [r7, #28]
 8012d68:	e037      	b.n	8012dda <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d6e:	496d      	ldr	r1, [pc, #436]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012d70:	4613      	mov	r3, r2
 8012d72:	005b      	lsls	r3, r3, #1
 8012d74:	4413      	add	r3, r2
 8012d76:	00db      	lsls	r3, r3, #3
 8012d78:	440b      	add	r3, r1
 8012d7a:	3312      	adds	r3, #18
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	8b7a      	ldrh	r2, [r7, #26]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d82a      	bhi.n	8012dda <etharp_find_entry+0x18a>
            old_pending = i;
 8012d84:	8c3b      	ldrh	r3, [r7, #32]
 8012d86:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012d88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d8c:	4965      	ldr	r1, [pc, #404]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012d8e:	4613      	mov	r3, r2
 8012d90:	005b      	lsls	r3, r3, #1
 8012d92:	4413      	add	r3, r2
 8012d94:	00db      	lsls	r3, r3, #3
 8012d96:	440b      	add	r3, r1
 8012d98:	3312      	adds	r3, #18
 8012d9a:	881b      	ldrh	r3, [r3, #0]
 8012d9c:	837b      	strh	r3, [r7, #26]
 8012d9e:	e01c      	b.n	8012dda <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d919      	bls.n	8012dda <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012da6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012daa:	495e      	ldr	r1, [pc, #376]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012dac:	4613      	mov	r3, r2
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	4413      	add	r3, r2
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	440b      	add	r3, r1
 8012db6:	3312      	adds	r3, #18
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	8b3a      	ldrh	r2, [r7, #24]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d80c      	bhi.n	8012dda <etharp_find_entry+0x18a>
            old_stable = i;
 8012dc0:	8c3b      	ldrh	r3, [r7, #32]
 8012dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dc8:	4956      	ldr	r1, [pc, #344]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012dca:	4613      	mov	r3, r2
 8012dcc:	005b      	lsls	r3, r3, #1
 8012dce:	4413      	add	r3, r2
 8012dd0:	00db      	lsls	r3, r3, #3
 8012dd2:	440b      	add	r3, r1
 8012dd4:	3312      	adds	r3, #18
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dda:	8c3b      	ldrh	r3, [r7, #32]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	843b      	strh	r3, [r7, #32]
 8012de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012de6:	2b09      	cmp	r3, #9
 8012de8:	f77f af4c 	ble.w	8012c84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012dec:	7afb      	ldrb	r3, [r7, #11]
 8012dee:	f003 0302 	and.w	r3, r3, #2
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d108      	bne.n	8012e08 <etharp_find_entry+0x1b8>
 8012df6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012dfa:	2b0a      	cmp	r3, #10
 8012dfc:	d107      	bne.n	8012e0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012dfe:	7afb      	ldrb	r3, [r7, #11]
 8012e00:	f003 0301 	and.w	r3, r3, #1
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d102      	bne.n	8012e0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e0c:	e085      	b.n	8012f1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012e0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012e12:	2b09      	cmp	r3, #9
 8012e14:	dc02      	bgt.n	8012e1c <etharp_find_entry+0x1cc>
    i = empty;
 8012e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e18:	843b      	strh	r3, [r7, #32]
 8012e1a:	e039      	b.n	8012e90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012e1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012e20:	2b09      	cmp	r3, #9
 8012e22:	dc14      	bgt.n	8012e4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e2c:	493d      	ldr	r1, [pc, #244]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012e2e:	4613      	mov	r3, r2
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4413      	add	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	440b      	add	r3, r1
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d018      	beq.n	8012e70 <etharp_find_entry+0x220>
 8012e3e:	4b3a      	ldr	r3, [pc, #232]	; (8012f28 <etharp_find_entry+0x2d8>)
 8012e40:	f240 126d 	movw	r2, #365	; 0x16d
 8012e44:	493b      	ldr	r1, [pc, #236]	; (8012f34 <etharp_find_entry+0x2e4>)
 8012e46:	483a      	ldr	r0, [pc, #232]	; (8012f30 <etharp_find_entry+0x2e0>)
 8012e48:	f00b ffa0 	bl	801ed8c <iprintf>
 8012e4c:	e010      	b.n	8012e70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012e4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012e52:	2b09      	cmp	r3, #9
 8012e54:	dc02      	bgt.n	8012e5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e58:	843b      	strh	r3, [r7, #32]
 8012e5a:	e009      	b.n	8012e70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012e5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012e60:	2b09      	cmp	r3, #9
 8012e62:	dc02      	bgt.n	8012e6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012e64:	8bfb      	ldrh	r3, [r7, #30]
 8012e66:	843b      	strh	r3, [r7, #32]
 8012e68:	e002      	b.n	8012e70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e6e:	e054      	b.n	8012f1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012e70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e74:	2b09      	cmp	r3, #9
 8012e76:	dd06      	ble.n	8012e86 <etharp_find_entry+0x236>
 8012e78:	4b2b      	ldr	r3, [pc, #172]	; (8012f28 <etharp_find_entry+0x2d8>)
 8012e7a:	f240 127f 	movw	r2, #383	; 0x17f
 8012e7e:	492e      	ldr	r1, [pc, #184]	; (8012f38 <etharp_find_entry+0x2e8>)
 8012e80:	482b      	ldr	r0, [pc, #172]	; (8012f30 <etharp_find_entry+0x2e0>)
 8012e82:	f00b ff83 	bl	801ed8c <iprintf>
    etharp_free_entry(i);
 8012e86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ff fe06 	bl	8012a9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012e90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e94:	2b09      	cmp	r3, #9
 8012e96:	dd06      	ble.n	8012ea6 <etharp_find_entry+0x256>
 8012e98:	4b23      	ldr	r3, [pc, #140]	; (8012f28 <etharp_find_entry+0x2d8>)
 8012e9a:	f240 1283 	movw	r2, #387	; 0x183
 8012e9e:	4926      	ldr	r1, [pc, #152]	; (8012f38 <etharp_find_entry+0x2e8>)
 8012ea0:	4823      	ldr	r0, [pc, #140]	; (8012f30 <etharp_find_entry+0x2e0>)
 8012ea2:	f00b ff73 	bl	801ed8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012ea6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eaa:	491e      	ldr	r1, [pc, #120]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012eac:	4613      	mov	r3, r2
 8012eae:	005b      	lsls	r3, r3, #1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	00db      	lsls	r3, r3, #3
 8012eb4:	440b      	add	r3, r1
 8012eb6:	3314      	adds	r3, #20
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d006      	beq.n	8012ecc <etharp_find_entry+0x27c>
 8012ebe:	4b1a      	ldr	r3, [pc, #104]	; (8012f28 <etharp_find_entry+0x2d8>)
 8012ec0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012ec4:	491d      	ldr	r1, [pc, #116]	; (8012f3c <etharp_find_entry+0x2ec>)
 8012ec6:	481a      	ldr	r0, [pc, #104]	; (8012f30 <etharp_find_entry+0x2e0>)
 8012ec8:	f00b ff60 	bl	801ed8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d00b      	beq.n	8012eea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012ed2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	6819      	ldr	r1, [r3, #0]
 8012eda:	4812      	ldr	r0, [pc, #72]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012edc:	4613      	mov	r3, r2
 8012ede:	005b      	lsls	r3, r3, #1
 8012ee0:	4413      	add	r3, r2
 8012ee2:	00db      	lsls	r3, r3, #3
 8012ee4:	4403      	add	r3, r0
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012eea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eee:	490d      	ldr	r1, [pc, #52]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	4413      	add	r3, r2
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	440b      	add	r3, r1
 8012efa:	3312      	adds	r3, #18
 8012efc:	2200      	movs	r2, #0
 8012efe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012f00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f04:	4907      	ldr	r1, [pc, #28]	; (8012f24 <etharp_find_entry+0x2d4>)
 8012f06:	4613      	mov	r3, r2
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	4413      	add	r3, r2
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	440b      	add	r3, r1
 8012f10:	3308      	adds	r3, #8
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012f16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3728      	adds	r7, #40	; 0x28
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	20008f38 	.word	0x20008f38
 8012f28:	08021730 	.word	0x08021730
 8012f2c:	080217d0 	.word	0x080217d0
 8012f30:	08021810 	.word	0x08021810
 8012f34:	08021838 	.word	0x08021838
 8012f38:	08021850 	.word	0x08021850
 8012f3c:	08021864 	.word	0x08021864

08012f40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b088      	sub	sp, #32
 8012f44:	af02      	add	r7, sp, #8
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f54:	2b06      	cmp	r3, #6
 8012f56:	d006      	beq.n	8012f66 <etharp_update_arp_entry+0x26>
 8012f58:	4b48      	ldr	r3, [pc, #288]	; (801307c <etharp_update_arp_entry+0x13c>)
 8012f5a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012f5e:	4948      	ldr	r1, [pc, #288]	; (8013080 <etharp_update_arp_entry+0x140>)
 8012f60:	4848      	ldr	r0, [pc, #288]	; (8013084 <etharp_update_arp_entry+0x144>)
 8012f62:	f00b ff13 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d012      	beq.n	8012f92 <etharp_update_arp_entry+0x52>
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00e      	beq.n	8012f92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	68f9      	ldr	r1, [r7, #12]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f001 f93c 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8012f80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d105      	bne.n	8012f92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f8e:	2be0      	cmp	r3, #224	; 0xe0
 8012f90:	d102      	bne.n	8012f98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012f92:	f06f 030f 	mvn.w	r3, #15
 8012f96:	e06c      	b.n	8013072 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012f98:	78fb      	ldrb	r3, [r7, #3]
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	68b8      	ldr	r0, [r7, #8]
 8012fa0:	f7ff fe56 	bl	8012c50 <etharp_find_entry>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012fa8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	da02      	bge.n	8012fb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012fb0:	8afb      	ldrh	r3, [r7, #22]
 8012fb2:	b25b      	sxtb	r3, r3
 8012fb4:	e05d      	b.n	8013072 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012fb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fba:	4933      	ldr	r1, [pc, #204]	; (8013088 <etharp_update_arp_entry+0x148>)
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	005b      	lsls	r3, r3, #1
 8012fc0:	4413      	add	r3, r2
 8012fc2:	00db      	lsls	r3, r3, #3
 8012fc4:	440b      	add	r3, r1
 8012fc6:	3314      	adds	r3, #20
 8012fc8:	2202      	movs	r2, #2
 8012fca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012fcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fd0:	492d      	ldr	r1, [pc, #180]	; (8013088 <etharp_update_arp_entry+0x148>)
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	005b      	lsls	r3, r3, #1
 8012fd6:	4413      	add	r3, r2
 8012fd8:	00db      	lsls	r3, r3, #3
 8012fda:	440b      	add	r3, r1
 8012fdc:	3308      	adds	r3, #8
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012fe2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	005b      	lsls	r3, r3, #1
 8012fea:	4413      	add	r3, r2
 8012fec:	00db      	lsls	r3, r3, #3
 8012fee:	3308      	adds	r3, #8
 8012ff0:	4a25      	ldr	r2, [pc, #148]	; (8013088 <etharp_update_arp_entry+0x148>)
 8012ff2:	4413      	add	r3, r2
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	2206      	movs	r2, #6
 8012ff8:	6879      	ldr	r1, [r7, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f00b fe96 	bl	801ed2c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013000:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013004:	4920      	ldr	r1, [pc, #128]	; (8013088 <etharp_update_arp_entry+0x148>)
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	440b      	add	r3, r1
 8013010:	3312      	adds	r3, #18
 8013012:	2200      	movs	r2, #0
 8013014:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013016:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801301a:	491b      	ldr	r1, [pc, #108]	; (8013088 <etharp_update_arp_entry+0x148>)
 801301c:	4613      	mov	r3, r2
 801301e:	005b      	lsls	r3, r3, #1
 8013020:	4413      	add	r3, r2
 8013022:	00db      	lsls	r3, r3, #3
 8013024:	440b      	add	r3, r1
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d021      	beq.n	8013070 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801302c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013030:	4915      	ldr	r1, [pc, #84]	; (8013088 <etharp_update_arp_entry+0x148>)
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	440b      	add	r3, r1
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013040:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013044:	4910      	ldr	r1, [pc, #64]	; (8013088 <etharp_update_arp_entry+0x148>)
 8013046:	4613      	mov	r3, r2
 8013048:	005b      	lsls	r3, r3, #1
 801304a:	4413      	add	r3, r2
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	440b      	add	r3, r1
 8013050:	2200      	movs	r2, #0
 8013052:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801305a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6939      	ldr	r1, [r7, #16]
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f00a fe3d 	bl	801dce4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801306a:	6938      	ldr	r0, [r7, #16]
 801306c:	f003 fc38 	bl	80168e0 <pbuf_free>
  }
  return ERR_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	3718      	adds	r7, #24
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	08021730 	.word	0x08021730
 8013080:	08021890 	.word	0x08021890
 8013084:	08021810 	.word	0x08021810
 8013088:	20008f38 	.word	0x20008f38

0801308c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013094:	2300      	movs	r3, #0
 8013096:	60fb      	str	r3, [r7, #12]
 8013098:	e01e      	b.n	80130d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801309a:	4913      	ldr	r1, [pc, #76]	; (80130e8 <etharp_cleanup_netif+0x5c>)
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	4613      	mov	r3, r2
 80130a0:	005b      	lsls	r3, r3, #1
 80130a2:	4413      	add	r3, r2
 80130a4:	00db      	lsls	r3, r3, #3
 80130a6:	440b      	add	r3, r1
 80130a8:	3314      	adds	r3, #20
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80130ae:	7afb      	ldrb	r3, [r7, #11]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00e      	beq.n	80130d2 <etharp_cleanup_netif+0x46>
 80130b4:	490c      	ldr	r1, [pc, #48]	; (80130e8 <etharp_cleanup_netif+0x5c>)
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	4613      	mov	r3, r2
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	4413      	add	r3, r2
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	440b      	add	r3, r1
 80130c2:	3308      	adds	r3, #8
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d102      	bne.n	80130d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f7ff fce5 	bl	8012a9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3301      	adds	r3, #1
 80130d6:	60fb      	str	r3, [r7, #12]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2b09      	cmp	r3, #9
 80130dc:	dddd      	ble.n	801309a <etharp_cleanup_netif+0xe>
    }
  }
}
 80130de:	bf00      	nop
 80130e0:	bf00      	nop
 80130e2:	3710      	adds	r7, #16
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	20008f38 	.word	0x20008f38

080130ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80130ec:	b5b0      	push	{r4, r5, r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af04      	add	r7, sp, #16
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d107      	bne.n	801310c <etharp_input+0x20>
 80130fc:	4b3f      	ldr	r3, [pc, #252]	; (80131fc <etharp_input+0x110>)
 80130fe:	f240 228a 	movw	r2, #650	; 0x28a
 8013102:	493f      	ldr	r1, [pc, #252]	; (8013200 <etharp_input+0x114>)
 8013104:	483f      	ldr	r0, [pc, #252]	; (8013204 <etharp_input+0x118>)
 8013106:	f00b fe41 	bl	801ed8c <iprintf>
 801310a:	e074      	b.n	80131f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	881b      	ldrh	r3, [r3, #0]
 8013116:	b29b      	uxth	r3, r3
 8013118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801311c:	d10c      	bne.n	8013138 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013122:	2b06      	cmp	r3, #6
 8013124:	d108      	bne.n	8013138 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801312a:	2b04      	cmp	r3, #4
 801312c:	d104      	bne.n	8013138 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	885b      	ldrh	r3, [r3, #2]
 8013132:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013134:	2b08      	cmp	r3, #8
 8013136:	d003      	beq.n	8013140 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f003 fbd1 	bl	80168e0 <pbuf_free>
    return;
 801313e:	e05a      	b.n	80131f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	330e      	adds	r3, #14
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	3318      	adds	r3, #24
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	3304      	adds	r3, #4
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d102      	bne.n	8013160 <etharp_input+0x74>
    for_us = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	75fb      	strb	r3, [r7, #23]
 801315e:	e009      	b.n	8013174 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013160:	68ba      	ldr	r2, [r7, #8]
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	3304      	adds	r3, #4
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	429a      	cmp	r2, r3
 801316a:	bf0c      	ite	eq
 801316c:	2301      	moveq	r3, #1
 801316e:	2300      	movne	r3, #0
 8013170:	b2db      	uxtb	r3, r3
 8013172:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	f103 0208 	add.w	r2, r3, #8
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d001      	beq.n	8013184 <etharp_input+0x98>
 8013180:	2301      	movs	r3, #1
 8013182:	e000      	b.n	8013186 <etharp_input+0x9a>
 8013184:	2302      	movs	r3, #2
 8013186:	f107 010c 	add.w	r1, r7, #12
 801318a:	6838      	ldr	r0, [r7, #0]
 801318c:	f7ff fed8 	bl	8012f40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	88db      	ldrh	r3, [r3, #6]
 8013194:	b29b      	uxth	r3, r3
 8013196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801319a:	d003      	beq.n	80131a4 <etharp_input+0xb8>
 801319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131a0:	d01e      	beq.n	80131e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80131a2:	e025      	b.n	80131f0 <etharp_input+0x104>
      if (for_us) {
 80131a4:	7dfb      	ldrb	r3, [r7, #23]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d021      	beq.n	80131ee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80131c0:	693a      	ldr	r2, [r7, #16]
 80131c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80131c4:	2102      	movs	r1, #2
 80131c6:	9103      	str	r1, [sp, #12]
 80131c8:	f107 010c 	add.w	r1, r7, #12
 80131cc:	9102      	str	r1, [sp, #8]
 80131ce:	9201      	str	r2, [sp, #4]
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	462b      	mov	r3, r5
 80131d4:	4622      	mov	r2, r4
 80131d6:	4601      	mov	r1, r0
 80131d8:	6838      	ldr	r0, [r7, #0]
 80131da:	f000 faef 	bl	80137bc <etharp_raw>
      break;
 80131de:	e006      	b.n	80131ee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80131e0:	f107 030c 	add.w	r3, r7, #12
 80131e4:	4619      	mov	r1, r3
 80131e6:	6838      	ldr	r0, [r7, #0]
 80131e8:	f7fe f9fc 	bl	80115e4 <dhcp_arp_reply>
      break;
 80131ec:	e000      	b.n	80131f0 <etharp_input+0x104>
      break;
 80131ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f003 fb75 	bl	80168e0 <pbuf_free>
}
 80131f6:	3718      	adds	r7, #24
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bdb0      	pop	{r4, r5, r7, pc}
 80131fc:	08021730 	.word	0x08021730
 8013200:	080218e8 	.word	0x080218e8
 8013204:	08021810 	.word	0x08021810

08013208 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af02      	add	r7, sp, #8
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	4613      	mov	r3, r2
 8013214:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013216:	79fa      	ldrb	r2, [r7, #7]
 8013218:	4944      	ldr	r1, [pc, #272]	; (801332c <etharp_output_to_arp_index+0x124>)
 801321a:	4613      	mov	r3, r2
 801321c:	005b      	lsls	r3, r3, #1
 801321e:	4413      	add	r3, r2
 8013220:	00db      	lsls	r3, r3, #3
 8013222:	440b      	add	r3, r1
 8013224:	3314      	adds	r3, #20
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d806      	bhi.n	801323a <etharp_output_to_arp_index+0x32>
 801322c:	4b40      	ldr	r3, [pc, #256]	; (8013330 <etharp_output_to_arp_index+0x128>)
 801322e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013232:	4940      	ldr	r1, [pc, #256]	; (8013334 <etharp_output_to_arp_index+0x12c>)
 8013234:	4840      	ldr	r0, [pc, #256]	; (8013338 <etharp_output_to_arp_index+0x130>)
 8013236:	f00b fda9 	bl	801ed8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801323a:	79fa      	ldrb	r2, [r7, #7]
 801323c:	493b      	ldr	r1, [pc, #236]	; (801332c <etharp_output_to_arp_index+0x124>)
 801323e:	4613      	mov	r3, r2
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	4413      	add	r3, r2
 8013244:	00db      	lsls	r3, r3, #3
 8013246:	440b      	add	r3, r1
 8013248:	3314      	adds	r3, #20
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	2b02      	cmp	r3, #2
 801324e:	d153      	bne.n	80132f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013250:	79fa      	ldrb	r2, [r7, #7]
 8013252:	4936      	ldr	r1, [pc, #216]	; (801332c <etharp_output_to_arp_index+0x124>)
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	440b      	add	r3, r1
 801325e:	3312      	adds	r3, #18
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013266:	d919      	bls.n	801329c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013268:	79fa      	ldrb	r2, [r7, #7]
 801326a:	4613      	mov	r3, r2
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	4413      	add	r3, r2
 8013270:	00db      	lsls	r3, r3, #3
 8013272:	4a2e      	ldr	r2, [pc, #184]	; (801332c <etharp_output_to_arp_index+0x124>)
 8013274:	4413      	add	r3, r2
 8013276:	3304      	adds	r3, #4
 8013278:	4619      	mov	r1, r3
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f000 fb4c 	bl	8013918 <etharp_request>
 8013280:	4603      	mov	r3, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d138      	bne.n	80132f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013286:	79fa      	ldrb	r2, [r7, #7]
 8013288:	4928      	ldr	r1, [pc, #160]	; (801332c <etharp_output_to_arp_index+0x124>)
 801328a:	4613      	mov	r3, r2
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	4413      	add	r3, r2
 8013290:	00db      	lsls	r3, r3, #3
 8013292:	440b      	add	r3, r1
 8013294:	3314      	adds	r3, #20
 8013296:	2203      	movs	r2, #3
 8013298:	701a      	strb	r2, [r3, #0]
 801329a:	e02d      	b.n	80132f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801329c:	79fa      	ldrb	r2, [r7, #7]
 801329e:	4923      	ldr	r1, [pc, #140]	; (801332c <etharp_output_to_arp_index+0x124>)
 80132a0:	4613      	mov	r3, r2
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	4413      	add	r3, r2
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	440b      	add	r3, r1
 80132aa:	3312      	adds	r3, #18
 80132ac:	881b      	ldrh	r3, [r3, #0]
 80132ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80132b2:	d321      	bcc.n	80132f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80132b4:	79fa      	ldrb	r2, [r7, #7]
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	4a1b      	ldr	r2, [pc, #108]	; (801332c <etharp_output_to_arp_index+0x124>)
 80132c0:	4413      	add	r3, r2
 80132c2:	1d19      	adds	r1, r3, #4
 80132c4:	79fa      	ldrb	r2, [r7, #7]
 80132c6:	4613      	mov	r3, r2
 80132c8:	005b      	lsls	r3, r3, #1
 80132ca:	4413      	add	r3, r2
 80132cc:	00db      	lsls	r3, r3, #3
 80132ce:	3308      	adds	r3, #8
 80132d0:	4a16      	ldr	r2, [pc, #88]	; (801332c <etharp_output_to_arp_index+0x124>)
 80132d2:	4413      	add	r3, r2
 80132d4:	3304      	adds	r3, #4
 80132d6:	461a      	mov	r2, r3
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f000 fafb 	bl	80138d4 <etharp_request_dst>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d109      	bne.n	80132f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80132e4:	79fa      	ldrb	r2, [r7, #7]
 80132e6:	4911      	ldr	r1, [pc, #68]	; (801332c <etharp_output_to_arp_index+0x124>)
 80132e8:	4613      	mov	r3, r2
 80132ea:	005b      	lsls	r3, r3, #1
 80132ec:	4413      	add	r3, r2
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	440b      	add	r3, r1
 80132f2:	3314      	adds	r3, #20
 80132f4:	2203      	movs	r2, #3
 80132f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80132fe:	79fa      	ldrb	r2, [r7, #7]
 8013300:	4613      	mov	r3, r2
 8013302:	005b      	lsls	r3, r3, #1
 8013304:	4413      	add	r3, r2
 8013306:	00db      	lsls	r3, r3, #3
 8013308:	3308      	adds	r3, #8
 801330a:	4a08      	ldr	r2, [pc, #32]	; (801332c <etharp_output_to_arp_index+0x124>)
 801330c:	4413      	add	r3, r2
 801330e:	3304      	adds	r3, #4
 8013310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013314:	9200      	str	r2, [sp, #0]
 8013316:	460a      	mov	r2, r1
 8013318:	68b9      	ldr	r1, [r7, #8]
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f00a fce2 	bl	801dce4 <ethernet_output>
 8013320:	4603      	mov	r3, r0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	20008f38 	.word	0x20008f38
 8013330:	08021730 	.word	0x08021730
 8013334:	08021908 	.word	0x08021908
 8013338:	08021810 	.word	0x08021810

0801333c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08a      	sub	sp, #40	; 0x28
 8013340:	af02      	add	r7, sp, #8
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <etharp_output+0x24>
 8013352:	4b73      	ldr	r3, [pc, #460]	; (8013520 <etharp_output+0x1e4>)
 8013354:	f240 321e 	movw	r2, #798	; 0x31e
 8013358:	4972      	ldr	r1, [pc, #456]	; (8013524 <etharp_output+0x1e8>)
 801335a:	4873      	ldr	r0, [pc, #460]	; (8013528 <etharp_output+0x1ec>)
 801335c:	f00b fd16 	bl	801ed8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d106      	bne.n	8013374 <etharp_output+0x38>
 8013366:	4b6e      	ldr	r3, [pc, #440]	; (8013520 <etharp_output+0x1e4>)
 8013368:	f240 321f 	movw	r2, #799	; 0x31f
 801336c:	496f      	ldr	r1, [pc, #444]	; (801352c <etharp_output+0x1f0>)
 801336e:	486e      	ldr	r0, [pc, #440]	; (8013528 <etharp_output+0x1ec>)
 8013370:	f00b fd0c 	bl	801ed8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <etharp_output+0x4c>
 801337a:	4b69      	ldr	r3, [pc, #420]	; (8013520 <etharp_output+0x1e4>)
 801337c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013380:	496b      	ldr	r1, [pc, #428]	; (8013530 <etharp_output+0x1f4>)
 8013382:	4869      	ldr	r0, [pc, #420]	; (8013528 <etharp_output+0x1ec>)
 8013384:	f00b fd02 	bl	801ed8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	68f9      	ldr	r1, [r7, #12]
 801338e:	4618      	mov	r0, r3
 8013390:	f000 ff32 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d002      	beq.n	80133a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801339a:	4b66      	ldr	r3, [pc, #408]	; (8013534 <etharp_output+0x1f8>)
 801339c:	61fb      	str	r3, [r7, #28]
 801339e:	e0af      	b.n	8013500 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133a8:	2be0      	cmp	r3, #224	; 0xe0
 80133aa:	d118      	bne.n	80133de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80133ac:	2301      	movs	r3, #1
 80133ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80133b0:	2300      	movs	r3, #0
 80133b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80133b4:	235e      	movs	r3, #94	; 0x5e
 80133b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3301      	adds	r3, #1
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	3302      	adds	r3, #2
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	3303      	adds	r3, #3
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80133d6:	f107 0310 	add.w	r3, r7, #16
 80133da:	61fb      	str	r3, [r7, #28]
 80133dc:	e090      	b.n	8013500 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3304      	adds	r3, #4
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	405a      	eors	r2, r3
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	3308      	adds	r3, #8
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4013      	ands	r3, r2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d012      	beq.n	801341c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80133fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013400:	4293      	cmp	r3, r2
 8013402:	d00b      	beq.n	801341c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	330c      	adds	r3, #12
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d003      	beq.n	8013416 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	330c      	adds	r3, #12
 8013412:	61bb      	str	r3, [r7, #24]
 8013414:	e002      	b.n	801341c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013416:	f06f 0303 	mvn.w	r3, #3
 801341a:	e07d      	b.n	8013518 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801341c:	4b46      	ldr	r3, [pc, #280]	; (8013538 <etharp_output+0x1fc>)
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	4619      	mov	r1, r3
 8013422:	4a46      	ldr	r2, [pc, #280]	; (801353c <etharp_output+0x200>)
 8013424:	460b      	mov	r3, r1
 8013426:	005b      	lsls	r3, r3, #1
 8013428:	440b      	add	r3, r1
 801342a:	00db      	lsls	r3, r3, #3
 801342c:	4413      	add	r3, r2
 801342e:	3314      	adds	r3, #20
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	2b01      	cmp	r3, #1
 8013434:	d925      	bls.n	8013482 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013436:	4b40      	ldr	r3, [pc, #256]	; (8013538 <etharp_output+0x1fc>)
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	4619      	mov	r1, r3
 801343c:	4a3f      	ldr	r2, [pc, #252]	; (801353c <etharp_output+0x200>)
 801343e:	460b      	mov	r3, r1
 8013440:	005b      	lsls	r3, r3, #1
 8013442:	440b      	add	r3, r1
 8013444:	00db      	lsls	r3, r3, #3
 8013446:	4413      	add	r3, r2
 8013448:	3308      	adds	r3, #8
 801344a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	429a      	cmp	r2, r3
 8013450:	d117      	bne.n	8013482 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	681a      	ldr	r2, [r3, #0]
 8013456:	4b38      	ldr	r3, [pc, #224]	; (8013538 <etharp_output+0x1fc>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	4618      	mov	r0, r3
 801345c:	4937      	ldr	r1, [pc, #220]	; (801353c <etharp_output+0x200>)
 801345e:	4603      	mov	r3, r0
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	4403      	add	r3, r0
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	440b      	add	r3, r1
 8013468:	3304      	adds	r3, #4
 801346a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801346c:	429a      	cmp	r2, r3
 801346e:	d108      	bne.n	8013482 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013470:	4b31      	ldr	r3, [pc, #196]	; (8013538 <etharp_output+0x1fc>)
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	461a      	mov	r2, r3
 8013476:	68b9      	ldr	r1, [r7, #8]
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f7ff fec5 	bl	8013208 <etharp_output_to_arp_index>
 801347e:	4603      	mov	r3, r0
 8013480:	e04a      	b.n	8013518 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013482:	2300      	movs	r3, #0
 8013484:	75fb      	strb	r3, [r7, #23]
 8013486:	e031      	b.n	80134ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013488:	7dfa      	ldrb	r2, [r7, #23]
 801348a:	492c      	ldr	r1, [pc, #176]	; (801353c <etharp_output+0x200>)
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	3314      	adds	r3, #20
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	2b01      	cmp	r3, #1
 801349c:	d923      	bls.n	80134e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801349e:	7dfa      	ldrb	r2, [r7, #23]
 80134a0:	4926      	ldr	r1, [pc, #152]	; (801353c <etharp_output+0x200>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	3308      	adds	r3, #8
 80134ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d117      	bne.n	80134e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	6819      	ldr	r1, [r3, #0]
 80134ba:	7dfa      	ldrb	r2, [r7, #23]
 80134bc:	481f      	ldr	r0, [pc, #124]	; (801353c <etharp_output+0x200>)
 80134be:	4613      	mov	r3, r2
 80134c0:	005b      	lsls	r3, r3, #1
 80134c2:	4413      	add	r3, r2
 80134c4:	00db      	lsls	r3, r3, #3
 80134c6:	4403      	add	r3, r0
 80134c8:	3304      	adds	r3, #4
 80134ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80134cc:	4299      	cmp	r1, r3
 80134ce:	d10a      	bne.n	80134e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80134d0:	4a19      	ldr	r2, [pc, #100]	; (8013538 <etharp_output+0x1fc>)
 80134d2:	7dfb      	ldrb	r3, [r7, #23]
 80134d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	461a      	mov	r2, r3
 80134da:	68b9      	ldr	r1, [r7, #8]
 80134dc:	68f8      	ldr	r0, [r7, #12]
 80134de:	f7ff fe93 	bl	8013208 <etharp_output_to_arp_index>
 80134e2:	4603      	mov	r3, r0
 80134e4:	e018      	b.n	8013518 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80134e6:	7dfb      	ldrb	r3, [r7, #23]
 80134e8:	3301      	adds	r3, #1
 80134ea:	75fb      	strb	r3, [r7, #23]
 80134ec:	7dfb      	ldrb	r3, [r7, #23]
 80134ee:	2b09      	cmp	r3, #9
 80134f0:	d9ca      	bls.n	8013488 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	69b9      	ldr	r1, [r7, #24]
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f000 f822 	bl	8013540 <etharp_query>
 80134fc:	4603      	mov	r3, r0
 80134fe:	e00b      	b.n	8013518 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	69fb      	ldr	r3, [r7, #28]
 801350e:	68b9      	ldr	r1, [r7, #8]
 8013510:	68f8      	ldr	r0, [r7, #12]
 8013512:	f00a fbe7 	bl	801dce4 <ethernet_output>
 8013516:	4603      	mov	r3, r0
}
 8013518:	4618      	mov	r0, r3
 801351a:	3720      	adds	r7, #32
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	08021730 	.word	0x08021730
 8013524:	080218e8 	.word	0x080218e8
 8013528:	08021810 	.word	0x08021810
 801352c:	08021938 	.word	0x08021938
 8013530:	080218d8 	.word	0x080218d8
 8013534:	08024ecc 	.word	0x08024ecc
 8013538:	20009028 	.word	0x20009028
 801353c:	20008f38 	.word	0x20008f38

08013540 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b08c      	sub	sp, #48	; 0x30
 8013544:	af02      	add	r7, sp, #8
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	332a      	adds	r3, #42	; 0x2a
 8013550:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013552:	23ff      	movs	r3, #255	; 0xff
 8013554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013558:	2300      	movs	r3, #0
 801355a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	68f9      	ldr	r1, [r7, #12]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fe48 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d10c      	bne.n	8013588 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013576:	2be0      	cmp	r3, #224	; 0xe0
 8013578:	d006      	beq.n	8013588 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d003      	beq.n	8013588 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013588:	f06f 030f 	mvn.w	r3, #15
 801358c:	e101      	b.n	8013792 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	2101      	movs	r1, #1
 8013592:	68b8      	ldr	r0, [r7, #8]
 8013594:	f7ff fb5c 	bl	8012c50 <etharp_find_entry>
 8013598:	4603      	mov	r3, r0
 801359a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801359c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	da02      	bge.n	80135aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80135a4:	8a7b      	ldrh	r3, [r7, #18]
 80135a6:	b25b      	sxtb	r3, r3
 80135a8:	e0f3      	b.n	8013792 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80135aa:	8a7b      	ldrh	r3, [r7, #18]
 80135ac:	2b7e      	cmp	r3, #126	; 0x7e
 80135ae:	d906      	bls.n	80135be <etharp_query+0x7e>
 80135b0:	4b7a      	ldr	r3, [pc, #488]	; (801379c <etharp_query+0x25c>)
 80135b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80135b6:	497a      	ldr	r1, [pc, #488]	; (80137a0 <etharp_query+0x260>)
 80135b8:	487a      	ldr	r0, [pc, #488]	; (80137a4 <etharp_query+0x264>)
 80135ba:	f00b fbe7 	bl	801ed8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80135be:	8a7b      	ldrh	r3, [r7, #18]
 80135c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80135c2:	7c7a      	ldrb	r2, [r7, #17]
 80135c4:	4978      	ldr	r1, [pc, #480]	; (80137a8 <etharp_query+0x268>)
 80135c6:	4613      	mov	r3, r2
 80135c8:	005b      	lsls	r3, r3, #1
 80135ca:	4413      	add	r3, r2
 80135cc:	00db      	lsls	r3, r3, #3
 80135ce:	440b      	add	r3, r1
 80135d0:	3314      	adds	r3, #20
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d115      	bne.n	8013604 <etharp_query+0xc4>
    is_new_entry = 1;
 80135d8:	2301      	movs	r3, #1
 80135da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80135dc:	7c7a      	ldrb	r2, [r7, #17]
 80135de:	4972      	ldr	r1, [pc, #456]	; (80137a8 <etharp_query+0x268>)
 80135e0:	4613      	mov	r3, r2
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4413      	add	r3, r2
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	440b      	add	r3, r1
 80135ea:	3314      	adds	r3, #20
 80135ec:	2201      	movs	r2, #1
 80135ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80135f0:	7c7a      	ldrb	r2, [r7, #17]
 80135f2:	496d      	ldr	r1, [pc, #436]	; (80137a8 <etharp_query+0x268>)
 80135f4:	4613      	mov	r3, r2
 80135f6:	005b      	lsls	r3, r3, #1
 80135f8:	4413      	add	r3, r2
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	440b      	add	r3, r1
 80135fe:	3308      	adds	r3, #8
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013604:	7c7a      	ldrb	r2, [r7, #17]
 8013606:	4968      	ldr	r1, [pc, #416]	; (80137a8 <etharp_query+0x268>)
 8013608:	4613      	mov	r3, r2
 801360a:	005b      	lsls	r3, r3, #1
 801360c:	4413      	add	r3, r2
 801360e:	00db      	lsls	r3, r3, #3
 8013610:	440b      	add	r3, r1
 8013612:	3314      	adds	r3, #20
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	2b01      	cmp	r3, #1
 8013618:	d011      	beq.n	801363e <etharp_query+0xfe>
 801361a:	7c7a      	ldrb	r2, [r7, #17]
 801361c:	4962      	ldr	r1, [pc, #392]	; (80137a8 <etharp_query+0x268>)
 801361e:	4613      	mov	r3, r2
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	4413      	add	r3, r2
 8013624:	00db      	lsls	r3, r3, #3
 8013626:	440b      	add	r3, r1
 8013628:	3314      	adds	r3, #20
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d806      	bhi.n	801363e <etharp_query+0xfe>
 8013630:	4b5a      	ldr	r3, [pc, #360]	; (801379c <etharp_query+0x25c>)
 8013632:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013636:	495d      	ldr	r1, [pc, #372]	; (80137ac <etharp_query+0x26c>)
 8013638:	485a      	ldr	r0, [pc, #360]	; (80137a4 <etharp_query+0x264>)
 801363a:	f00b fba7 	bl	801ed8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801363e:	6a3b      	ldr	r3, [r7, #32]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d102      	bne.n	801364a <etharp_query+0x10a>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d10c      	bne.n	8013664 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801364a:	68b9      	ldr	r1, [r7, #8]
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f000 f963 	bl	8013918 <etharp_request>
 8013652:	4603      	mov	r3, r0
 8013654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d102      	bne.n	8013664 <etharp_query+0x124>
      return result;
 801365e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013662:	e096      	b.n	8013792 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <etharp_query+0x138>
 801366a:	4b4c      	ldr	r3, [pc, #304]	; (801379c <etharp_query+0x25c>)
 801366c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013670:	494f      	ldr	r1, [pc, #316]	; (80137b0 <etharp_query+0x270>)
 8013672:	484c      	ldr	r0, [pc, #304]	; (80137a4 <etharp_query+0x264>)
 8013674:	f00b fb8a 	bl	801ed8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013678:	7c7a      	ldrb	r2, [r7, #17]
 801367a:	494b      	ldr	r1, [pc, #300]	; (80137a8 <etharp_query+0x268>)
 801367c:	4613      	mov	r3, r2
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	4413      	add	r3, r2
 8013682:	00db      	lsls	r3, r3, #3
 8013684:	440b      	add	r3, r1
 8013686:	3314      	adds	r3, #20
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b01      	cmp	r3, #1
 801368c:	d917      	bls.n	80136be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801368e:	4a49      	ldr	r2, [pc, #292]	; (80137b4 <etharp_query+0x274>)
 8013690:	7c7b      	ldrb	r3, [r7, #17]
 8013692:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013694:	7c7a      	ldrb	r2, [r7, #17]
 8013696:	4613      	mov	r3, r2
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	4413      	add	r3, r2
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	3308      	adds	r3, #8
 80136a0:	4a41      	ldr	r2, [pc, #260]	; (80137a8 <etharp_query+0x268>)
 80136a2:	4413      	add	r3, r2
 80136a4:	3304      	adds	r3, #4
 80136a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80136aa:	9200      	str	r2, [sp, #0]
 80136ac:	697a      	ldr	r2, [r7, #20]
 80136ae:	6879      	ldr	r1, [r7, #4]
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f00a fb17 	bl	801dce4 <ethernet_output>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136bc:	e067      	b.n	801378e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80136be:	7c7a      	ldrb	r2, [r7, #17]
 80136c0:	4939      	ldr	r1, [pc, #228]	; (80137a8 <etharp_query+0x268>)
 80136c2:	4613      	mov	r3, r2
 80136c4:	005b      	lsls	r3, r3, #1
 80136c6:	4413      	add	r3, r2
 80136c8:	00db      	lsls	r3, r3, #3
 80136ca:	440b      	add	r3, r1
 80136cc:	3314      	adds	r3, #20
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d15c      	bne.n	801378e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80136d4:	2300      	movs	r3, #0
 80136d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80136dc:	e01c      	b.n	8013718 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	895a      	ldrh	r2, [r3, #10]
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	891b      	ldrh	r3, [r3, #8]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d10a      	bne.n	8013700 <etharp_query+0x1c0>
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d006      	beq.n	8013700 <etharp_query+0x1c0>
 80136f2:	4b2a      	ldr	r3, [pc, #168]	; (801379c <etharp_query+0x25c>)
 80136f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80136f8:	492f      	ldr	r1, [pc, #188]	; (80137b8 <etharp_query+0x278>)
 80136fa:	482a      	ldr	r0, [pc, #168]	; (80137a4 <etharp_query+0x264>)
 80136fc:	f00b fb46 	bl	801ed8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	7b1b      	ldrb	r3, [r3, #12]
 8013704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <etharp_query+0x1d2>
        copy_needed = 1;
 801370c:	2301      	movs	r3, #1
 801370e:	61bb      	str	r3, [r7, #24]
        break;
 8013710:	e005      	b.n	801371e <etharp_query+0x1de>
      }
      p = p->next;
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d1df      	bne.n	80136de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d007      	beq.n	8013734 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	f44f 7120 	mov.w	r1, #640	; 0x280
 801372a:	200e      	movs	r0, #14
 801372c:	f003 fb50 	bl	8016dd0 <pbuf_clone>
 8013730:	61f8      	str	r0, [r7, #28]
 8013732:	e004      	b.n	801373e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013738:	69f8      	ldr	r0, [r7, #28]
 801373a:	f003 f977 	bl	8016a2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801373e:	69fb      	ldr	r3, [r7, #28]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d021      	beq.n	8013788 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013744:	7c7a      	ldrb	r2, [r7, #17]
 8013746:	4918      	ldr	r1, [pc, #96]	; (80137a8 <etharp_query+0x268>)
 8013748:	4613      	mov	r3, r2
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	4413      	add	r3, r2
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	440b      	add	r3, r1
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00a      	beq.n	801376e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013758:	7c7a      	ldrb	r2, [r7, #17]
 801375a:	4913      	ldr	r1, [pc, #76]	; (80137a8 <etharp_query+0x268>)
 801375c:	4613      	mov	r3, r2
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	4413      	add	r3, r2
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	440b      	add	r3, r1
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4618      	mov	r0, r3
 801376a:	f003 f8b9 	bl	80168e0 <pbuf_free>
      }
      arp_table[i].q = p;
 801376e:	7c7a      	ldrb	r2, [r7, #17]
 8013770:	490d      	ldr	r1, [pc, #52]	; (80137a8 <etharp_query+0x268>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	69fa      	ldr	r2, [r7, #28]
 801377e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013780:	2300      	movs	r3, #0
 8013782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013786:	e002      	b.n	801378e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013788:	23ff      	movs	r3, #255	; 0xff
 801378a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801378e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013792:	4618      	mov	r0, r3
 8013794:	3728      	adds	r7, #40	; 0x28
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	08021730 	.word	0x08021730
 80137a0:	08021944 	.word	0x08021944
 80137a4:	08021810 	.word	0x08021810
 80137a8:	20008f38 	.word	0x20008f38
 80137ac:	08021954 	.word	0x08021954
 80137b0:	08021938 	.word	0x08021938
 80137b4:	20009028 	.word	0x20009028
 80137b8:	0802197c 	.word	0x0802197c

080137bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b08a      	sub	sp, #40	; 0x28
 80137c0:	af02      	add	r7, sp, #8
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	607a      	str	r2, [r7, #4]
 80137c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80137ca:	2300      	movs	r3, #0
 80137cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d106      	bne.n	80137e2 <etharp_raw+0x26>
 80137d4:	4b3a      	ldr	r3, [pc, #232]	; (80138c0 <etharp_raw+0x104>)
 80137d6:	f240 4257 	movw	r2, #1111	; 0x457
 80137da:	493a      	ldr	r1, [pc, #232]	; (80138c4 <etharp_raw+0x108>)
 80137dc:	483a      	ldr	r0, [pc, #232]	; (80138c8 <etharp_raw+0x10c>)
 80137de:	f00b fad5 	bl	801ed8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80137e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137e6:	211c      	movs	r1, #28
 80137e8:	200e      	movs	r0, #14
 80137ea:	f002 fd95 	bl	8016318 <pbuf_alloc>
 80137ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d102      	bne.n	80137fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80137f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137fa:	e05d      	b.n	80138b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	895b      	ldrh	r3, [r3, #10]
 8013800:	2b1b      	cmp	r3, #27
 8013802:	d806      	bhi.n	8013812 <etharp_raw+0x56>
 8013804:	4b2e      	ldr	r3, [pc, #184]	; (80138c0 <etharp_raw+0x104>)
 8013806:	f240 4262 	movw	r2, #1122	; 0x462
 801380a:	4930      	ldr	r1, [pc, #192]	; (80138cc <etharp_raw+0x110>)
 801380c:	482e      	ldr	r0, [pc, #184]	; (80138c8 <etharp_raw+0x10c>)
 801380e:	f00b fabd 	bl	801ed8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013818:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801381a:	4618      	mov	r0, r3
 801381c:	f001 fbf8 	bl	8015010 <lwip_htons>
 8013820:	4603      	mov	r3, r0
 8013822:	461a      	mov	r2, r3
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801382e:	2b06      	cmp	r3, #6
 8013830:	d006      	beq.n	8013840 <etharp_raw+0x84>
 8013832:	4b23      	ldr	r3, [pc, #140]	; (80138c0 <etharp_raw+0x104>)
 8013834:	f240 4269 	movw	r2, #1129	; 0x469
 8013838:	4925      	ldr	r1, [pc, #148]	; (80138d0 <etharp_raw+0x114>)
 801383a:	4823      	ldr	r0, [pc, #140]	; (80138c8 <etharp_raw+0x10c>)
 801383c:	f00b faa6 	bl	801ed8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	3308      	adds	r3, #8
 8013844:	2206      	movs	r2, #6
 8013846:	6839      	ldr	r1, [r7, #0]
 8013848:	4618      	mov	r0, r3
 801384a:	f00b fa6f 	bl	801ed2c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	3312      	adds	r3, #18
 8013852:	2206      	movs	r2, #6
 8013854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013856:	4618      	mov	r0, r3
 8013858:	f00b fa68 	bl	801ed2c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	330e      	adds	r3, #14
 8013860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013862:	6812      	ldr	r2, [r2, #0]
 8013864:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	3318      	adds	r3, #24
 801386a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801386c:	6812      	ldr	r2, [r2, #0]
 801386e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	2200      	movs	r2, #0
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	2200      	movs	r2, #0
 8013878:	f042 0201 	orr.w	r2, r2, #1
 801387c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	2200      	movs	r2, #0
 8013882:	f042 0208 	orr.w	r2, r2, #8
 8013886:	709a      	strb	r2, [r3, #2]
 8013888:	2200      	movs	r2, #0
 801388a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	2206      	movs	r2, #6
 8013890:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2204      	movs	r2, #4
 8013896:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013898:	f640 0306 	movw	r3, #2054	; 0x806
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	69b9      	ldr	r1, [r7, #24]
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f00a fa1d 	bl	801dce4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80138aa:	69b8      	ldr	r0, [r7, #24]
 80138ac:	f003 f818 	bl	80168e0 <pbuf_free>
  p = NULL;
 80138b0:	2300      	movs	r3, #0
 80138b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80138b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3720      	adds	r7, #32
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	08021730 	.word	0x08021730
 80138c4:	080218e8 	.word	0x080218e8
 80138c8:	08021810 	.word	0x08021810
 80138cc:	08021998 	.word	0x08021998
 80138d0:	080219cc 	.word	0x080219cc

080138d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b088      	sub	sp, #32
 80138d8:	af04      	add	r7, sp, #16
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80138f0:	2201      	movs	r2, #1
 80138f2:	9203      	str	r2, [sp, #12]
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	9202      	str	r2, [sp, #8]
 80138f8:	4a06      	ldr	r2, [pc, #24]	; (8013914 <etharp_request_dst+0x40>)
 80138fa:	9201      	str	r2, [sp, #4]
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	4603      	mov	r3, r0
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	68f8      	ldr	r0, [r7, #12]
 8013904:	f7ff ff5a 	bl	80137bc <etharp_raw>
 8013908:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	08024ed4 	.word	0x08024ed4

08013918 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013922:	4a05      	ldr	r2, [pc, #20]	; (8013938 <etharp_request+0x20>)
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff ffd4 	bl	80138d4 <etharp_request_dst>
 801392c:	4603      	mov	r3, r0
}
 801392e:	4618      	mov	r0, r3
 8013930:	3708      	adds	r7, #8
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	08024ecc 	.word	0x08024ecc

0801393c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08e      	sub	sp, #56	; 0x38
 8013940:	af04      	add	r7, sp, #16
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013946:	4b82      	ldr	r3, [pc, #520]	; (8013b50 <icmp_input+0x214>)
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	f003 030f 	and.w	r3, r3, #15
 8013954:	b2db      	uxtb	r3, r3
 8013956:	009b      	lsls	r3, r3, #2
 8013958:	b2db      	uxtb	r3, r3
 801395a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801395c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801395e:	2b13      	cmp	r3, #19
 8013960:	f240 80de 	bls.w	8013b20 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	895b      	ldrh	r3, [r3, #10]
 8013968:	2b03      	cmp	r3, #3
 801396a:	f240 80db 	bls.w	8013b24 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013978:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801397c:	2b00      	cmp	r3, #0
 801397e:	f000 80c8 	beq.w	8013b12 <icmp_input+0x1d6>
 8013982:	2b08      	cmp	r3, #8
 8013984:	f040 80c8 	bne.w	8013b18 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013988:	4b72      	ldr	r3, [pc, #456]	; (8013b54 <icmp_input+0x218>)
 801398a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801398c:	4b70      	ldr	r3, [pc, #448]	; (8013b50 <icmp_input+0x214>)
 801398e:	695b      	ldr	r3, [r3, #20]
 8013990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013994:	2be0      	cmp	r3, #224	; 0xe0
 8013996:	f000 80cc 	beq.w	8013b32 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801399a:	4b6d      	ldr	r3, [pc, #436]	; (8013b50 <icmp_input+0x214>)
 801399c:	695b      	ldr	r3, [r3, #20]
 801399e:	4a6c      	ldr	r2, [pc, #432]	; (8013b50 <icmp_input+0x214>)
 80139a0:	6812      	ldr	r2, [r2, #0]
 80139a2:	4611      	mov	r1, r2
 80139a4:	4618      	mov	r0, r3
 80139a6:	f000 fc27 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	f040 80c2 	bne.w	8013b36 <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	891b      	ldrh	r3, [r3, #8]
 80139b6:	2b07      	cmp	r3, #7
 80139b8:	f240 80b6 	bls.w	8013b28 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80139bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139be:	330e      	adds	r3, #14
 80139c0:	4619      	mov	r1, r3
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f002 fef6 	bl	80167b4 <pbuf_add_header>
 80139c8:	4603      	mov	r3, r0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d04b      	beq.n	8013a66 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	891a      	ldrh	r2, [r3, #8]
 80139d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139d4:	4413      	add	r3, r2
 80139d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	891b      	ldrh	r3, [r3, #8]
 80139dc:	8b7a      	ldrh	r2, [r7, #26]
 80139de:	429a      	cmp	r2, r3
 80139e0:	f0c0 80ab 	bcc.w	8013b3a <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80139e4:	8b7b      	ldrh	r3, [r7, #26]
 80139e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139ea:	4619      	mov	r1, r3
 80139ec:	200e      	movs	r0, #14
 80139ee:	f002 fc93 	bl	8016318 <pbuf_alloc>
 80139f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 80a1 	beq.w	8013b3e <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	895b      	ldrh	r3, [r3, #10]
 8013a00:	461a      	mov	r2, r3
 8013a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a04:	3308      	adds	r3, #8
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d203      	bcs.n	8013a12 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013a0a:	6978      	ldr	r0, [r7, #20]
 8013a0c:	f002 ff68 	bl	80168e0 <pbuf_free>
          goto icmperr;
 8013a10:	e096      	b.n	8013b40 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f00b f986 	bl	801ed2c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013a20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a22:	4619      	mov	r1, r3
 8013a24:	6978      	ldr	r0, [r7, #20]
 8013a26:	f002 fed5 	bl	80167d4 <pbuf_remove_header>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d009      	beq.n	8013a44 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013a30:	4b49      	ldr	r3, [pc, #292]	; (8013b58 <icmp_input+0x21c>)
 8013a32:	22b6      	movs	r2, #182	; 0xb6
 8013a34:	4949      	ldr	r1, [pc, #292]	; (8013b5c <icmp_input+0x220>)
 8013a36:	484a      	ldr	r0, [pc, #296]	; (8013b60 <icmp_input+0x224>)
 8013a38:	f00b f9a8 	bl	801ed8c <iprintf>
          pbuf_free(r);
 8013a3c:	6978      	ldr	r0, [r7, #20]
 8013a3e:	f002 ff4f 	bl	80168e0 <pbuf_free>
          goto icmperr;
 8013a42:	e07d      	b.n	8013b40 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013a44:	6879      	ldr	r1, [r7, #4]
 8013a46:	6978      	ldr	r0, [r7, #20]
 8013a48:	f003 f87e 	bl	8016b48 <pbuf_copy>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d003      	beq.n	8013a5a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013a52:	6978      	ldr	r0, [r7, #20]
 8013a54:	f002 ff44 	bl	80168e0 <pbuf_free>
          goto icmperr;
 8013a58:	e072      	b.n	8013b40 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f002 ff40 	bl	80168e0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	607b      	str	r3, [r7, #4]
 8013a64:	e00f      	b.n	8013a86 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a68:	330e      	adds	r3, #14
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f002 feb1 	bl	80167d4 <pbuf_remove_header>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d006      	beq.n	8013a86 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013a78:	4b37      	ldr	r3, [pc, #220]	; (8013b58 <icmp_input+0x21c>)
 8013a7a:	22c7      	movs	r2, #199	; 0xc7
 8013a7c:	4939      	ldr	r1, [pc, #228]	; (8013b64 <icmp_input+0x228>)
 8013a7e:	4838      	ldr	r0, [pc, #224]	; (8013b60 <icmp_input+0x224>)
 8013a80:	f00b f984 	bl	801ed8c <iprintf>
          goto icmperr;
 8013a84:	e05c      	b.n	8013b40 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a8e:	4619      	mov	r1, r3
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f002 fe8f 	bl	80167b4 <pbuf_add_header>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d13c      	bne.n	8013b16 <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013aaa:	4b29      	ldr	r3, [pc, #164]	; (8013b50 <icmp_input+0x214>)
 8013aac:	691a      	ldr	r2, [r3, #16]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	885b      	ldrh	r3, [r3, #2]
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d907      	bls.n	8013ad6 <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	885b      	ldrh	r3, [r3, #2]
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	3309      	adds	r3, #9
 8013ace:	b29a      	uxth	r2, r3
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	805a      	strh	r2, [r3, #2]
 8013ad4:	e006      	b.n	8013ae4 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	885b      	ldrh	r3, [r3, #2]
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	3308      	adds	r3, #8
 8013ade:	b29a      	uxth	r2, r3
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	22ff      	movs	r2, #255	; 0xff
 8013ae8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2200      	movs	r2, #0
 8013aee:	729a      	strb	r2, [r3, #10]
 8013af0:	2200      	movs	r2, #0
 8013af2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	9302      	str	r3, [sp, #8]
 8013af8:	2301      	movs	r3, #1
 8013afa:	9301      	str	r3, [sp, #4]
 8013afc:	2300      	movs	r3, #0
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	23ff      	movs	r3, #255	; 0xff
 8013b02:	2200      	movs	r2, #0
 8013b04:	69f9      	ldr	r1, [r7, #28]
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f000 fa9e 	bl	8014048 <ip4_output_if>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013b10:	e001      	b.n	8013b16 <icmp_input+0x1da>
      break;
 8013b12:	bf00      	nop
 8013b14:	e000      	b.n	8013b18 <icmp_input+0x1dc>
      break;
 8013b16:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f002 fee1 	bl	80168e0 <pbuf_free>
  return;
 8013b1e:	e013      	b.n	8013b48 <icmp_input+0x20c>
    goto lenerr;
 8013b20:	bf00      	nop
 8013b22:	e002      	b.n	8013b2a <icmp_input+0x1ee>
    goto lenerr;
 8013b24:	bf00      	nop
 8013b26:	e000      	b.n	8013b2a <icmp_input+0x1ee>
        goto lenerr;
 8013b28:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f002 fed8 	bl	80168e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013b30:	e00a      	b.n	8013b48 <icmp_input+0x20c>
        goto icmperr;
 8013b32:	bf00      	nop
 8013b34:	e004      	b.n	8013b40 <icmp_input+0x204>
        goto icmperr;
 8013b36:	bf00      	nop
 8013b38:	e002      	b.n	8013b40 <icmp_input+0x204>
          goto icmperr;
 8013b3a:	bf00      	nop
 8013b3c:	e000      	b.n	8013b40 <icmp_input+0x204>
          goto icmperr;
 8013b3e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f002 fecd 	bl	80168e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013b46:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013b48:	3728      	adds	r7, #40	; 0x28
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	20009498 	.word	0x20009498
 8013b54:	200094ac 	.word	0x200094ac
 8013b58:	08021a10 	.word	0x08021a10
 8013b5c:	08021ab0 	.word	0x08021ab0
 8013b60:	08021ae8 	.word	0x08021ae8
 8013b64:	08021b10 	.word	0x08021b10

08013b68 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	460b      	mov	r3, r1
 8013b72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013b74:	78fb      	ldrb	r3, [r7, #3]
 8013b76:	461a      	mov	r2, r3
 8013b78:	2103      	movs	r1, #3
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 f814 	bl	8013ba8 <icmp_send_response>
}
 8013b80:	bf00      	nop
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	460b      	mov	r3, r1
 8013b92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013b94:	78fb      	ldrb	r3, [r7, #3]
 8013b96:	461a      	mov	r2, r3
 8013b98:	210b      	movs	r1, #11
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 f804 	bl	8013ba8 <icmp_send_response>
}
 8013ba0:	bf00      	nop
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b08c      	sub	sp, #48	; 0x30
 8013bac:	af04      	add	r7, sp, #16
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	70fb      	strb	r3, [r7, #3]
 8013bb4:	4613      	mov	r3, r2
 8013bb6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013bb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bbc:	2124      	movs	r1, #36	; 0x24
 8013bbe:	2022      	movs	r0, #34	; 0x22
 8013bc0:	f002 fbaa 	bl	8016318 <pbuf_alloc>
 8013bc4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d056      	beq.n	8013c7a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	895b      	ldrh	r3, [r3, #10]
 8013bd0:	2b23      	cmp	r3, #35	; 0x23
 8013bd2:	d806      	bhi.n	8013be2 <icmp_send_response+0x3a>
 8013bd4:	4b2b      	ldr	r3, [pc, #172]	; (8013c84 <icmp_send_response+0xdc>)
 8013bd6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013bda:	492b      	ldr	r1, [pc, #172]	; (8013c88 <icmp_send_response+0xe0>)
 8013bdc:	482b      	ldr	r0, [pc, #172]	; (8013c8c <icmp_send_response+0xe4>)
 8013bde:	f00b f8d5 	bl	801ed8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	78fa      	ldrb	r2, [r7, #3]
 8013bf2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	78ba      	ldrb	r2, [r7, #2]
 8013bf8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	711a      	strb	r2, [r3, #4]
 8013c00:	2200      	movs	r2, #0
 8013c02:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	2200      	movs	r2, #0
 8013c08:	719a      	strb	r2, [r3, #6]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	f103 0008 	add.w	r0, r3, #8
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	221c      	movs	r2, #28
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	f00b f885 	bl	801ed2c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013c28:	f107 030c 	add.w	r3, r7, #12
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f000 f82f 	bl	8013c90 <ip4_route>
 8013c32:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d01b      	beq.n	8013c72 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	709a      	strb	r2, [r3, #2]
 8013c40:	2200      	movs	r2, #0
 8013c42:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	895b      	ldrh	r3, [r3, #10]
 8013c48:	4619      	mov	r1, r3
 8013c4a:	6978      	ldr	r0, [r7, #20]
 8013c4c:	f001 fa6b 	bl	8015126 <inet_chksum>
 8013c50:	4603      	mov	r3, r0
 8013c52:	461a      	mov	r2, r3
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013c58:	f107 020c 	add.w	r2, r7, #12
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	9302      	str	r3, [sp, #8]
 8013c60:	2301      	movs	r3, #1
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	2300      	movs	r3, #0
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	23ff      	movs	r3, #255	; 0xff
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	69f8      	ldr	r0, [r7, #28]
 8013c6e:	f000 f9eb 	bl	8014048 <ip4_output_if>
  }
  pbuf_free(q);
 8013c72:	69f8      	ldr	r0, [r7, #28]
 8013c74:	f002 fe34 	bl	80168e0 <pbuf_free>
 8013c78:	e000      	b.n	8013c7c <icmp_send_response+0xd4>
    return;
 8013c7a:	bf00      	nop
}
 8013c7c:	3720      	adds	r7, #32
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	08021a10 	.word	0x08021a10
 8013c88:	08021b44 	.word	0x08021b44
 8013c8c:	08021ae8 	.word	0x08021ae8

08013c90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b085      	sub	sp, #20
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013c98:	4b33      	ldr	r3, [pc, #204]	; (8013d68 <ip4_route+0xd8>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	60fb      	str	r3, [r7, #12]
 8013c9e:	e036      	b.n	8013d0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d02b      	beq.n	8013d08 <ip4_route+0x78>
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013cb6:	089b      	lsrs	r3, r3, #2
 8013cb8:	f003 0301 	and.w	r3, r3, #1
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d022      	beq.n	8013d08 <ip4_route+0x78>
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d01d      	beq.n	8013d08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3304      	adds	r3, #4
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	405a      	eors	r2, r3
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	3308      	adds	r3, #8
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4013      	ands	r3, r2
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	e038      	b.n	8013d5a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013cee:	f003 0302 	and.w	r3, r3, #2
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d108      	bne.n	8013d08 <ip4_route+0x78>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	330c      	adds	r3, #12
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d101      	bne.n	8013d08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	e028      	b.n	8013d5a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	60fb      	str	r3, [r7, #12]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d1c5      	bne.n	8013ca0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013d14:	4b15      	ldr	r3, [pc, #84]	; (8013d6c <ip4_route+0xdc>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d01a      	beq.n	8013d52 <ip4_route+0xc2>
 8013d1c:	4b13      	ldr	r3, [pc, #76]	; (8013d6c <ip4_route+0xdc>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d24:	f003 0301 	and.w	r3, r3, #1
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d012      	beq.n	8013d52 <ip4_route+0xc2>
 8013d2c:	4b0f      	ldr	r3, [pc, #60]	; (8013d6c <ip4_route+0xdc>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d34:	f003 0304 	and.w	r3, r3, #4
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d00a      	beq.n	8013d52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013d3c:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <ip4_route+0xdc>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	3304      	adds	r3, #4
 8013d42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d004      	beq.n	8013d52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8013d50:	d101      	bne.n	8013d56 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013d52:	2300      	movs	r3, #0
 8013d54:	e001      	b.n	8013d5a <ip4_route+0xca>
  }

  return netif_default;
 8013d56:	4b05      	ldr	r3, [pc, #20]	; (8013d6c <ip4_route+0xdc>)
 8013d58:	681b      	ldr	r3, [r3, #0]
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3714      	adds	r7, #20
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop
 8013d68:	20010364 	.word	0x20010364
 8013d6c:	20010368 	.word	0x20010368

08013d70 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d7e:	f003 0301 	and.w	r3, r3, #1
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d016      	beq.n	8013db6 <ip4_input_accept+0x46>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	3304      	adds	r3, #4
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d011      	beq.n	8013db6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013d92:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <ip4_input_accept+0x50>)
 8013d94:	695a      	ldr	r2, [r3, #20]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	3304      	adds	r3, #4
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d008      	beq.n	8013db2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013da0:	4b07      	ldr	r3, [pc, #28]	; (8013dc0 <ip4_input_accept+0x50>)
 8013da2:	695b      	ldr	r3, [r3, #20]
 8013da4:	6879      	ldr	r1, [r7, #4]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f000 fa26 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8013dac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d001      	beq.n	8013db6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013db2:	2301      	movs	r3, #1
 8013db4:	e000      	b.n	8013db8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013db6:	2300      	movs	r3, #0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	20009498 	.word	0x20009498

08013dc4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b088      	sub	sp, #32
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	091b      	lsrs	r3, r3, #4
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	2b04      	cmp	r3, #4
 8013de2:	d004      	beq.n	8013dee <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f002 fd7b 	bl	80168e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013dea:	2300      	movs	r3, #0
 8013dec:	e123      	b.n	8014036 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	f003 030f 	and.w	r3, r3, #15
 8013df6:	b2db      	uxtb	r3, r3
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013dfe:	69fb      	ldr	r3, [r7, #28]
 8013e00:	885b      	ldrh	r3, [r3, #2]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	4618      	mov	r0, r3
 8013e06:	f001 f903 	bl	8015010 <lwip_htons>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	891b      	ldrh	r3, [r3, #8]
 8013e12:	8a3a      	ldrh	r2, [r7, #16]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d204      	bcs.n	8013e22 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013e18:	8a3b      	ldrh	r3, [r7, #16]
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f002 fbd9 	bl	80165d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	895b      	ldrh	r3, [r3, #10]
 8013e26:	8a7a      	ldrh	r2, [r7, #18]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d807      	bhi.n	8013e3c <ip4_input+0x78>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	891b      	ldrh	r3, [r3, #8]
 8013e30:	8a3a      	ldrh	r2, [r7, #16]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d802      	bhi.n	8013e3c <ip4_input+0x78>
 8013e36:	8a7b      	ldrh	r3, [r7, #18]
 8013e38:	2b13      	cmp	r3, #19
 8013e3a:	d804      	bhi.n	8013e46 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f002 fd4f 	bl	80168e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	e0f7      	b.n	8014036 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	691b      	ldr	r3, [r3, #16]
 8013e4a:	4a7d      	ldr	r2, [pc, #500]	; (8014040 <ip4_input+0x27c>)
 8013e4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	4a7b      	ldr	r2, [pc, #492]	; (8014040 <ip4_input+0x27c>)
 8013e54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013e56:	4b7a      	ldr	r3, [pc, #488]	; (8014040 <ip4_input+0x27c>)
 8013e58:	695b      	ldr	r3, [r3, #20]
 8013e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e5e:	2be0      	cmp	r3, #224	; 0xe0
 8013e60:	d112      	bne.n	8013e88 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e68:	f003 0301 	and.w	r3, r3, #1
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d007      	beq.n	8013e82 <ip4_input+0xbe>
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	3304      	adds	r3, #4
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d002      	beq.n	8013e82 <ip4_input+0xbe>
      netif = inp;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	61bb      	str	r3, [r7, #24]
 8013e80:	e02a      	b.n	8013ed8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013e82:	2300      	movs	r3, #0
 8013e84:	61bb      	str	r3, [r7, #24]
 8013e86:	e027      	b.n	8013ed8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013e88:	6838      	ldr	r0, [r7, #0]
 8013e8a:	f7ff ff71 	bl	8013d70 <ip4_input_accept>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d002      	beq.n	8013e9a <ip4_input+0xd6>
      netif = inp;
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	61bb      	str	r3, [r7, #24]
 8013e98:	e01e      	b.n	8013ed8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013e9e:	4b68      	ldr	r3, [pc, #416]	; (8014040 <ip4_input+0x27c>)
 8013ea0:	695b      	ldr	r3, [r3, #20]
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8013ea6:	d017      	beq.n	8013ed8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013ea8:	4b66      	ldr	r3, [pc, #408]	; (8014044 <ip4_input+0x280>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	61bb      	str	r3, [r7, #24]
 8013eae:	e00e      	b.n	8013ece <ip4_input+0x10a>
          if (netif == inp) {
 8013eb0:	69ba      	ldr	r2, [r7, #24]
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d006      	beq.n	8013ec6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013eb8:	69b8      	ldr	r0, [r7, #24]
 8013eba:	f7ff ff59 	bl	8013d70 <ip4_input_accept>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d108      	bne.n	8013ed6 <ip4_input+0x112>
 8013ec4:	e000      	b.n	8013ec8 <ip4_input+0x104>
            continue;
 8013ec6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	61bb      	str	r3, [r7, #24]
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d1ed      	bne.n	8013eb0 <ip4_input+0xec>
 8013ed4:	e000      	b.n	8013ed8 <ip4_input+0x114>
            break;
 8013ed6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d111      	bne.n	8013f02 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	7a5b      	ldrb	r3, [r3, #9]
 8013ee2:	2b11      	cmp	r3, #17
 8013ee4:	d10d      	bne.n	8013f02 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013ee6:	8a7b      	ldrh	r3, [r7, #18]
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	4413      	add	r3, r2
 8013eec:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	885b      	ldrh	r3, [r3, #2]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013ef8:	d103      	bne.n	8013f02 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013efe:	2300      	movs	r3, #0
 8013f00:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d017      	beq.n	8013f38 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013f08:	4b4d      	ldr	r3, [pc, #308]	; (8014040 <ip4_input+0x27c>)
 8013f0a:	691b      	ldr	r3, [r3, #16]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d013      	beq.n	8013f38 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013f10:	4b4b      	ldr	r3, [pc, #300]	; (8014040 <ip4_input+0x27c>)
 8013f12:	691b      	ldr	r3, [r3, #16]
 8013f14:	6839      	ldr	r1, [r7, #0]
 8013f16:	4618      	mov	r0, r3
 8013f18:	f000 f96e 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d105      	bne.n	8013f2e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013f22:	4b47      	ldr	r3, [pc, #284]	; (8014040 <ip4_input+0x27c>)
 8013f24:	691b      	ldr	r3, [r3, #16]
 8013f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013f2a:	2be0      	cmp	r3, #224	; 0xe0
 8013f2c:	d104      	bne.n	8013f38 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f002 fcd6 	bl	80168e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013f34:	2300      	movs	r3, #0
 8013f36:	e07e      	b.n	8014036 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d104      	bne.n	8013f48 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f002 fcce 	bl	80168e0 <pbuf_free>
    return ERR_OK;
 8013f44:	2300      	movs	r3, #0
 8013f46:	e076      	b.n	8014036 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	88db      	ldrh	r3, [r3, #6]
 8013f4c:	b29b      	uxth	r3, r3
 8013f4e:	461a      	mov	r2, r3
 8013f50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013f54:	4013      	ands	r3, r2
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d00b      	beq.n	8013f72 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 fd24 	bl	80149a8 <ip4_reass>
 8013f60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d101      	bne.n	8013f6c <ip4_input+0x1a8>
      return ERR_OK;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	e064      	b.n	8014036 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013f72:	4a33      	ldr	r2, [pc, #204]	; (8014040 <ip4_input+0x27c>)
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013f78:	4a31      	ldr	r2, [pc, #196]	; (8014040 <ip4_input+0x27c>)
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013f7e:	4a30      	ldr	r2, [pc, #192]	; (8014040 <ip4_input+0x27c>)
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	f003 030f 	and.w	r3, r3, #15
 8013f8c:	b2db      	uxtb	r3, r3
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	4b2a      	ldr	r3, [pc, #168]	; (8014040 <ip4_input+0x27c>)
 8013f96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013f98:	8a7b      	ldrh	r3, [r7, #18]
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f002 fc19 	bl	80167d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	7a5b      	ldrb	r3, [r3, #9]
 8013fa6:	2b11      	cmp	r3, #17
 8013fa8:	d006      	beq.n	8013fb8 <ip4_input+0x1f4>
 8013faa:	2b11      	cmp	r3, #17
 8013fac:	dc13      	bgt.n	8013fd6 <ip4_input+0x212>
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d00c      	beq.n	8013fcc <ip4_input+0x208>
 8013fb2:	2b06      	cmp	r3, #6
 8013fb4:	d005      	beq.n	8013fc2 <ip4_input+0x1fe>
 8013fb6:	e00e      	b.n	8013fd6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013fb8:	6839      	ldr	r1, [r7, #0]
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f009 f9ea 	bl	801d394 <udp_input>
        break;
 8013fc0:	e026      	b.n	8014010 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013fc2:	6839      	ldr	r1, [r7, #0]
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f004 fda5 	bl	8018b14 <tcp_input>
        break;
 8013fca:	e021      	b.n	8014010 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013fcc:	6839      	ldr	r1, [r7, #0]
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7ff fcb4 	bl	801393c <icmp_input>
        break;
 8013fd4:	e01c      	b.n	8014010 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013fd6:	4b1a      	ldr	r3, [pc, #104]	; (8014040 <ip4_input+0x27c>)
 8013fd8:	695b      	ldr	r3, [r3, #20]
 8013fda:	69b9      	ldr	r1, [r7, #24]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f000 f90b 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d10f      	bne.n	8014008 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013fe8:	4b15      	ldr	r3, [pc, #84]	; (8014040 <ip4_input+0x27c>)
 8013fea:	695b      	ldr	r3, [r3, #20]
 8013fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ff0:	2be0      	cmp	r3, #224	; 0xe0
 8013ff2:	d009      	beq.n	8014008 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013ff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f002 fc5d 	bl	80168ba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014000:	2102      	movs	r1, #2
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f7ff fdb0 	bl	8013b68 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f002 fc69 	bl	80168e0 <pbuf_free>
        break;
 801400e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014010:	4b0b      	ldr	r3, [pc, #44]	; (8014040 <ip4_input+0x27c>)
 8014012:	2200      	movs	r2, #0
 8014014:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014016:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <ip4_input+0x27c>)
 8014018:	2200      	movs	r2, #0
 801401a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801401c:	4b08      	ldr	r3, [pc, #32]	; (8014040 <ip4_input+0x27c>)
 801401e:	2200      	movs	r2, #0
 8014020:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014022:	4b07      	ldr	r3, [pc, #28]	; (8014040 <ip4_input+0x27c>)
 8014024:	2200      	movs	r2, #0
 8014026:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014028:	4b05      	ldr	r3, [pc, #20]	; (8014040 <ip4_input+0x27c>)
 801402a:	2200      	movs	r2, #0
 801402c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801402e:	4b04      	ldr	r3, [pc, #16]	; (8014040 <ip4_input+0x27c>)
 8014030:	2200      	movs	r2, #0
 8014032:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014034:	2300      	movs	r3, #0
}
 8014036:	4618      	mov	r0, r3
 8014038:	3720      	adds	r7, #32
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	20009498 	.word	0x20009498
 8014044:	20010364 	.word	0x20010364

08014048 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b08a      	sub	sp, #40	; 0x28
 801404c:	af04      	add	r7, sp, #16
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	607a      	str	r2, [r7, #4]
 8014054:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d009      	beq.n	8014074 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d003      	beq.n	801406e <ip4_output_if+0x26>
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d102      	bne.n	8014074 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014070:	3304      	adds	r3, #4
 8014072:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014074:	78fa      	ldrb	r2, [r7, #3]
 8014076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014078:	9302      	str	r3, [sp, #8]
 801407a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801407e:	9301      	str	r3, [sp, #4]
 8014080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	4613      	mov	r3, r2
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	6979      	ldr	r1, [r7, #20]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 f805 	bl	801409c <ip4_output_if_src>
 8014092:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014094:	4618      	mov	r0, r3
 8014096:	3718      	adds	r7, #24
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b088      	sub	sp, #32
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	607a      	str	r2, [r7, #4]
 80140a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	7b9b      	ldrb	r3, [r3, #14]
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d006      	beq.n	80140c0 <ip4_output_if_src+0x24>
 80140b2:	4b4b      	ldr	r3, [pc, #300]	; (80141e0 <ip4_output_if_src+0x144>)
 80140b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80140b8:	494a      	ldr	r1, [pc, #296]	; (80141e4 <ip4_output_if_src+0x148>)
 80140ba:	484b      	ldr	r0, [pc, #300]	; (80141e8 <ip4_output_if_src+0x14c>)
 80140bc:	f00a fe66 	bl	801ed8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d060      	beq.n	8014188 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80140c6:	2314      	movs	r3, #20
 80140c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80140ca:	2114      	movs	r1, #20
 80140cc:	68f8      	ldr	r0, [r7, #12]
 80140ce:	f002 fb71 	bl	80167b4 <pbuf_add_header>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d002      	beq.n	80140de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80140d8:	f06f 0301 	mvn.w	r3, #1
 80140dc:	e07c      	b.n	80141d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	895b      	ldrh	r3, [r3, #10]
 80140e8:	2b13      	cmp	r3, #19
 80140ea:	d806      	bhi.n	80140fa <ip4_output_if_src+0x5e>
 80140ec:	4b3c      	ldr	r3, [pc, #240]	; (80141e0 <ip4_output_if_src+0x144>)
 80140ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80140f2:	493e      	ldr	r1, [pc, #248]	; (80141ec <ip4_output_if_src+0x150>)
 80140f4:	483c      	ldr	r0, [pc, #240]	; (80141e8 <ip4_output_if_src+0x14c>)
 80140f6:	f00a fe49 	bl	801ed8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	78fa      	ldrb	r2, [r7, #3]
 80140fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014106:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014110:	8b7b      	ldrh	r3, [r7, #26]
 8014112:	089b      	lsrs	r3, r3, #2
 8014114:	b29b      	uxth	r3, r3
 8014116:	b2db      	uxtb	r3, r3
 8014118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801411c:	b2da      	uxtb	r2, r3
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014122:	69fb      	ldr	r3, [r7, #28]
 8014124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014128:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	891b      	ldrh	r3, [r3, #8]
 801412e:	4618      	mov	r0, r3
 8014130:	f000 ff6e 	bl	8015010 <lwip_htons>
 8014134:	4603      	mov	r3, r0
 8014136:	461a      	mov	r2, r3
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	2200      	movs	r2, #0
 8014140:	719a      	strb	r2, [r3, #6]
 8014142:	2200      	movs	r2, #0
 8014144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014146:	4b2a      	ldr	r3, [pc, #168]	; (80141f0 <ip4_output_if_src+0x154>)
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	4618      	mov	r0, r3
 801414c:	f000 ff60 	bl	8015010 <lwip_htons>
 8014150:	4603      	mov	r3, r0
 8014152:	461a      	mov	r2, r3
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014158:	4b25      	ldr	r3, [pc, #148]	; (80141f0 <ip4_output_if_src+0x154>)
 801415a:	881b      	ldrh	r3, [r3, #0]
 801415c:	3301      	adds	r3, #1
 801415e:	b29a      	uxth	r2, r3
 8014160:	4b23      	ldr	r3, [pc, #140]	; (80141f0 <ip4_output_if_src+0x154>)
 8014162:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d104      	bne.n	8014174 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801416a:	4b22      	ldr	r3, [pc, #136]	; (80141f4 <ip4_output_if_src+0x158>)
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	60da      	str	r2, [r3, #12]
 8014172:	e003      	b.n	801417c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	2200      	movs	r2, #0
 8014180:	729a      	strb	r2, [r3, #10]
 8014182:	2200      	movs	r2, #0
 8014184:	72da      	strb	r2, [r3, #11]
 8014186:	e00f      	b.n	80141a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	895b      	ldrh	r3, [r3, #10]
 801418c:	2b13      	cmp	r3, #19
 801418e:	d802      	bhi.n	8014196 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014190:	f06f 0301 	mvn.w	r3, #1
 8014194:	e020      	b.n	80141d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	691b      	ldr	r3, [r3, #16]
 80141a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80141a2:	f107 0314 	add.w	r3, r7, #20
 80141a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80141a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00c      	beq.n	80141ca <ip4_output_if_src+0x12e>
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	891a      	ldrh	r2, [r3, #8]
 80141b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d906      	bls.n	80141ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f000 fddf 	bl	8014d84 <ip4_frag>
 80141c6:	4603      	mov	r3, r0
 80141c8:	e006      	b.n	80141d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80141ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141cc:	695b      	ldr	r3, [r3, #20]
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	68f9      	ldr	r1, [r7, #12]
 80141d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141d4:	4798      	blx	r3
 80141d6:	4603      	mov	r3, r0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3720      	adds	r7, #32
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	08021b70 	.word	0x08021b70
 80141e4:	08021c0c 	.word	0x08021c0c
 80141e8:	08021c18 	.word	0x08021c18
 80141ec:	08021c40 	.word	0x08021c40
 80141f0:	2000902a 	.word	0x2000902a
 80141f4:	08024da4 	.word	0x08024da4

080141f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801420c:	d002      	beq.n	8014214 <ip4_addr_isbroadcast_u32+0x1c>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d101      	bne.n	8014218 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014214:	2301      	movs	r3, #1
 8014216:	e02a      	b.n	801426e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801421e:	f003 0302 	and.w	r3, r3, #2
 8014222:	2b00      	cmp	r3, #0
 8014224:	d101      	bne.n	801422a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014226:	2300      	movs	r3, #0
 8014228:	e021      	b.n	801426e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	3304      	adds	r3, #4
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	429a      	cmp	r2, r3
 8014234:	d101      	bne.n	801423a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014236:	2300      	movs	r3, #0
 8014238:	e019      	b.n	801426e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	3304      	adds	r3, #4
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	405a      	eors	r2, r3
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	3308      	adds	r3, #8
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4013      	ands	r3, r2
 801424c:	2b00      	cmp	r3, #0
 801424e:	d10d      	bne.n	801426c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	3308      	adds	r3, #8
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	43da      	mvns	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	3308      	adds	r3, #8
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014264:	429a      	cmp	r2, r3
 8014266:	d101      	bne.n	801426c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014268:	2301      	movs	r3, #1
 801426a:	e000      	b.n	801426e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801426c:	2300      	movs	r3, #0
  }
}
 801426e:	4618      	mov	r0, r3
 8014270:	3714      	adds	r7, #20
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr
	...

0801427c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8014284:	2210      	movs	r2, #16
 8014286:	4904      	ldr	r1, [pc, #16]	; (8014298 <ip4addr_ntoa+0x1c>)
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 f807 	bl	801429c <ip4addr_ntoa_r>
 801428e:	4603      	mov	r3, r0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	2000902c 	.word	0x2000902c

0801429c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801429c:	b480      	push	{r7}
 801429e:	b08d      	sub	sp, #52	; 0x34
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	60f8      	str	r0, [r7, #12]
 80142a4:	60b9      	str	r1, [r7, #8]
 80142a6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80142a8:	2300      	movs	r3, #0
 80142aa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80142b6:	f107 0318 	add.w	r3, r7, #24
 80142ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80142bc:	2300      	movs	r3, #0
 80142be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142c2:	e059      	b.n	8014378 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80142c4:	2300      	movs	r3, #0
 80142c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	781a      	ldrb	r2, [r3, #0]
 80142ce:	4b33      	ldr	r3, [pc, #204]	; (801439c <ip4addr_ntoa_r+0x100>)
 80142d0:	fba3 1302 	umull	r1, r3, r3, r2
 80142d4:	08d9      	lsrs	r1, r3, #3
 80142d6:	460b      	mov	r3, r1
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	440b      	add	r3, r1
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	1ad3      	subs	r3, r2, r3
 80142e0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80142e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	4a2d      	ldr	r2, [pc, #180]	; (801439c <ip4addr_ntoa_r+0x100>)
 80142e8:	fba2 2303 	umull	r2, r3, r2, r3
 80142ec:	08db      	lsrs	r3, r3, #3
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80142f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142f8:	1c5a      	adds	r2, r3, #1
 80142fa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80142fe:	4619      	mov	r1, r3
 8014300:	7ffb      	ldrb	r3, [r7, #31]
 8014302:	3330      	adds	r3, #48	; 0x30
 8014304:	b2da      	uxtb	r2, r3
 8014306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801430a:	440b      	add	r3, r1
 801430c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8014310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1d8      	bne.n	80142ca <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8014318:	e012      	b.n	8014340 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801431a:	6a3b      	ldr	r3, [r7, #32]
 801431c:	1c5a      	adds	r2, r3, #1
 801431e:	623a      	str	r2, [r7, #32]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	429a      	cmp	r2, r3
 8014324:	dc01      	bgt.n	801432a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8014326:	2300      	movs	r3, #0
 8014328:	e031      	b.n	801438e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801432a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014330:	1c59      	adds	r1, r3, #1
 8014332:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014334:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014338:	440a      	add	r2, r1
 801433a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801433e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8014340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014344:	1e5a      	subs	r2, r3, #1
 8014346:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801434a:	2b00      	cmp	r3, #0
 801434c:	d1e5      	bne.n	801431a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	1c5a      	adds	r2, r3, #1
 8014352:	623a      	str	r2, [r7, #32]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	429a      	cmp	r2, r3
 8014358:	dc01      	bgt.n	801435e <ip4addr_ntoa_r+0xc2>
      return NULL;
 801435a:	2300      	movs	r3, #0
 801435c:	e017      	b.n	801438e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014364:	222e      	movs	r2, #46	; 0x2e
 8014366:	701a      	strb	r2, [r3, #0]
    ap++;
 8014368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436a:	3301      	adds	r3, #1
 801436c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801436e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014372:	3301      	adds	r3, #1
 8014374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801437c:	2b03      	cmp	r3, #3
 801437e:	d9a1      	bls.n	80142c4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8014380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014382:	3b01      	subs	r3, #1
 8014384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014388:	2200      	movs	r2, #0
 801438a:	701a      	strb	r2, [r3, #0]
  return buf;
 801438c:	68bb      	ldr	r3, [r7, #8]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3734      	adds	r7, #52	; 0x34
 8014392:	46bd      	mov	sp, r7
 8014394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop
 801439c:	cccccccd 	.word	0xcccccccd

080143a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80143a6:	2300      	movs	r3, #0
 80143a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80143aa:	4b12      	ldr	r3, [pc, #72]	; (80143f4 <ip_reass_tmr+0x54>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80143b0:	e018      	b.n	80143e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	7fdb      	ldrb	r3, [r3, #31]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00b      	beq.n	80143d2 <ip_reass_tmr+0x32>
      r->timer--;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	7fdb      	ldrb	r3, [r3, #31]
 80143be:	3b01      	subs	r3, #1
 80143c0:	b2da      	uxtb	r2, r3
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	60fb      	str	r3, [r7, #12]
 80143d0:	e008      	b.n	80143e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f000 f80a 	bl	80143f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d1e3      	bne.n	80143b2 <ip_reass_tmr+0x12>
    }
  }
}
 80143ea:	bf00      	nop
 80143ec:	bf00      	nop
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	2000903c 	.word	0x2000903c

080143f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b088      	sub	sp, #32
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014402:	2300      	movs	r3, #0
 8014404:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	429a      	cmp	r2, r3
 801440c:	d105      	bne.n	801441a <ip_reass_free_complete_datagram+0x22>
 801440e:	4b45      	ldr	r3, [pc, #276]	; (8014524 <ip_reass_free_complete_datagram+0x12c>)
 8014410:	22ab      	movs	r2, #171	; 0xab
 8014412:	4945      	ldr	r1, [pc, #276]	; (8014528 <ip_reass_free_complete_datagram+0x130>)
 8014414:	4845      	ldr	r0, [pc, #276]	; (801452c <ip_reass_free_complete_datagram+0x134>)
 8014416:	f00a fcb9 	bl	801ed8c <iprintf>
  if (prev != NULL) {
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00a      	beq.n	8014436 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	429a      	cmp	r2, r3
 8014428:	d005      	beq.n	8014436 <ip_reass_free_complete_datagram+0x3e>
 801442a:	4b3e      	ldr	r3, [pc, #248]	; (8014524 <ip_reass_free_complete_datagram+0x12c>)
 801442c:	22ad      	movs	r2, #173	; 0xad
 801442e:	4940      	ldr	r1, [pc, #256]	; (8014530 <ip_reass_free_complete_datagram+0x138>)
 8014430:	483e      	ldr	r0, [pc, #248]	; (801452c <ip_reass_free_complete_datagram+0x134>)
 8014432:	f00a fcab 	bl	801ed8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	889b      	ldrh	r3, [r3, #4]
 8014442:	b29b      	uxth	r3, r3
 8014444:	2b00      	cmp	r3, #0
 8014446:	d12a      	bne.n	801449e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	6858      	ldr	r0, [r3, #4]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	3308      	adds	r3, #8
 801445e:	2214      	movs	r2, #20
 8014460:	4619      	mov	r1, r3
 8014462:	f00a fc63 	bl	801ed2c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014466:	2101      	movs	r1, #1
 8014468:	69b8      	ldr	r0, [r7, #24]
 801446a:	f7ff fb8d 	bl	8013b88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801446e:	69b8      	ldr	r0, [r7, #24]
 8014470:	f002 fac4 	bl	80169fc <pbuf_clen>
 8014474:	4603      	mov	r3, r0
 8014476:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014478:	8bfa      	ldrh	r2, [r7, #30]
 801447a:	8a7b      	ldrh	r3, [r7, #18]
 801447c:	4413      	add	r3, r2
 801447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014482:	db05      	blt.n	8014490 <ip_reass_free_complete_datagram+0x98>
 8014484:	4b27      	ldr	r3, [pc, #156]	; (8014524 <ip_reass_free_complete_datagram+0x12c>)
 8014486:	22bc      	movs	r2, #188	; 0xbc
 8014488:	492a      	ldr	r1, [pc, #168]	; (8014534 <ip_reass_free_complete_datagram+0x13c>)
 801448a:	4828      	ldr	r0, [pc, #160]	; (801452c <ip_reass_free_complete_datagram+0x134>)
 801448c:	f00a fc7e 	bl	801ed8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014490:	8bfa      	ldrh	r2, [r7, #30]
 8014492:	8a7b      	ldrh	r3, [r7, #18]
 8014494:	4413      	add	r3, r2
 8014496:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014498:	69b8      	ldr	r0, [r7, #24]
 801449a:	f002 fa21 	bl	80168e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80144a4:	e01f      	b.n	80144e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	685b      	ldr	r3, [r3, #4]
 80144aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f002 faa0 	bl	80169fc <pbuf_clen>
 80144bc:	4603      	mov	r3, r0
 80144be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80144c0:	8bfa      	ldrh	r2, [r7, #30]
 80144c2:	8a7b      	ldrh	r3, [r7, #18]
 80144c4:	4413      	add	r3, r2
 80144c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144ca:	db05      	blt.n	80144d8 <ip_reass_free_complete_datagram+0xe0>
 80144cc:	4b15      	ldr	r3, [pc, #84]	; (8014524 <ip_reass_free_complete_datagram+0x12c>)
 80144ce:	22cc      	movs	r2, #204	; 0xcc
 80144d0:	4918      	ldr	r1, [pc, #96]	; (8014534 <ip_reass_free_complete_datagram+0x13c>)
 80144d2:	4816      	ldr	r0, [pc, #88]	; (801452c <ip_reass_free_complete_datagram+0x134>)
 80144d4:	f00a fc5a 	bl	801ed8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80144d8:	8bfa      	ldrh	r2, [r7, #30]
 80144da:	8a7b      	ldrh	r3, [r7, #18]
 80144dc:	4413      	add	r3, r2
 80144de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	f002 f9fd 	bl	80168e0 <pbuf_free>
  while (p != NULL) {
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1dc      	bne.n	80144a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 f8c2 	bl	8014678 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80144f4:	4b10      	ldr	r3, [pc, #64]	; (8014538 <ip_reass_free_complete_datagram+0x140>)
 80144f6:	881b      	ldrh	r3, [r3, #0]
 80144f8:	8bfa      	ldrh	r2, [r7, #30]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d905      	bls.n	801450a <ip_reass_free_complete_datagram+0x112>
 80144fe:	4b09      	ldr	r3, [pc, #36]	; (8014524 <ip_reass_free_complete_datagram+0x12c>)
 8014500:	22d2      	movs	r2, #210	; 0xd2
 8014502:	490e      	ldr	r1, [pc, #56]	; (801453c <ip_reass_free_complete_datagram+0x144>)
 8014504:	4809      	ldr	r0, [pc, #36]	; (801452c <ip_reass_free_complete_datagram+0x134>)
 8014506:	f00a fc41 	bl	801ed8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801450a:	4b0b      	ldr	r3, [pc, #44]	; (8014538 <ip_reass_free_complete_datagram+0x140>)
 801450c:	881a      	ldrh	r2, [r3, #0]
 801450e:	8bfb      	ldrh	r3, [r7, #30]
 8014510:	1ad3      	subs	r3, r2, r3
 8014512:	b29a      	uxth	r2, r3
 8014514:	4b08      	ldr	r3, [pc, #32]	; (8014538 <ip_reass_free_complete_datagram+0x140>)
 8014516:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014518:	8bfb      	ldrh	r3, [r7, #30]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3720      	adds	r7, #32
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	08021c70 	.word	0x08021c70
 8014528:	08021d14 	.word	0x08021d14
 801452c:	08021d20 	.word	0x08021d20
 8014530:	08021d48 	.word	0x08021d48
 8014534:	08021d5c 	.word	0x08021d5c
 8014538:	20009040 	.word	0x20009040
 801453c:	08021d7c 	.word	0x08021d7c

08014540 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b08a      	sub	sp, #40	; 0x28
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801454a:	2300      	movs	r3, #0
 801454c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801454e:	2300      	movs	r3, #0
 8014550:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014552:	2300      	movs	r3, #0
 8014554:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014556:	2300      	movs	r3, #0
 8014558:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801455a:	2300      	movs	r3, #0
 801455c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801455e:	4b28      	ldr	r3, [pc, #160]	; (8014600 <ip_reass_remove_oldest_datagram+0xc0>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014564:	e030      	b.n	80145c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014568:	695a      	ldr	r2, [r3, #20]
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	429a      	cmp	r2, r3
 8014570:	d10c      	bne.n	801458c <ip_reass_remove_oldest_datagram+0x4c>
 8014572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014574:	699a      	ldr	r2, [r3, #24]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	691b      	ldr	r3, [r3, #16]
 801457a:	429a      	cmp	r2, r3
 801457c:	d106      	bne.n	801458c <ip_reass_remove_oldest_datagram+0x4c>
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014580:	899a      	ldrh	r2, [r3, #12]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	889b      	ldrh	r3, [r3, #4]
 8014586:	b29b      	uxth	r3, r3
 8014588:	429a      	cmp	r2, r3
 801458a:	d014      	beq.n	80145b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	3301      	adds	r3, #1
 8014590:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014592:	6a3b      	ldr	r3, [r7, #32]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d104      	bne.n	80145a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	61bb      	str	r3, [r7, #24]
 80145a0:	e009      	b.n	80145b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80145a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a4:	7fda      	ldrb	r2, [r3, #31]
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	7fdb      	ldrb	r3, [r3, #31]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d803      	bhi.n	80145b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80145ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80145b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d001      	beq.n	80145c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80145be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80145c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80145c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d1cb      	bne.n	8014566 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80145ce:	6a3b      	ldr	r3, [r7, #32]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d008      	beq.n	80145e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80145d4:	69b9      	ldr	r1, [r7, #24]
 80145d6:	6a38      	ldr	r0, [r7, #32]
 80145d8:	f7ff ff0e 	bl	80143f8 <ip_reass_free_complete_datagram>
 80145dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80145de:	697a      	ldr	r2, [r7, #20]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	4413      	add	r3, r2
 80145e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80145e6:	697a      	ldr	r2, [r7, #20]
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	da02      	bge.n	80145f4 <ip_reass_remove_oldest_datagram+0xb4>
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	dcac      	bgt.n	801454e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80145f4:	697b      	ldr	r3, [r7, #20]
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3728      	adds	r7, #40	; 0x28
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	2000903c 	.word	0x2000903c

08014604 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801460e:	2004      	movs	r0, #4
 8014610:	f001 fa40 	bl	8015a94 <memp_malloc>
 8014614:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d110      	bne.n	801463e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801461c:	6839      	ldr	r1, [r7, #0]
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7ff ff8e 	bl	8014540 <ip_reass_remove_oldest_datagram>
 8014624:	4602      	mov	r2, r0
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	4293      	cmp	r3, r2
 801462a:	dc03      	bgt.n	8014634 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801462c:	2004      	movs	r0, #4
 801462e:	f001 fa31 	bl	8015a94 <memp_malloc>
 8014632:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d101      	bne.n	801463e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801463a:	2300      	movs	r3, #0
 801463c:	e016      	b.n	801466c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801463e:	2220      	movs	r2, #32
 8014640:	2100      	movs	r1, #0
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	f00a fb9a 	bl	801ed7c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	220f      	movs	r2, #15
 801464c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801464e:	4b09      	ldr	r3, [pc, #36]	; (8014674 <ip_reass_enqueue_new_datagram+0x70>)
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014656:	4a07      	ldr	r2, [pc, #28]	; (8014674 <ip_reass_enqueue_new_datagram+0x70>)
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	3308      	adds	r3, #8
 8014660:	2214      	movs	r2, #20
 8014662:	6879      	ldr	r1, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	f00a fb61 	bl	801ed2c <memcpy>
  return ipr;
 801466a:	68fb      	ldr	r3, [r7, #12]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	2000903c 	.word	0x2000903c

08014678 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014682:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <ip_reass_dequeue_datagram+0x4c>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	429a      	cmp	r2, r3
 801468a:	d104      	bne.n	8014696 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4a0c      	ldr	r2, [pc, #48]	; (80146c4 <ip_reass_dequeue_datagram+0x4c>)
 8014692:	6013      	str	r3, [r2, #0]
 8014694:	e00d      	b.n	80146b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d106      	bne.n	80146aa <ip_reass_dequeue_datagram+0x32>
 801469c:	4b0a      	ldr	r3, [pc, #40]	; (80146c8 <ip_reass_dequeue_datagram+0x50>)
 801469e:	f240 1245 	movw	r2, #325	; 0x145
 80146a2:	490a      	ldr	r1, [pc, #40]	; (80146cc <ip_reass_dequeue_datagram+0x54>)
 80146a4:	480a      	ldr	r0, [pc, #40]	; (80146d0 <ip_reass_dequeue_datagram+0x58>)
 80146a6:	f00a fb71 	bl	801ed8c <iprintf>
    prev->next = ipr->next;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80146b2:	6879      	ldr	r1, [r7, #4]
 80146b4:	2004      	movs	r0, #4
 80146b6:	f001 fa63 	bl	8015b80 <memp_free>
}
 80146ba:	bf00      	nop
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	2000903c 	.word	0x2000903c
 80146c8:	08021c70 	.word	0x08021c70
 80146cc:	08021da0 	.word	0x08021da0
 80146d0:	08021d20 	.word	0x08021d20

080146d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08c      	sub	sp, #48	; 0x30
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80146e0:	2300      	movs	r3, #0
 80146e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80146e4:	2301      	movs	r3, #1
 80146e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	885b      	ldrh	r3, [r3, #2]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	4618      	mov	r0, r3
 80146f6:	f000 fc8b 	bl	8015010 <lwip_htons>
 80146fa:	4603      	mov	r3, r0
 80146fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	f003 030f 	and.w	r3, r3, #15
 8014706:	b2db      	uxtb	r3, r3
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801470c:	7e7b      	ldrb	r3, [r7, #25]
 801470e:	b29b      	uxth	r3, r3
 8014710:	8b7a      	ldrh	r2, [r7, #26]
 8014712:	429a      	cmp	r2, r3
 8014714:	d202      	bcs.n	801471c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801471a:	e135      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801471c:	7e7b      	ldrb	r3, [r7, #25]
 801471e:	b29b      	uxth	r3, r3
 8014720:	8b7a      	ldrh	r2, [r7, #26]
 8014722:	1ad3      	subs	r3, r2, r3
 8014724:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014726:	69fb      	ldr	r3, [r7, #28]
 8014728:	88db      	ldrh	r3, [r3, #6]
 801472a:	b29b      	uxth	r3, r3
 801472c:	4618      	mov	r0, r3
 801472e:	f000 fc6f 	bl	8015010 <lwip_htons>
 8014732:	4603      	mov	r3, r0
 8014734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014738:	b29b      	uxth	r3, r3
 801473a:	00db      	lsls	r3, r3, #3
 801473c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014746:	2200      	movs	r2, #0
 8014748:	701a      	strb	r2, [r3, #0]
 801474a:	2200      	movs	r2, #0
 801474c:	705a      	strb	r2, [r3, #1]
 801474e:	2200      	movs	r2, #0
 8014750:	709a      	strb	r2, [r3, #2]
 8014752:	2200      	movs	r2, #0
 8014754:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014758:	8afa      	ldrh	r2, [r7, #22]
 801475a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801475c:	8afa      	ldrh	r2, [r7, #22]
 801475e:	8b7b      	ldrh	r3, [r7, #26]
 8014760:	4413      	add	r3, r2
 8014762:	b29a      	uxth	r2, r3
 8014764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014766:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476a:	88db      	ldrh	r3, [r3, #6]
 801476c:	b29b      	uxth	r3, r3
 801476e:	8afa      	ldrh	r2, [r7, #22]
 8014770:	429a      	cmp	r2, r3
 8014772:	d902      	bls.n	801477a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014778:	e106      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	627b      	str	r3, [r7, #36]	; 0x24
 8014780:	e068      	b.n	8014854 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478a:	889b      	ldrh	r3, [r3, #4]
 801478c:	b29a      	uxth	r2, r3
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	889b      	ldrh	r3, [r3, #4]
 8014792:	b29b      	uxth	r3, r3
 8014794:	429a      	cmp	r2, r3
 8014796:	d235      	bcs.n	8014804 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801479c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d020      	beq.n	80147e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80147a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a6:	889b      	ldrh	r3, [r3, #4]
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	88db      	ldrh	r3, [r3, #6]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d307      	bcc.n	80147c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80147b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b6:	88db      	ldrh	r3, [r3, #6]
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	889b      	ldrh	r3, [r3, #4]
 80147be:	b29b      	uxth	r3, r3
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d902      	bls.n	80147ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147c8:	e0de      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80147d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d2:	88db      	ldrh	r3, [r3, #6]
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d8:	889b      	ldrh	r3, [r3, #4]
 80147da:	b29b      	uxth	r3, r3
 80147dc:	429a      	cmp	r2, r3
 80147de:	d03d      	beq.n	801485c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80147e0:	2300      	movs	r3, #0
 80147e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80147e4:	e03a      	b.n	801485c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80147e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e8:	88db      	ldrh	r3, [r3, #6]
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	889b      	ldrh	r3, [r3, #4]
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d902      	bls.n	80147fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147fa:	e0c5      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	68ba      	ldr	r2, [r7, #8]
 8014800:	605a      	str	r2, [r3, #4]
      break;
 8014802:	e02b      	b.n	801485c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014806:	889b      	ldrh	r3, [r3, #4]
 8014808:	b29a      	uxth	r2, r3
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	889b      	ldrh	r3, [r3, #4]
 801480e:	b29b      	uxth	r3, r3
 8014810:	429a      	cmp	r2, r3
 8014812:	d102      	bne.n	801481a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014818:	e0b6      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481c:	889b      	ldrh	r3, [r3, #4]
 801481e:	b29a      	uxth	r2, r3
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	88db      	ldrh	r3, [r3, #6]
 8014824:	b29b      	uxth	r3, r3
 8014826:	429a      	cmp	r2, r3
 8014828:	d202      	bcs.n	8014830 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801482e:	e0ab      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014832:	2b00      	cmp	r3, #0
 8014834:	d009      	beq.n	801484a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014838:	88db      	ldrh	r3, [r3, #6]
 801483a:	b29a      	uxth	r2, r3
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	889b      	ldrh	r3, [r3, #4]
 8014840:	b29b      	uxth	r3, r3
 8014842:	429a      	cmp	r2, r3
 8014844:	d001      	beq.n	801484a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	2b00      	cmp	r3, #0
 8014858:	d193      	bne.n	8014782 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801485a:	e000      	b.n	801485e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801485c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	2b00      	cmp	r3, #0
 8014862:	d12d      	bne.n	80148c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014866:	2b00      	cmp	r3, #0
 8014868:	d01c      	beq.n	80148a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	88db      	ldrh	r3, [r3, #6]
 801486e:	b29a      	uxth	r2, r3
 8014870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014872:	889b      	ldrh	r3, [r3, #4]
 8014874:	b29b      	uxth	r3, r3
 8014876:	429a      	cmp	r2, r3
 8014878:	d906      	bls.n	8014888 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801487a:	4b45      	ldr	r3, [pc, #276]	; (8014990 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801487c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014880:	4944      	ldr	r1, [pc, #272]	; (8014994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014882:	4845      	ldr	r0, [pc, #276]	; (8014998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014884:	f00a fa82 	bl	801ed8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488a:	68ba      	ldr	r2, [r7, #8]
 801488c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014890:	88db      	ldrh	r3, [r3, #6]
 8014892:	b29a      	uxth	r2, r3
 8014894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014896:	889b      	ldrh	r3, [r3, #4]
 8014898:	b29b      	uxth	r3, r3
 801489a:	429a      	cmp	r2, r3
 801489c:	d010      	beq.n	80148c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801489e:	2300      	movs	r3, #0
 80148a0:	623b      	str	r3, [r7, #32]
 80148a2:	e00d      	b.n	80148c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d006      	beq.n	80148ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80148ac:	4b38      	ldr	r3, [pc, #224]	; (8014990 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80148ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80148b2:	493a      	ldr	r1, [pc, #232]	; (801499c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80148b4:	4838      	ldr	r0, [pc, #224]	; (8014998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80148b6:	f00a fa69 	bl	801ed8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	68ba      	ldr	r2, [r7, #8]
 80148be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d105      	bne.n	80148d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	7f9b      	ldrb	r3, [r3, #30]
 80148ca:	f003 0301 	and.w	r3, r3, #1
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d059      	beq.n	8014986 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80148d2:	6a3b      	ldr	r3, [r7, #32]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d04f      	beq.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d006      	beq.n	80148ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	889b      	ldrh	r3, [r3, #4]
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d002      	beq.n	80148f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	623b      	str	r3, [r7, #32]
 80148f2:	e041      	b.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80148f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80148f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80148fe:	e012      	b.n	8014926 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	88db      	ldrh	r3, [r3, #6]
 801490a:	b29a      	uxth	r2, r3
 801490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490e:	889b      	ldrh	r3, [r3, #4]
 8014910:	b29b      	uxth	r3, r3
 8014912:	429a      	cmp	r2, r3
 8014914:	d002      	beq.n	801491c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014916:	2300      	movs	r3, #0
 8014918:	623b      	str	r3, [r7, #32]
            break;
 801491a:	e007      	b.n	801492c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014928:	2b00      	cmp	r3, #0
 801492a:	d1e9      	bne.n	8014900 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801492c:	6a3b      	ldr	r3, [r7, #32]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d022      	beq.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d106      	bne.n	8014948 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801493a:	4b15      	ldr	r3, [pc, #84]	; (8014990 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801493c:	f240 12df 	movw	r2, #479	; 0x1df
 8014940:	4917      	ldr	r1, [pc, #92]	; (80149a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014942:	4815      	ldr	r0, [pc, #84]	; (8014998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014944:	f00a fa22 	bl	801ed8c <iprintf>
          LWIP_ASSERT("sanity check",
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014950:	429a      	cmp	r2, r3
 8014952:	d106      	bne.n	8014962 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014954:	4b0e      	ldr	r3, [pc, #56]	; (8014990 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014956:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801495a:	4911      	ldr	r1, [pc, #68]	; (80149a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801495c:	480e      	ldr	r0, [pc, #56]	; (8014998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801495e:	f00a fa15 	bl	801ed8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d006      	beq.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801496a:	4b09      	ldr	r3, [pc, #36]	; (8014990 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801496c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014970:	490c      	ldr	r1, [pc, #48]	; (80149a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014972:	4809      	ldr	r0, [pc, #36]	; (8014998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014974:	f00a fa0a 	bl	801ed8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014978:	6a3b      	ldr	r3, [r7, #32]
 801497a:	2b00      	cmp	r3, #0
 801497c:	bf14      	ite	ne
 801497e:	2301      	movne	r3, #1
 8014980:	2300      	moveq	r3, #0
 8014982:	b2db      	uxtb	r3, r3
 8014984:	e000      	b.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014986:	2300      	movs	r3, #0
}
 8014988:	4618      	mov	r0, r3
 801498a:	3730      	adds	r7, #48	; 0x30
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	08021c70 	.word	0x08021c70
 8014994:	08021dbc 	.word	0x08021dbc
 8014998:	08021d20 	.word	0x08021d20
 801499c:	08021ddc 	.word	0x08021ddc
 80149a0:	08021e14 	.word	0x08021e14
 80149a4:	08021e24 	.word	0x08021e24

080149a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b08e      	sub	sp, #56	; 0x38
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80149b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b8:	781b      	ldrb	r3, [r3, #0]
 80149ba:	f003 030f 	and.w	r3, r3, #15
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	2b14      	cmp	r3, #20
 80149c6:	f040 8167 	bne.w	8014c98 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80149ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149cc:	88db      	ldrh	r3, [r3, #6]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 fb1d 	bl	8015010 <lwip_htons>
 80149d6:	4603      	mov	r3, r0
 80149d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80149dc:	b29b      	uxth	r3, r3
 80149de:	00db      	lsls	r3, r3, #3
 80149e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80149e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e4:	885b      	ldrh	r3, [r3, #2]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	4618      	mov	r0, r3
 80149ea:	f000 fb11 	bl	8015010 <lwip_htons>
 80149ee:	4603      	mov	r3, r0
 80149f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80149f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	f003 030f 	and.w	r3, r3, #15
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	f0c0 8146 	bcc.w	8014c9c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014a18:	1ad3      	subs	r3, r2, r3
 8014a1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f001 ffed 	bl	80169fc <pbuf_clen>
 8014a22:	4603      	mov	r3, r0
 8014a24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014a26:	4b9f      	ldr	r3, [pc, #636]	; (8014ca4 <ip4_reass+0x2fc>)
 8014a28:	881b      	ldrh	r3, [r3, #0]
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	8c3b      	ldrh	r3, [r7, #32]
 8014a2e:	4413      	add	r3, r2
 8014a30:	2b0a      	cmp	r3, #10
 8014a32:	dd10      	ble.n	8014a56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014a34:	8c3b      	ldrh	r3, [r7, #32]
 8014a36:	4619      	mov	r1, r3
 8014a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a3a:	f7ff fd81 	bl	8014540 <ip_reass_remove_oldest_datagram>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 812d 	beq.w	8014ca0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014a46:	4b97      	ldr	r3, [pc, #604]	; (8014ca4 <ip4_reass+0x2fc>)
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	8c3b      	ldrh	r3, [r7, #32]
 8014a4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014a50:	2b0a      	cmp	r3, #10
 8014a52:	f300 8125 	bgt.w	8014ca0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014a56:	4b94      	ldr	r3, [pc, #592]	; (8014ca8 <ip4_reass+0x300>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8014a5c:	e015      	b.n	8014a8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a60:	695a      	ldr	r2, [r3, #20]
 8014a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d10c      	bne.n	8014a84 <ip4_reass+0xdc>
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6c:	699a      	ldr	r2, [r3, #24]
 8014a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a70:	691b      	ldr	r3, [r3, #16]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d106      	bne.n	8014a84 <ip4_reass+0xdc>
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	899a      	ldrh	r2, [r3, #12]
 8014a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7c:	889b      	ldrh	r3, [r3, #4]
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d006      	beq.n	8014a92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	633b      	str	r3, [r7, #48]	; 0x30
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d1e6      	bne.n	8014a5e <ip4_reass+0xb6>
 8014a90:	e000      	b.n	8014a94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014a92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d109      	bne.n	8014aae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014a9a:	8c3b      	ldrh	r3, [r7, #32]
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aa0:	f7ff fdb0 	bl	8014604 <ip_reass_enqueue_new_datagram>
 8014aa4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d11c      	bne.n	8014ae6 <ip4_reass+0x13e>
      goto nullreturn;
 8014aac:	e109      	b.n	8014cc2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	88db      	ldrh	r3, [r3, #6]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f000 faab 	bl	8015010 <lwip_htons>
 8014aba:	4603      	mov	r3, r0
 8014abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d110      	bne.n	8014ae6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac6:	89db      	ldrh	r3, [r3, #14]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f000 faa1 	bl	8015010 <lwip_htons>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d006      	beq.n	8014ae6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ada:	3308      	adds	r3, #8
 8014adc:	2214      	movs	r2, #20
 8014ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f00a f923 	bl	801ed2c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae8:	88db      	ldrh	r3, [r3, #6]
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	f003 0320 	and.w	r3, r3, #32
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	bf0c      	ite	eq
 8014af4:	2301      	moveq	r3, #1
 8014af6:	2300      	movne	r3, #0
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d00e      	beq.n	8014b20 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014b02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b06:	4413      	add	r3, r2
 8014b08:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014b0a:	8b7a      	ldrh	r2, [r7, #26]
 8014b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	f0c0 80a0 	bcc.w	8014c54 <ip4_reass+0x2ac>
 8014b14:	8b7b      	ldrh	r3, [r7, #26]
 8014b16:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	f200 809a 	bhi.w	8014c54 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014b20:	69fa      	ldr	r2, [r7, #28]
 8014b22:	6879      	ldr	r1, [r7, #4]
 8014b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b26:	f7ff fdd5 	bl	80146d4 <ip_reass_chain_frag_into_datagram_and_validate>
 8014b2a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b32:	f000 8091 	beq.w	8014c58 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014b36:	4b5b      	ldr	r3, [pc, #364]	; (8014ca4 <ip4_reass+0x2fc>)
 8014b38:	881a      	ldrh	r2, [r3, #0]
 8014b3a:	8c3b      	ldrh	r3, [r7, #32]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	4b58      	ldr	r3, [pc, #352]	; (8014ca4 <ip4_reass+0x2fc>)
 8014b42:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00d      	beq.n	8014b66 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014b4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b4e:	4413      	add	r3, r2
 8014b50:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	8a7a      	ldrh	r2, [r7, #18]
 8014b56:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b5a:	7f9b      	ldrb	r3, [r3, #30]
 8014b5c:	f043 0301 	orr.w	r3, r3, #1
 8014b60:	b2da      	uxtb	r2, r3
 8014b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b64:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d171      	bne.n	8014c50 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6e:	8b9b      	ldrh	r3, [r3, #28]
 8014b70:	3314      	adds	r3, #20
 8014b72:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b88:	3308      	adds	r3, #8
 8014b8a:	2214      	movs	r2, #20
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b90:	f00a f8cc 	bl	801ed2c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014b94:	8a3b      	ldrh	r3, [r7, #16]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f000 fa3a 	bl	8015010 <lwip_htons>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	719a      	strb	r2, [r3, #6]
 8014baa:	2200      	movs	r2, #0
 8014bac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	729a      	strb	r2, [r3, #10]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014bbe:	e00d      	b.n	8014bdc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014bc6:	2114      	movs	r1, #20
 8014bc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014bca:	f001 fe03 	bl	80167d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014bce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f001 ff53 	bl	8016a7c <pbuf_cat>
      r = iprh->next_pbuf;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1ee      	bne.n	8014bc0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014be2:	4b31      	ldr	r3, [pc, #196]	; (8014ca8 <ip4_reass+0x300>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d102      	bne.n	8014bf2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014bec:	2300      	movs	r3, #0
 8014bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bf0:	e010      	b.n	8014c14 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014bf2:	4b2d      	ldr	r3, [pc, #180]	; (8014ca8 <ip4_reass+0x300>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bf8:	e007      	b.n	8014c0a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d006      	beq.n	8014c12 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d1f4      	bne.n	8014bfa <ip4_reass+0x252>
 8014c10:	e000      	b.n	8014c14 <ip4_reass+0x26c>
          break;
 8014c12:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c18:	f7ff fd2e 	bl	8014678 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f001 feed 	bl	80169fc <pbuf_clen>
 8014c22:	4603      	mov	r3, r0
 8014c24:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014c26:	4b1f      	ldr	r3, [pc, #124]	; (8014ca4 <ip4_reass+0x2fc>)
 8014c28:	881b      	ldrh	r3, [r3, #0]
 8014c2a:	8c3a      	ldrh	r2, [r7, #32]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d906      	bls.n	8014c3e <ip4_reass+0x296>
 8014c30:	4b1e      	ldr	r3, [pc, #120]	; (8014cac <ip4_reass+0x304>)
 8014c32:	f240 229b 	movw	r2, #667	; 0x29b
 8014c36:	491e      	ldr	r1, [pc, #120]	; (8014cb0 <ip4_reass+0x308>)
 8014c38:	481e      	ldr	r0, [pc, #120]	; (8014cb4 <ip4_reass+0x30c>)
 8014c3a:	f00a f8a7 	bl	801ed8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014c3e:	4b19      	ldr	r3, [pc, #100]	; (8014ca4 <ip4_reass+0x2fc>)
 8014c40:	881a      	ldrh	r2, [r3, #0]
 8014c42:	8c3b      	ldrh	r3, [r7, #32]
 8014c44:	1ad3      	subs	r3, r2, r3
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	4b16      	ldr	r3, [pc, #88]	; (8014ca4 <ip4_reass+0x2fc>)
 8014c4a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	e03c      	b.n	8014cca <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014c50:	2300      	movs	r3, #0
 8014c52:	e03a      	b.n	8014cca <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014c54:	bf00      	nop
 8014c56:	e000      	b.n	8014c5a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014c58:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d106      	bne.n	8014c6e <ip4_reass+0x2c6>
 8014c60:	4b12      	ldr	r3, [pc, #72]	; (8014cac <ip4_reass+0x304>)
 8014c62:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014c66:	4914      	ldr	r1, [pc, #80]	; (8014cb8 <ip4_reass+0x310>)
 8014c68:	4812      	ldr	r0, [pc, #72]	; (8014cb4 <ip4_reass+0x30c>)
 8014c6a:	f00a f88f 	bl	801ed8c <iprintf>
  if (ipr->p == NULL) {
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d124      	bne.n	8014cc0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014c76:	4b0c      	ldr	r3, [pc, #48]	; (8014ca8 <ip4_reass+0x300>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d006      	beq.n	8014c8e <ip4_reass+0x2e6>
 8014c80:	4b0a      	ldr	r3, [pc, #40]	; (8014cac <ip4_reass+0x304>)
 8014c82:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014c86:	490d      	ldr	r1, [pc, #52]	; (8014cbc <ip4_reass+0x314>)
 8014c88:	480a      	ldr	r0, [pc, #40]	; (8014cb4 <ip4_reass+0x30c>)
 8014c8a:	f00a f87f 	bl	801ed8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014c8e:	2100      	movs	r1, #0
 8014c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c92:	f7ff fcf1 	bl	8014678 <ip_reass_dequeue_datagram>
 8014c96:	e014      	b.n	8014cc2 <ip4_reass+0x31a>
    goto nullreturn;
 8014c98:	bf00      	nop
 8014c9a:	e012      	b.n	8014cc2 <ip4_reass+0x31a>
    goto nullreturn;
 8014c9c:	bf00      	nop
 8014c9e:	e010      	b.n	8014cc2 <ip4_reass+0x31a>
      goto nullreturn;
 8014ca0:	bf00      	nop
 8014ca2:	e00e      	b.n	8014cc2 <ip4_reass+0x31a>
 8014ca4:	20009040 	.word	0x20009040
 8014ca8:	2000903c 	.word	0x2000903c
 8014cac:	08021c70 	.word	0x08021c70
 8014cb0:	08021e48 	.word	0x08021e48
 8014cb4:	08021d20 	.word	0x08021d20
 8014cb8:	08021e64 	.word	0x08021e64
 8014cbc:	08021e70 	.word	0x08021e70
  }

nullreturn:
 8014cc0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f001 fe0c 	bl	80168e0 <pbuf_free>
  return NULL;
 8014cc8:	2300      	movs	r3, #0
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3738      	adds	r7, #56	; 0x38
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop

08014cd4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014cd8:	2005      	movs	r0, #5
 8014cda:	f000 fedb 	bl	8015a94 <memp_malloc>
 8014cde:	4603      	mov	r3, r0
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d106      	bne.n	8014d00 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014cf2:	4b07      	ldr	r3, [pc, #28]	; (8014d10 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014cf4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014cf8:	4906      	ldr	r1, [pc, #24]	; (8014d14 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014cfa:	4807      	ldr	r0, [pc, #28]	; (8014d18 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014cfc:	f00a f846 	bl	801ed8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014d00:	6879      	ldr	r1, [r7, #4]
 8014d02:	2005      	movs	r0, #5
 8014d04:	f000 ff3c 	bl	8015b80 <memp_free>
}
 8014d08:	bf00      	nop
 8014d0a:	3708      	adds	r7, #8
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	08021c70 	.word	0x08021c70
 8014d14:	08021e90 	.word	0x08021e90
 8014d18:	08021d20 	.word	0x08021d20

08014d1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <ipfrag_free_pbuf_custom+0x20>
 8014d2e:	4b11      	ldr	r3, [pc, #68]	; (8014d74 <ipfrag_free_pbuf_custom+0x58>)
 8014d30:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014d34:	4910      	ldr	r1, [pc, #64]	; (8014d78 <ipfrag_free_pbuf_custom+0x5c>)
 8014d36:	4811      	ldr	r0, [pc, #68]	; (8014d7c <ipfrag_free_pbuf_custom+0x60>)
 8014d38:	f00a f828 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d006      	beq.n	8014d52 <ipfrag_free_pbuf_custom+0x36>
 8014d44:	4b0b      	ldr	r3, [pc, #44]	; (8014d74 <ipfrag_free_pbuf_custom+0x58>)
 8014d46:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014d4a:	490d      	ldr	r1, [pc, #52]	; (8014d80 <ipfrag_free_pbuf_custom+0x64>)
 8014d4c:	480b      	ldr	r0, [pc, #44]	; (8014d7c <ipfrag_free_pbuf_custom+0x60>)
 8014d4e:	f00a f81d 	bl	801ed8c <iprintf>
  if (pcr->original != NULL) {
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	695b      	ldr	r3, [r3, #20]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d004      	beq.n	8014d64 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	695b      	ldr	r3, [r3, #20]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f001 fdbe 	bl	80168e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7ff ffbd 	bl	8014ce4 <ip_frag_free_pbuf_custom_ref>
}
 8014d6a:	bf00      	nop
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	08021c70 	.word	0x08021c70
 8014d78:	08021e9c 	.word	0x08021e9c
 8014d7c:	08021d20 	.word	0x08021d20
 8014d80:	08021ea8 	.word	0x08021ea8

08014d84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b094      	sub	sp, #80	; 0x50
 8014d88:	af02      	add	r7, sp, #8
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014d90:	2300      	movs	r3, #0
 8014d92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d9a:	3b14      	subs	r3, #20
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	da00      	bge.n	8014da2 <ip4_frag+0x1e>
 8014da0:	3307      	adds	r3, #7
 8014da2:	10db      	asrs	r3, r3, #3
 8014da4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014da6:	2314      	movs	r3, #20
 8014da8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f003 030f 	and.w	r3, r3, #15
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	009b      	lsls	r3, r3, #2
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	2b14      	cmp	r3, #20
 8014dc4:	d002      	beq.n	8014dcc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014dc6:	f06f 0305 	mvn.w	r3, #5
 8014dca:	e110      	b.n	8014fee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	895b      	ldrh	r3, [r3, #10]
 8014dd0:	2b13      	cmp	r3, #19
 8014dd2:	d809      	bhi.n	8014de8 <ip4_frag+0x64>
 8014dd4:	4b88      	ldr	r3, [pc, #544]	; (8014ff8 <ip4_frag+0x274>)
 8014dd6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014dda:	4988      	ldr	r1, [pc, #544]	; (8014ffc <ip4_frag+0x278>)
 8014ddc:	4888      	ldr	r0, [pc, #544]	; (8015000 <ip4_frag+0x27c>)
 8014dde:	f009 ffd5 	bl	801ed8c <iprintf>
 8014de2:	f06f 0305 	mvn.w	r3, #5
 8014de6:	e102      	b.n	8014fee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dea:	88db      	ldrh	r3, [r3, #6]
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	4618      	mov	r0, r3
 8014df0:	f000 f90e 	bl	8015010 <lwip_htons>
 8014df4:	4603      	mov	r3, r0
 8014df6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014df8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014e02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e08:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	891b      	ldrh	r3, [r3, #8]
 8014e0e:	3b14      	subs	r3, #20
 8014e10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014e14:	e0e1      	b.n	8014fda <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014e16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e20:	4293      	cmp	r3, r2
 8014e22:	bf28      	it	cs
 8014e24:	4613      	movcs	r3, r2
 8014e26:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014e28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e2c:	2114      	movs	r1, #20
 8014e2e:	200e      	movs	r0, #14
 8014e30:	f001 fa72 	bl	8016318 <pbuf_alloc>
 8014e34:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 80d5 	beq.w	8014fe8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e40:	895b      	ldrh	r3, [r3, #10]
 8014e42:	2b13      	cmp	r3, #19
 8014e44:	d806      	bhi.n	8014e54 <ip4_frag+0xd0>
 8014e46:	4b6c      	ldr	r3, [pc, #432]	; (8014ff8 <ip4_frag+0x274>)
 8014e48:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014e4c:	496d      	ldr	r1, [pc, #436]	; (8015004 <ip4_frag+0x280>)
 8014e4e:	486c      	ldr	r0, [pc, #432]	; (8015000 <ip4_frag+0x27c>)
 8014e50:	f009 ff9c 	bl	801ed8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	2214      	movs	r2, #20
 8014e5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f009 ff65 	bl	801ed2c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014e6e:	e064      	b.n	8014f3a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	895a      	ldrh	r2, [r3, #10]
 8014e74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	895b      	ldrh	r3, [r3, #10]
 8014e7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d906      	bls.n	8014e92 <ip4_frag+0x10e>
 8014e84:	4b5c      	ldr	r3, [pc, #368]	; (8014ff8 <ip4_frag+0x274>)
 8014e86:	f240 322d 	movw	r2, #813	; 0x32d
 8014e8a:	495f      	ldr	r1, [pc, #380]	; (8015008 <ip4_frag+0x284>)
 8014e8c:	485c      	ldr	r0, [pc, #368]	; (8015000 <ip4_frag+0x27c>)
 8014e8e:	f009 ff7d 	bl	801ed8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014e92:	8bfa      	ldrh	r2, [r7, #30]
 8014e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	bf28      	it	cs
 8014e9c:	4613      	movcs	r3, r2
 8014e9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014ea2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d105      	bne.n	8014eb6 <ip4_frag+0x132>
        poff = 0;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	60fb      	str	r3, [r7, #12]
        continue;
 8014eb4:	e041      	b.n	8014f3a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014eb6:	f7ff ff0d 	bl	8014cd4 <ip_frag_alloc_pbuf_custom_ref>
 8014eba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d103      	bne.n	8014eca <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ec4:	f001 fd0c 	bl	80168e0 <pbuf_free>
        goto memerr;
 8014ec8:	e08f      	b.n	8014fea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014eca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ed2:	4413      	add	r3, r2
 8014ed4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014ed8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014edc:	9201      	str	r2, [sp, #4]
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2241      	movs	r2, #65	; 0x41
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	f001 fb41 	bl	801656c <pbuf_alloced_custom>
 8014eea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d106      	bne.n	8014f00 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014ef2:	69b8      	ldr	r0, [r7, #24]
 8014ef4:	f7ff fef6 	bl	8014ce4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014efa:	f001 fcf1 	bl	80168e0 <pbuf_free>
        goto memerr;
 8014efe:	e074      	b.n	8014fea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014f00:	68f8      	ldr	r0, [r7, #12]
 8014f02:	f001 fd93 	bl	8016a2c <pbuf_ref>
      pcr->original = p;
 8014f06:	69bb      	ldr	r3, [r7, #24]
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	4a3f      	ldr	r2, [pc, #252]	; (801500c <ip4_frag+0x288>)
 8014f10:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014f12:	6979      	ldr	r1, [r7, #20]
 8014f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f16:	f001 fdb1 	bl	8016a7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014f1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014f1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d004      	beq.n	8014f3a <ip4_frag+0x1b6>
        poff = 0;
 8014f30:	2300      	movs	r3, #0
 8014f32:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014f3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d196      	bne.n	8014e70 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014f42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014f48:	4413      	add	r3, r2
 8014f4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f50:	f1a3 0213 	sub.w	r2, r3, #19
 8014f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	bfcc      	ite	gt
 8014f5c:	2301      	movgt	r3, #1
 8014f5e:	2300      	movle	r3, #0
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d002      	beq.n	8014f7a <ip4_frag+0x1f6>
 8014f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d003      	beq.n	8014f82 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014f7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014f80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f84:	4618      	mov	r0, r3
 8014f86:	f000 f843 	bl	8015010 <lwip_htons>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f90:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f94:	3314      	adds	r3, #20
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f000 f839 	bl	8015010 <lwip_htons>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa8:	2200      	movs	r2, #0
 8014faa:	729a      	strb	r2, [r3, #10]
 8014fac:	2200      	movs	r2, #0
 8014fae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	695b      	ldr	r3, [r3, #20]
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fb8:	68b8      	ldr	r0, [r7, #8]
 8014fba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fbe:	f001 fc8f 	bl	80168e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014fc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014fc8:	1ad3      	subs	r3, r2, r3
 8014fca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014fce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014fd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014fd4:	4413      	add	r3, r2
 8014fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014fda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f47f af19 	bne.w	8014e16 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	e002      	b.n	8014fee <ip4_frag+0x26a>
      goto memerr;
 8014fe8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3748      	adds	r7, #72	; 0x48
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	08021c70 	.word	0x08021c70
 8014ffc:	08021eb4 	.word	0x08021eb4
 8015000:	08021d20 	.word	0x08021d20
 8015004:	08021ed0 	.word	0x08021ed0
 8015008:	08021ef0 	.word	0x08021ef0
 801500c:	08014d1d 	.word	0x08014d1d

08015010 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	4603      	mov	r3, r0
 8015018:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801501a:	88fb      	ldrh	r3, [r7, #6]
 801501c:	021b      	lsls	r3, r3, #8
 801501e:	b21a      	sxth	r2, r3
 8015020:	88fb      	ldrh	r3, [r7, #6]
 8015022:	0a1b      	lsrs	r3, r3, #8
 8015024:	b29b      	uxth	r3, r3
 8015026:	b21b      	sxth	r3, r3
 8015028:	4313      	orrs	r3, r2
 801502a:	b21b      	sxth	r3, r3
 801502c:	b29b      	uxth	r3, r3
}
 801502e:	4618      	mov	r0, r3
 8015030:	370c      	adds	r7, #12
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr

0801503a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801503a:	b480      	push	{r7}
 801503c:	b083      	sub	sp, #12
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	061a      	lsls	r2, r3, #24
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	021b      	lsls	r3, r3, #8
 801504a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801504e:	431a      	orrs	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	0a1b      	lsrs	r3, r3, #8
 8015054:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015058:	431a      	orrs	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	0e1b      	lsrs	r3, r3, #24
 801505e:	4313      	orrs	r3, r2
}
 8015060:	4618      	mov	r0, r3
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr

0801506c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801506c:	b480      	push	{r7}
 801506e:	b089      	sub	sp, #36	; 0x24
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801507a:	2300      	movs	r3, #0
 801507c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	f003 0301 	and.w	r3, r3, #1
 8015088:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d00d      	beq.n	80150ac <lwip_standard_chksum+0x40>
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	dd0a      	ble.n	80150ac <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8015096:	69fa      	ldr	r2, [r7, #28]
 8015098:	1c53      	adds	r3, r2, #1
 801509a:	61fb      	str	r3, [r7, #28]
 801509c:	f107 030e 	add.w	r3, r7, #14
 80150a0:	3301      	adds	r3, #1
 80150a2:	7812      	ldrb	r2, [r2, #0]
 80150a4:	701a      	strb	r2, [r3, #0]
    len--;
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	3b01      	subs	r3, #1
 80150aa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80150b0:	e00a      	b.n	80150c8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	1c9a      	adds	r2, r3, #2
 80150b6:	61ba      	str	r2, [r7, #24]
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	461a      	mov	r2, r3
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	4413      	add	r3, r2
 80150c0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	3b02      	subs	r3, #2
 80150c6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	dcf1      	bgt.n	80150b2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	dd04      	ble.n	80150de <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80150d4:	f107 030e 	add.w	r3, r7, #14
 80150d8:	69ba      	ldr	r2, [r7, #24]
 80150da:	7812      	ldrb	r2, [r2, #0]
 80150dc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80150de:	89fb      	ldrh	r3, [r7, #14]
 80150e0:	461a      	mov	r2, r3
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	4413      	add	r3, r2
 80150e6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	0c1a      	lsrs	r2, r3, #16
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	4413      	add	r3, r2
 80150f2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	0c1a      	lsrs	r2, r3, #16
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	4413      	add	r3, r2
 80150fe:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d007      	beq.n	8015116 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	021b      	lsls	r3, r3, #8
 801510a:	b29a      	uxth	r2, r3
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	0a1b      	lsrs	r3, r3, #8
 8015110:	b2db      	uxtb	r3, r3
 8015112:	4313      	orrs	r3, r2
 8015114:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	b29b      	uxth	r3, r3
}
 801511a:	4618      	mov	r0, r3
 801511c:	3724      	adds	r7, #36	; 0x24
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b082      	sub	sp, #8
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
 801512e:	460b      	mov	r3, r1
 8015130:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8015132:	887b      	ldrh	r3, [r7, #2]
 8015134:	4619      	mov	r1, r3
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7ff ff98 	bl	801506c <lwip_standard_chksum>
 801513c:	4603      	mov	r3, r0
 801513e:	43db      	mvns	r3, r3
 8015140:	b29b      	uxth	r3, r3
}
 8015142:	4618      	mov	r0, r3
 8015144:	3708      	adds	r7, #8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}

0801514a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8015150:	2300      	movs	r3, #0
 8015152:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015154:	f008 ff48 	bl	801dfe8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015158:	f000 f8d4 	bl	8015304 <mem_init>
  memp_init();
 801515c:	f000 fc2c 	bl	80159b8 <memp_init>
  pbuf_init();
  netif_init();
 8015160:	f000 fd38 	bl	8015bd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015164:	f008 f868 	bl	801d238 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015168:	f001 fe64 	bl	8016e34 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801516c:	f007 ffaa 	bl	801d0c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015170:	bf00      	nop
 8015172:	3708      	adds	r7, #8
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015178:	b480      	push	{r7}
 801517a:	b083      	sub	sp, #12
 801517c:	af00      	add	r7, sp, #0
 801517e:	4603      	mov	r3, r0
 8015180:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015182:	4b05      	ldr	r3, [pc, #20]	; (8015198 <ptr_to_mem+0x20>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	88fb      	ldrh	r3, [r7, #6]
 8015188:	4413      	add	r3, r2
}
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	20009044 	.word	0x20009044

0801519c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80151a4:	4b05      	ldr	r3, [pc, #20]	; (80151bc <mem_to_ptr+0x20>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	1ad3      	subs	r3, r2, r3
 80151ac:	b29b      	uxth	r3, r3
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	370c      	adds	r7, #12
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	20009044 	.word	0x20009044

080151c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80151c0:	b590      	push	{r4, r7, lr}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80151c8:	4b45      	ldr	r3, [pc, #276]	; (80152e0 <plug_holes+0x120>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d206      	bcs.n	80151e0 <plug_holes+0x20>
 80151d2:	4b44      	ldr	r3, [pc, #272]	; (80152e4 <plug_holes+0x124>)
 80151d4:	f240 12df 	movw	r2, #479	; 0x1df
 80151d8:	4943      	ldr	r1, [pc, #268]	; (80152e8 <plug_holes+0x128>)
 80151da:	4844      	ldr	r0, [pc, #272]	; (80152ec <plug_holes+0x12c>)
 80151dc:	f009 fdd6 	bl	801ed8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80151e0:	4b43      	ldr	r3, [pc, #268]	; (80152f0 <plug_holes+0x130>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	687a      	ldr	r2, [r7, #4]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d306      	bcc.n	80151f8 <plug_holes+0x38>
 80151ea:	4b3e      	ldr	r3, [pc, #248]	; (80152e4 <plug_holes+0x124>)
 80151ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80151f0:	4940      	ldr	r1, [pc, #256]	; (80152f4 <plug_holes+0x134>)
 80151f2:	483e      	ldr	r0, [pc, #248]	; (80152ec <plug_holes+0x12c>)
 80151f4:	f009 fdca 	bl	801ed8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	791b      	ldrb	r3, [r3, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d006      	beq.n	801520e <plug_holes+0x4e>
 8015200:	4b38      	ldr	r3, [pc, #224]	; (80152e4 <plug_holes+0x124>)
 8015202:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015206:	493c      	ldr	r1, [pc, #240]	; (80152f8 <plug_holes+0x138>)
 8015208:	4838      	ldr	r0, [pc, #224]	; (80152ec <plug_holes+0x12c>)
 801520a:	f009 fdbf 	bl	801ed8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015216:	d906      	bls.n	8015226 <plug_holes+0x66>
 8015218:	4b32      	ldr	r3, [pc, #200]	; (80152e4 <plug_holes+0x124>)
 801521a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801521e:	4937      	ldr	r1, [pc, #220]	; (80152fc <plug_holes+0x13c>)
 8015220:	4832      	ldr	r0, [pc, #200]	; (80152ec <plug_holes+0x12c>)
 8015222:	f009 fdb3 	bl	801ed8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	4618      	mov	r0, r3
 801522c:	f7ff ffa4 	bl	8015178 <ptr_to_mem>
 8015230:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	429a      	cmp	r2, r3
 8015238:	d024      	beq.n	8015284 <plug_holes+0xc4>
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	791b      	ldrb	r3, [r3, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d120      	bne.n	8015284 <plug_holes+0xc4>
 8015242:	4b2b      	ldr	r3, [pc, #172]	; (80152f0 <plug_holes+0x130>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	68fa      	ldr	r2, [r7, #12]
 8015248:	429a      	cmp	r2, r3
 801524a:	d01b      	beq.n	8015284 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801524c:	4b2c      	ldr	r3, [pc, #176]	; (8015300 <plug_holes+0x140>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	429a      	cmp	r2, r3
 8015254:	d102      	bne.n	801525c <plug_holes+0x9c>
      lfree = mem;
 8015256:	4a2a      	ldr	r2, [pc, #168]	; (8015300 <plug_holes+0x140>)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	881a      	ldrh	r2, [r3, #0]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801526c:	d00a      	beq.n	8015284 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	881b      	ldrh	r3, [r3, #0]
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff ff80 	bl	8015178 <ptr_to_mem>
 8015278:	4604      	mov	r4, r0
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7ff ff8e 	bl	801519c <mem_to_ptr>
 8015280:	4603      	mov	r3, r0
 8015282:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	885b      	ldrh	r3, [r3, #2]
 8015288:	4618      	mov	r0, r3
 801528a:	f7ff ff75 	bl	8015178 <ptr_to_mem>
 801528e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	429a      	cmp	r2, r3
 8015296:	d01f      	beq.n	80152d8 <plug_holes+0x118>
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	791b      	ldrb	r3, [r3, #4]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d11b      	bne.n	80152d8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80152a0:	4b17      	ldr	r3, [pc, #92]	; (8015300 <plug_holes+0x140>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d102      	bne.n	80152b0 <plug_holes+0xf0>
      lfree = pmem;
 80152aa:	4a15      	ldr	r2, [pc, #84]	; (8015300 <plug_holes+0x140>)
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	881a      	ldrh	r2, [r3, #0]
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	881b      	ldrh	r3, [r3, #0]
 80152bc:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80152c0:	d00a      	beq.n	80152d8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7ff ff56 	bl	8015178 <ptr_to_mem>
 80152cc:	4604      	mov	r4, r0
 80152ce:	68b8      	ldr	r0, [r7, #8]
 80152d0:	f7ff ff64 	bl	801519c <mem_to_ptr>
 80152d4:	4603      	mov	r3, r0
 80152d6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80152d8:	bf00      	nop
 80152da:	3714      	adds	r7, #20
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd90      	pop	{r4, r7, pc}
 80152e0:	20009044 	.word	0x20009044
 80152e4:	08021f00 	.word	0x08021f00
 80152e8:	08021f98 	.word	0x08021f98
 80152ec:	08021fb0 	.word	0x08021fb0
 80152f0:	20009048 	.word	0x20009048
 80152f4:	08021fd8 	.word	0x08021fd8
 80152f8:	08021ff4 	.word	0x08021ff4
 80152fc:	08022010 	.word	0x08022010
 8015300:	20009050 	.word	0x20009050

08015304 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801530a:	4b1d      	ldr	r3, [pc, #116]	; (8015380 <mem_init+0x7c>)
 801530c:	4a1d      	ldr	r2, [pc, #116]	; (8015384 <mem_init+0x80>)
 801530e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015310:	4b1b      	ldr	r3, [pc, #108]	; (8015380 <mem_init+0x7c>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801531c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2200      	movs	r2, #0
 8015322:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2200      	movs	r2, #0
 8015328:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801532a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 801532e:	f7ff ff23 	bl	8015178 <ptr_to_mem>
 8015332:	4603      	mov	r3, r0
 8015334:	4a14      	ldr	r2, [pc, #80]	; (8015388 <mem_init+0x84>)
 8015336:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015338:	4b13      	ldr	r3, [pc, #76]	; (8015388 <mem_init+0x84>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2201      	movs	r2, #1
 801533e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015340:	4b11      	ldr	r3, [pc, #68]	; (8015388 <mem_init+0x84>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8015348:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801534a:	4b0f      	ldr	r3, [pc, #60]	; (8015388 <mem_init+0x84>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8015352:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015354:	4b0a      	ldr	r3, [pc, #40]	; (8015380 <mem_init+0x7c>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	4a0c      	ldr	r2, [pc, #48]	; (801538c <mem_init+0x88>)
 801535a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801535c:	480c      	ldr	r0, [pc, #48]	; (8015390 <mem_init+0x8c>)
 801535e:	f008 fe4f 	bl	801e000 <sys_mutex_new>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d006      	beq.n	8015376 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015368:	4b0a      	ldr	r3, [pc, #40]	; (8015394 <mem_init+0x90>)
 801536a:	f240 221f 	movw	r2, #543	; 0x21f
 801536e:	490a      	ldr	r1, [pc, #40]	; (8015398 <mem_init+0x94>)
 8015370:	480a      	ldr	r0, [pc, #40]	; (801539c <mem_init+0x98>)
 8015372:	f009 fd0b 	bl	801ed8c <iprintf>
  }
}
 8015376:	bf00      	nop
 8015378:	3708      	adds	r7, #8
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	20009044 	.word	0x20009044
 8015384:	30004000 	.word	0x30004000
 8015388:	20009048 	.word	0x20009048
 801538c:	20009050 	.word	0x20009050
 8015390:	2000904c 	.word	0x2000904c
 8015394:	08021f00 	.word	0x08021f00
 8015398:	0802203c 	.word	0x0802203c
 801539c:	08021fb0 	.word	0x08021fb0

080153a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b086      	sub	sp, #24
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f7ff fef7 	bl	801519c <mem_to_ptr>
 80153ae:	4603      	mov	r3, r0
 80153b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff fede 	bl	8015178 <ptr_to_mem>
 80153bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	885b      	ldrh	r3, [r3, #2]
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7ff fed8 	bl	8015178 <ptr_to_mem>
 80153c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	881b      	ldrh	r3, [r3, #0]
 80153ce:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80153d2:	d818      	bhi.n	8015406 <mem_link_valid+0x66>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	885b      	ldrh	r3, [r3, #2]
 80153d8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80153dc:	d813      	bhi.n	8015406 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80153e2:	8afa      	ldrh	r2, [r7, #22]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d004      	beq.n	80153f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	8afa      	ldrh	r2, [r7, #22]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d109      	bne.n	8015406 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80153f2:	4b08      	ldr	r3, [pc, #32]	; (8015414 <mem_link_valid+0x74>)
 80153f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80153f6:	693a      	ldr	r2, [r7, #16]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d006      	beq.n	801540a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	885b      	ldrh	r3, [r3, #2]
 8015400:	8afa      	ldrh	r2, [r7, #22]
 8015402:	429a      	cmp	r2, r3
 8015404:	d001      	beq.n	801540a <mem_link_valid+0x6a>
    return 0;
 8015406:	2300      	movs	r3, #0
 8015408:	e000      	b.n	801540c <mem_link_valid+0x6c>
  }
  return 1;
 801540a:	2301      	movs	r3, #1
}
 801540c:	4618      	mov	r0, r3
 801540e:	3718      	adds	r7, #24
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20009048 	.word	0x20009048

08015418 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b088      	sub	sp, #32
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d070      	beq.n	8015508 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f003 0303 	and.w	r3, r3, #3
 801542c:	2b00      	cmp	r3, #0
 801542e:	d00d      	beq.n	801544c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015430:	4b37      	ldr	r3, [pc, #220]	; (8015510 <mem_free+0xf8>)
 8015432:	f240 2273 	movw	r2, #627	; 0x273
 8015436:	4937      	ldr	r1, [pc, #220]	; (8015514 <mem_free+0xfc>)
 8015438:	4837      	ldr	r0, [pc, #220]	; (8015518 <mem_free+0x100>)
 801543a:	f009 fca7 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801543e:	f008 fe31 	bl	801e0a4 <sys_arch_protect>
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	68f8      	ldr	r0, [r7, #12]
 8015446:	f008 fe3b 	bl	801e0c0 <sys_arch_unprotect>
    return;
 801544a:	e05e      	b.n	801550a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	3b08      	subs	r3, #8
 8015450:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015452:	4b32      	ldr	r3, [pc, #200]	; (801551c <mem_free+0x104>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	69fa      	ldr	r2, [r7, #28]
 8015458:	429a      	cmp	r2, r3
 801545a:	d306      	bcc.n	801546a <mem_free+0x52>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f103 020c 	add.w	r2, r3, #12
 8015462:	4b2f      	ldr	r3, [pc, #188]	; (8015520 <mem_free+0x108>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	429a      	cmp	r2, r3
 8015468:	d90d      	bls.n	8015486 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801546a:	4b29      	ldr	r3, [pc, #164]	; (8015510 <mem_free+0xf8>)
 801546c:	f240 227f 	movw	r2, #639	; 0x27f
 8015470:	492c      	ldr	r1, [pc, #176]	; (8015524 <mem_free+0x10c>)
 8015472:	4829      	ldr	r0, [pc, #164]	; (8015518 <mem_free+0x100>)
 8015474:	f009 fc8a 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015478:	f008 fe14 	bl	801e0a4 <sys_arch_protect>
 801547c:	6138      	str	r0, [r7, #16]
 801547e:	6938      	ldr	r0, [r7, #16]
 8015480:	f008 fe1e 	bl	801e0c0 <sys_arch_unprotect>
    return;
 8015484:	e041      	b.n	801550a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015486:	4828      	ldr	r0, [pc, #160]	; (8015528 <mem_free+0x110>)
 8015488:	f008 fdd0 	bl	801e02c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	791b      	ldrb	r3, [r3, #4]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d110      	bne.n	80154b6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015494:	4b1e      	ldr	r3, [pc, #120]	; (8015510 <mem_free+0xf8>)
 8015496:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801549a:	4924      	ldr	r1, [pc, #144]	; (801552c <mem_free+0x114>)
 801549c:	481e      	ldr	r0, [pc, #120]	; (8015518 <mem_free+0x100>)
 801549e:	f009 fc75 	bl	801ed8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80154a2:	4821      	ldr	r0, [pc, #132]	; (8015528 <mem_free+0x110>)
 80154a4:	f008 fdd1 	bl	801e04a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80154a8:	f008 fdfc 	bl	801e0a4 <sys_arch_protect>
 80154ac:	6178      	str	r0, [r7, #20]
 80154ae:	6978      	ldr	r0, [r7, #20]
 80154b0:	f008 fe06 	bl	801e0c0 <sys_arch_unprotect>
    return;
 80154b4:	e029      	b.n	801550a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80154b6:	69f8      	ldr	r0, [r7, #28]
 80154b8:	f7ff ff72 	bl	80153a0 <mem_link_valid>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d110      	bne.n	80154e4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80154c2:	4b13      	ldr	r3, [pc, #76]	; (8015510 <mem_free+0xf8>)
 80154c4:	f240 2295 	movw	r2, #661	; 0x295
 80154c8:	4919      	ldr	r1, [pc, #100]	; (8015530 <mem_free+0x118>)
 80154ca:	4813      	ldr	r0, [pc, #76]	; (8015518 <mem_free+0x100>)
 80154cc:	f009 fc5e 	bl	801ed8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80154d0:	4815      	ldr	r0, [pc, #84]	; (8015528 <mem_free+0x110>)
 80154d2:	f008 fdba 	bl	801e04a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80154d6:	f008 fde5 	bl	801e0a4 <sys_arch_protect>
 80154da:	61b8      	str	r0, [r7, #24]
 80154dc:	69b8      	ldr	r0, [r7, #24]
 80154de:	f008 fdef 	bl	801e0c0 <sys_arch_unprotect>
    return;
 80154e2:	e012      	b.n	801550a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	2200      	movs	r2, #0
 80154e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80154ea:	4b12      	ldr	r3, [pc, #72]	; (8015534 <mem_free+0x11c>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	69fa      	ldr	r2, [r7, #28]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d202      	bcs.n	80154fa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80154f4:	4a0f      	ldr	r2, [pc, #60]	; (8015534 <mem_free+0x11c>)
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80154fa:	69f8      	ldr	r0, [r7, #28]
 80154fc:	f7ff fe60 	bl	80151c0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015500:	4809      	ldr	r0, [pc, #36]	; (8015528 <mem_free+0x110>)
 8015502:	f008 fda2 	bl	801e04a <sys_mutex_unlock>
 8015506:	e000      	b.n	801550a <mem_free+0xf2>
    return;
 8015508:	bf00      	nop
}
 801550a:	3720      	adds	r7, #32
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	08021f00 	.word	0x08021f00
 8015514:	08022058 	.word	0x08022058
 8015518:	08021fb0 	.word	0x08021fb0
 801551c:	20009044 	.word	0x20009044
 8015520:	20009048 	.word	0x20009048
 8015524:	0802207c 	.word	0x0802207c
 8015528:	2000904c 	.word	0x2000904c
 801552c:	08022098 	.word	0x08022098
 8015530:	080220c0 	.word	0x080220c0
 8015534:	20009050 	.word	0x20009050

08015538 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b088      	sub	sp, #32
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	460b      	mov	r3, r1
 8015542:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015544:	887b      	ldrh	r3, [r7, #2]
 8015546:	3303      	adds	r3, #3
 8015548:	b29b      	uxth	r3, r3
 801554a:	f023 0303 	bic.w	r3, r3, #3
 801554e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015550:	8bfb      	ldrh	r3, [r7, #30]
 8015552:	2b0b      	cmp	r3, #11
 8015554:	d801      	bhi.n	801555a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015556:	230c      	movs	r3, #12
 8015558:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801555a:	8bfb      	ldrh	r3, [r7, #30]
 801555c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015560:	d803      	bhi.n	801556a <mem_trim+0x32>
 8015562:	8bfa      	ldrh	r2, [r7, #30]
 8015564:	887b      	ldrh	r3, [r7, #2]
 8015566:	429a      	cmp	r2, r3
 8015568:	d201      	bcs.n	801556e <mem_trim+0x36>
    return NULL;
 801556a:	2300      	movs	r3, #0
 801556c:	e0d8      	b.n	8015720 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801556e:	4b6e      	ldr	r3, [pc, #440]	; (8015728 <mem_trim+0x1f0>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	429a      	cmp	r2, r3
 8015576:	d304      	bcc.n	8015582 <mem_trim+0x4a>
 8015578:	4b6c      	ldr	r3, [pc, #432]	; (801572c <mem_trim+0x1f4>)
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	429a      	cmp	r2, r3
 8015580:	d306      	bcc.n	8015590 <mem_trim+0x58>
 8015582:	4b6b      	ldr	r3, [pc, #428]	; (8015730 <mem_trim+0x1f8>)
 8015584:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015588:	496a      	ldr	r1, [pc, #424]	; (8015734 <mem_trim+0x1fc>)
 801558a:	486b      	ldr	r0, [pc, #428]	; (8015738 <mem_trim+0x200>)
 801558c:	f009 fbfe 	bl	801ed8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015590:	4b65      	ldr	r3, [pc, #404]	; (8015728 <mem_trim+0x1f0>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	429a      	cmp	r2, r3
 8015598:	d304      	bcc.n	80155a4 <mem_trim+0x6c>
 801559a:	4b64      	ldr	r3, [pc, #400]	; (801572c <mem_trim+0x1f4>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d307      	bcc.n	80155b4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80155a4:	f008 fd7e 	bl	801e0a4 <sys_arch_protect>
 80155a8:	60b8      	str	r0, [r7, #8]
 80155aa:	68b8      	ldr	r0, [r7, #8]
 80155ac:	f008 fd88 	bl	801e0c0 <sys_arch_unprotect>
    return rmem;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	e0b5      	b.n	8015720 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	3b08      	subs	r3, #8
 80155b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80155ba:	69b8      	ldr	r0, [r7, #24]
 80155bc:	f7ff fdee 	bl	801519c <mem_to_ptr>
 80155c0:	4603      	mov	r3, r0
 80155c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80155c4:	69bb      	ldr	r3, [r7, #24]
 80155c6:	881a      	ldrh	r2, [r3, #0]
 80155c8:	8afb      	ldrh	r3, [r7, #22]
 80155ca:	1ad3      	subs	r3, r2, r3
 80155cc:	b29b      	uxth	r3, r3
 80155ce:	3b08      	subs	r3, #8
 80155d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80155d2:	8bfa      	ldrh	r2, [r7, #30]
 80155d4:	8abb      	ldrh	r3, [r7, #20]
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d906      	bls.n	80155e8 <mem_trim+0xb0>
 80155da:	4b55      	ldr	r3, [pc, #340]	; (8015730 <mem_trim+0x1f8>)
 80155dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80155e0:	4956      	ldr	r1, [pc, #344]	; (801573c <mem_trim+0x204>)
 80155e2:	4855      	ldr	r0, [pc, #340]	; (8015738 <mem_trim+0x200>)
 80155e4:	f009 fbd2 	bl	801ed8c <iprintf>
  if (newsize > size) {
 80155e8:	8bfa      	ldrh	r2, [r7, #30]
 80155ea:	8abb      	ldrh	r3, [r7, #20]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d901      	bls.n	80155f4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80155f0:	2300      	movs	r3, #0
 80155f2:	e095      	b.n	8015720 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80155f4:	8bfa      	ldrh	r2, [r7, #30]
 80155f6:	8abb      	ldrh	r3, [r7, #20]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d101      	bne.n	8015600 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	e08f      	b.n	8015720 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015600:	484f      	ldr	r0, [pc, #316]	; (8015740 <mem_trim+0x208>)
 8015602:	f008 fd13 	bl	801e02c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	881b      	ldrh	r3, [r3, #0]
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff fdb4 	bl	8015178 <ptr_to_mem>
 8015610:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	791b      	ldrb	r3, [r3, #4]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d13f      	bne.n	801569a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015622:	d106      	bne.n	8015632 <mem_trim+0xfa>
 8015624:	4b42      	ldr	r3, [pc, #264]	; (8015730 <mem_trim+0x1f8>)
 8015626:	f240 22f5 	movw	r2, #757	; 0x2f5
 801562a:	4946      	ldr	r1, [pc, #280]	; (8015744 <mem_trim+0x20c>)
 801562c:	4842      	ldr	r0, [pc, #264]	; (8015738 <mem_trim+0x200>)
 801562e:	f009 fbad 	bl	801ed8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	881b      	ldrh	r3, [r3, #0]
 8015636:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015638:	8afa      	ldrh	r2, [r7, #22]
 801563a:	8bfb      	ldrh	r3, [r7, #30]
 801563c:	4413      	add	r3, r2
 801563e:	b29b      	uxth	r3, r3
 8015640:	3308      	adds	r3, #8
 8015642:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015644:	4b40      	ldr	r3, [pc, #256]	; (8015748 <mem_trim+0x210>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	693a      	ldr	r2, [r7, #16]
 801564a:	429a      	cmp	r2, r3
 801564c:	d106      	bne.n	801565c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801564e:	89fb      	ldrh	r3, [r7, #14]
 8015650:	4618      	mov	r0, r3
 8015652:	f7ff fd91 	bl	8015178 <ptr_to_mem>
 8015656:	4603      	mov	r3, r0
 8015658:	4a3b      	ldr	r2, [pc, #236]	; (8015748 <mem_trim+0x210>)
 801565a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801565c:	89fb      	ldrh	r3, [r7, #14]
 801565e:	4618      	mov	r0, r3
 8015660:	f7ff fd8a 	bl	8015178 <ptr_to_mem>
 8015664:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	2200      	movs	r2, #0
 801566a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	89ba      	ldrh	r2, [r7, #12]
 8015670:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	8afa      	ldrh	r2, [r7, #22]
 8015676:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	89fa      	ldrh	r2, [r7, #14]
 801567c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	881b      	ldrh	r3, [r3, #0]
 8015682:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015686:	d047      	beq.n	8015718 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	881b      	ldrh	r3, [r3, #0]
 801568c:	4618      	mov	r0, r3
 801568e:	f7ff fd73 	bl	8015178 <ptr_to_mem>
 8015692:	4602      	mov	r2, r0
 8015694:	89fb      	ldrh	r3, [r7, #14]
 8015696:	8053      	strh	r3, [r2, #2]
 8015698:	e03e      	b.n	8015718 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801569a:	8bfb      	ldrh	r3, [r7, #30]
 801569c:	f103 0214 	add.w	r2, r3, #20
 80156a0:	8abb      	ldrh	r3, [r7, #20]
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d838      	bhi.n	8015718 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80156a6:	8afa      	ldrh	r2, [r7, #22]
 80156a8:	8bfb      	ldrh	r3, [r7, #30]
 80156aa:	4413      	add	r3, r2
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	3308      	adds	r3, #8
 80156b0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	881b      	ldrh	r3, [r3, #0]
 80156b6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80156ba:	d106      	bne.n	80156ca <mem_trim+0x192>
 80156bc:	4b1c      	ldr	r3, [pc, #112]	; (8015730 <mem_trim+0x1f8>)
 80156be:	f240 3216 	movw	r2, #790	; 0x316
 80156c2:	4920      	ldr	r1, [pc, #128]	; (8015744 <mem_trim+0x20c>)
 80156c4:	481c      	ldr	r0, [pc, #112]	; (8015738 <mem_trim+0x200>)
 80156c6:	f009 fb61 	bl	801ed8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80156ca:	89fb      	ldrh	r3, [r7, #14]
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7ff fd53 	bl	8015178 <ptr_to_mem>
 80156d2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80156d4:	4b1c      	ldr	r3, [pc, #112]	; (8015748 <mem_trim+0x210>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	693a      	ldr	r2, [r7, #16]
 80156da:	429a      	cmp	r2, r3
 80156dc:	d202      	bcs.n	80156e4 <mem_trim+0x1ac>
      lfree = mem2;
 80156de:	4a1a      	ldr	r2, [pc, #104]	; (8015748 <mem_trim+0x210>)
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80156e4:	693b      	ldr	r3, [r7, #16]
 80156e6:	2200      	movs	r2, #0
 80156e8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	881a      	ldrh	r2, [r3, #0]
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	8afa      	ldrh	r2, [r7, #22]
 80156f6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	89fa      	ldrh	r2, [r7, #14]
 80156fc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	881b      	ldrh	r3, [r3, #0]
 8015702:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015706:	d007      	beq.n	8015718 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	4618      	mov	r0, r3
 801570e:	f7ff fd33 	bl	8015178 <ptr_to_mem>
 8015712:	4602      	mov	r2, r0
 8015714:	89fb      	ldrh	r3, [r7, #14]
 8015716:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015718:	4809      	ldr	r0, [pc, #36]	; (8015740 <mem_trim+0x208>)
 801571a:	f008 fc96 	bl	801e04a <sys_mutex_unlock>
  return rmem;
 801571e:	687b      	ldr	r3, [r7, #4]
}
 8015720:	4618      	mov	r0, r3
 8015722:	3720      	adds	r7, #32
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	20009044 	.word	0x20009044
 801572c:	20009048 	.word	0x20009048
 8015730:	08021f00 	.word	0x08021f00
 8015734:	080220f4 	.word	0x080220f4
 8015738:	08021fb0 	.word	0x08021fb0
 801573c:	0802210c 	.word	0x0802210c
 8015740:	2000904c 	.word	0x2000904c
 8015744:	0802212c 	.word	0x0802212c
 8015748:	20009050 	.word	0x20009050

0801574c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b088      	sub	sp, #32
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015756:	88fb      	ldrh	r3, [r7, #6]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d101      	bne.n	8015760 <mem_malloc+0x14>
    return NULL;
 801575c:	2300      	movs	r3, #0
 801575e:	e0e2      	b.n	8015926 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015760:	88fb      	ldrh	r3, [r7, #6]
 8015762:	3303      	adds	r3, #3
 8015764:	b29b      	uxth	r3, r3
 8015766:	f023 0303 	bic.w	r3, r3, #3
 801576a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801576c:	8bbb      	ldrh	r3, [r7, #28]
 801576e:	2b0b      	cmp	r3, #11
 8015770:	d801      	bhi.n	8015776 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8015772:	230c      	movs	r3, #12
 8015774:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015776:	8bbb      	ldrh	r3, [r7, #28]
 8015778:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801577c:	d803      	bhi.n	8015786 <mem_malloc+0x3a>
 801577e:	8bba      	ldrh	r2, [r7, #28]
 8015780:	88fb      	ldrh	r3, [r7, #6]
 8015782:	429a      	cmp	r2, r3
 8015784:	d201      	bcs.n	801578a <mem_malloc+0x3e>
    return NULL;
 8015786:	2300      	movs	r3, #0
 8015788:	e0cd      	b.n	8015926 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801578a:	4869      	ldr	r0, [pc, #420]	; (8015930 <mem_malloc+0x1e4>)
 801578c:	f008 fc4e 	bl	801e02c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015790:	4b68      	ldr	r3, [pc, #416]	; (8015934 <mem_malloc+0x1e8>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff fd01 	bl	801519c <mem_to_ptr>
 801579a:	4603      	mov	r3, r0
 801579c:	83fb      	strh	r3, [r7, #30]
 801579e:	e0b7      	b.n	8015910 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80157a0:	8bfb      	ldrh	r3, [r7, #30]
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7ff fce8 	bl	8015178 <ptr_to_mem>
 80157a8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	791b      	ldrb	r3, [r3, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f040 80a7 	bne.w	8015902 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	881b      	ldrh	r3, [r3, #0]
 80157b8:	461a      	mov	r2, r3
 80157ba:	8bfb      	ldrh	r3, [r7, #30]
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	f1a3 0208 	sub.w	r2, r3, #8
 80157c2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80157c4:	429a      	cmp	r2, r3
 80157c6:	f0c0 809c 	bcc.w	8015902 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	461a      	mov	r2, r3
 80157d0:	8bfb      	ldrh	r3, [r7, #30]
 80157d2:	1ad3      	subs	r3, r2, r3
 80157d4:	f1a3 0208 	sub.w	r2, r3, #8
 80157d8:	8bbb      	ldrh	r3, [r7, #28]
 80157da:	3314      	adds	r3, #20
 80157dc:	429a      	cmp	r2, r3
 80157de:	d333      	bcc.n	8015848 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80157e0:	8bfa      	ldrh	r2, [r7, #30]
 80157e2:	8bbb      	ldrh	r3, [r7, #28]
 80157e4:	4413      	add	r3, r2
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	3308      	adds	r3, #8
 80157ea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80157ec:	8a7b      	ldrh	r3, [r7, #18]
 80157ee:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80157f2:	d106      	bne.n	8015802 <mem_malloc+0xb6>
 80157f4:	4b50      	ldr	r3, [pc, #320]	; (8015938 <mem_malloc+0x1ec>)
 80157f6:	f240 3287 	movw	r2, #903	; 0x387
 80157fa:	4950      	ldr	r1, [pc, #320]	; (801593c <mem_malloc+0x1f0>)
 80157fc:	4850      	ldr	r0, [pc, #320]	; (8015940 <mem_malloc+0x1f4>)
 80157fe:	f009 fac5 	bl	801ed8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8015802:	8a7b      	ldrh	r3, [r7, #18]
 8015804:	4618      	mov	r0, r3
 8015806:	f7ff fcb7 	bl	8015178 <ptr_to_mem>
 801580a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	2200      	movs	r2, #0
 8015810:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	881a      	ldrh	r2, [r3, #0]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	8bfa      	ldrh	r2, [r7, #30]
 801581e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	8a7a      	ldrh	r2, [r7, #18]
 8015824:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	2201      	movs	r2, #1
 801582a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	881b      	ldrh	r3, [r3, #0]
 8015830:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8015834:	d00b      	beq.n	801584e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	881b      	ldrh	r3, [r3, #0]
 801583a:	4618      	mov	r0, r3
 801583c:	f7ff fc9c 	bl	8015178 <ptr_to_mem>
 8015840:	4602      	mov	r2, r0
 8015842:	8a7b      	ldrh	r3, [r7, #18]
 8015844:	8053      	strh	r3, [r2, #2]
 8015846:	e002      	b.n	801584e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2201      	movs	r2, #1
 801584c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801584e:	4b39      	ldr	r3, [pc, #228]	; (8015934 <mem_malloc+0x1e8>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	429a      	cmp	r2, r3
 8015856:	d127      	bne.n	80158a8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8015858:	4b36      	ldr	r3, [pc, #216]	; (8015934 <mem_malloc+0x1e8>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801585e:	e005      	b.n	801586c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	881b      	ldrh	r3, [r3, #0]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff fc87 	bl	8015178 <ptr_to_mem>
 801586a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	791b      	ldrb	r3, [r3, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d004      	beq.n	801587e <mem_malloc+0x132>
 8015874:	4b33      	ldr	r3, [pc, #204]	; (8015944 <mem_malloc+0x1f8>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	69ba      	ldr	r2, [r7, #24]
 801587a:	429a      	cmp	r2, r3
 801587c:	d1f0      	bne.n	8015860 <mem_malloc+0x114>
          }
          lfree = cur;
 801587e:	4a2d      	ldr	r2, [pc, #180]	; (8015934 <mem_malloc+0x1e8>)
 8015880:	69bb      	ldr	r3, [r7, #24]
 8015882:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015884:	4b2b      	ldr	r3, [pc, #172]	; (8015934 <mem_malloc+0x1e8>)
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	4b2e      	ldr	r3, [pc, #184]	; (8015944 <mem_malloc+0x1f8>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	429a      	cmp	r2, r3
 801588e:	d00b      	beq.n	80158a8 <mem_malloc+0x15c>
 8015890:	4b28      	ldr	r3, [pc, #160]	; (8015934 <mem_malloc+0x1e8>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	791b      	ldrb	r3, [r3, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d006      	beq.n	80158a8 <mem_malloc+0x15c>
 801589a:	4b27      	ldr	r3, [pc, #156]	; (8015938 <mem_malloc+0x1ec>)
 801589c:	f240 32b5 	movw	r2, #949	; 0x3b5
 80158a0:	4929      	ldr	r1, [pc, #164]	; (8015948 <mem_malloc+0x1fc>)
 80158a2:	4827      	ldr	r0, [pc, #156]	; (8015940 <mem_malloc+0x1f4>)
 80158a4:	f009 fa72 	bl	801ed8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80158a8:	4821      	ldr	r0, [pc, #132]	; (8015930 <mem_malloc+0x1e4>)
 80158aa:	f008 fbce 	bl	801e04a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80158ae:	8bba      	ldrh	r2, [r7, #28]
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	4413      	add	r3, r2
 80158b4:	3308      	adds	r3, #8
 80158b6:	4a23      	ldr	r2, [pc, #140]	; (8015944 <mem_malloc+0x1f8>)
 80158b8:	6812      	ldr	r2, [r2, #0]
 80158ba:	4293      	cmp	r3, r2
 80158bc:	d906      	bls.n	80158cc <mem_malloc+0x180>
 80158be:	4b1e      	ldr	r3, [pc, #120]	; (8015938 <mem_malloc+0x1ec>)
 80158c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80158c4:	4921      	ldr	r1, [pc, #132]	; (801594c <mem_malloc+0x200>)
 80158c6:	481e      	ldr	r0, [pc, #120]	; (8015940 <mem_malloc+0x1f4>)
 80158c8:	f009 fa60 	bl	801ed8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	f003 0303 	and.w	r3, r3, #3
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d006      	beq.n	80158e4 <mem_malloc+0x198>
 80158d6:	4b18      	ldr	r3, [pc, #96]	; (8015938 <mem_malloc+0x1ec>)
 80158d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80158dc:	491c      	ldr	r1, [pc, #112]	; (8015950 <mem_malloc+0x204>)
 80158de:	4818      	ldr	r0, [pc, #96]	; (8015940 <mem_malloc+0x1f4>)
 80158e0:	f009 fa54 	bl	801ed8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	f003 0303 	and.w	r3, r3, #3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d006      	beq.n	80158fc <mem_malloc+0x1b0>
 80158ee:	4b12      	ldr	r3, [pc, #72]	; (8015938 <mem_malloc+0x1ec>)
 80158f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80158f4:	4917      	ldr	r1, [pc, #92]	; (8015954 <mem_malloc+0x208>)
 80158f6:	4812      	ldr	r0, [pc, #72]	; (8015940 <mem_malloc+0x1f4>)
 80158f8:	f009 fa48 	bl	801ed8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	3308      	adds	r3, #8
 8015900:	e011      	b.n	8015926 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8015902:	8bfb      	ldrh	r3, [r7, #30]
 8015904:	4618      	mov	r0, r3
 8015906:	f7ff fc37 	bl	8015178 <ptr_to_mem>
 801590a:	4603      	mov	r3, r0
 801590c:	881b      	ldrh	r3, [r3, #0]
 801590e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015910:	8bfa      	ldrh	r2, [r7, #30]
 8015912:	8bbb      	ldrh	r3, [r7, #28]
 8015914:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 8015918:	429a      	cmp	r2, r3
 801591a:	f4ff af41 	bcc.w	80157a0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801591e:	4804      	ldr	r0, [pc, #16]	; (8015930 <mem_malloc+0x1e4>)
 8015920:	f008 fb93 	bl	801e04a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015924:	2300      	movs	r3, #0
}
 8015926:	4618      	mov	r0, r3
 8015928:	3720      	adds	r7, #32
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	2000904c 	.word	0x2000904c
 8015934:	20009050 	.word	0x20009050
 8015938:	08021f00 	.word	0x08021f00
 801593c:	0802212c 	.word	0x0802212c
 8015940:	08021fb0 	.word	0x08021fb0
 8015944:	20009048 	.word	0x20009048
 8015948:	08022140 	.word	0x08022140
 801594c:	0802215c 	.word	0x0802215c
 8015950:	0802218c 	.word	0x0802218c
 8015954:	080221bc 	.word	0x080221bc

08015958 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015958:	b480      	push	{r7}
 801595a:	b085      	sub	sp, #20
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	689b      	ldr	r3, [r3, #8]
 8015964:	2200      	movs	r2, #0
 8015966:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	3303      	adds	r3, #3
 801596e:	f023 0303 	bic.w	r3, r3, #3
 8015972:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015974:	2300      	movs	r3, #0
 8015976:	60fb      	str	r3, [r7, #12]
 8015978:	e011      	b.n	801599e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	689b      	ldr	r3, [r3, #8]
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	689b      	ldr	r3, [r3, #8]
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	881b      	ldrh	r3, [r3, #0]
 8015990:	461a      	mov	r2, r3
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	4413      	add	r3, r2
 8015996:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3301      	adds	r3, #1
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	885b      	ldrh	r3, [r3, #2]
 80159a2:	461a      	mov	r2, r3
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	4293      	cmp	r3, r2
 80159a8:	dbe7      	blt.n	801597a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80159aa:	bf00      	nop
 80159ac:	bf00      	nop
 80159ae:	3714      	adds	r7, #20
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr

080159b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b082      	sub	sp, #8
 80159bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80159be:	2300      	movs	r3, #0
 80159c0:	80fb      	strh	r3, [r7, #6]
 80159c2:	e009      	b.n	80159d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80159c4:	88fb      	ldrh	r3, [r7, #6]
 80159c6:	4a08      	ldr	r2, [pc, #32]	; (80159e8 <memp_init+0x30>)
 80159c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7ff ffc3 	bl	8015958 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80159d2:	88fb      	ldrh	r3, [r7, #6]
 80159d4:	3301      	adds	r3, #1
 80159d6:	80fb      	strh	r3, [r7, #6]
 80159d8:	88fb      	ldrh	r3, [r7, #6]
 80159da:	2b0c      	cmp	r3, #12
 80159dc:	d9f2      	bls.n	80159c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80159de:	bf00      	nop
 80159e0:	bf00      	nop
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	08024e48 	.word	0x08024e48

080159ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b084      	sub	sp, #16
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80159f4:	f008 fb56 	bl	801e0a4 <sys_arch_protect>
 80159f8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	689b      	ldr	r3, [r3, #8]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d015      	beq.n	8015a34 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	68ba      	ldr	r2, [r7, #8]
 8015a0e:	6812      	ldr	r2, [r2, #0]
 8015a10:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	f003 0303 	and.w	r3, r3, #3
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d006      	beq.n	8015a2a <do_memp_malloc_pool+0x3e>
 8015a1c:	4b09      	ldr	r3, [pc, #36]	; (8015a44 <do_memp_malloc_pool+0x58>)
 8015a1e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8015a22:	4909      	ldr	r1, [pc, #36]	; (8015a48 <do_memp_malloc_pool+0x5c>)
 8015a24:	4809      	ldr	r0, [pc, #36]	; (8015a4c <do_memp_malloc_pool+0x60>)
 8015a26:	f009 f9b1 	bl	801ed8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015a2a:	68f8      	ldr	r0, [r7, #12]
 8015a2c:	f008 fb48 	bl	801e0c0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	e003      	b.n	8015a3c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	f008 fb43 	bl	801e0c0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015a3a:	2300      	movs	r3, #0
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3710      	adds	r7, #16
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	080221e0 	.word	0x080221e0
 8015a48:	08022278 	.word	0x08022278
 8015a4c:	0802229c 	.word	0x0802229c

08015a50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d106      	bne.n	8015a6c <memp_malloc_pool+0x1c>
 8015a5e:	4b0a      	ldr	r3, [pc, #40]	; (8015a88 <memp_malloc_pool+0x38>)
 8015a60:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015a64:	4909      	ldr	r1, [pc, #36]	; (8015a8c <memp_malloc_pool+0x3c>)
 8015a66:	480a      	ldr	r0, [pc, #40]	; (8015a90 <memp_malloc_pool+0x40>)
 8015a68:	f009 f990 	bl	801ed8c <iprintf>
  if (desc == NULL) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d101      	bne.n	8015a76 <memp_malloc_pool+0x26>
    return NULL;
 8015a72:	2300      	movs	r3, #0
 8015a74:	e003      	b.n	8015a7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f7ff ffb8 	bl	80159ec <do_memp_malloc_pool>
 8015a7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3708      	adds	r7, #8
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	080221e0 	.word	0x080221e0
 8015a8c:	080222c4 	.word	0x080222c4
 8015a90:	0802229c 	.word	0x0802229c

08015a94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b084      	sub	sp, #16
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015a9e:	79fb      	ldrb	r3, [r7, #7]
 8015aa0:	2b0c      	cmp	r3, #12
 8015aa2:	d908      	bls.n	8015ab6 <memp_malloc+0x22>
 8015aa4:	4b0a      	ldr	r3, [pc, #40]	; (8015ad0 <memp_malloc+0x3c>)
 8015aa6:	f240 1257 	movw	r2, #343	; 0x157
 8015aaa:	490a      	ldr	r1, [pc, #40]	; (8015ad4 <memp_malloc+0x40>)
 8015aac:	480a      	ldr	r0, [pc, #40]	; (8015ad8 <memp_malloc+0x44>)
 8015aae:	f009 f96d 	bl	801ed8c <iprintf>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	e008      	b.n	8015ac8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015ab6:	79fb      	ldrb	r3, [r7, #7]
 8015ab8:	4a08      	ldr	r2, [pc, #32]	; (8015adc <memp_malloc+0x48>)
 8015aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7ff ff94 	bl	80159ec <do_memp_malloc_pool>
 8015ac4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	080221e0 	.word	0x080221e0
 8015ad4:	080222d8 	.word	0x080222d8
 8015ad8:	0802229c 	.word	0x0802229c
 8015adc:	08024e48 	.word	0x08024e48

08015ae0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	f003 0303 	and.w	r3, r3, #3
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d006      	beq.n	8015b02 <do_memp_free_pool+0x22>
 8015af4:	4b0d      	ldr	r3, [pc, #52]	; (8015b2c <do_memp_free_pool+0x4c>)
 8015af6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015afa:	490d      	ldr	r1, [pc, #52]	; (8015b30 <do_memp_free_pool+0x50>)
 8015afc:	480d      	ldr	r0, [pc, #52]	; (8015b34 <do_memp_free_pool+0x54>)
 8015afe:	f009 f945 	bl	801ed8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8015b06:	f008 facd 	bl	801e0a4 <sys_arch_protect>
 8015b0a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	689b      	ldr	r3, [r3, #8]
 8015b10:	681a      	ldr	r2, [r3, #0]
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015b1e:	68b8      	ldr	r0, [r7, #8]
 8015b20:	f008 face 	bl	801e0c0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8015b24:	bf00      	nop
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	080221e0 	.word	0x080221e0
 8015b30:	080222f8 	.word	0x080222f8
 8015b34:	0802229c 	.word	0x0802229c

08015b38 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d106      	bne.n	8015b56 <memp_free_pool+0x1e>
 8015b48:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <memp_free_pool+0x3c>)
 8015b4a:	f240 1295 	movw	r2, #405	; 0x195
 8015b4e:	490a      	ldr	r1, [pc, #40]	; (8015b78 <memp_free_pool+0x40>)
 8015b50:	480a      	ldr	r0, [pc, #40]	; (8015b7c <memp_free_pool+0x44>)
 8015b52:	f009 f91b 	bl	801ed8c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d007      	beq.n	8015b6c <memp_free_pool+0x34>
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d004      	beq.n	8015b6c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f7ff ffbb 	bl	8015ae0 <do_memp_free_pool>
 8015b6a:	e000      	b.n	8015b6e <memp_free_pool+0x36>
    return;
 8015b6c:	bf00      	nop
}
 8015b6e:	3708      	adds	r7, #8
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	080221e0 	.word	0x080221e0
 8015b78:	080222c4 	.word	0x080222c4
 8015b7c:	0802229c 	.word	0x0802229c

08015b80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	4603      	mov	r3, r0
 8015b88:	6039      	str	r1, [r7, #0]
 8015b8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015b8c:	79fb      	ldrb	r3, [r7, #7]
 8015b8e:	2b0c      	cmp	r3, #12
 8015b90:	d907      	bls.n	8015ba2 <memp_free+0x22>
 8015b92:	4b0c      	ldr	r3, [pc, #48]	; (8015bc4 <memp_free+0x44>)
 8015b94:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015b98:	490b      	ldr	r1, [pc, #44]	; (8015bc8 <memp_free+0x48>)
 8015b9a:	480c      	ldr	r0, [pc, #48]	; (8015bcc <memp_free+0x4c>)
 8015b9c:	f009 f8f6 	bl	801ed8c <iprintf>
 8015ba0:	e00c      	b.n	8015bbc <memp_free+0x3c>

  if (mem == NULL) {
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d008      	beq.n	8015bba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015ba8:	79fb      	ldrb	r3, [r7, #7]
 8015baa:	4a09      	ldr	r2, [pc, #36]	; (8015bd0 <memp_free+0x50>)
 8015bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bb0:	6839      	ldr	r1, [r7, #0]
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f7ff ff94 	bl	8015ae0 <do_memp_free_pool>
 8015bb8:	e000      	b.n	8015bbc <memp_free+0x3c>
    return;
 8015bba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015bbc:	3708      	adds	r7, #8
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	080221e0 	.word	0x080221e0
 8015bc8:	08022318 	.word	0x08022318
 8015bcc:	0802229c 	.word	0x0802229c
 8015bd0:	08024e48 	.word	0x08024e48

08015bd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015bd8:	bf00      	nop
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be0:	4770      	bx	lr
	...

08015be4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	60b9      	str	r1, [r7, #8]
 8015bee:	607a      	str	r2, [r7, #4]
 8015bf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d108      	bne.n	8015c0a <netif_add+0x26>
 8015bf8:	4b5b      	ldr	r3, [pc, #364]	; (8015d68 <netif_add+0x184>)
 8015bfa:	f240 1227 	movw	r2, #295	; 0x127
 8015bfe:	495b      	ldr	r1, [pc, #364]	; (8015d6c <netif_add+0x188>)
 8015c00:	485b      	ldr	r0, [pc, #364]	; (8015d70 <netif_add+0x18c>)
 8015c02:	f009 f8c3 	bl	801ed8c <iprintf>
 8015c06:	2300      	movs	r3, #0
 8015c08:	e0a9      	b.n	8015d5e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d108      	bne.n	8015c22 <netif_add+0x3e>
 8015c10:	4b55      	ldr	r3, [pc, #340]	; (8015d68 <netif_add+0x184>)
 8015c12:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015c16:	4957      	ldr	r1, [pc, #348]	; (8015d74 <netif_add+0x190>)
 8015c18:	4855      	ldr	r0, [pc, #340]	; (8015d70 <netif_add+0x18c>)
 8015c1a:	f009 f8b7 	bl	801ed8c <iprintf>
 8015c1e:	2300      	movs	r3, #0
 8015c20:	e09d      	b.n	8015d5e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d101      	bne.n	8015c2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015c28:	4b53      	ldr	r3, [pc, #332]	; (8015d78 <netif_add+0x194>)
 8015c2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d101      	bne.n	8015c36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015c32:	4b51      	ldr	r3, [pc, #324]	; (8015d78 <netif_add+0x194>)
 8015c34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d101      	bne.n	8015c40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015c3c:	4b4e      	ldr	r3, [pc, #312]	; (8015d78 <netif_add+0x194>)
 8015c3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2200      	movs	r2, #0
 8015c44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	4a49      	ldr	r2, [pc, #292]	; (8015d7c <netif_add+0x198>)
 8015c56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2200      	movs	r2, #0
 8015c62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	3324      	adds	r3, #36	; 0x24
 8015c6a:	2204      	movs	r2, #4
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f009 f884 	bl	801ed7c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2200      	movs	r2, #0
 8015c78:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	6a3a      	ldr	r2, [r7, #32]
 8015c7e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015c80:	4b3f      	ldr	r3, [pc, #252]	; (8015d80 <netif_add+0x19c>)
 8015c82:	781a      	ldrb	r2, [r3, #0]
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c8e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	68f8      	ldr	r0, [r7, #12]
 8015c98:	f000 f914 	bl	8015ec4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	4798      	blx	r3
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d001      	beq.n	8015cac <netif_add+0xc8>
    return NULL;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	e058      	b.n	8015d5e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015cb2:	2bff      	cmp	r3, #255	; 0xff
 8015cb4:	d103      	bne.n	8015cbe <netif_add+0xda>
        netif->num = 0;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2200      	movs	r2, #0
 8015cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015cc2:	4b30      	ldr	r3, [pc, #192]	; (8015d84 <netif_add+0x1a0>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	617b      	str	r3, [r7, #20]
 8015cc8:	e02b      	b.n	8015d22 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015cca:	697a      	ldr	r2, [r7, #20]
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d106      	bne.n	8015ce0 <netif_add+0xfc>
 8015cd2:	4b25      	ldr	r3, [pc, #148]	; (8015d68 <netif_add+0x184>)
 8015cd4:	f240 128b 	movw	r2, #395	; 0x18b
 8015cd8:	492b      	ldr	r1, [pc, #172]	; (8015d88 <netif_add+0x1a4>)
 8015cda:	4825      	ldr	r0, [pc, #148]	; (8015d70 <netif_add+0x18c>)
 8015cdc:	f009 f856 	bl	801ed8c <iprintf>
        num_netifs++;
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	2bff      	cmp	r3, #255	; 0xff
 8015cea:	dd06      	ble.n	8015cfa <netif_add+0x116>
 8015cec:	4b1e      	ldr	r3, [pc, #120]	; (8015d68 <netif_add+0x184>)
 8015cee:	f240 128d 	movw	r2, #397	; 0x18d
 8015cf2:	4926      	ldr	r1, [pc, #152]	; (8015d8c <netif_add+0x1a8>)
 8015cf4:	481e      	ldr	r0, [pc, #120]	; (8015d70 <netif_add+0x18c>)
 8015cf6:	f009 f849 	bl	801ed8c <iprintf>
        if (netif2->num == netif->num) {
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d108      	bne.n	8015d1c <netif_add+0x138>
          netif->num++;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d10:	3301      	adds	r3, #1
 8015d12:	b2da      	uxtb	r2, r3
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8015d1a:	e005      	b.n	8015d28 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	617b      	str	r3, [r7, #20]
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d1d0      	bne.n	8015cca <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1be      	bne.n	8015cac <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d34:	2bfe      	cmp	r3, #254	; 0xfe
 8015d36:	d103      	bne.n	8015d40 <netif_add+0x15c>
    netif_num = 0;
 8015d38:	4b11      	ldr	r3, [pc, #68]	; (8015d80 <netif_add+0x19c>)
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	701a      	strb	r2, [r3, #0]
 8015d3e:	e006      	b.n	8015d4e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d46:	3301      	adds	r3, #1
 8015d48:	b2da      	uxtb	r2, r3
 8015d4a:	4b0d      	ldr	r3, [pc, #52]	; (8015d80 <netif_add+0x19c>)
 8015d4c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015d4e:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <netif_add+0x1a0>)
 8015d50:	681a      	ldr	r2, [r3, #0]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015d56:	4a0b      	ldr	r2, [pc, #44]	; (8015d84 <netif_add+0x1a0>)
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3718      	adds	r7, #24
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	08022334 	.word	0x08022334
 8015d6c:	08022430 	.word	0x08022430
 8015d70:	080223ec 	.word	0x080223ec
 8015d74:	0802244c 	.word	0x0802244c
 8015d78:	08024da4 	.word	0x08024da4
 8015d7c:	080161a7 	.word	0x080161a7
 8015d80:	20009088 	.word	0x20009088
 8015d84:	20010364 	.word	0x20010364
 8015d88:	08022470 	.word	0x08022470
 8015d8c:	08022484 	.word	0x08022484

08015d90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015d9a:	6839      	ldr	r1, [r7, #0]
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f002 fe67 	bl	8018a70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f007 fedf 	bl	801db68 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015daa:	bf00      	nop
 8015dac:	3708      	adds	r7, #8
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
	...

08015db4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b086      	sub	sp, #24
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d106      	bne.n	8015dd4 <netif_do_set_ipaddr+0x20>
 8015dc6:	4b1d      	ldr	r3, [pc, #116]	; (8015e3c <netif_do_set_ipaddr+0x88>)
 8015dc8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015dcc:	491c      	ldr	r1, [pc, #112]	; (8015e40 <netif_do_set_ipaddr+0x8c>)
 8015dce:	481d      	ldr	r0, [pc, #116]	; (8015e44 <netif_do_set_ipaddr+0x90>)
 8015dd0:	f008 ffdc 	bl	801ed8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d106      	bne.n	8015de8 <netif_do_set_ipaddr+0x34>
 8015dda:	4b18      	ldr	r3, [pc, #96]	; (8015e3c <netif_do_set_ipaddr+0x88>)
 8015ddc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015de0:	4917      	ldr	r1, [pc, #92]	; (8015e40 <netif_do_set_ipaddr+0x8c>)
 8015de2:	4818      	ldr	r0, [pc, #96]	; (8015e44 <netif_do_set_ipaddr+0x90>)
 8015de4:	f008 ffd2 	bl	801ed8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	3304      	adds	r3, #4
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d01c      	beq.n	8015e30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	3304      	adds	r3, #4
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015e06:	f107 0314 	add.w	r3, r7, #20
 8015e0a:	4619      	mov	r1, r3
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f7ff ffbf 	bl	8015d90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d002      	beq.n	8015e1e <netif_do_set_ipaddr+0x6a>
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	e000      	b.n	8015e20 <netif_do_set_ipaddr+0x6c>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	68fa      	ldr	r2, [r7, #12]
 8015e22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015e24:	2101      	movs	r1, #1
 8015e26:	68f8      	ldr	r0, [r7, #12]
 8015e28:	f000 f8d2 	bl	8015fd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	e000      	b.n	8015e32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3718      	adds	r7, #24
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	08022334 	.word	0x08022334
 8015e40:	080224b4 	.word	0x080224b4
 8015e44:	080223ec 	.word	0x080223ec

08015e48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b085      	sub	sp, #20
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	3308      	adds	r3, #8
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d00a      	beq.n	8015e78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d002      	beq.n	8015e6e <netif_do_set_netmask+0x26>
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	e000      	b.n	8015e70 <netif_do_set_netmask+0x28>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	68fa      	ldr	r2, [r7, #12]
 8015e72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015e74:	2301      	movs	r3, #1
 8015e76:	e000      	b.n	8015e7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015e78:	2300      	movs	r3, #0
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3714      	adds	r7, #20
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr

08015e86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015e86:	b480      	push	{r7}
 8015e88:	b085      	sub	sp, #20
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	60f8      	str	r0, [r7, #12]
 8015e8e:	60b9      	str	r1, [r7, #8]
 8015e90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	330c      	adds	r3, #12
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d00a      	beq.n	8015eb6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d002      	beq.n	8015eac <netif_do_set_gw+0x26>
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	e000      	b.n	8015eae <netif_do_set_gw+0x28>
 8015eac:	2300      	movs	r3, #0
 8015eae:	68fa      	ldr	r2, [r7, #12]
 8015eb0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	e000      	b.n	8015eb8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015eb6:	2300      	movs	r3, #0
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec2:	4770      	bx	lr

08015ec4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b088      	sub	sp, #32
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
 8015ed0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d101      	bne.n	8015ee4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015ee0:	4b1c      	ldr	r3, [pc, #112]	; (8015f54 <netif_set_addr+0x90>)
 8015ee2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d101      	bne.n	8015eee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015eea:	4b1a      	ldr	r3, [pc, #104]	; (8015f54 <netif_set_addr+0x90>)
 8015eec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d101      	bne.n	8015ef8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015ef4:	4b17      	ldr	r3, [pc, #92]	; (8015f54 <netif_set_addr+0x90>)
 8015ef6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <netif_set_addr+0x42>
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d101      	bne.n	8015f0a <netif_set_addr+0x46>
 8015f06:	2301      	movs	r3, #1
 8015f08:	e000      	b.n	8015f0c <netif_set_addr+0x48>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d006      	beq.n	8015f22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015f14:	f107 0310 	add.w	r3, r7, #16
 8015f18:	461a      	mov	r2, r3
 8015f1a:	68b9      	ldr	r1, [r7, #8]
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7ff ff49 	bl	8015db4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015f22:	69fa      	ldr	r2, [r7, #28]
 8015f24:	6879      	ldr	r1, [r7, #4]
 8015f26:	68f8      	ldr	r0, [r7, #12]
 8015f28:	f7ff ff8e 	bl	8015e48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015f2c:	69ba      	ldr	r2, [r7, #24]
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	68f8      	ldr	r0, [r7, #12]
 8015f32:	f7ff ffa8 	bl	8015e86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d106      	bne.n	8015f4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015f3c:	f107 0310 	add.w	r3, r7, #16
 8015f40:	461a      	mov	r2, r3
 8015f42:	68b9      	ldr	r1, [r7, #8]
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f7ff ff35 	bl	8015db4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015f4a:	bf00      	nop
 8015f4c:	3720      	adds	r7, #32
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	08024da4 	.word	0x08024da4

08015f58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015f60:	4a04      	ldr	r2, [pc, #16]	; (8015f74 <netif_set_default+0x1c>)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015f66:	bf00      	nop
 8015f68:	370c      	adds	r7, #12
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f70:	4770      	bx	lr
 8015f72:	bf00      	nop
 8015f74:	20010368 	.word	0x20010368

08015f78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d107      	bne.n	8015f96 <netif_set_up+0x1e>
 8015f86:	4b0f      	ldr	r3, [pc, #60]	; (8015fc4 <netif_set_up+0x4c>)
 8015f88:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015f8c:	490e      	ldr	r1, [pc, #56]	; (8015fc8 <netif_set_up+0x50>)
 8015f8e:	480f      	ldr	r0, [pc, #60]	; (8015fcc <netif_set_up+0x54>)
 8015f90:	f008 fefc 	bl	801ed8c <iprintf>
 8015f94:	e013      	b.n	8015fbe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f9c:	f003 0301 	and.w	r3, r3, #1
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d10c      	bne.n	8015fbe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015faa:	f043 0301 	orr.w	r3, r3, #1
 8015fae:	b2da      	uxtb	r2, r3
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015fb6:	2103      	movs	r1, #3
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 f809 	bl	8015fd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	08022334 	.word	0x08022334
 8015fc8:	08022524 	.word	0x08022524
 8015fcc:	080223ec 	.word	0x080223ec

08015fd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	460b      	mov	r3, r1
 8015fda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d106      	bne.n	8015ff0 <netif_issue_reports+0x20>
 8015fe2:	4b18      	ldr	r3, [pc, #96]	; (8016044 <netif_issue_reports+0x74>)
 8015fe4:	f240 326d 	movw	r2, #877	; 0x36d
 8015fe8:	4917      	ldr	r1, [pc, #92]	; (8016048 <netif_issue_reports+0x78>)
 8015fea:	4818      	ldr	r0, [pc, #96]	; (801604c <netif_issue_reports+0x7c>)
 8015fec:	f008 fece 	bl	801ed8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ff6:	f003 0304 	and.w	r3, r3, #4
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d01e      	beq.n	801603c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016004:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016008:	2b00      	cmp	r3, #0
 801600a:	d017      	beq.n	801603c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801600c:	78fb      	ldrb	r3, [r7, #3]
 801600e:	f003 0301 	and.w	r3, r3, #1
 8016012:	2b00      	cmp	r3, #0
 8016014:	d013      	beq.n	801603e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	3304      	adds	r3, #4
 801601a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801601c:	2b00      	cmp	r3, #0
 801601e:	d00e      	beq.n	801603e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016026:	f003 0308 	and.w	r3, r3, #8
 801602a:	2b00      	cmp	r3, #0
 801602c:	d007      	beq.n	801603e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	3304      	adds	r3, #4
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7fd fc6f 	bl	8013918 <etharp_request>
 801603a:	e000      	b.n	801603e <netif_issue_reports+0x6e>
    return;
 801603c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801603e:	3708      	adds	r7, #8
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	08022334 	.word	0x08022334
 8016048:	08022540 	.word	0x08022540
 801604c:	080223ec 	.word	0x080223ec

08016050 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d107      	bne.n	801606e <netif_set_down+0x1e>
 801605e:	4b12      	ldr	r3, [pc, #72]	; (80160a8 <netif_set_down+0x58>)
 8016060:	f240 329b 	movw	r2, #923	; 0x39b
 8016064:	4911      	ldr	r1, [pc, #68]	; (80160ac <netif_set_down+0x5c>)
 8016066:	4812      	ldr	r0, [pc, #72]	; (80160b0 <netif_set_down+0x60>)
 8016068:	f008 fe90 	bl	801ed8c <iprintf>
 801606c:	e019      	b.n	80160a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016074:	f003 0301 	and.w	r3, r3, #1
 8016078:	2b00      	cmp	r3, #0
 801607a:	d012      	beq.n	80160a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016082:	f023 0301 	bic.w	r3, r3, #1
 8016086:	b2da      	uxtb	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016094:	f003 0308 	and.w	r3, r3, #8
 8016098:	2b00      	cmp	r3, #0
 801609a:	d002      	beq.n	80160a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f7fc fff5 	bl	801308c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	08022334 	.word	0x08022334
 80160ac:	08022564 	.word	0x08022564
 80160b0:	080223ec 	.word	0x080223ec

080160b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d107      	bne.n	80160d2 <netif_set_link_up+0x1e>
 80160c2:	4b15      	ldr	r3, [pc, #84]	; (8016118 <netif_set_link_up+0x64>)
 80160c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80160c8:	4914      	ldr	r1, [pc, #80]	; (801611c <netif_set_link_up+0x68>)
 80160ca:	4815      	ldr	r0, [pc, #84]	; (8016120 <netif_set_link_up+0x6c>)
 80160cc:	f008 fe5e 	bl	801ed8c <iprintf>
 80160d0:	e01e      	b.n	8016110 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160d8:	f003 0304 	and.w	r3, r3, #4
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d117      	bne.n	8016110 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160e6:	f043 0304 	orr.w	r3, r3, #4
 80160ea:	b2da      	uxtb	r2, r3
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7fb fa3a 	bl	801156c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80160f8:	2103      	movs	r1, #3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f7ff ff68 	bl	8015fd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	69db      	ldr	r3, [r3, #28]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d003      	beq.n	8016110 <netif_set_link_up+0x5c>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	69db      	ldr	r3, [r3, #28]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016110:	3708      	adds	r7, #8
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	08022334 	.word	0x08022334
 801611c:	08022584 	.word	0x08022584
 8016120:	080223ec 	.word	0x080223ec

08016124 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d107      	bne.n	8016142 <netif_set_link_down+0x1e>
 8016132:	4b11      	ldr	r3, [pc, #68]	; (8016178 <netif_set_link_down+0x54>)
 8016134:	f240 4206 	movw	r2, #1030	; 0x406
 8016138:	4910      	ldr	r1, [pc, #64]	; (801617c <netif_set_link_down+0x58>)
 801613a:	4811      	ldr	r0, [pc, #68]	; (8016180 <netif_set_link_down+0x5c>)
 801613c:	f008 fe26 	bl	801ed8c <iprintf>
 8016140:	e017      	b.n	8016172 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016148:	f003 0304 	and.w	r3, r3, #4
 801614c:	2b00      	cmp	r3, #0
 801614e:	d010      	beq.n	8016172 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016156:	f023 0304 	bic.w	r3, r3, #4
 801615a:	b2da      	uxtb	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	69db      	ldr	r3, [r3, #28]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d003      	beq.n	8016172 <netif_set_link_down+0x4e>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	69db      	ldr	r3, [r3, #28]
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016172:	3708      	adds	r7, #8
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	08022334 	.word	0x08022334
 801617c:	080225a8 	.word	0x080225a8
 8016180:	080223ec 	.word	0x080223ec

08016184 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016184:	b480      	push	{r7}
 8016186:	b083      	sub	sp, #12
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d002      	beq.n	801619a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	683a      	ldr	r2, [r7, #0]
 8016198:	61da      	str	r2, [r3, #28]
  }
}
 801619a:	bf00      	nop
 801619c:	370c      	adds	r7, #12
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr

080161a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80161a6:	b480      	push	{r7}
 80161a8:	b085      	sub	sp, #20
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	60f8      	str	r0, [r7, #12]
 80161ae:	60b9      	str	r1, [r7, #8]
 80161b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80161b2:	f06f 030b 	mvn.w	r3, #11
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3714      	adds	r7, #20
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr
	...

080161c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80161c4:	b480      	push	{r7}
 80161c6:	b085      	sub	sp, #20
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	4603      	mov	r3, r0
 80161cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80161ce:	79fb      	ldrb	r3, [r7, #7]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d013      	beq.n	80161fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80161d4:	4b0d      	ldr	r3, [pc, #52]	; (801620c <netif_get_by_index+0x48>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	60fb      	str	r3, [r7, #12]
 80161da:	e00c      	b.n	80161f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80161e2:	3301      	adds	r3, #1
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	79fa      	ldrb	r2, [r7, #7]
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d101      	bne.n	80161f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	e006      	b.n	80161fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	60fb      	str	r3, [r7, #12]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d1ef      	bne.n	80161dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80161fc:	2300      	movs	r3, #0
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3714      	adds	r7, #20
 8016202:	46bd      	mov	sp, r7
 8016204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016208:	4770      	bx	lr
 801620a:	bf00      	nop
 801620c:	20010364 	.word	0x20010364

08016210 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b082      	sub	sp, #8
 8016214:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016216:	f007 ff45 	bl	801e0a4 <sys_arch_protect>
 801621a:	6038      	str	r0, [r7, #0]
 801621c:	4b0d      	ldr	r3, [pc, #52]	; (8016254 <pbuf_free_ooseq+0x44>)
 801621e:	2200      	movs	r2, #0
 8016220:	701a      	strb	r2, [r3, #0]
 8016222:	6838      	ldr	r0, [r7, #0]
 8016224:	f007 ff4c 	bl	801e0c0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016228:	4b0b      	ldr	r3, [pc, #44]	; (8016258 <pbuf_free_ooseq+0x48>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	607b      	str	r3, [r7, #4]
 801622e:	e00a      	b.n	8016246 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016234:	2b00      	cmp	r3, #0
 8016236:	d003      	beq.n	8016240 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f002 fc57 	bl	8018aec <tcp_free_ooseq>
      return;
 801623e:	e005      	b.n	801624c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	607b      	str	r3, [r7, #4]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d1f1      	bne.n	8016230 <pbuf_free_ooseq+0x20>
    }
  }
}
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	2001036c 	.word	0x2001036c
 8016258:	20010374 	.word	0x20010374

0801625c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016264:	f7ff ffd4 	bl	8016210 <pbuf_free_ooseq>
}
 8016268:	bf00      	nop
 801626a:	3708      	adds	r7, #8
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8016276:	f007 ff15 	bl	801e0a4 <sys_arch_protect>
 801627a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801627c:	4b0f      	ldr	r3, [pc, #60]	; (80162bc <pbuf_pool_is_empty+0x4c>)
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016282:	4b0e      	ldr	r3, [pc, #56]	; (80162bc <pbuf_pool_is_empty+0x4c>)
 8016284:	2201      	movs	r2, #1
 8016286:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f007 ff19 	bl	801e0c0 <sys_arch_unprotect>

  if (!queued) {
 801628e:	78fb      	ldrb	r3, [r7, #3]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d10f      	bne.n	80162b4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016294:	2100      	movs	r1, #0
 8016296:	480a      	ldr	r0, [pc, #40]	; (80162c0 <pbuf_pool_is_empty+0x50>)
 8016298:	f7fa fccc 	bl	8010c34 <tcpip_try_callback>
 801629c:	4603      	mov	r3, r0
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d008      	beq.n	80162b4 <pbuf_pool_is_empty+0x44>
 80162a2:	f007 feff 	bl	801e0a4 <sys_arch_protect>
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	4b04      	ldr	r3, [pc, #16]	; (80162bc <pbuf_pool_is_empty+0x4c>)
 80162aa:	2200      	movs	r2, #0
 80162ac:	701a      	strb	r2, [r3, #0]
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f007 ff06 	bl	801e0c0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80162b4:	bf00      	nop
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	2001036c 	.word	0x2001036c
 80162c0:	0801625d 	.word	0x0801625d

080162c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	4611      	mov	r1, r2
 80162d0:	461a      	mov	r2, r3
 80162d2:	460b      	mov	r3, r1
 80162d4:	80fb      	strh	r3, [r7, #6]
 80162d6:	4613      	mov	r3, r2
 80162d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	68ba      	ldr	r2, [r7, #8]
 80162e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	88fa      	ldrh	r2, [r7, #6]
 80162ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	88ba      	ldrh	r2, [r7, #4]
 80162f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80162f2:	8b3b      	ldrh	r3, [r7, #24]
 80162f4:	b2da      	uxtb	r2, r3
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7f3a      	ldrb	r2, [r7, #28]
 80162fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2201      	movs	r2, #1
 8016304:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2200      	movs	r2, #0
 801630a:	73da      	strb	r2, [r3, #15]
}
 801630c:	bf00      	nop
 801630e:	3714      	adds	r7, #20
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr

08016318 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b08c      	sub	sp, #48	; 0x30
 801631c:	af02      	add	r7, sp, #8
 801631e:	4603      	mov	r3, r0
 8016320:	71fb      	strb	r3, [r7, #7]
 8016322:	460b      	mov	r3, r1
 8016324:	80bb      	strh	r3, [r7, #4]
 8016326:	4613      	mov	r3, r2
 8016328:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801632a:	79fb      	ldrb	r3, [r7, #7]
 801632c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801632e:	887b      	ldrh	r3, [r7, #2]
 8016330:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016334:	d07f      	beq.n	8016436 <pbuf_alloc+0x11e>
 8016336:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801633a:	f300 80c8 	bgt.w	80164ce <pbuf_alloc+0x1b6>
 801633e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016342:	d010      	beq.n	8016366 <pbuf_alloc+0x4e>
 8016344:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016348:	f300 80c1 	bgt.w	80164ce <pbuf_alloc+0x1b6>
 801634c:	2b01      	cmp	r3, #1
 801634e:	d002      	beq.n	8016356 <pbuf_alloc+0x3e>
 8016350:	2b41      	cmp	r3, #65	; 0x41
 8016352:	f040 80bc 	bne.w	80164ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016356:	887a      	ldrh	r2, [r7, #2]
 8016358:	88bb      	ldrh	r3, [r7, #4]
 801635a:	4619      	mov	r1, r3
 801635c:	2000      	movs	r0, #0
 801635e:	f000 f8d1 	bl	8016504 <pbuf_alloc_reference>
 8016362:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016364:	e0bd      	b.n	80164e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016366:	2300      	movs	r3, #0
 8016368:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801636a:	2300      	movs	r3, #0
 801636c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801636e:	88bb      	ldrh	r3, [r7, #4]
 8016370:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016372:	200c      	movs	r0, #12
 8016374:	f7ff fb8e 	bl	8015a94 <memp_malloc>
 8016378:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d109      	bne.n	8016394 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016380:	f7ff ff76 	bl	8016270 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016386:	2b00      	cmp	r3, #0
 8016388:	d002      	beq.n	8016390 <pbuf_alloc+0x78>
            pbuf_free(p);
 801638a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801638c:	f000 faa8 	bl	80168e0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016390:	2300      	movs	r3, #0
 8016392:	e0a7      	b.n	80164e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016396:	3303      	adds	r3, #3
 8016398:	b29b      	uxth	r3, r3
 801639a:	f023 0303 	bic.w	r3, r3, #3
 801639e:	b29b      	uxth	r3, r3
 80163a0:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	8b7a      	ldrh	r2, [r7, #26]
 80163a8:	4293      	cmp	r3, r2
 80163aa:	bf28      	it	cs
 80163ac:	4613      	movcs	r3, r2
 80163ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80163b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163b2:	3310      	adds	r3, #16
 80163b4:	693a      	ldr	r2, [r7, #16]
 80163b6:	4413      	add	r3, r2
 80163b8:	3303      	adds	r3, #3
 80163ba:	f023 0303 	bic.w	r3, r3, #3
 80163be:	4618      	mov	r0, r3
 80163c0:	89f9      	ldrh	r1, [r7, #14]
 80163c2:	8b7a      	ldrh	r2, [r7, #26]
 80163c4:	2300      	movs	r3, #0
 80163c6:	9301      	str	r3, [sp, #4]
 80163c8:	887b      	ldrh	r3, [r7, #2]
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	460b      	mov	r3, r1
 80163ce:	4601      	mov	r1, r0
 80163d0:	6938      	ldr	r0, [r7, #16]
 80163d2:	f7ff ff77 	bl	80162c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	f003 0303 	and.w	r3, r3, #3
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d006      	beq.n	80163f0 <pbuf_alloc+0xd8>
 80163e2:	4b42      	ldr	r3, [pc, #264]	; (80164ec <pbuf_alloc+0x1d4>)
 80163e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163e8:	4941      	ldr	r1, [pc, #260]	; (80164f0 <pbuf_alloc+0x1d8>)
 80163ea:	4842      	ldr	r0, [pc, #264]	; (80164f4 <pbuf_alloc+0x1dc>)
 80163ec:	f008 fcce 	bl	801ed8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80163f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163f2:	3303      	adds	r3, #3
 80163f4:	f023 0303 	bic.w	r3, r3, #3
 80163f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80163fc:	d106      	bne.n	801640c <pbuf_alloc+0xf4>
 80163fe:	4b3b      	ldr	r3, [pc, #236]	; (80164ec <pbuf_alloc+0x1d4>)
 8016400:	f44f 7281 	mov.w	r2, #258	; 0x102
 8016404:	493c      	ldr	r1, [pc, #240]	; (80164f8 <pbuf_alloc+0x1e0>)
 8016406:	483b      	ldr	r0, [pc, #236]	; (80164f4 <pbuf_alloc+0x1dc>)
 8016408:	f008 fcc0 	bl	801ed8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640e:	2b00      	cmp	r3, #0
 8016410:	d102      	bne.n	8016418 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	627b      	str	r3, [r7, #36]	; 0x24
 8016416:	e002      	b.n	801641e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016418:	69fb      	ldr	r3, [r7, #28]
 801641a:	693a      	ldr	r2, [r7, #16]
 801641c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016422:	8b7a      	ldrh	r2, [r7, #26]
 8016424:	89fb      	ldrh	r3, [r7, #14]
 8016426:	1ad3      	subs	r3, r2, r3
 8016428:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801642a:	2300      	movs	r3, #0
 801642c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801642e:	8b7b      	ldrh	r3, [r7, #26]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d19e      	bne.n	8016372 <pbuf_alloc+0x5a>
      break;
 8016434:	e055      	b.n	80164e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016438:	3303      	adds	r3, #3
 801643a:	b29b      	uxth	r3, r3
 801643c:	f023 0303 	bic.w	r3, r3, #3
 8016440:	b29a      	uxth	r2, r3
 8016442:	88bb      	ldrh	r3, [r7, #4]
 8016444:	3303      	adds	r3, #3
 8016446:	b29b      	uxth	r3, r3
 8016448:	f023 0303 	bic.w	r3, r3, #3
 801644c:	b29b      	uxth	r3, r3
 801644e:	4413      	add	r3, r2
 8016450:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016452:	8b3b      	ldrh	r3, [r7, #24]
 8016454:	3310      	adds	r3, #16
 8016456:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016458:	8b3a      	ldrh	r2, [r7, #24]
 801645a:	88bb      	ldrh	r3, [r7, #4]
 801645c:	3303      	adds	r3, #3
 801645e:	f023 0303 	bic.w	r3, r3, #3
 8016462:	429a      	cmp	r2, r3
 8016464:	d306      	bcc.n	8016474 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016466:	8afa      	ldrh	r2, [r7, #22]
 8016468:	88bb      	ldrh	r3, [r7, #4]
 801646a:	3303      	adds	r3, #3
 801646c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016470:	429a      	cmp	r2, r3
 8016472:	d201      	bcs.n	8016478 <pbuf_alloc+0x160>
        return NULL;
 8016474:	2300      	movs	r3, #0
 8016476:	e035      	b.n	80164e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016478:	8afb      	ldrh	r3, [r7, #22]
 801647a:	4618      	mov	r0, r3
 801647c:	f7ff f966 	bl	801574c <mem_malloc>
 8016480:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016484:	2b00      	cmp	r3, #0
 8016486:	d101      	bne.n	801648c <pbuf_alloc+0x174>
        return NULL;
 8016488:	2300      	movs	r3, #0
 801648a:	e02b      	b.n	80164e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801648c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801648e:	3310      	adds	r3, #16
 8016490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016492:	4413      	add	r3, r2
 8016494:	3303      	adds	r3, #3
 8016496:	f023 0303 	bic.w	r3, r3, #3
 801649a:	4618      	mov	r0, r3
 801649c:	88b9      	ldrh	r1, [r7, #4]
 801649e:	88ba      	ldrh	r2, [r7, #4]
 80164a0:	2300      	movs	r3, #0
 80164a2:	9301      	str	r3, [sp, #4]
 80164a4:	887b      	ldrh	r3, [r7, #2]
 80164a6:	9300      	str	r3, [sp, #0]
 80164a8:	460b      	mov	r3, r1
 80164aa:	4601      	mov	r1, r0
 80164ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ae:	f7ff ff09 	bl	80162c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	685b      	ldr	r3, [r3, #4]
 80164b6:	f003 0303 	and.w	r3, r3, #3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d010      	beq.n	80164e0 <pbuf_alloc+0x1c8>
 80164be:	4b0b      	ldr	r3, [pc, #44]	; (80164ec <pbuf_alloc+0x1d4>)
 80164c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80164c4:	490d      	ldr	r1, [pc, #52]	; (80164fc <pbuf_alloc+0x1e4>)
 80164c6:	480b      	ldr	r0, [pc, #44]	; (80164f4 <pbuf_alloc+0x1dc>)
 80164c8:	f008 fc60 	bl	801ed8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80164cc:	e008      	b.n	80164e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80164ce:	4b07      	ldr	r3, [pc, #28]	; (80164ec <pbuf_alloc+0x1d4>)
 80164d0:	f240 1227 	movw	r2, #295	; 0x127
 80164d4:	490a      	ldr	r1, [pc, #40]	; (8016500 <pbuf_alloc+0x1e8>)
 80164d6:	4807      	ldr	r0, [pc, #28]	; (80164f4 <pbuf_alloc+0x1dc>)
 80164d8:	f008 fc58 	bl	801ed8c <iprintf>
      return NULL;
 80164dc:	2300      	movs	r3, #0
 80164de:	e001      	b.n	80164e4 <pbuf_alloc+0x1cc>
      break;
 80164e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80164e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3728      	adds	r7, #40	; 0x28
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	080225cc 	.word	0x080225cc
 80164f0:	08022664 	.word	0x08022664
 80164f4:	08022694 	.word	0x08022694
 80164f8:	080226bc 	.word	0x080226bc
 80164fc:	080226f0 	.word	0x080226f0
 8016500:	0802271c 	.word	0x0802271c

08016504 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af02      	add	r7, sp, #8
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	460b      	mov	r3, r1
 801650e:	807b      	strh	r3, [r7, #2]
 8016510:	4613      	mov	r3, r2
 8016512:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016514:	883b      	ldrh	r3, [r7, #0]
 8016516:	2b41      	cmp	r3, #65	; 0x41
 8016518:	d009      	beq.n	801652e <pbuf_alloc_reference+0x2a>
 801651a:	883b      	ldrh	r3, [r7, #0]
 801651c:	2b01      	cmp	r3, #1
 801651e:	d006      	beq.n	801652e <pbuf_alloc_reference+0x2a>
 8016520:	4b0f      	ldr	r3, [pc, #60]	; (8016560 <pbuf_alloc_reference+0x5c>)
 8016522:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016526:	490f      	ldr	r1, [pc, #60]	; (8016564 <pbuf_alloc_reference+0x60>)
 8016528:	480f      	ldr	r0, [pc, #60]	; (8016568 <pbuf_alloc_reference+0x64>)
 801652a:	f008 fc2f 	bl	801ed8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801652e:	200b      	movs	r0, #11
 8016530:	f7ff fab0 	bl	8015a94 <memp_malloc>
 8016534:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d101      	bne.n	8016540 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801653c:	2300      	movs	r3, #0
 801653e:	e00b      	b.n	8016558 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016540:	8879      	ldrh	r1, [r7, #2]
 8016542:	887a      	ldrh	r2, [r7, #2]
 8016544:	2300      	movs	r3, #0
 8016546:	9301      	str	r3, [sp, #4]
 8016548:	883b      	ldrh	r3, [r7, #0]
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	460b      	mov	r3, r1
 801654e:	6879      	ldr	r1, [r7, #4]
 8016550:	68f8      	ldr	r0, [r7, #12]
 8016552:	f7ff feb7 	bl	80162c4 <pbuf_init_alloced_pbuf>
  return p;
 8016556:	68fb      	ldr	r3, [r7, #12]
}
 8016558:	4618      	mov	r0, r3
 801655a:	3710      	adds	r7, #16
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}
 8016560:	080225cc 	.word	0x080225cc
 8016564:	08022738 	.word	0x08022738
 8016568:	08022694 	.word	0x08022694

0801656c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b088      	sub	sp, #32
 8016570:	af02      	add	r7, sp, #8
 8016572:	607b      	str	r3, [r7, #4]
 8016574:	4603      	mov	r3, r0
 8016576:	73fb      	strb	r3, [r7, #15]
 8016578:	460b      	mov	r3, r1
 801657a:	81bb      	strh	r3, [r7, #12]
 801657c:	4613      	mov	r3, r2
 801657e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016580:	7bfb      	ldrb	r3, [r7, #15]
 8016582:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016584:	8a7b      	ldrh	r3, [r7, #18]
 8016586:	3303      	adds	r3, #3
 8016588:	f023 0203 	bic.w	r2, r3, #3
 801658c:	89bb      	ldrh	r3, [r7, #12]
 801658e:	441a      	add	r2, r3
 8016590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016592:	429a      	cmp	r2, r3
 8016594:	d901      	bls.n	801659a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016596:	2300      	movs	r3, #0
 8016598:	e018      	b.n	80165cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d007      	beq.n	80165b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80165a0:	8a7b      	ldrh	r3, [r7, #18]
 80165a2:	3303      	adds	r3, #3
 80165a4:	f023 0303 	bic.w	r3, r3, #3
 80165a8:	6a3a      	ldr	r2, [r7, #32]
 80165aa:	4413      	add	r3, r2
 80165ac:	617b      	str	r3, [r7, #20]
 80165ae:	e001      	b.n	80165b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80165b0:	2300      	movs	r3, #0
 80165b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	89b9      	ldrh	r1, [r7, #12]
 80165b8:	89ba      	ldrh	r2, [r7, #12]
 80165ba:	2302      	movs	r3, #2
 80165bc:	9301      	str	r3, [sp, #4]
 80165be:	897b      	ldrh	r3, [r7, #10]
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	460b      	mov	r3, r1
 80165c4:	6979      	ldr	r1, [r7, #20]
 80165c6:	f7ff fe7d 	bl	80162c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80165ca:	687b      	ldr	r3, [r7, #4]
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3718      	adds	r7, #24
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d106      	bne.n	80165f4 <pbuf_realloc+0x20>
 80165e6:	4b3a      	ldr	r3, [pc, #232]	; (80166d0 <pbuf_realloc+0xfc>)
 80165e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80165ec:	4939      	ldr	r1, [pc, #228]	; (80166d4 <pbuf_realloc+0x100>)
 80165ee:	483a      	ldr	r0, [pc, #232]	; (80166d8 <pbuf_realloc+0x104>)
 80165f0:	f008 fbcc 	bl	801ed8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	891b      	ldrh	r3, [r3, #8]
 80165f8:	887a      	ldrh	r2, [r7, #2]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d263      	bcs.n	80166c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	891a      	ldrh	r2, [r3, #8]
 8016602:	887b      	ldrh	r3, [r7, #2]
 8016604:	1ad3      	subs	r3, r2, r3
 8016606:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016608:	887b      	ldrh	r3, [r7, #2]
 801660a:	817b      	strh	r3, [r7, #10]
  q = p;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8016610:	e018      	b.n	8016644 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	895b      	ldrh	r3, [r3, #10]
 8016616:	897a      	ldrh	r2, [r7, #10]
 8016618:	1ad3      	subs	r3, r2, r3
 801661a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	891a      	ldrh	r2, [r3, #8]
 8016620:	893b      	ldrh	r3, [r7, #8]
 8016622:	1ad3      	subs	r3, r2, r3
 8016624:	b29a      	uxth	r2, r3
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d106      	bne.n	8016644 <pbuf_realloc+0x70>
 8016636:	4b26      	ldr	r3, [pc, #152]	; (80166d0 <pbuf_realloc+0xfc>)
 8016638:	f240 12af 	movw	r2, #431	; 0x1af
 801663c:	4927      	ldr	r1, [pc, #156]	; (80166dc <pbuf_realloc+0x108>)
 801663e:	4826      	ldr	r0, [pc, #152]	; (80166d8 <pbuf_realloc+0x104>)
 8016640:	f008 fba4 	bl	801ed8c <iprintf>
  while (rem_len > q->len) {
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	895b      	ldrh	r3, [r3, #10]
 8016648:	897a      	ldrh	r2, [r7, #10]
 801664a:	429a      	cmp	r2, r3
 801664c:	d8e1      	bhi.n	8016612 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	7b1b      	ldrb	r3, [r3, #12]
 8016652:	f003 030f 	and.w	r3, r3, #15
 8016656:	2b00      	cmp	r3, #0
 8016658:	d121      	bne.n	801669e <pbuf_realloc+0xca>
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	895b      	ldrh	r3, [r3, #10]
 801665e:	897a      	ldrh	r2, [r7, #10]
 8016660:	429a      	cmp	r2, r3
 8016662:	d01c      	beq.n	801669e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	7b5b      	ldrb	r3, [r3, #13]
 8016668:	f003 0302 	and.w	r3, r3, #2
 801666c:	2b00      	cmp	r3, #0
 801666e:	d116      	bne.n	801669e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	685a      	ldr	r2, [r3, #4]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	1ad3      	subs	r3, r2, r3
 8016678:	b29a      	uxth	r2, r3
 801667a:	897b      	ldrh	r3, [r7, #10]
 801667c:	4413      	add	r3, r2
 801667e:	b29b      	uxth	r3, r3
 8016680:	4619      	mov	r1, r3
 8016682:	68f8      	ldr	r0, [r7, #12]
 8016684:	f7fe ff58 	bl	8015538 <mem_trim>
 8016688:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d106      	bne.n	801669e <pbuf_realloc+0xca>
 8016690:	4b0f      	ldr	r3, [pc, #60]	; (80166d0 <pbuf_realloc+0xfc>)
 8016692:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016696:	4912      	ldr	r1, [pc, #72]	; (80166e0 <pbuf_realloc+0x10c>)
 8016698:	480f      	ldr	r0, [pc, #60]	; (80166d8 <pbuf_realloc+0x104>)
 801669a:	f008 fb77 	bl	801ed8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	897a      	ldrh	r2, [r7, #10]
 80166a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	895a      	ldrh	r2, [r3, #10]
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d004      	beq.n	80166be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	4618      	mov	r0, r3
 80166ba:	f000 f911 	bl	80168e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	2200      	movs	r2, #0
 80166c2:	601a      	str	r2, [r3, #0]
 80166c4:	e000      	b.n	80166c8 <pbuf_realloc+0xf4>
    return;
 80166c6:	bf00      	nop

}
 80166c8:	3710      	adds	r7, #16
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	080225cc 	.word	0x080225cc
 80166d4:	0802274c 	.word	0x0802274c
 80166d8:	08022694 	.word	0x08022694
 80166dc:	08022764 	.word	0x08022764
 80166e0:	0802277c 	.word	0x0802277c

080166e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	4613      	mov	r3, r2
 80166f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d106      	bne.n	8016706 <pbuf_add_header_impl+0x22>
 80166f8:	4b2b      	ldr	r3, [pc, #172]	; (80167a8 <pbuf_add_header_impl+0xc4>)
 80166fa:	f240 12df 	movw	r2, #479	; 0x1df
 80166fe:	492b      	ldr	r1, [pc, #172]	; (80167ac <pbuf_add_header_impl+0xc8>)
 8016700:	482b      	ldr	r0, [pc, #172]	; (80167b0 <pbuf_add_header_impl+0xcc>)
 8016702:	f008 fb43 	bl	801ed8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d003      	beq.n	8016714 <pbuf_add_header_impl+0x30>
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016712:	d301      	bcc.n	8016718 <pbuf_add_header_impl+0x34>
    return 1;
 8016714:	2301      	movs	r3, #1
 8016716:	e043      	b.n	80167a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <pbuf_add_header_impl+0x3e>
    return 0;
 801671e:	2300      	movs	r3, #0
 8016720:	e03e      	b.n	80167a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	891a      	ldrh	r2, [r3, #8]
 801672a:	8a7b      	ldrh	r3, [r7, #18]
 801672c:	4413      	add	r3, r2
 801672e:	b29b      	uxth	r3, r3
 8016730:	8a7a      	ldrh	r2, [r7, #18]
 8016732:	429a      	cmp	r2, r3
 8016734:	d901      	bls.n	801673a <pbuf_add_header_impl+0x56>
    return 1;
 8016736:	2301      	movs	r3, #1
 8016738:	e032      	b.n	80167a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	7b1b      	ldrb	r3, [r3, #12]
 801673e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016740:	8a3b      	ldrh	r3, [r7, #16]
 8016742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016746:	2b00      	cmp	r3, #0
 8016748:	d00c      	beq.n	8016764 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	685a      	ldr	r2, [r3, #4]
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	425b      	negs	r3, r3
 8016752:	4413      	add	r3, r2
 8016754:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	3310      	adds	r3, #16
 801675a:	697a      	ldr	r2, [r7, #20]
 801675c:	429a      	cmp	r2, r3
 801675e:	d20d      	bcs.n	801677c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016760:	2301      	movs	r3, #1
 8016762:	e01d      	b.n	80167a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016764:	79fb      	ldrb	r3, [r7, #7]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d006      	beq.n	8016778 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	685a      	ldr	r2, [r3, #4]
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	425b      	negs	r3, r3
 8016772:	4413      	add	r3, r2
 8016774:	617b      	str	r3, [r7, #20]
 8016776:	e001      	b.n	801677c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016778:	2301      	movs	r3, #1
 801677a:	e011      	b.n	80167a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	697a      	ldr	r2, [r7, #20]
 8016780:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	895a      	ldrh	r2, [r3, #10]
 8016786:	8a7b      	ldrh	r3, [r7, #18]
 8016788:	4413      	add	r3, r2
 801678a:	b29a      	uxth	r2, r3
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	891a      	ldrh	r2, [r3, #8]
 8016794:	8a7b      	ldrh	r3, [r7, #18]
 8016796:	4413      	add	r3, r2
 8016798:	b29a      	uxth	r2, r3
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	811a      	strh	r2, [r3, #8]


  return 0;
 801679e:	2300      	movs	r3, #0
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3718      	adds	r7, #24
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	080225cc 	.word	0x080225cc
 80167ac:	08022798 	.word	0x08022798
 80167b0:	08022694 	.word	0x08022694

080167b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80167be:	2200      	movs	r2, #0
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f7ff ff8e 	bl	80166e4 <pbuf_add_header_impl>
 80167c8:	4603      	mov	r3, r0
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
	...

080167d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d106      	bne.n	80167f2 <pbuf_remove_header+0x1e>
 80167e4:	4b20      	ldr	r3, [pc, #128]	; (8016868 <pbuf_remove_header+0x94>)
 80167e6:	f240 224b 	movw	r2, #587	; 0x24b
 80167ea:	4920      	ldr	r1, [pc, #128]	; (801686c <pbuf_remove_header+0x98>)
 80167ec:	4820      	ldr	r0, [pc, #128]	; (8016870 <pbuf_remove_header+0x9c>)
 80167ee:	f008 facd 	bl	801ed8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d003      	beq.n	8016800 <pbuf_remove_header+0x2c>
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80167fe:	d301      	bcc.n	8016804 <pbuf_remove_header+0x30>
    return 1;
 8016800:	2301      	movs	r3, #1
 8016802:	e02c      	b.n	801685e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d101      	bne.n	801680e <pbuf_remove_header+0x3a>
    return 0;
 801680a:	2300      	movs	r3, #0
 801680c:	e027      	b.n	801685e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	895b      	ldrh	r3, [r3, #10]
 8016816:	89fa      	ldrh	r2, [r7, #14]
 8016818:	429a      	cmp	r2, r3
 801681a:	d908      	bls.n	801682e <pbuf_remove_header+0x5a>
 801681c:	4b12      	ldr	r3, [pc, #72]	; (8016868 <pbuf_remove_header+0x94>)
 801681e:	f240 2255 	movw	r2, #597	; 0x255
 8016822:	4914      	ldr	r1, [pc, #80]	; (8016874 <pbuf_remove_header+0xa0>)
 8016824:	4812      	ldr	r0, [pc, #72]	; (8016870 <pbuf_remove_header+0x9c>)
 8016826:	f008 fab1 	bl	801ed8c <iprintf>
 801682a:	2301      	movs	r3, #1
 801682c:	e017      	b.n	801685e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	685a      	ldr	r2, [r3, #4]
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	441a      	add	r2, r3
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	895a      	ldrh	r2, [r3, #10]
 8016844:	89fb      	ldrh	r3, [r7, #14]
 8016846:	1ad3      	subs	r3, r2, r3
 8016848:	b29a      	uxth	r2, r3
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	891a      	ldrh	r2, [r3, #8]
 8016852:	89fb      	ldrh	r3, [r7, #14]
 8016854:	1ad3      	subs	r3, r2, r3
 8016856:	b29a      	uxth	r2, r3
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	080225cc 	.word	0x080225cc
 801686c:	08022798 	.word	0x08022798
 8016870:	08022694 	.word	0x08022694
 8016874:	080227a4 	.word	0x080227a4

08016878 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	460b      	mov	r3, r1
 8016882:	807b      	strh	r3, [r7, #2]
 8016884:	4613      	mov	r3, r2
 8016886:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8016888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801688c:	2b00      	cmp	r3, #0
 801688e:	da08      	bge.n	80168a2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016894:	425b      	negs	r3, r3
 8016896:	4619      	mov	r1, r3
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f7ff ff9b 	bl	80167d4 <pbuf_remove_header>
 801689e:	4603      	mov	r3, r0
 80168a0:	e007      	b.n	80168b2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80168a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80168a6:	787a      	ldrb	r2, [r7, #1]
 80168a8:	4619      	mov	r1, r3
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7ff ff1a 	bl	80166e4 <pbuf_add_header_impl>
 80168b0:	4603      	mov	r3, r0
  }
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}

080168ba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80168ba:	b580      	push	{r7, lr}
 80168bc:	b082      	sub	sp, #8
 80168be:	af00      	add	r7, sp, #0
 80168c0:	6078      	str	r0, [r7, #4]
 80168c2:	460b      	mov	r3, r1
 80168c4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80168c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80168ca:	2201      	movs	r2, #1
 80168cc:	4619      	mov	r1, r3
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7ff ffd2 	bl	8016878 <pbuf_header_impl>
 80168d4:	4603      	mov	r3, r0
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
	...

080168e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b088      	sub	sp, #32
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d10b      	bne.n	8016906 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d106      	bne.n	8016902 <pbuf_free+0x22>
 80168f4:	4b3b      	ldr	r3, [pc, #236]	; (80169e4 <pbuf_free+0x104>)
 80168f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80168fa:	493b      	ldr	r1, [pc, #236]	; (80169e8 <pbuf_free+0x108>)
 80168fc:	483b      	ldr	r0, [pc, #236]	; (80169ec <pbuf_free+0x10c>)
 80168fe:	f008 fa45 	bl	801ed8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016902:	2300      	movs	r3, #0
 8016904:	e069      	b.n	80169da <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016906:	2300      	movs	r3, #0
 8016908:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801690a:	e062      	b.n	80169d2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801690c:	f007 fbca 	bl	801e0a4 <sys_arch_protect>
 8016910:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	7b9b      	ldrb	r3, [r3, #14]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d106      	bne.n	8016928 <pbuf_free+0x48>
 801691a:	4b32      	ldr	r3, [pc, #200]	; (80169e4 <pbuf_free+0x104>)
 801691c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016920:	4933      	ldr	r1, [pc, #204]	; (80169f0 <pbuf_free+0x110>)
 8016922:	4832      	ldr	r0, [pc, #200]	; (80169ec <pbuf_free+0x10c>)
 8016924:	f008 fa32 	bl	801ed8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	7b9b      	ldrb	r3, [r3, #14]
 801692c:	3b01      	subs	r3, #1
 801692e:	b2da      	uxtb	r2, r3
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	739a      	strb	r2, [r3, #14]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	7b9b      	ldrb	r3, [r3, #14]
 8016938:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801693a:	69b8      	ldr	r0, [r7, #24]
 801693c:	f007 fbc0 	bl	801e0c0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016940:	7dfb      	ldrb	r3, [r7, #23]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d143      	bne.n	80169ce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	7b1b      	ldrb	r3, [r3, #12]
 8016950:	f003 030f 	and.w	r3, r3, #15
 8016954:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	7b5b      	ldrb	r3, [r3, #13]
 801695a:	f003 0302 	and.w	r3, r3, #2
 801695e:	2b00      	cmp	r3, #0
 8016960:	d011      	beq.n	8016986 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	691b      	ldr	r3, [r3, #16]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d106      	bne.n	801697c <pbuf_free+0x9c>
 801696e:	4b1d      	ldr	r3, [pc, #116]	; (80169e4 <pbuf_free+0x104>)
 8016970:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016974:	491f      	ldr	r1, [pc, #124]	; (80169f4 <pbuf_free+0x114>)
 8016976:	481d      	ldr	r0, [pc, #116]	; (80169ec <pbuf_free+0x10c>)
 8016978:	f008 fa08 	bl	801ed8c <iprintf>
        pc->custom_free_function(p);
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	691b      	ldr	r3, [r3, #16]
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	4798      	blx	r3
 8016984:	e01d      	b.n	80169c2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016986:	7bfb      	ldrb	r3, [r7, #15]
 8016988:	2b02      	cmp	r3, #2
 801698a:	d104      	bne.n	8016996 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801698c:	6879      	ldr	r1, [r7, #4]
 801698e:	200c      	movs	r0, #12
 8016990:	f7ff f8f6 	bl	8015b80 <memp_free>
 8016994:	e015      	b.n	80169c2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016996:	7bfb      	ldrb	r3, [r7, #15]
 8016998:	2b01      	cmp	r3, #1
 801699a:	d104      	bne.n	80169a6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801699c:	6879      	ldr	r1, [r7, #4]
 801699e:	200b      	movs	r0, #11
 80169a0:	f7ff f8ee 	bl	8015b80 <memp_free>
 80169a4:	e00d      	b.n	80169c2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80169a6:	7bfb      	ldrb	r3, [r7, #15]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d103      	bne.n	80169b4 <pbuf_free+0xd4>
          mem_free(p);
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7fe fd33 	bl	8015418 <mem_free>
 80169b2:	e006      	b.n	80169c2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80169b4:	4b0b      	ldr	r3, [pc, #44]	; (80169e4 <pbuf_free+0x104>)
 80169b6:	f240 320f 	movw	r2, #783	; 0x30f
 80169ba:	490f      	ldr	r1, [pc, #60]	; (80169f8 <pbuf_free+0x118>)
 80169bc:	480b      	ldr	r0, [pc, #44]	; (80169ec <pbuf_free+0x10c>)
 80169be:	f008 f9e5 	bl	801ed8c <iprintf>
        }
      }
      count++;
 80169c2:	7ffb      	ldrb	r3, [r7, #31]
 80169c4:	3301      	adds	r3, #1
 80169c6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80169c8:	693b      	ldr	r3, [r7, #16]
 80169ca:	607b      	str	r3, [r7, #4]
 80169cc:	e001      	b.n	80169d2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80169ce:	2300      	movs	r3, #0
 80169d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d199      	bne.n	801690c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80169d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3720      	adds	r7, #32
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	080225cc 	.word	0x080225cc
 80169e8:	08022798 	.word	0x08022798
 80169ec:	08022694 	.word	0x08022694
 80169f0:	080227c4 	.word	0x080227c4
 80169f4:	080227dc 	.word	0x080227dc
 80169f8:	08022800 	.word	0x08022800

080169fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b085      	sub	sp, #20
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016a04:	2300      	movs	r3, #0
 8016a06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016a08:	e005      	b.n	8016a16 <pbuf_clen+0x1a>
    ++len;
 8016a0a:	89fb      	ldrh	r3, [r7, #14]
 8016a0c:	3301      	adds	r3, #1
 8016a0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d1f6      	bne.n	8016a0a <pbuf_clen+0xe>
  }
  return len;
 8016a1c:	89fb      	ldrh	r3, [r7, #14]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3714      	adds	r7, #20
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
	...

08016a2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d016      	beq.n	8016a68 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016a3a:	f007 fb33 	bl	801e0a4 <sys_arch_protect>
 8016a3e:	60f8      	str	r0, [r7, #12]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	7b9b      	ldrb	r3, [r3, #14]
 8016a44:	3301      	adds	r3, #1
 8016a46:	b2da      	uxtb	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	739a      	strb	r2, [r3, #14]
 8016a4c:	68f8      	ldr	r0, [r7, #12]
 8016a4e:	f007 fb37 	bl	801e0c0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	7b9b      	ldrb	r3, [r3, #14]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <pbuf_ref+0x3c>
 8016a5a:	4b05      	ldr	r3, [pc, #20]	; (8016a70 <pbuf_ref+0x44>)
 8016a5c:	f240 3242 	movw	r2, #834	; 0x342
 8016a60:	4904      	ldr	r1, [pc, #16]	; (8016a74 <pbuf_ref+0x48>)
 8016a62:	4805      	ldr	r0, [pc, #20]	; (8016a78 <pbuf_ref+0x4c>)
 8016a64:	f008 f992 	bl	801ed8c <iprintf>
  }
}
 8016a68:	bf00      	nop
 8016a6a:	3710      	adds	r7, #16
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	080225cc 	.word	0x080225cc
 8016a74:	08022814 	.word	0x08022814
 8016a78:	08022694 	.word	0x08022694

08016a7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b084      	sub	sp, #16
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d002      	beq.n	8016a92 <pbuf_cat+0x16>
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d107      	bne.n	8016aa2 <pbuf_cat+0x26>
 8016a92:	4b20      	ldr	r3, [pc, #128]	; (8016b14 <pbuf_cat+0x98>)
 8016a94:	f240 3259 	movw	r2, #857	; 0x359
 8016a98:	491f      	ldr	r1, [pc, #124]	; (8016b18 <pbuf_cat+0x9c>)
 8016a9a:	4820      	ldr	r0, [pc, #128]	; (8016b1c <pbuf_cat+0xa0>)
 8016a9c:	f008 f976 	bl	801ed8c <iprintf>
 8016aa0:	e034      	b.n	8016b0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	60fb      	str	r3, [r7, #12]
 8016aa6:	e00a      	b.n	8016abe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	891a      	ldrh	r2, [r3, #8]
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	891b      	ldrh	r3, [r3, #8]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1f0      	bne.n	8016aa8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	891a      	ldrh	r2, [r3, #8]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	895b      	ldrh	r3, [r3, #10]
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d006      	beq.n	8016ae0 <pbuf_cat+0x64>
 8016ad2:	4b10      	ldr	r3, [pc, #64]	; (8016b14 <pbuf_cat+0x98>)
 8016ad4:	f240 3262 	movw	r2, #866	; 0x362
 8016ad8:	4911      	ldr	r1, [pc, #68]	; (8016b20 <pbuf_cat+0xa4>)
 8016ada:	4810      	ldr	r0, [pc, #64]	; (8016b1c <pbuf_cat+0xa0>)
 8016adc:	f008 f956 	bl	801ed8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d006      	beq.n	8016af6 <pbuf_cat+0x7a>
 8016ae8:	4b0a      	ldr	r3, [pc, #40]	; (8016b14 <pbuf_cat+0x98>)
 8016aea:	f240 3263 	movw	r2, #867	; 0x363
 8016aee:	490d      	ldr	r1, [pc, #52]	; (8016b24 <pbuf_cat+0xa8>)
 8016af0:	480a      	ldr	r0, [pc, #40]	; (8016b1c <pbuf_cat+0xa0>)
 8016af2:	f008 f94b 	bl	801ed8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	891a      	ldrh	r2, [r3, #8]
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	891b      	ldrh	r3, [r3, #8]
 8016afe:	4413      	add	r3, r2
 8016b00:	b29a      	uxth	r2, r3
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	683a      	ldr	r2, [r7, #0]
 8016b0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016b0c:	3710      	adds	r7, #16
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	080225cc 	.word	0x080225cc
 8016b18:	08022828 	.word	0x08022828
 8016b1c:	08022694 	.word	0x08022694
 8016b20:	08022860 	.word	0x08022860
 8016b24:	08022890 	.word	0x08022890

08016b28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8016b32:	6839      	ldr	r1, [r7, #0]
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f7ff ffa1 	bl	8016a7c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8016b3a:	6838      	ldr	r0, [r7, #0]
 8016b3c:	f7ff ff76 	bl	8016a2c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016b40:	bf00      	nop
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b086      	sub	sp, #24
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016b52:	2300      	movs	r3, #0
 8016b54:	617b      	str	r3, [r7, #20]
 8016b56:	2300      	movs	r3, #0
 8016b58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d008      	beq.n	8016b72 <pbuf_copy+0x2a>
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d005      	beq.n	8016b72 <pbuf_copy+0x2a>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	891a      	ldrh	r2, [r3, #8]
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	891b      	ldrh	r3, [r3, #8]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d209      	bcs.n	8016b86 <pbuf_copy+0x3e>
 8016b72:	4b57      	ldr	r3, [pc, #348]	; (8016cd0 <pbuf_copy+0x188>)
 8016b74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016b78:	4956      	ldr	r1, [pc, #344]	; (8016cd4 <pbuf_copy+0x18c>)
 8016b7a:	4857      	ldr	r0, [pc, #348]	; (8016cd8 <pbuf_copy+0x190>)
 8016b7c:	f008 f906 	bl	801ed8c <iprintf>
 8016b80:	f06f 030f 	mvn.w	r3, #15
 8016b84:	e09f      	b.n	8016cc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	895b      	ldrh	r3, [r3, #10]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	1ad2      	subs	r2, r2, r3
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	895b      	ldrh	r3, [r3, #10]
 8016b94:	4619      	mov	r1, r3
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	1acb      	subs	r3, r1, r3
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d306      	bcc.n	8016bac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	895b      	ldrh	r3, [r3, #10]
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	1ad3      	subs	r3, r2, r3
 8016ba8:	60fb      	str	r3, [r7, #12]
 8016baa:	e005      	b.n	8016bb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	895b      	ldrh	r3, [r3, #10]
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	1ad3      	subs	r3, r2, r3
 8016bb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	685a      	ldr	r2, [r3, #4]
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	18d0      	adds	r0, r2, r3
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	685a      	ldr	r2, [r3, #4]
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	68fa      	ldr	r2, [r7, #12]
 8016bca:	4619      	mov	r1, r3
 8016bcc:	f008 f8ae 	bl	801ed2c <memcpy>
    offset_to += len;
 8016bd0:	697a      	ldr	r2, [r7, #20]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	4413      	add	r3, r2
 8016bd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016bd8:	693a      	ldr	r2, [r7, #16]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	4413      	add	r3, r2
 8016bde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	895b      	ldrh	r3, [r3, #10]
 8016be4:	461a      	mov	r2, r3
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d906      	bls.n	8016bfa <pbuf_copy+0xb2>
 8016bec:	4b38      	ldr	r3, [pc, #224]	; (8016cd0 <pbuf_copy+0x188>)
 8016bee:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016bf2:	493a      	ldr	r1, [pc, #232]	; (8016cdc <pbuf_copy+0x194>)
 8016bf4:	4838      	ldr	r0, [pc, #224]	; (8016cd8 <pbuf_copy+0x190>)
 8016bf6:	f008 f8c9 	bl	801ed8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	895b      	ldrh	r3, [r3, #10]
 8016bfe:	461a      	mov	r2, r3
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	4293      	cmp	r3, r2
 8016c04:	d906      	bls.n	8016c14 <pbuf_copy+0xcc>
 8016c06:	4b32      	ldr	r3, [pc, #200]	; (8016cd0 <pbuf_copy+0x188>)
 8016c08:	f240 32da 	movw	r2, #986	; 0x3da
 8016c0c:	4934      	ldr	r1, [pc, #208]	; (8016ce0 <pbuf_copy+0x198>)
 8016c0e:	4832      	ldr	r0, [pc, #200]	; (8016cd8 <pbuf_copy+0x190>)
 8016c10:	f008 f8bc 	bl	801ed8c <iprintf>
    if (offset_from >= p_from->len) {
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	895b      	ldrh	r3, [r3, #10]
 8016c18:	461a      	mov	r2, r3
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	d304      	bcc.n	8016c2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016c20:	2300      	movs	r3, #0
 8016c22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	895b      	ldrh	r3, [r3, #10]
 8016c2e:	461a      	mov	r2, r3
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	4293      	cmp	r3, r2
 8016c34:	d114      	bne.n	8016c60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016c36:	2300      	movs	r3, #0
 8016c38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d10c      	bne.n	8016c60 <pbuf_copy+0x118>
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d009      	beq.n	8016c60 <pbuf_copy+0x118>
 8016c4c:	4b20      	ldr	r3, [pc, #128]	; (8016cd0 <pbuf_copy+0x188>)
 8016c4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016c52:	4924      	ldr	r1, [pc, #144]	; (8016ce4 <pbuf_copy+0x19c>)
 8016c54:	4820      	ldr	r0, [pc, #128]	; (8016cd8 <pbuf_copy+0x190>)
 8016c56:	f008 f899 	bl	801ed8c <iprintf>
 8016c5a:	f06f 030f 	mvn.w	r3, #15
 8016c5e:	e032      	b.n	8016cc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d013      	beq.n	8016c8e <pbuf_copy+0x146>
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	895a      	ldrh	r2, [r3, #10]
 8016c6a:	683b      	ldr	r3, [r7, #0]
 8016c6c:	891b      	ldrh	r3, [r3, #8]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d10d      	bne.n	8016c8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d009      	beq.n	8016c8e <pbuf_copy+0x146>
 8016c7a:	4b15      	ldr	r3, [pc, #84]	; (8016cd0 <pbuf_copy+0x188>)
 8016c7c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016c80:	4919      	ldr	r1, [pc, #100]	; (8016ce8 <pbuf_copy+0x1a0>)
 8016c82:	4815      	ldr	r0, [pc, #84]	; (8016cd8 <pbuf_copy+0x190>)
 8016c84:	f008 f882 	bl	801ed8c <iprintf>
 8016c88:	f06f 0305 	mvn.w	r3, #5
 8016c8c:	e01b      	b.n	8016cc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d013      	beq.n	8016cbc <pbuf_copy+0x174>
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	895a      	ldrh	r2, [r3, #10]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	891b      	ldrh	r3, [r3, #8]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d10d      	bne.n	8016cbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d009      	beq.n	8016cbc <pbuf_copy+0x174>
 8016ca8:	4b09      	ldr	r3, [pc, #36]	; (8016cd0 <pbuf_copy+0x188>)
 8016caa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8016cae:	490e      	ldr	r1, [pc, #56]	; (8016ce8 <pbuf_copy+0x1a0>)
 8016cb0:	4809      	ldr	r0, [pc, #36]	; (8016cd8 <pbuf_copy+0x190>)
 8016cb2:	f008 f86b 	bl	801ed8c <iprintf>
 8016cb6:	f06f 0305 	mvn.w	r3, #5
 8016cba:	e004      	b.n	8016cc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	f47f af61 	bne.w	8016b86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016cc4:	2300      	movs	r3, #0
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3718      	adds	r7, #24
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	080225cc 	.word	0x080225cc
 8016cd4:	080228dc 	.word	0x080228dc
 8016cd8:	08022694 	.word	0x08022694
 8016cdc:	0802290c 	.word	0x0802290c
 8016ce0:	08022924 	.word	0x08022924
 8016ce4:	08022940 	.word	0x08022940
 8016ce8:	08022950 	.word	0x08022950

08016cec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b088      	sub	sp, #32
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	60f8      	str	r0, [r7, #12]
 8016cf4:	60b9      	str	r1, [r7, #8]
 8016cf6:	4611      	mov	r1, r2
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	460b      	mov	r3, r1
 8016cfc:	80fb      	strh	r3, [r7, #6]
 8016cfe:	4613      	mov	r3, r2
 8016d00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016d06:	2300      	movs	r3, #0
 8016d08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d108      	bne.n	8016d22 <pbuf_copy_partial+0x36>
 8016d10:	4b2b      	ldr	r3, [pc, #172]	; (8016dc0 <pbuf_copy_partial+0xd4>)
 8016d12:	f240 420a 	movw	r2, #1034	; 0x40a
 8016d16:	492b      	ldr	r1, [pc, #172]	; (8016dc4 <pbuf_copy_partial+0xd8>)
 8016d18:	482b      	ldr	r0, [pc, #172]	; (8016dc8 <pbuf_copy_partial+0xdc>)
 8016d1a:	f008 f837 	bl	801ed8c <iprintf>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	e04a      	b.n	8016db8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d108      	bne.n	8016d3a <pbuf_copy_partial+0x4e>
 8016d28:	4b25      	ldr	r3, [pc, #148]	; (8016dc0 <pbuf_copy_partial+0xd4>)
 8016d2a:	f240 420b 	movw	r2, #1035	; 0x40b
 8016d2e:	4927      	ldr	r1, [pc, #156]	; (8016dcc <pbuf_copy_partial+0xe0>)
 8016d30:	4825      	ldr	r0, [pc, #148]	; (8016dc8 <pbuf_copy_partial+0xdc>)
 8016d32:	f008 f82b 	bl	801ed8c <iprintf>
 8016d36:	2300      	movs	r3, #0
 8016d38:	e03e      	b.n	8016db8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	61fb      	str	r3, [r7, #28]
 8016d3e:	e034      	b.n	8016daa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016d40:	88bb      	ldrh	r3, [r7, #4]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d00a      	beq.n	8016d5c <pbuf_copy_partial+0x70>
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	895b      	ldrh	r3, [r3, #10]
 8016d4a:	88ba      	ldrh	r2, [r7, #4]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d305      	bcc.n	8016d5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	895b      	ldrh	r3, [r3, #10]
 8016d54:	88ba      	ldrh	r2, [r7, #4]
 8016d56:	1ad3      	subs	r3, r2, r3
 8016d58:	80bb      	strh	r3, [r7, #4]
 8016d5a:	e023      	b.n	8016da4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	895a      	ldrh	r2, [r3, #10]
 8016d60:	88bb      	ldrh	r3, [r7, #4]
 8016d62:	1ad3      	subs	r3, r2, r3
 8016d64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016d66:	8b3a      	ldrh	r2, [r7, #24]
 8016d68:	88fb      	ldrh	r3, [r7, #6]
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d901      	bls.n	8016d72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016d6e:	88fb      	ldrh	r3, [r7, #6]
 8016d70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016d72:	8b7b      	ldrh	r3, [r7, #26]
 8016d74:	68ba      	ldr	r2, [r7, #8]
 8016d76:	18d0      	adds	r0, r2, r3
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	685a      	ldr	r2, [r3, #4]
 8016d7c:	88bb      	ldrh	r3, [r7, #4]
 8016d7e:	4413      	add	r3, r2
 8016d80:	8b3a      	ldrh	r2, [r7, #24]
 8016d82:	4619      	mov	r1, r3
 8016d84:	f007 ffd2 	bl	801ed2c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016d88:	8afa      	ldrh	r2, [r7, #22]
 8016d8a:	8b3b      	ldrh	r3, [r7, #24]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016d90:	8b7a      	ldrh	r2, [r7, #26]
 8016d92:	8b3b      	ldrh	r3, [r7, #24]
 8016d94:	4413      	add	r3, r2
 8016d96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016d98:	88fa      	ldrh	r2, [r7, #6]
 8016d9a:	8b3b      	ldrh	r3, [r7, #24]
 8016d9c:	1ad3      	subs	r3, r2, r3
 8016d9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016da0:	2300      	movs	r3, #0
 8016da2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016da4:	69fb      	ldr	r3, [r7, #28]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	61fb      	str	r3, [r7, #28]
 8016daa:	88fb      	ldrh	r3, [r7, #6]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d002      	beq.n	8016db6 <pbuf_copy_partial+0xca>
 8016db0:	69fb      	ldr	r3, [r7, #28]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d1c4      	bne.n	8016d40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016db6:	8afb      	ldrh	r3, [r7, #22]
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3720      	adds	r7, #32
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	080225cc 	.word	0x080225cc
 8016dc4:	0802297c 	.word	0x0802297c
 8016dc8:	08022694 	.word	0x08022694
 8016dcc:	0802299c 	.word	0x0802299c

08016dd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	603a      	str	r2, [r7, #0]
 8016dda:	71fb      	strb	r3, [r7, #7]
 8016ddc:	460b      	mov	r3, r1
 8016dde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	8919      	ldrh	r1, [r3, #8]
 8016de4:	88ba      	ldrh	r2, [r7, #4]
 8016de6:	79fb      	ldrb	r3, [r7, #7]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff fa95 	bl	8016318 <pbuf_alloc>
 8016dee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d101      	bne.n	8016dfa <pbuf_clone+0x2a>
    return NULL;
 8016df6:	2300      	movs	r3, #0
 8016df8:	e011      	b.n	8016e1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016dfa:	6839      	ldr	r1, [r7, #0]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7ff fea3 	bl	8016b48 <pbuf_copy>
 8016e02:	4603      	mov	r3, r0
 8016e04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016e06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d006      	beq.n	8016e1c <pbuf_clone+0x4c>
 8016e0e:	4b06      	ldr	r3, [pc, #24]	; (8016e28 <pbuf_clone+0x58>)
 8016e10:	f240 5224 	movw	r2, #1316	; 0x524
 8016e14:	4905      	ldr	r1, [pc, #20]	; (8016e2c <pbuf_clone+0x5c>)
 8016e16:	4806      	ldr	r0, [pc, #24]	; (8016e30 <pbuf_clone+0x60>)
 8016e18:	f007 ffb8 	bl	801ed8c <iprintf>
  return q;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3710      	adds	r7, #16
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	080225cc 	.word	0x080225cc
 8016e2c:	08022aa8 	.word	0x08022aa8
 8016e30:	08022694 	.word	0x08022694

08016e34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016e38:	f008 f836 	bl	801eea8 <rand>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016e4a:	b29a      	uxth	r2, r3
 8016e4c:	4b01      	ldr	r3, [pc, #4]	; (8016e54 <tcp_init+0x20>)
 8016e4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016e50:	bf00      	nop
 8016e52:	bd80      	pop	{r7, pc}
 8016e54:	20000034 	.word	0x20000034

08016e58 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b082      	sub	sp, #8
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	7d1b      	ldrb	r3, [r3, #20]
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	d105      	bne.n	8016e74 <tcp_free+0x1c>
 8016e68:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <tcp_free+0x2c>)
 8016e6a:	22d4      	movs	r2, #212	; 0xd4
 8016e6c:	4906      	ldr	r1, [pc, #24]	; (8016e88 <tcp_free+0x30>)
 8016e6e:	4807      	ldr	r0, [pc, #28]	; (8016e8c <tcp_free+0x34>)
 8016e70:	f007 ff8c 	bl	801ed8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	2001      	movs	r0, #1
 8016e78:	f7fe fe82 	bl	8015b80 <memp_free>
}
 8016e7c:	bf00      	nop
 8016e7e:	3708      	adds	r7, #8
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	08022b34 	.word	0x08022b34
 8016e88:	08022bcc 	.word	0x08022bcc
 8016e8c:	08022be0 	.word	0x08022be0

08016e90 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	7d1b      	ldrb	r3, [r3, #20]
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d105      	bne.n	8016eac <tcp_free_listen+0x1c>
 8016ea0:	4b06      	ldr	r3, [pc, #24]	; (8016ebc <tcp_free_listen+0x2c>)
 8016ea2:	22df      	movs	r2, #223	; 0xdf
 8016ea4:	4906      	ldr	r1, [pc, #24]	; (8016ec0 <tcp_free_listen+0x30>)
 8016ea6:	4807      	ldr	r0, [pc, #28]	; (8016ec4 <tcp_free_listen+0x34>)
 8016ea8:	f007 ff70 	bl	801ed8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016eac:	6879      	ldr	r1, [r7, #4]
 8016eae:	2002      	movs	r0, #2
 8016eb0:	f7fe fe66 	bl	8015b80 <memp_free>
}
 8016eb4:	bf00      	nop
 8016eb6:	3708      	adds	r7, #8
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}
 8016ebc:	08022b34 	.word	0x08022b34
 8016ec0:	08022c08 	.word	0x08022c08
 8016ec4:	08022be0 	.word	0x08022be0

08016ec8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016ecc:	f001 f8a8 	bl	8018020 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016ed0:	4b07      	ldr	r3, [pc, #28]	; (8016ef0 <tcp_tmr+0x28>)
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	3301      	adds	r3, #1
 8016ed6:	b2da      	uxtb	r2, r3
 8016ed8:	4b05      	ldr	r3, [pc, #20]	; (8016ef0 <tcp_tmr+0x28>)
 8016eda:	701a      	strb	r2, [r3, #0]
 8016edc:	4b04      	ldr	r3, [pc, #16]	; (8016ef0 <tcp_tmr+0x28>)
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d001      	beq.n	8016eec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016ee8:	f000 fd5a 	bl	80179a0 <tcp_slowtmr>
  }
}
 8016eec:	bf00      	nop
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	20009089 	.word	0x20009089

08016ef4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b084      	sub	sp, #16
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d105      	bne.n	8016f10 <tcp_remove_listener+0x1c>
 8016f04:	4b0d      	ldr	r3, [pc, #52]	; (8016f3c <tcp_remove_listener+0x48>)
 8016f06:	22ff      	movs	r2, #255	; 0xff
 8016f08:	490d      	ldr	r1, [pc, #52]	; (8016f40 <tcp_remove_listener+0x4c>)
 8016f0a:	480e      	ldr	r0, [pc, #56]	; (8016f44 <tcp_remove_listener+0x50>)
 8016f0c:	f007 ff3e 	bl	801ed8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	60fb      	str	r3, [r7, #12]
 8016f14:	e00a      	b.n	8016f2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016f1a:	683a      	ldr	r2, [r7, #0]
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	d102      	bne.n	8016f26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	2200      	movs	r2, #0
 8016f24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	68db      	ldr	r3, [r3, #12]
 8016f2a:	60fb      	str	r3, [r7, #12]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d1f1      	bne.n	8016f16 <tcp_remove_listener+0x22>
    }
  }
}
 8016f32:	bf00      	nop
 8016f34:	bf00      	nop
 8016f36:	3710      	adds	r7, #16
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	08022b34 	.word	0x08022b34
 8016f40:	08022c24 	.word	0x08022c24
 8016f44:	08022be0 	.word	0x08022be0

08016f48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b084      	sub	sp, #16
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d106      	bne.n	8016f64 <tcp_listen_closed+0x1c>
 8016f56:	4b14      	ldr	r3, [pc, #80]	; (8016fa8 <tcp_listen_closed+0x60>)
 8016f58:	f240 1211 	movw	r2, #273	; 0x111
 8016f5c:	4913      	ldr	r1, [pc, #76]	; (8016fac <tcp_listen_closed+0x64>)
 8016f5e:	4814      	ldr	r0, [pc, #80]	; (8016fb0 <tcp_listen_closed+0x68>)
 8016f60:	f007 ff14 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	7d1b      	ldrb	r3, [r3, #20]
 8016f68:	2b01      	cmp	r3, #1
 8016f6a:	d006      	beq.n	8016f7a <tcp_listen_closed+0x32>
 8016f6c:	4b0e      	ldr	r3, [pc, #56]	; (8016fa8 <tcp_listen_closed+0x60>)
 8016f6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016f72:	4910      	ldr	r1, [pc, #64]	; (8016fb4 <tcp_listen_closed+0x6c>)
 8016f74:	480e      	ldr	r0, [pc, #56]	; (8016fb0 <tcp_listen_closed+0x68>)
 8016f76:	f007 ff09 	bl	801ed8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	60fb      	str	r3, [r7, #12]
 8016f7e:	e00b      	b.n	8016f98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016f80:	4a0d      	ldr	r2, [pc, #52]	; (8016fb8 <tcp_listen_closed+0x70>)
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	6879      	ldr	r1, [r7, #4]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7ff ffb1 	bl	8016ef4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	3301      	adds	r3, #1
 8016f96:	60fb      	str	r3, [r7, #12]
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2b03      	cmp	r3, #3
 8016f9c:	d9f0      	bls.n	8016f80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016f9e:	bf00      	nop
 8016fa0:	bf00      	nop
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	08022b34 	.word	0x08022b34
 8016fac:	08022c4c 	.word	0x08022c4c
 8016fb0:	08022be0 	.word	0x08022be0
 8016fb4:	08022c58 	.word	0x08022c58
 8016fb8:	08024e94 	.word	0x08024e94

08016fbc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016fbc:	b5b0      	push	{r4, r5, r7, lr}
 8016fbe:	b088      	sub	sp, #32
 8016fc0:	af04      	add	r7, sp, #16
 8016fc2:	6078      	str	r0, [r7, #4]
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d106      	bne.n	8016fdc <tcp_close_shutdown+0x20>
 8016fce:	4b63      	ldr	r3, [pc, #396]	; (801715c <tcp_close_shutdown+0x1a0>)
 8016fd0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016fd4:	4962      	ldr	r1, [pc, #392]	; (8017160 <tcp_close_shutdown+0x1a4>)
 8016fd6:	4863      	ldr	r0, [pc, #396]	; (8017164 <tcp_close_shutdown+0x1a8>)
 8016fd8:	f007 fed8 	bl	801ed8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016fdc:	78fb      	ldrb	r3, [r7, #3]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d067      	beq.n	80170b2 <tcp_close_shutdown+0xf6>
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	7d1b      	ldrb	r3, [r3, #20]
 8016fe6:	2b04      	cmp	r3, #4
 8016fe8:	d003      	beq.n	8016ff2 <tcp_close_shutdown+0x36>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	7d1b      	ldrb	r3, [r3, #20]
 8016fee:	2b07      	cmp	r3, #7
 8016ff0:	d15f      	bne.n	80170b2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d105      	bne.n	8017006 <tcp_close_shutdown+0x4a>
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ffe:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8017002:	4293      	cmp	r3, r2
 8017004:	d055      	beq.n	80170b2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	8b5b      	ldrh	r3, [r3, #26]
 801700a:	f003 0310 	and.w	r3, r3, #16
 801700e:	2b00      	cmp	r3, #0
 8017010:	d106      	bne.n	8017020 <tcp_close_shutdown+0x64>
 8017012:	4b52      	ldr	r3, [pc, #328]	; (801715c <tcp_close_shutdown+0x1a0>)
 8017014:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017018:	4953      	ldr	r1, [pc, #332]	; (8017168 <tcp_close_shutdown+0x1ac>)
 801701a:	4852      	ldr	r0, [pc, #328]	; (8017164 <tcp_close_shutdown+0x1a8>)
 801701c:	f007 feb6 	bl	801ed8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017028:	687d      	ldr	r5, [r7, #4]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	3304      	adds	r3, #4
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	8ad2      	ldrh	r2, [r2, #22]
 8017032:	6879      	ldr	r1, [r7, #4]
 8017034:	8b09      	ldrh	r1, [r1, #24]
 8017036:	9102      	str	r1, [sp, #8]
 8017038:	9201      	str	r2, [sp, #4]
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	462b      	mov	r3, r5
 801703e:	4622      	mov	r2, r4
 8017040:	4601      	mov	r1, r0
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f005 fdbc 	bl	801cbc0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f001 fb9b 	bl	8018784 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801704e:	4b47      	ldr	r3, [pc, #284]	; (801716c <tcp_close_shutdown+0x1b0>)
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	687a      	ldr	r2, [r7, #4]
 8017054:	429a      	cmp	r2, r3
 8017056:	d105      	bne.n	8017064 <tcp_close_shutdown+0xa8>
 8017058:	4b44      	ldr	r3, [pc, #272]	; (801716c <tcp_close_shutdown+0x1b0>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	68db      	ldr	r3, [r3, #12]
 801705e:	4a43      	ldr	r2, [pc, #268]	; (801716c <tcp_close_shutdown+0x1b0>)
 8017060:	6013      	str	r3, [r2, #0]
 8017062:	e013      	b.n	801708c <tcp_close_shutdown+0xd0>
 8017064:	4b41      	ldr	r3, [pc, #260]	; (801716c <tcp_close_shutdown+0x1b0>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	60fb      	str	r3, [r7, #12]
 801706a:	e00c      	b.n	8017086 <tcp_close_shutdown+0xca>
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	429a      	cmp	r2, r3
 8017074:	d104      	bne.n	8017080 <tcp_close_shutdown+0xc4>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	68da      	ldr	r2, [r3, #12]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	60da      	str	r2, [r3, #12]
 801707e:	e005      	b.n	801708c <tcp_close_shutdown+0xd0>
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	68db      	ldr	r3, [r3, #12]
 8017084:	60fb      	str	r3, [r7, #12]
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d1ef      	bne.n	801706c <tcp_close_shutdown+0xb0>
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2200      	movs	r2, #0
 8017090:	60da      	str	r2, [r3, #12]
 8017092:	4b37      	ldr	r3, [pc, #220]	; (8017170 <tcp_close_shutdown+0x1b4>)
 8017094:	2201      	movs	r2, #1
 8017096:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8017098:	4b36      	ldr	r3, [pc, #216]	; (8017174 <tcp_close_shutdown+0x1b8>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d102      	bne.n	80170a8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80170a2:	f004 f831 	bl	801b108 <tcp_trigger_input_pcb_close>
 80170a6:	e002      	b.n	80170ae <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f7ff fed5 	bl	8016e58 <tcp_free>
      }
      return ERR_OK;
 80170ae:	2300      	movs	r3, #0
 80170b0:	e050      	b.n	8017154 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	7d1b      	ldrb	r3, [r3, #20]
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	d03b      	beq.n	8017132 <tcp_close_shutdown+0x176>
 80170ba:	2b02      	cmp	r3, #2
 80170bc:	dc44      	bgt.n	8017148 <tcp_close_shutdown+0x18c>
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d002      	beq.n	80170c8 <tcp_close_shutdown+0x10c>
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d02a      	beq.n	801711c <tcp_close_shutdown+0x160>
 80170c6:	e03f      	b.n	8017148 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	8adb      	ldrh	r3, [r3, #22]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d021      	beq.n	8017114 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80170d0:	4b29      	ldr	r3, [pc, #164]	; (8017178 <tcp_close_shutdown+0x1bc>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d105      	bne.n	80170e6 <tcp_close_shutdown+0x12a>
 80170da:	4b27      	ldr	r3, [pc, #156]	; (8017178 <tcp_close_shutdown+0x1bc>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	68db      	ldr	r3, [r3, #12]
 80170e0:	4a25      	ldr	r2, [pc, #148]	; (8017178 <tcp_close_shutdown+0x1bc>)
 80170e2:	6013      	str	r3, [r2, #0]
 80170e4:	e013      	b.n	801710e <tcp_close_shutdown+0x152>
 80170e6:	4b24      	ldr	r3, [pc, #144]	; (8017178 <tcp_close_shutdown+0x1bc>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	60bb      	str	r3, [r7, #8]
 80170ec:	e00c      	b.n	8017108 <tcp_close_shutdown+0x14c>
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	68db      	ldr	r3, [r3, #12]
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d104      	bne.n	8017102 <tcp_close_shutdown+0x146>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	68da      	ldr	r2, [r3, #12]
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	60da      	str	r2, [r3, #12]
 8017100:	e005      	b.n	801710e <tcp_close_shutdown+0x152>
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	68db      	ldr	r3, [r3, #12]
 8017106:	60bb      	str	r3, [r7, #8]
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d1ef      	bne.n	80170ee <tcp_close_shutdown+0x132>
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2200      	movs	r2, #0
 8017112:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f7ff fe9f 	bl	8016e58 <tcp_free>
      break;
 801711a:	e01a      	b.n	8017152 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f7ff ff13 	bl	8016f48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017122:	6879      	ldr	r1, [r7, #4]
 8017124:	4815      	ldr	r0, [pc, #84]	; (801717c <tcp_close_shutdown+0x1c0>)
 8017126:	f001 fb7d 	bl	8018824 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801712a:	6878      	ldr	r0, [r7, #4]
 801712c:	f7ff feb0 	bl	8016e90 <tcp_free_listen>
      break;
 8017130:	e00f      	b.n	8017152 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017132:	6879      	ldr	r1, [r7, #4]
 8017134:	480d      	ldr	r0, [pc, #52]	; (801716c <tcp_close_shutdown+0x1b0>)
 8017136:	f001 fb75 	bl	8018824 <tcp_pcb_remove>
 801713a:	4b0d      	ldr	r3, [pc, #52]	; (8017170 <tcp_close_shutdown+0x1b4>)
 801713c:	2201      	movs	r2, #1
 801713e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f7ff fe89 	bl	8016e58 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8017146:	e004      	b.n	8017152 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f000 f819 	bl	8017180 <tcp_close_shutdown_fin>
 801714e:	4603      	mov	r3, r0
 8017150:	e000      	b.n	8017154 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8017152:	2300      	movs	r3, #0
}
 8017154:	4618      	mov	r0, r3
 8017156:	3710      	adds	r7, #16
 8017158:	46bd      	mov	sp, r7
 801715a:	bdb0      	pop	{r4, r5, r7, pc}
 801715c:	08022b34 	.word	0x08022b34
 8017160:	08022c70 	.word	0x08022c70
 8017164:	08022be0 	.word	0x08022be0
 8017168:	08022c90 	.word	0x08022c90
 801716c:	20010374 	.word	0x20010374
 8017170:	20010370 	.word	0x20010370
 8017174:	20010388 	.word	0x20010388
 8017178:	20010380 	.word	0x20010380
 801717c:	2001037c 	.word	0x2001037c

08017180 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b084      	sub	sp, #16
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d106      	bne.n	801719c <tcp_close_shutdown_fin+0x1c>
 801718e:	4b2e      	ldr	r3, [pc, #184]	; (8017248 <tcp_close_shutdown_fin+0xc8>)
 8017190:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017194:	492d      	ldr	r1, [pc, #180]	; (801724c <tcp_close_shutdown_fin+0xcc>)
 8017196:	482e      	ldr	r0, [pc, #184]	; (8017250 <tcp_close_shutdown_fin+0xd0>)
 8017198:	f007 fdf8 	bl	801ed8c <iprintf>

  switch (pcb->state) {
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	7d1b      	ldrb	r3, [r3, #20]
 80171a0:	2b07      	cmp	r3, #7
 80171a2:	d020      	beq.n	80171e6 <tcp_close_shutdown_fin+0x66>
 80171a4:	2b07      	cmp	r3, #7
 80171a6:	dc2b      	bgt.n	8017200 <tcp_close_shutdown_fin+0x80>
 80171a8:	2b03      	cmp	r3, #3
 80171aa:	d002      	beq.n	80171b2 <tcp_close_shutdown_fin+0x32>
 80171ac:	2b04      	cmp	r3, #4
 80171ae:	d00d      	beq.n	80171cc <tcp_close_shutdown_fin+0x4c>
 80171b0:	e026      	b.n	8017200 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f004 fe12 	bl	801bddc <tcp_send_fin>
 80171b8:	4603      	mov	r3, r0
 80171ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80171bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d11f      	bne.n	8017204 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2205      	movs	r2, #5
 80171c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80171ca:	e01b      	b.n	8017204 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f004 fe05 	bl	801bddc <tcp_send_fin>
 80171d2:	4603      	mov	r3, r0
 80171d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80171d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d114      	bne.n	8017208 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	2205      	movs	r2, #5
 80171e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80171e4:	e010      	b.n	8017208 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f004 fdf8 	bl	801bddc <tcp_send_fin>
 80171ec:	4603      	mov	r3, r0
 80171ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80171f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d109      	bne.n	801720c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2209      	movs	r2, #9
 80171fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80171fe:	e005      	b.n	801720c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017200:	2300      	movs	r3, #0
 8017202:	e01c      	b.n	801723e <tcp_close_shutdown_fin+0xbe>
      break;
 8017204:	bf00      	nop
 8017206:	e002      	b.n	801720e <tcp_close_shutdown_fin+0x8e>
      break;
 8017208:	bf00      	nop
 801720a:	e000      	b.n	801720e <tcp_close_shutdown_fin+0x8e>
      break;
 801720c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801720e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d103      	bne.n	801721e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f004 ff1e 	bl	801c058 <tcp_output>
 801721c:	e00d      	b.n	801723a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801721e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017226:	d108      	bne.n	801723a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	8b5b      	ldrh	r3, [r3, #26]
 801722c:	f043 0308 	orr.w	r3, r3, #8
 8017230:	b29a      	uxth	r2, r3
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8017236:	2300      	movs	r3, #0
 8017238:	e001      	b.n	801723e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801723a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801723e:	4618      	mov	r0, r3
 8017240:	3710      	adds	r7, #16
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}
 8017246:	bf00      	nop
 8017248:	08022b34 	.word	0x08022b34
 801724c:	08022c4c 	.word	0x08022c4c
 8017250:	08022be0 	.word	0x08022be0

08017254 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d109      	bne.n	8017276 <tcp_close+0x22>
 8017262:	4b0f      	ldr	r3, [pc, #60]	; (80172a0 <tcp_close+0x4c>)
 8017264:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017268:	490e      	ldr	r1, [pc, #56]	; (80172a4 <tcp_close+0x50>)
 801726a:	480f      	ldr	r0, [pc, #60]	; (80172a8 <tcp_close+0x54>)
 801726c:	f007 fd8e 	bl	801ed8c <iprintf>
 8017270:	f06f 030f 	mvn.w	r3, #15
 8017274:	e00f      	b.n	8017296 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	7d1b      	ldrb	r3, [r3, #20]
 801727a:	2b01      	cmp	r3, #1
 801727c:	d006      	beq.n	801728c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	8b5b      	ldrh	r3, [r3, #26]
 8017282:	f043 0310 	orr.w	r3, r3, #16
 8017286:	b29a      	uxth	r2, r3
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801728c:	2101      	movs	r1, #1
 801728e:	6878      	ldr	r0, [r7, #4]
 8017290:	f7ff fe94 	bl	8016fbc <tcp_close_shutdown>
 8017294:	4603      	mov	r3, r0
}
 8017296:	4618      	mov	r0, r3
 8017298:	3708      	adds	r7, #8
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
 801729e:	bf00      	nop
 80172a0:	08022b34 	.word	0x08022b34
 80172a4:	08022cac 	.word	0x08022cac
 80172a8:	08022be0 	.word	0x08022be0

080172ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d109      	bne.n	80172d2 <tcp_shutdown+0x26>
 80172be:	4b26      	ldr	r3, [pc, #152]	; (8017358 <tcp_shutdown+0xac>)
 80172c0:	f240 2207 	movw	r2, #519	; 0x207
 80172c4:	4925      	ldr	r1, [pc, #148]	; (801735c <tcp_shutdown+0xb0>)
 80172c6:	4826      	ldr	r0, [pc, #152]	; (8017360 <tcp_shutdown+0xb4>)
 80172c8:	f007 fd60 	bl	801ed8c <iprintf>
 80172cc:	f06f 030f 	mvn.w	r3, #15
 80172d0:	e03d      	b.n	801734e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	7d1b      	ldrb	r3, [r3, #20]
 80172d6:	2b01      	cmp	r3, #1
 80172d8:	d102      	bne.n	80172e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 80172da:	f06f 030a 	mvn.w	r3, #10
 80172de:	e036      	b.n	801734e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d01b      	beq.n	801731e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	8b5b      	ldrh	r3, [r3, #26]
 80172ea:	f043 0310 	orr.w	r3, r3, #16
 80172ee:	b29a      	uxth	r2, r3
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d005      	beq.n	8017306 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80172fa:	2101      	movs	r1, #1
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	f7ff fe5d 	bl	8016fbc <tcp_close_shutdown>
 8017302:	4603      	mov	r3, r0
 8017304:	e023      	b.n	801734e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801730a:	2b00      	cmp	r3, #0
 801730c:	d007      	beq.n	801731e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017312:	4618      	mov	r0, r3
 8017314:	f7ff fae4 	bl	80168e0 <pbuf_free>
      pcb->refused_data = NULL;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	2200      	movs	r2, #0
 801731c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d013      	beq.n	801734c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	7d1b      	ldrb	r3, [r3, #20]
 8017328:	2b04      	cmp	r3, #4
 801732a:	dc02      	bgt.n	8017332 <tcp_shutdown+0x86>
 801732c:	2b03      	cmp	r3, #3
 801732e:	da02      	bge.n	8017336 <tcp_shutdown+0x8a>
 8017330:	e009      	b.n	8017346 <tcp_shutdown+0x9a>
 8017332:	2b07      	cmp	r3, #7
 8017334:	d107      	bne.n	8017346 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	b2db      	uxtb	r3, r3
 801733a:	4619      	mov	r1, r3
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f7ff fe3d 	bl	8016fbc <tcp_close_shutdown>
 8017342:	4603      	mov	r3, r0
 8017344:	e003      	b.n	801734e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8017346:	f06f 030a 	mvn.w	r3, #10
 801734a:	e000      	b.n	801734e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801734c:	2300      	movs	r3, #0
}
 801734e:	4618      	mov	r0, r3
 8017350:	3710      	adds	r7, #16
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	08022b34 	.word	0x08022b34
 801735c:	08022cc4 	.word	0x08022cc4
 8017360:	08022be0 	.word	0x08022be0

08017364 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b08e      	sub	sp, #56	; 0x38
 8017368:	af04      	add	r7, sp, #16
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d107      	bne.n	8017384 <tcp_abandon+0x20>
 8017374:	4b52      	ldr	r3, [pc, #328]	; (80174c0 <tcp_abandon+0x15c>)
 8017376:	f240 223d 	movw	r2, #573	; 0x23d
 801737a:	4952      	ldr	r1, [pc, #328]	; (80174c4 <tcp_abandon+0x160>)
 801737c:	4852      	ldr	r0, [pc, #328]	; (80174c8 <tcp_abandon+0x164>)
 801737e:	f007 fd05 	bl	801ed8c <iprintf>
 8017382:	e099      	b.n	80174b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	7d1b      	ldrb	r3, [r3, #20]
 8017388:	2b01      	cmp	r3, #1
 801738a:	d106      	bne.n	801739a <tcp_abandon+0x36>
 801738c:	4b4c      	ldr	r3, [pc, #304]	; (80174c0 <tcp_abandon+0x15c>)
 801738e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017392:	494e      	ldr	r1, [pc, #312]	; (80174cc <tcp_abandon+0x168>)
 8017394:	484c      	ldr	r0, [pc, #304]	; (80174c8 <tcp_abandon+0x164>)
 8017396:	f007 fcf9 	bl	801ed8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	7d1b      	ldrb	r3, [r3, #20]
 801739e:	2b0a      	cmp	r3, #10
 80173a0:	d107      	bne.n	80173b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80173a2:	6879      	ldr	r1, [r7, #4]
 80173a4:	484a      	ldr	r0, [pc, #296]	; (80174d0 <tcp_abandon+0x16c>)
 80173a6:	f001 fa3d 	bl	8018824 <tcp_pcb_remove>
    tcp_free(pcb);
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f7ff fd54 	bl	8016e58 <tcp_free>
 80173b0:	e082      	b.n	80174b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80173b6:	2300      	movs	r3, #0
 80173b8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	691b      	ldr	r3, [r3, #16]
 80173d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	7d1b      	ldrb	r3, [r3, #20]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d126      	bne.n	801742a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	8adb      	ldrh	r3, [r3, #22]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d02e      	beq.n	8017442 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80173e4:	4b3b      	ldr	r3, [pc, #236]	; (80174d4 <tcp_abandon+0x170>)
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	687a      	ldr	r2, [r7, #4]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d105      	bne.n	80173fa <tcp_abandon+0x96>
 80173ee:	4b39      	ldr	r3, [pc, #228]	; (80174d4 <tcp_abandon+0x170>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	68db      	ldr	r3, [r3, #12]
 80173f4:	4a37      	ldr	r2, [pc, #220]	; (80174d4 <tcp_abandon+0x170>)
 80173f6:	6013      	str	r3, [r2, #0]
 80173f8:	e013      	b.n	8017422 <tcp_abandon+0xbe>
 80173fa:	4b36      	ldr	r3, [pc, #216]	; (80174d4 <tcp_abandon+0x170>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	61fb      	str	r3, [r7, #28]
 8017400:	e00c      	b.n	801741c <tcp_abandon+0xb8>
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	68db      	ldr	r3, [r3, #12]
 8017406:	687a      	ldr	r2, [r7, #4]
 8017408:	429a      	cmp	r2, r3
 801740a:	d104      	bne.n	8017416 <tcp_abandon+0xb2>
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	68da      	ldr	r2, [r3, #12]
 8017410:	69fb      	ldr	r3, [r7, #28]
 8017412:	60da      	str	r2, [r3, #12]
 8017414:	e005      	b.n	8017422 <tcp_abandon+0xbe>
 8017416:	69fb      	ldr	r3, [r7, #28]
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	61fb      	str	r3, [r7, #28]
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d1ef      	bne.n	8017402 <tcp_abandon+0x9e>
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2200      	movs	r2, #0
 8017426:	60da      	str	r2, [r3, #12]
 8017428:	e00b      	b.n	8017442 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	8adb      	ldrh	r3, [r3, #22]
 8017432:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017434:	6879      	ldr	r1, [r7, #4]
 8017436:	4828      	ldr	r0, [pc, #160]	; (80174d8 <tcp_abandon+0x174>)
 8017438:	f001 f9f4 	bl	8018824 <tcp_pcb_remove>
 801743c:	4b27      	ldr	r3, [pc, #156]	; (80174dc <tcp_abandon+0x178>)
 801743e:	2201      	movs	r2, #1
 8017440:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017446:	2b00      	cmp	r3, #0
 8017448:	d004      	beq.n	8017454 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801744e:	4618      	mov	r0, r3
 8017450:	f000 fec8 	bl	80181e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017458:	2b00      	cmp	r3, #0
 801745a:	d004      	beq.n	8017466 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017460:	4618      	mov	r0, r3
 8017462:	f000 febf 	bl	80181e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801746a:	2b00      	cmp	r3, #0
 801746c:	d004      	beq.n	8017478 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017472:	4618      	mov	r0, r3
 8017474:	f000 feb6 	bl	80181e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747a:	2b00      	cmp	r3, #0
 801747c:	d00e      	beq.n	801749c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801747e:	6879      	ldr	r1, [r7, #4]
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	3304      	adds	r3, #4
 8017484:	687a      	ldr	r2, [r7, #4]
 8017486:	8b12      	ldrh	r2, [r2, #24]
 8017488:	9202      	str	r2, [sp, #8]
 801748a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801748c:	9201      	str	r2, [sp, #4]
 801748e:	9300      	str	r3, [sp, #0]
 8017490:	460b      	mov	r3, r1
 8017492:	697a      	ldr	r2, [r7, #20]
 8017494:	69b9      	ldr	r1, [r7, #24]
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f005 fb92 	bl	801cbc0 <tcp_rst>
    }
    last_state = pcb->state;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	7d1b      	ldrb	r3, [r3, #20]
 80174a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7ff fcd8 	bl	8016e58 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d004      	beq.n	80174b8 <tcp_abandon+0x154>
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	f06f 010c 	mvn.w	r1, #12
 80174b4:	68f8      	ldr	r0, [r7, #12]
 80174b6:	4798      	blx	r3
  }
}
 80174b8:	3728      	adds	r7, #40	; 0x28
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}
 80174be:	bf00      	nop
 80174c0:	08022b34 	.word	0x08022b34
 80174c4:	08022ce0 	.word	0x08022ce0
 80174c8:	08022be0 	.word	0x08022be0
 80174cc:	08022cfc 	.word	0x08022cfc
 80174d0:	20010384 	.word	0x20010384
 80174d4:	20010380 	.word	0x20010380
 80174d8:	20010374 	.word	0x20010374
 80174dc:	20010370 	.word	0x20010370

080174e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b082      	sub	sp, #8
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80174e8:	2101      	movs	r1, #1
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f7ff ff3a 	bl	8017364 <tcp_abandon>
}
 80174f0:	bf00      	nop
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b088      	sub	sp, #32
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	60f8      	str	r0, [r7, #12]
 8017500:	60b9      	str	r1, [r7, #8]
 8017502:	4613      	mov	r3, r2
 8017504:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8017506:	2304      	movs	r3, #4
 8017508:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d101      	bne.n	8017514 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017510:	4b3e      	ldr	r3, [pc, #248]	; (801760c <tcp_bind+0x114>)
 8017512:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d109      	bne.n	801752e <tcp_bind+0x36>
 801751a:	4b3d      	ldr	r3, [pc, #244]	; (8017610 <tcp_bind+0x118>)
 801751c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017520:	493c      	ldr	r1, [pc, #240]	; (8017614 <tcp_bind+0x11c>)
 8017522:	483d      	ldr	r0, [pc, #244]	; (8017618 <tcp_bind+0x120>)
 8017524:	f007 fc32 	bl	801ed8c <iprintf>
 8017528:	f06f 030f 	mvn.w	r3, #15
 801752c:	e06a      	b.n	8017604 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	7d1b      	ldrb	r3, [r3, #20]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d009      	beq.n	801754a <tcp_bind+0x52>
 8017536:	4b36      	ldr	r3, [pc, #216]	; (8017610 <tcp_bind+0x118>)
 8017538:	f240 22ab 	movw	r2, #683	; 0x2ab
 801753c:	4937      	ldr	r1, [pc, #220]	; (801761c <tcp_bind+0x124>)
 801753e:	4836      	ldr	r0, [pc, #216]	; (8017618 <tcp_bind+0x120>)
 8017540:	f007 fc24 	bl	801ed8c <iprintf>
 8017544:	f06f 0305 	mvn.w	r3, #5
 8017548:	e05c      	b.n	8017604 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801754a:	88fb      	ldrh	r3, [r7, #6]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d109      	bne.n	8017564 <tcp_bind+0x6c>
    port = tcp_new_port();
 8017550:	f000 f9e0 	bl	8017914 <tcp_new_port>
 8017554:	4603      	mov	r3, r0
 8017556:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017558:	88fb      	ldrh	r3, [r7, #6]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d135      	bne.n	80175ca <tcp_bind+0xd2>
      return ERR_BUF;
 801755e:	f06f 0301 	mvn.w	r3, #1
 8017562:	e04f      	b.n	8017604 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017564:	2300      	movs	r3, #0
 8017566:	61fb      	str	r3, [r7, #28]
 8017568:	e02b      	b.n	80175c2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801756a:	4a2d      	ldr	r2, [pc, #180]	; (8017620 <tcp_bind+0x128>)
 801756c:	69fb      	ldr	r3, [r7, #28]
 801756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	61bb      	str	r3, [r7, #24]
 8017576:	e01e      	b.n	80175b6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8017578:	69bb      	ldr	r3, [r7, #24]
 801757a:	8adb      	ldrh	r3, [r3, #22]
 801757c:	88fa      	ldrh	r2, [r7, #6]
 801757e:	429a      	cmp	r2, r3
 8017580:	d116      	bne.n	80175b0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017582:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017584:	2b00      	cmp	r3, #0
 8017586:	d010      	beq.n	80175aa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d00c      	beq.n	80175aa <tcp_bind+0xb2>
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d009      	beq.n	80175aa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d005      	beq.n	80175aa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801759e:	69bb      	ldr	r3, [r7, #24]
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d102      	bne.n	80175b0 <tcp_bind+0xb8>
              return ERR_USE;
 80175aa:	f06f 0307 	mvn.w	r3, #7
 80175ae:	e029      	b.n	8017604 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	61bb      	str	r3, [r7, #24]
 80175b6:	69bb      	ldr	r3, [r7, #24]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1dd      	bne.n	8017578 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	3301      	adds	r3, #1
 80175c0:	61fb      	str	r3, [r7, #28]
 80175c2:	69fa      	ldr	r2, [r7, #28]
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	429a      	cmp	r2, r3
 80175c8:	dbcf      	blt.n	801756a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d00c      	beq.n	80175ea <tcp_bind+0xf2>
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d008      	beq.n	80175ea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d002      	beq.n	80175e4 <tcp_bind+0xec>
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	e000      	b.n	80175e6 <tcp_bind+0xee>
 80175e4:	2300      	movs	r3, #0
 80175e6:	68fa      	ldr	r2, [r7, #12]
 80175e8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	88fa      	ldrh	r2, [r7, #6]
 80175ee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80175f0:	4b0c      	ldr	r3, [pc, #48]	; (8017624 <tcp_bind+0x12c>)
 80175f2:	681a      	ldr	r2, [r3, #0]
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	60da      	str	r2, [r3, #12]
 80175f8:	4a0a      	ldr	r2, [pc, #40]	; (8017624 <tcp_bind+0x12c>)
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	6013      	str	r3, [r2, #0]
 80175fe:	f005 fca1 	bl	801cf44 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8017602:	2300      	movs	r3, #0
}
 8017604:	4618      	mov	r0, r3
 8017606:	3720      	adds	r7, #32
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}
 801760c:	08024da4 	.word	0x08024da4
 8017610:	08022b34 	.word	0x08022b34
 8017614:	08022d30 	.word	0x08022d30
 8017618:	08022be0 	.word	0x08022be0
 801761c:	08022d48 	.word	0x08022d48
 8017620:	08024e94 	.word	0x08024e94
 8017624:	20010380 	.word	0x20010380

08017628 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	4613      	mov	r3, r2
 8017634:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <tcp_accept_null+0x22>
 801763c:	4b07      	ldr	r3, [pc, #28]	; (801765c <tcp_accept_null+0x34>)
 801763e:	f240 320f 	movw	r2, #783	; 0x30f
 8017642:	4907      	ldr	r1, [pc, #28]	; (8017660 <tcp_accept_null+0x38>)
 8017644:	4807      	ldr	r0, [pc, #28]	; (8017664 <tcp_accept_null+0x3c>)
 8017646:	f007 fba1 	bl	801ed8c <iprintf>

  tcp_abort(pcb);
 801764a:	68b8      	ldr	r0, [r7, #8]
 801764c:	f7ff ff48 	bl	80174e0 <tcp_abort>

  return ERR_ABRT;
 8017650:	f06f 030c 	mvn.w	r3, #12
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	08022b34 	.word	0x08022b34
 8017660:	08022d70 	.word	0x08022d70
 8017664:	08022be0 	.word	0x08022be0

08017668 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b088      	sub	sp, #32
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	460b      	mov	r3, r1
 8017672:	607a      	str	r2, [r7, #4]
 8017674:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017676:	2300      	movs	r3, #0
 8017678:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d109      	bne.n	8017694 <tcp_listen_with_backlog_and_err+0x2c>
 8017680:	4b47      	ldr	r3, [pc, #284]	; (80177a0 <tcp_listen_with_backlog_and_err+0x138>)
 8017682:	f240 3259 	movw	r2, #857	; 0x359
 8017686:	4947      	ldr	r1, [pc, #284]	; (80177a4 <tcp_listen_with_backlog_and_err+0x13c>)
 8017688:	4847      	ldr	r0, [pc, #284]	; (80177a8 <tcp_listen_with_backlog_and_err+0x140>)
 801768a:	f007 fb7f 	bl	801ed8c <iprintf>
 801768e:	23f0      	movs	r3, #240	; 0xf0
 8017690:	76fb      	strb	r3, [r7, #27]
 8017692:	e079      	b.n	8017788 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	7d1b      	ldrb	r3, [r3, #20]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d009      	beq.n	80176b0 <tcp_listen_with_backlog_and_err+0x48>
 801769c:	4b40      	ldr	r3, [pc, #256]	; (80177a0 <tcp_listen_with_backlog_and_err+0x138>)
 801769e:	f240 325a 	movw	r2, #858	; 0x35a
 80176a2:	4942      	ldr	r1, [pc, #264]	; (80177ac <tcp_listen_with_backlog_and_err+0x144>)
 80176a4:	4840      	ldr	r0, [pc, #256]	; (80177a8 <tcp_listen_with_backlog_and_err+0x140>)
 80176a6:	f007 fb71 	bl	801ed8c <iprintf>
 80176aa:	23f1      	movs	r3, #241	; 0xf1
 80176ac:	76fb      	strb	r3, [r7, #27]
 80176ae:	e06b      	b.n	8017788 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	7d1b      	ldrb	r3, [r3, #20]
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d104      	bne.n	80176c2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80176bc:	23f7      	movs	r3, #247	; 0xf7
 80176be:	76fb      	strb	r3, [r7, #27]
    goto done;
 80176c0:	e062      	b.n	8017788 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80176c2:	2002      	movs	r0, #2
 80176c4:	f7fe f9e6 	bl	8015a94 <memp_malloc>
 80176c8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80176ca:	69fb      	ldr	r3, [r7, #28]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80176d0:	23ff      	movs	r3, #255	; 0xff
 80176d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80176d4:	e058      	b.n	8017788 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	691a      	ldr	r2, [r3, #16]
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	8ada      	ldrh	r2, [r3, #22]
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	2201      	movs	r2, #1
 80176ea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	7d5a      	ldrb	r2, [r3, #21]
 80176f0:	69fb      	ldr	r3, [r7, #28]
 80176f2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	7a5a      	ldrb	r2, [r3, #9]
 80176f8:	69fb      	ldr	r3, [r7, #28]
 80176fa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	2200      	movs	r2, #0
 8017700:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	7ada      	ldrb	r2, [r3, #11]
 8017706:	69fb      	ldr	r3, [r7, #28]
 8017708:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	7a9a      	ldrb	r2, [r3, #10]
 801770e:	69fb      	ldr	r3, [r7, #28]
 8017710:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	69fb      	ldr	r3, [r7, #28]
 8017718:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	8adb      	ldrh	r3, [r3, #22]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d021      	beq.n	8017766 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017722:	4b23      	ldr	r3, [pc, #140]	; (80177b0 <tcp_listen_with_backlog_and_err+0x148>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	68fa      	ldr	r2, [r7, #12]
 8017728:	429a      	cmp	r2, r3
 801772a:	d105      	bne.n	8017738 <tcp_listen_with_backlog_and_err+0xd0>
 801772c:	4b20      	ldr	r3, [pc, #128]	; (80177b0 <tcp_listen_with_backlog_and_err+0x148>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	68db      	ldr	r3, [r3, #12]
 8017732:	4a1f      	ldr	r2, [pc, #124]	; (80177b0 <tcp_listen_with_backlog_and_err+0x148>)
 8017734:	6013      	str	r3, [r2, #0]
 8017736:	e013      	b.n	8017760 <tcp_listen_with_backlog_and_err+0xf8>
 8017738:	4b1d      	ldr	r3, [pc, #116]	; (80177b0 <tcp_listen_with_backlog_and_err+0x148>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	617b      	str	r3, [r7, #20]
 801773e:	e00c      	b.n	801775a <tcp_listen_with_backlog_and_err+0xf2>
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	68db      	ldr	r3, [r3, #12]
 8017744:	68fa      	ldr	r2, [r7, #12]
 8017746:	429a      	cmp	r2, r3
 8017748:	d104      	bne.n	8017754 <tcp_listen_with_backlog_and_err+0xec>
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	68da      	ldr	r2, [r3, #12]
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	60da      	str	r2, [r3, #12]
 8017752:	e005      	b.n	8017760 <tcp_listen_with_backlog_and_err+0xf8>
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	617b      	str	r3, [r7, #20]
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d1ef      	bne.n	8017740 <tcp_listen_with_backlog_and_err+0xd8>
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	2200      	movs	r2, #0
 8017764:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8017766:	68f8      	ldr	r0, [r7, #12]
 8017768:	f7ff fb76 	bl	8016e58 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801776c:	69fb      	ldr	r3, [r7, #28]
 801776e:	4a11      	ldr	r2, [pc, #68]	; (80177b4 <tcp_listen_with_backlog_and_err+0x14c>)
 8017770:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017772:	4b11      	ldr	r3, [pc, #68]	; (80177b8 <tcp_listen_with_backlog_and_err+0x150>)
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	69fb      	ldr	r3, [r7, #28]
 8017778:	60da      	str	r2, [r3, #12]
 801777a:	4a0f      	ldr	r2, [pc, #60]	; (80177b8 <tcp_listen_with_backlog_and_err+0x150>)
 801777c:	69fb      	ldr	r3, [r7, #28]
 801777e:	6013      	str	r3, [r2, #0]
 8017780:	f005 fbe0 	bl	801cf44 <tcp_timer_needed>
  res = ERR_OK;
 8017784:	2300      	movs	r3, #0
 8017786:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d002      	beq.n	8017794 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	7efa      	ldrb	r2, [r7, #27]
 8017792:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017794:	69fb      	ldr	r3, [r7, #28]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3720      	adds	r7, #32
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	08022b34 	.word	0x08022b34
 80177a4:	08022d90 	.word	0x08022d90
 80177a8:	08022be0 	.word	0x08022be0
 80177ac:	08022dc0 	.word	0x08022dc0
 80177b0:	20010380 	.word	0x20010380
 80177b4:	08017629 	.word	0x08017629
 80177b8:	2001037c 	.word	0x2001037c

080177bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b084      	sub	sp, #16
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d106      	bne.n	80177d8 <tcp_update_rcv_ann_wnd+0x1c>
 80177ca:	4b25      	ldr	r3, [pc, #148]	; (8017860 <tcp_update_rcv_ann_wnd+0xa4>)
 80177cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80177d0:	4924      	ldr	r1, [pc, #144]	; (8017864 <tcp_update_rcv_ann_wnd+0xa8>)
 80177d2:	4825      	ldr	r0, [pc, #148]	; (8017868 <tcp_update_rcv_ann_wnd+0xac>)
 80177d4:	f007 fada 	bl	801ed8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80177e0:	4413      	add	r3, r2
 80177e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177e8:	687a      	ldr	r2, [r7, #4]
 80177ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80177ec:	f640 3168 	movw	r1, #2920	; 0xb68
 80177f0:	428a      	cmp	r2, r1
 80177f2:	bf28      	it	cs
 80177f4:	460a      	movcs	r2, r1
 80177f6:	b292      	uxth	r2, r2
 80177f8:	4413      	add	r3, r2
 80177fa:	68fa      	ldr	r2, [r7, #12]
 80177fc:	1ad3      	subs	r3, r2, r3
 80177fe:	2b00      	cmp	r3, #0
 8017800:	db08      	blt.n	8017814 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801780e:	68fa      	ldr	r2, [r7, #12]
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	e020      	b.n	8017856 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801781c:	1ad3      	subs	r3, r2, r3
 801781e:	2b00      	cmp	r3, #0
 8017820:	dd03      	ble.n	801782a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2200      	movs	r2, #0
 8017826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017828:	e014      	b.n	8017854 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017832:	1ad3      	subs	r3, r2, r3
 8017834:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801783c:	d306      	bcc.n	801784c <tcp_update_rcv_ann_wnd+0x90>
 801783e:	4b08      	ldr	r3, [pc, #32]	; (8017860 <tcp_update_rcv_ann_wnd+0xa4>)
 8017840:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017844:	4909      	ldr	r1, [pc, #36]	; (801786c <tcp_update_rcv_ann_wnd+0xb0>)
 8017846:	4808      	ldr	r0, [pc, #32]	; (8017868 <tcp_update_rcv_ann_wnd+0xac>)
 8017848:	f007 faa0 	bl	801ed8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	b29a      	uxth	r2, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017854:	2300      	movs	r3, #0
  }
}
 8017856:	4618      	mov	r0, r3
 8017858:	3710      	adds	r7, #16
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
 801785e:	bf00      	nop
 8017860:	08022b34 	.word	0x08022b34
 8017864:	08022df8 	.word	0x08022df8
 8017868:	08022be0 	.word	0x08022be0
 801786c:	08022e1c 	.word	0x08022e1c

08017870 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b084      	sub	sp, #16
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
 8017878:	460b      	mov	r3, r1
 801787a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d107      	bne.n	8017892 <tcp_recved+0x22>
 8017882:	4b20      	ldr	r3, [pc, #128]	; (8017904 <tcp_recved+0x94>)
 8017884:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017888:	491f      	ldr	r1, [pc, #124]	; (8017908 <tcp_recved+0x98>)
 801788a:	4820      	ldr	r0, [pc, #128]	; (801790c <tcp_recved+0x9c>)
 801788c:	f007 fa7e 	bl	801ed8c <iprintf>
 8017890:	e034      	b.n	80178fc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	7d1b      	ldrb	r3, [r3, #20]
 8017896:	2b01      	cmp	r3, #1
 8017898:	d106      	bne.n	80178a8 <tcp_recved+0x38>
 801789a:	4b1a      	ldr	r3, [pc, #104]	; (8017904 <tcp_recved+0x94>)
 801789c:	f240 32d2 	movw	r2, #978	; 0x3d2
 80178a0:	491b      	ldr	r1, [pc, #108]	; (8017910 <tcp_recved+0xa0>)
 80178a2:	481a      	ldr	r0, [pc, #104]	; (801790c <tcp_recved+0x9c>)
 80178a4:	f007 fa72 	bl	801ed8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80178ac:	887b      	ldrh	r3, [r7, #2]
 80178ae:	4413      	add	r3, r2
 80178b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80178b2:	89fb      	ldrh	r3, [r7, #14]
 80178b4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80178b8:	4293      	cmp	r3, r2
 80178ba:	d804      	bhi.n	80178c6 <tcp_recved+0x56>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178c0:	89fa      	ldrh	r2, [r7, #14]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d204      	bcs.n	80178d0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80178cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80178ce:	e002      	b.n	80178d6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	89fa      	ldrh	r2, [r7, #14]
 80178d4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f7ff ff70 	bl	80177bc <tcp_update_rcv_ann_wnd>
 80178dc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80178e4:	4293      	cmp	r3, r2
 80178e6:	d909      	bls.n	80178fc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	8b5b      	ldrh	r3, [r3, #26]
 80178ec:	f043 0302 	orr.w	r3, r3, #2
 80178f0:	b29a      	uxth	r2, r3
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f004 fbae 	bl	801c058 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80178fc:	3710      	adds	r7, #16
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	08022b34 	.word	0x08022b34
 8017908:	08022e38 	.word	0x08022e38
 801790c:	08022be0 	.word	0x08022be0
 8017910:	08022e50 	.word	0x08022e50

08017914 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017914:	b480      	push	{r7}
 8017916:	b083      	sub	sp, #12
 8017918:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801791a:	2300      	movs	r3, #0
 801791c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801791e:	4b1e      	ldr	r3, [pc, #120]	; (8017998 <tcp_new_port+0x84>)
 8017920:	881b      	ldrh	r3, [r3, #0]
 8017922:	3301      	adds	r3, #1
 8017924:	b29a      	uxth	r2, r3
 8017926:	4b1c      	ldr	r3, [pc, #112]	; (8017998 <tcp_new_port+0x84>)
 8017928:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801792a:	4b1b      	ldr	r3, [pc, #108]	; (8017998 <tcp_new_port+0x84>)
 801792c:	881b      	ldrh	r3, [r3, #0]
 801792e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017932:	4293      	cmp	r3, r2
 8017934:	d103      	bne.n	801793e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017936:	4b18      	ldr	r3, [pc, #96]	; (8017998 <tcp_new_port+0x84>)
 8017938:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801793c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801793e:	2300      	movs	r3, #0
 8017940:	71fb      	strb	r3, [r7, #7]
 8017942:	e01e      	b.n	8017982 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017944:	79fb      	ldrb	r3, [r7, #7]
 8017946:	4a15      	ldr	r2, [pc, #84]	; (801799c <tcp_new_port+0x88>)
 8017948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	603b      	str	r3, [r7, #0]
 8017950:	e011      	b.n	8017976 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	8ada      	ldrh	r2, [r3, #22]
 8017956:	4b10      	ldr	r3, [pc, #64]	; (8017998 <tcp_new_port+0x84>)
 8017958:	881b      	ldrh	r3, [r3, #0]
 801795a:	429a      	cmp	r2, r3
 801795c:	d108      	bne.n	8017970 <tcp_new_port+0x5c>
        n++;
 801795e:	88bb      	ldrh	r3, [r7, #4]
 8017960:	3301      	adds	r3, #1
 8017962:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017964:	88bb      	ldrh	r3, [r7, #4]
 8017966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801796a:	d3d8      	bcc.n	801791e <tcp_new_port+0xa>
          return 0;
 801796c:	2300      	movs	r3, #0
 801796e:	e00d      	b.n	801798c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	68db      	ldr	r3, [r3, #12]
 8017974:	603b      	str	r3, [r7, #0]
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d1ea      	bne.n	8017952 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801797c:	79fb      	ldrb	r3, [r7, #7]
 801797e:	3301      	adds	r3, #1
 8017980:	71fb      	strb	r3, [r7, #7]
 8017982:	79fb      	ldrb	r3, [r7, #7]
 8017984:	2b03      	cmp	r3, #3
 8017986:	d9dd      	bls.n	8017944 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017988:	4b03      	ldr	r3, [pc, #12]	; (8017998 <tcp_new_port+0x84>)
 801798a:	881b      	ldrh	r3, [r3, #0]
}
 801798c:	4618      	mov	r0, r3
 801798e:	370c      	adds	r7, #12
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr
 8017998:	20000034 	.word	0x20000034
 801799c:	08024e94 	.word	0x08024e94

080179a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80179a0:	b5b0      	push	{r4, r5, r7, lr}
 80179a2:	b090      	sub	sp, #64	; 0x40
 80179a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80179a6:	2300      	movs	r3, #0
 80179a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80179ac:	4b94      	ldr	r3, [pc, #592]	; (8017c00 <tcp_slowtmr+0x260>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	3301      	adds	r3, #1
 80179b2:	4a93      	ldr	r2, [pc, #588]	; (8017c00 <tcp_slowtmr+0x260>)
 80179b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80179b6:	4b93      	ldr	r3, [pc, #588]	; (8017c04 <tcp_slowtmr+0x264>)
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	3301      	adds	r3, #1
 80179bc:	b2da      	uxtb	r2, r3
 80179be:	4b91      	ldr	r3, [pc, #580]	; (8017c04 <tcp_slowtmr+0x264>)
 80179c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80179c2:	2300      	movs	r3, #0
 80179c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80179c6:	4b90      	ldr	r3, [pc, #576]	; (8017c08 <tcp_slowtmr+0x268>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80179cc:	e29d      	b.n	8017f0a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80179ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d0:	7d1b      	ldrb	r3, [r3, #20]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d106      	bne.n	80179e4 <tcp_slowtmr+0x44>
 80179d6:	4b8d      	ldr	r3, [pc, #564]	; (8017c0c <tcp_slowtmr+0x26c>)
 80179d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80179dc:	498c      	ldr	r1, [pc, #560]	; (8017c10 <tcp_slowtmr+0x270>)
 80179de:	488d      	ldr	r0, [pc, #564]	; (8017c14 <tcp_slowtmr+0x274>)
 80179e0:	f007 f9d4 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80179e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e6:	7d1b      	ldrb	r3, [r3, #20]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d106      	bne.n	80179fa <tcp_slowtmr+0x5a>
 80179ec:	4b87      	ldr	r3, [pc, #540]	; (8017c0c <tcp_slowtmr+0x26c>)
 80179ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80179f2:	4989      	ldr	r1, [pc, #548]	; (8017c18 <tcp_slowtmr+0x278>)
 80179f4:	4887      	ldr	r0, [pc, #540]	; (8017c14 <tcp_slowtmr+0x274>)
 80179f6:	f007 f9c9 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	7d1b      	ldrb	r3, [r3, #20]
 80179fe:	2b0a      	cmp	r3, #10
 8017a00:	d106      	bne.n	8017a10 <tcp_slowtmr+0x70>
 8017a02:	4b82      	ldr	r3, [pc, #520]	; (8017c0c <tcp_slowtmr+0x26c>)
 8017a04:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017a08:	4984      	ldr	r1, [pc, #528]	; (8017c1c <tcp_slowtmr+0x27c>)
 8017a0a:	4882      	ldr	r0, [pc, #520]	; (8017c14 <tcp_slowtmr+0x274>)
 8017a0c:	f007 f9be 	bl	801ed8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a12:	7f9a      	ldrb	r2, [r3, #30]
 8017a14:	4b7b      	ldr	r3, [pc, #492]	; (8017c04 <tcp_slowtmr+0x264>)
 8017a16:	781b      	ldrb	r3, [r3, #0]
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d105      	bne.n	8017a28 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8017a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a22:	68db      	ldr	r3, [r3, #12]
 8017a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8017a26:	e270      	b.n	8017f0a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017a28:	4b76      	ldr	r3, [pc, #472]	; (8017c04 <tcp_slowtmr+0x264>)
 8017a2a:	781a      	ldrb	r2, [r3, #0]
 8017a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017a30:	2300      	movs	r3, #0
 8017a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a3e:	7d1b      	ldrb	r3, [r3, #20]
 8017a40:	2b02      	cmp	r3, #2
 8017a42:	d10a      	bne.n	8017a5a <tcp_slowtmr+0xba>
 8017a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a4a:	2b05      	cmp	r3, #5
 8017a4c:	d905      	bls.n	8017a5a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a52:	3301      	adds	r3, #1
 8017a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a58:	e11e      	b.n	8017c98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a60:	2b0b      	cmp	r3, #11
 8017a62:	d905      	bls.n	8017a70 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a68:	3301      	adds	r3, #1
 8017a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a6e:	e113      	b.n	8017c98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d075      	beq.n	8017b66 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d006      	beq.n	8017a90 <tcp_slowtmr+0xf0>
 8017a82:	4b62      	ldr	r3, [pc, #392]	; (8017c0c <tcp_slowtmr+0x26c>)
 8017a84:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017a88:	4965      	ldr	r1, [pc, #404]	; (8017c20 <tcp_slowtmr+0x280>)
 8017a8a:	4862      	ldr	r0, [pc, #392]	; (8017c14 <tcp_slowtmr+0x274>)
 8017a8c:	f007 f97e 	bl	801ed8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d106      	bne.n	8017aa6 <tcp_slowtmr+0x106>
 8017a98:	4b5c      	ldr	r3, [pc, #368]	; (8017c0c <tcp_slowtmr+0x26c>)
 8017a9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017a9e:	4961      	ldr	r1, [pc, #388]	; (8017c24 <tcp_slowtmr+0x284>)
 8017aa0:	485c      	ldr	r0, [pc, #368]	; (8017c14 <tcp_slowtmr+0x274>)
 8017aa2:	f007 f973 	bl	801ed8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8017aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aa8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017aac:	2b0b      	cmp	r3, #11
 8017aae:	d905      	bls.n	8017abc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ab4:	3301      	adds	r3, #1
 8017ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017aba:	e0ed      	b.n	8017c98 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017abe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017ac2:	3b01      	subs	r3, #1
 8017ac4:	4a58      	ldr	r2, [pc, #352]	; (8017c28 <tcp_slowtmr+0x288>)
 8017ac6:	5cd3      	ldrb	r3, [r2, r3]
 8017ac8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8017aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017acc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017ad0:	7c7a      	ldrb	r2, [r7, #17]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d907      	bls.n	8017ae6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8017ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017adc:	3301      	adds	r3, #1
 8017ade:	b2da      	uxtb	r2, r3
 8017ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ae2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8017ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ae8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017aec:	7c7a      	ldrb	r2, [r7, #17]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	f200 80d2 	bhi.w	8017c98 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017af4:	2301      	movs	r3, #1
 8017af6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d108      	bne.n	8017b14 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b04:	f005 f950 	bl	801cda8 <tcp_zero_window_probe>
 8017b08:	4603      	mov	r3, r0
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d014      	beq.n	8017b38 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017b0e:	2300      	movs	r3, #0
 8017b10:	623b      	str	r3, [r7, #32]
 8017b12:	e011      	b.n	8017b38 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b1e:	f004 f815 	bl	801bb4c <tcp_split_unsent_seg>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d107      	bne.n	8017b38 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b2a:	f004 fa95 	bl	801c058 <tcp_output>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d101      	bne.n	8017b38 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017b34:	2300      	movs	r3, #0
 8017b36:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017b38:	6a3b      	ldr	r3, [r7, #32]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 80ac 	beq.w	8017c98 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b42:	2200      	movs	r2, #0
 8017b44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017b4e:	2b06      	cmp	r3, #6
 8017b50:	f200 80a2 	bhi.w	8017c98 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017b5a:	3301      	adds	r3, #1
 8017b5c:	b2da      	uxtb	r2, r3
 8017b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017b64:	e098      	b.n	8017c98 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	db0f      	blt.n	8017b90 <tcp_slowtmr+0x1f0>
 8017b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017b76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d008      	beq.n	8017b90 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	3301      	adds	r3, #1
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	b21a      	sxth	r2, r3
 8017b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	db7b      	blt.n	8017c98 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ba2:	f004 fd4b 	bl	801c63c <tcp_rexmit_rto_prepare>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d007      	beq.n	8017bbc <tcp_slowtmr+0x21c>
 8017bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d171      	bne.n	8017c98 <tcp_slowtmr+0x2f8>
 8017bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d06d      	beq.n	8017c98 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbe:	7d1b      	ldrb	r3, [r3, #20]
 8017bc0:	2b02      	cmp	r3, #2
 8017bc2:	d03a      	beq.n	8017c3a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017bca:	2b0c      	cmp	r3, #12
 8017bcc:	bf28      	it	cs
 8017bce:	230c      	movcs	r3, #12
 8017bd0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017bd8:	10db      	asrs	r3, r3, #3
 8017bda:	b21b      	sxth	r3, r3
 8017bdc:	461a      	mov	r2, r3
 8017bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017be4:	4413      	add	r3, r2
 8017be6:	7efa      	ldrb	r2, [r7, #27]
 8017be8:	4910      	ldr	r1, [pc, #64]	; (8017c2c <tcp_slowtmr+0x28c>)
 8017bea:	5c8a      	ldrb	r2, [r1, r2]
 8017bec:	4093      	lsls	r3, r2
 8017bee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017bf0:	697b      	ldr	r3, [r7, #20]
 8017bf2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	dc1a      	bgt.n	8017c30 <tcp_slowtmr+0x290>
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	b21a      	sxth	r2, r3
 8017bfe:	e019      	b.n	8017c34 <tcp_slowtmr+0x294>
 8017c00:	20010378 	.word	0x20010378
 8017c04:	2000908a 	.word	0x2000908a
 8017c08:	20010374 	.word	0x20010374
 8017c0c:	08022b34 	.word	0x08022b34
 8017c10:	08022ee0 	.word	0x08022ee0
 8017c14:	08022be0 	.word	0x08022be0
 8017c18:	08022f0c 	.word	0x08022f0c
 8017c1c:	08022f38 	.word	0x08022f38
 8017c20:	08022f68 	.word	0x08022f68
 8017c24:	08022f9c 	.word	0x08022f9c
 8017c28:	08024e8c 	.word	0x08024e8c
 8017c2c:	08024e7c 	.word	0x08024e7c
 8017c30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	bf28      	it	cs
 8017c50:	4613      	movcs	r3, r2
 8017c52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017c54:	8a7b      	ldrh	r3, [r7, #18]
 8017c56:	085b      	lsrs	r3, r3, #1
 8017c58:	b29a      	uxth	r2, r3
 8017c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d206      	bcs.n	8017c80 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c76:	005b      	lsls	r3, r3, #1
 8017c78:	b29a      	uxth	r2, r3
 8017c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017c94:	f004 fd42 	bl	801c71c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9a:	7d1b      	ldrb	r3, [r3, #20]
 8017c9c:	2b06      	cmp	r3, #6
 8017c9e:	d111      	bne.n	8017cc4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca2:	8b5b      	ldrh	r3, [r3, #26]
 8017ca4:	f003 0310 	and.w	r3, r3, #16
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00b      	beq.n	8017cc4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017cac:	4b9c      	ldr	r3, [pc, #624]	; (8017f20 <tcp_slowtmr+0x580>)
 8017cae:	681a      	ldr	r2, [r3, #0]
 8017cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb2:	6a1b      	ldr	r3, [r3, #32]
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	2b28      	cmp	r3, #40	; 0x28
 8017cb8:	d904      	bls.n	8017cc4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cbe:	3301      	adds	r3, #1
 8017cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc6:	7a5b      	ldrb	r3, [r3, #9]
 8017cc8:	f003 0308 	and.w	r3, r3, #8
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d04a      	beq.n	8017d66 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017cd4:	2b04      	cmp	r3, #4
 8017cd6:	d003      	beq.n	8017ce0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017cdc:	2b07      	cmp	r3, #7
 8017cde:	d142      	bne.n	8017d66 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017ce0:	4b8f      	ldr	r3, [pc, #572]	; (8017f20 <tcp_slowtmr+0x580>)
 8017ce2:	681a      	ldr	r2, [r3, #0]
 8017ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce6:	6a1b      	ldr	r3, [r3, #32]
 8017ce8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017cf0:	4b8c      	ldr	r3, [pc, #560]	; (8017f24 <tcp_slowtmr+0x584>)
 8017cf2:	440b      	add	r3, r1
 8017cf4:	498c      	ldr	r1, [pc, #560]	; (8017f28 <tcp_slowtmr+0x588>)
 8017cf6:	fba1 1303 	umull	r1, r3, r1, r3
 8017cfa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d90a      	bls.n	8017d16 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d04:	3301      	adds	r3, #1
 8017d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017d0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d0e:	3301      	adds	r3, #1
 8017d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017d14:	e027      	b.n	8017d66 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017d16:	4b82      	ldr	r3, [pc, #520]	; (8017f20 <tcp_slowtmr+0x580>)
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1c:	6a1b      	ldr	r3, [r3, #32]
 8017d1e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d22:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	4b7f      	ldr	r3, [pc, #508]	; (8017f2c <tcp_slowtmr+0x58c>)
 8017d30:	fb03 f300 	mul.w	r3, r3, r0
 8017d34:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017d36:	497c      	ldr	r1, [pc, #496]	; (8017f28 <tcp_slowtmr+0x588>)
 8017d38:	fba1 1303 	umull	r1, r3, r1, r3
 8017d3c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d911      	bls.n	8017d66 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8017d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d44:	f004 fff0 	bl	801cd28 <tcp_keepalive>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017d4e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d107      	bne.n	8017d66 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8017d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017d5c:	3301      	adds	r3, #1
 8017d5e:	b2da      	uxtb	r2, r3
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d011      	beq.n	8017d92 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017d6e:	4b6c      	ldr	r3, [pc, #432]	; (8017f20 <tcp_slowtmr+0x580>)
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d74:	6a1b      	ldr	r3, [r3, #32]
 8017d76:	1ad2      	subs	r2, r2, r3
 8017d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017d7e:	4619      	mov	r1, r3
 8017d80:	460b      	mov	r3, r1
 8017d82:	005b      	lsls	r3, r3, #1
 8017d84:	440b      	add	r3, r1
 8017d86:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d302      	bcc.n	8017d92 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d8e:	f000 fead 	bl	8018aec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d94:	7d1b      	ldrb	r3, [r3, #20]
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	d10b      	bne.n	8017db2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017d9a:	4b61      	ldr	r3, [pc, #388]	; (8017f20 <tcp_slowtmr+0x580>)
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da0:	6a1b      	ldr	r3, [r3, #32]
 8017da2:	1ad3      	subs	r3, r2, r3
 8017da4:	2b28      	cmp	r3, #40	; 0x28
 8017da6:	d904      	bls.n	8017db2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dac:	3301      	adds	r3, #1
 8017dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db4:	7d1b      	ldrb	r3, [r3, #20]
 8017db6:	2b09      	cmp	r3, #9
 8017db8:	d10b      	bne.n	8017dd2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017dba:	4b59      	ldr	r3, [pc, #356]	; (8017f20 <tcp_slowtmr+0x580>)
 8017dbc:	681a      	ldr	r2, [r3, #0]
 8017dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc0:	6a1b      	ldr	r3, [r3, #32]
 8017dc2:	1ad3      	subs	r3, r2, r3
 8017dc4:	2bf0      	cmp	r3, #240	; 0xf0
 8017dc6:	d904      	bls.n	8017dd2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dcc:	3301      	adds	r3, #1
 8017dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d060      	beq.n	8017e9c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017de0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017de4:	f000 fcce 	bl	8018784 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d010      	beq.n	8017e10 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017dee:	4b50      	ldr	r3, [pc, #320]	; (8017f30 <tcp_slowtmr+0x590>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d106      	bne.n	8017e06 <tcp_slowtmr+0x466>
 8017df8:	4b4e      	ldr	r3, [pc, #312]	; (8017f34 <tcp_slowtmr+0x594>)
 8017dfa:	f240 526d 	movw	r2, #1389	; 0x56d
 8017dfe:	494e      	ldr	r1, [pc, #312]	; (8017f38 <tcp_slowtmr+0x598>)
 8017e00:	484e      	ldr	r0, [pc, #312]	; (8017f3c <tcp_slowtmr+0x59c>)
 8017e02:	f006 ffc3 	bl	801ed8c <iprintf>
        prev->next = pcb->next;
 8017e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e08:	68da      	ldr	r2, [r3, #12]
 8017e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e0c:	60da      	str	r2, [r3, #12]
 8017e0e:	e00f      	b.n	8017e30 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017e10:	4b47      	ldr	r3, [pc, #284]	; (8017f30 <tcp_slowtmr+0x590>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d006      	beq.n	8017e28 <tcp_slowtmr+0x488>
 8017e1a:	4b46      	ldr	r3, [pc, #280]	; (8017f34 <tcp_slowtmr+0x594>)
 8017e1c:	f240 5271 	movw	r2, #1393	; 0x571
 8017e20:	4947      	ldr	r1, [pc, #284]	; (8017f40 <tcp_slowtmr+0x5a0>)
 8017e22:	4846      	ldr	r0, [pc, #280]	; (8017f3c <tcp_slowtmr+0x59c>)
 8017e24:	f006 ffb2 	bl	801ed8c <iprintf>
        tcp_active_pcbs = pcb->next;
 8017e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e2a:	68db      	ldr	r3, [r3, #12]
 8017e2c:	4a40      	ldr	r2, [pc, #256]	; (8017f30 <tcp_slowtmr+0x590>)
 8017e2e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d013      	beq.n	8017e60 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017e40:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e44:	3304      	adds	r3, #4
 8017e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e48:	8ad2      	ldrh	r2, [r2, #22]
 8017e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e4c:	8b09      	ldrh	r1, [r1, #24]
 8017e4e:	9102      	str	r1, [sp, #8]
 8017e50:	9201      	str	r2, [sp, #4]
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	462b      	mov	r3, r5
 8017e56:	4622      	mov	r2, r4
 8017e58:	4601      	mov	r1, r0
 8017e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e5c:	f004 feb0 	bl	801cbc0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e68:	7d1b      	ldrb	r3, [r3, #20]
 8017e6a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e6e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e72:	68db      	ldr	r3, [r3, #12]
 8017e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017e76:	6838      	ldr	r0, [r7, #0]
 8017e78:	f7fe ffee 	bl	8016e58 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017e7c:	4b31      	ldr	r3, [pc, #196]	; (8017f44 <tcp_slowtmr+0x5a4>)
 8017e7e:	2200      	movs	r2, #0
 8017e80:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d004      	beq.n	8017e92 <tcp_slowtmr+0x4f2>
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	f06f 010c 	mvn.w	r1, #12
 8017e8e:	68b8      	ldr	r0, [r7, #8]
 8017e90:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017e92:	4b2c      	ldr	r3, [pc, #176]	; (8017f44 <tcp_slowtmr+0x5a4>)
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d037      	beq.n	8017f0a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8017e9a:	e592      	b.n	80179c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea8:	7f1b      	ldrb	r3, [r3, #28]
 8017eaa:	3301      	adds	r3, #1
 8017eac:	b2da      	uxtb	r2, r3
 8017eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb4:	7f1a      	ldrb	r2, [r3, #28]
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	7f5b      	ldrb	r3, [r3, #29]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d325      	bcc.n	8017f0a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8017ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017ec4:	4b1f      	ldr	r3, [pc, #124]	; (8017f44 <tcp_slowtmr+0x5a4>)
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d00b      	beq.n	8017eec <tcp_slowtmr+0x54c>
 8017ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017edc:	6912      	ldr	r2, [r2, #16]
 8017ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ee0:	4610      	mov	r0, r2
 8017ee2:	4798      	blx	r3
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017eea:	e002      	b.n	8017ef2 <tcp_slowtmr+0x552>
 8017eec:	2300      	movs	r3, #0
 8017eee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017ef2:	4b14      	ldr	r3, [pc, #80]	; (8017f44 <tcp_slowtmr+0x5a4>)
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d000      	beq.n	8017efc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8017efa:	e562      	b.n	80179c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017efc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d102      	bne.n	8017f0a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f06:	f004 f8a7 	bl	801c058 <tcp_output>
  while (pcb != NULL) {
 8017f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f47f ad5e 	bne.w	80179ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017f12:	2300      	movs	r3, #0
 8017f14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017f16:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <tcp_slowtmr+0x5a8>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017f1c:	e069      	b.n	8017ff2 <tcp_slowtmr+0x652>
 8017f1e:	bf00      	nop
 8017f20:	20010378 	.word	0x20010378
 8017f24:	000a4cb8 	.word	0x000a4cb8
 8017f28:	10624dd3 	.word	0x10624dd3
 8017f2c:	000124f8 	.word	0x000124f8
 8017f30:	20010374 	.word	0x20010374
 8017f34:	08022b34 	.word	0x08022b34
 8017f38:	08022fd4 	.word	0x08022fd4
 8017f3c:	08022be0 	.word	0x08022be0
 8017f40:	08023000 	.word	0x08023000
 8017f44:	20010370 	.word	0x20010370
 8017f48:	20010384 	.word	0x20010384
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4e:	7d1b      	ldrb	r3, [r3, #20]
 8017f50:	2b0a      	cmp	r3, #10
 8017f52:	d006      	beq.n	8017f62 <tcp_slowtmr+0x5c2>
 8017f54:	4b2b      	ldr	r3, [pc, #172]	; (8018004 <tcp_slowtmr+0x664>)
 8017f56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017f5a:	492b      	ldr	r1, [pc, #172]	; (8018008 <tcp_slowtmr+0x668>)
 8017f5c:	482b      	ldr	r0, [pc, #172]	; (801800c <tcp_slowtmr+0x66c>)
 8017f5e:	f006 ff15 	bl	801ed8c <iprintf>
    pcb_remove = 0;
 8017f62:	2300      	movs	r3, #0
 8017f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017f68:	4b29      	ldr	r3, [pc, #164]	; (8018010 <tcp_slowtmr+0x670>)
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f6e:	6a1b      	ldr	r3, [r3, #32]
 8017f70:	1ad3      	subs	r3, r2, r3
 8017f72:	2bf0      	cmp	r3, #240	; 0xf0
 8017f74:	d904      	bls.n	8017f80 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8017f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d02f      	beq.n	8017fe8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017f8a:	f000 fbfb 	bl	8018784 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d010      	beq.n	8017fb6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017f94:	4b1f      	ldr	r3, [pc, #124]	; (8018014 <tcp_slowtmr+0x674>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d106      	bne.n	8017fac <tcp_slowtmr+0x60c>
 8017f9e:	4b19      	ldr	r3, [pc, #100]	; (8018004 <tcp_slowtmr+0x664>)
 8017fa0:	f240 52af 	movw	r2, #1455	; 0x5af
 8017fa4:	491c      	ldr	r1, [pc, #112]	; (8018018 <tcp_slowtmr+0x678>)
 8017fa6:	4819      	ldr	r0, [pc, #100]	; (801800c <tcp_slowtmr+0x66c>)
 8017fa8:	f006 fef0 	bl	801ed8c <iprintf>
        prev->next = pcb->next;
 8017fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fae:	68da      	ldr	r2, [r3, #12]
 8017fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb2:	60da      	str	r2, [r3, #12]
 8017fb4:	e00f      	b.n	8017fd6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017fb6:	4b17      	ldr	r3, [pc, #92]	; (8018014 <tcp_slowtmr+0x674>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d006      	beq.n	8017fce <tcp_slowtmr+0x62e>
 8017fc0:	4b10      	ldr	r3, [pc, #64]	; (8018004 <tcp_slowtmr+0x664>)
 8017fc2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017fc6:	4915      	ldr	r1, [pc, #84]	; (801801c <tcp_slowtmr+0x67c>)
 8017fc8:	4810      	ldr	r0, [pc, #64]	; (801800c <tcp_slowtmr+0x66c>)
 8017fca:	f006 fedf 	bl	801ed8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd0:	68db      	ldr	r3, [r3, #12]
 8017fd2:	4a10      	ldr	r2, [pc, #64]	; (8018014 <tcp_slowtmr+0x674>)
 8017fd4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fdc:	68db      	ldr	r3, [r3, #12]
 8017fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017fe0:	69f8      	ldr	r0, [r7, #28]
 8017fe2:	f7fe ff39 	bl	8016e58 <tcp_free>
 8017fe6:	e004      	b.n	8017ff2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d1a9      	bne.n	8017f4c <tcp_slowtmr+0x5ac>
    }
  }
}
 8017ff8:	bf00      	nop
 8017ffa:	bf00      	nop
 8017ffc:	3730      	adds	r7, #48	; 0x30
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bdb0      	pop	{r4, r5, r7, pc}
 8018002:	bf00      	nop
 8018004:	08022b34 	.word	0x08022b34
 8018008:	0802302c 	.word	0x0802302c
 801800c:	08022be0 	.word	0x08022be0
 8018010:	20010378 	.word	0x20010378
 8018014:	20010384 	.word	0x20010384
 8018018:	0802305c 	.word	0x0802305c
 801801c:	08023084 	.word	0x08023084

08018020 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018026:	4b2d      	ldr	r3, [pc, #180]	; (80180dc <tcp_fasttmr+0xbc>)
 8018028:	781b      	ldrb	r3, [r3, #0]
 801802a:	3301      	adds	r3, #1
 801802c:	b2da      	uxtb	r2, r3
 801802e:	4b2b      	ldr	r3, [pc, #172]	; (80180dc <tcp_fasttmr+0xbc>)
 8018030:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018032:	4b2b      	ldr	r3, [pc, #172]	; (80180e0 <tcp_fasttmr+0xc0>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018038:	e048      	b.n	80180cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	7f9a      	ldrb	r2, [r3, #30]
 801803e:	4b27      	ldr	r3, [pc, #156]	; (80180dc <tcp_fasttmr+0xbc>)
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	429a      	cmp	r2, r3
 8018044:	d03f      	beq.n	80180c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018046:	4b25      	ldr	r3, [pc, #148]	; (80180dc <tcp_fasttmr+0xbc>)
 8018048:	781a      	ldrb	r2, [r3, #0]
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	8b5b      	ldrh	r3, [r3, #26]
 8018052:	f003 0301 	and.w	r3, r3, #1
 8018056:	2b00      	cmp	r3, #0
 8018058:	d010      	beq.n	801807c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	8b5b      	ldrh	r3, [r3, #26]
 801805e:	f043 0302 	orr.w	r3, r3, #2
 8018062:	b29a      	uxth	r2, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018068:	6878      	ldr	r0, [r7, #4]
 801806a:	f003 fff5 	bl	801c058 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	8b5b      	ldrh	r3, [r3, #26]
 8018072:	f023 0303 	bic.w	r3, r3, #3
 8018076:	b29a      	uxth	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8b5b      	ldrh	r3, [r3, #26]
 8018080:	f003 0308 	and.w	r3, r3, #8
 8018084:	2b00      	cmp	r3, #0
 8018086:	d009      	beq.n	801809c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	8b5b      	ldrh	r3, [r3, #26]
 801808c:	f023 0308 	bic.w	r3, r3, #8
 8018090:	b29a      	uxth	r2, r3
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f7ff f872 	bl	8017180 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d00a      	beq.n	80180c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80180aa:	4b0e      	ldr	r3, [pc, #56]	; (80180e4 <tcp_fasttmr+0xc4>)
 80180ac:	2200      	movs	r2, #0
 80180ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80180b0:	6878      	ldr	r0, [r7, #4]
 80180b2:	f000 f819 	bl	80180e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80180b6:	4b0b      	ldr	r3, [pc, #44]	; (80180e4 <tcp_fasttmr+0xc4>)
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d000      	beq.n	80180c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80180be:	e7b8      	b.n	8018032 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	607b      	str	r3, [r7, #4]
 80180c4:	e002      	b.n	80180cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	68db      	ldr	r3, [r3, #12]
 80180ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d1b3      	bne.n	801803a <tcp_fasttmr+0x1a>
    }
  }
}
 80180d2:	bf00      	nop
 80180d4:	bf00      	nop
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	2000908a 	.word	0x2000908a
 80180e0:	20010374 	.word	0x20010374
 80180e4:	20010370 	.word	0x20010370

080180e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80180e8:	b590      	push	{r4, r7, lr}
 80180ea:	b085      	sub	sp, #20
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d109      	bne.n	801810a <tcp_process_refused_data+0x22>
 80180f6:	4b38      	ldr	r3, [pc, #224]	; (80181d8 <tcp_process_refused_data+0xf0>)
 80180f8:	f240 6209 	movw	r2, #1545	; 0x609
 80180fc:	4937      	ldr	r1, [pc, #220]	; (80181dc <tcp_process_refused_data+0xf4>)
 80180fe:	4838      	ldr	r0, [pc, #224]	; (80181e0 <tcp_process_refused_data+0xf8>)
 8018100:	f006 fe44 	bl	801ed8c <iprintf>
 8018104:	f06f 030f 	mvn.w	r3, #15
 8018108:	e061      	b.n	80181ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801810e:	7b5b      	ldrb	r3, [r3, #13]
 8018110:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018116:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2200      	movs	r2, #0
 801811c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018124:	2b00      	cmp	r3, #0
 8018126:	d00b      	beq.n	8018140 <tcp_process_refused_data+0x58>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6918      	ldr	r0, [r3, #16]
 8018132:	2300      	movs	r3, #0
 8018134:	68ba      	ldr	r2, [r7, #8]
 8018136:	6879      	ldr	r1, [r7, #4]
 8018138:	47a0      	blx	r4
 801813a:	4603      	mov	r3, r0
 801813c:	73fb      	strb	r3, [r7, #15]
 801813e:	e007      	b.n	8018150 <tcp_process_refused_data+0x68>
 8018140:	2300      	movs	r3, #0
 8018142:	68ba      	ldr	r2, [r7, #8]
 8018144:	6879      	ldr	r1, [r7, #4]
 8018146:	2000      	movs	r0, #0
 8018148:	f000 f8a6 	bl	8018298 <tcp_recv_null>
 801814c:	4603      	mov	r3, r0
 801814e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d12b      	bne.n	80181b0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018158:	7bbb      	ldrb	r3, [r7, #14]
 801815a:	f003 0320 	and.w	r3, r3, #32
 801815e:	2b00      	cmp	r3, #0
 8018160:	d034      	beq.n	80181cc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018166:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801816a:	4293      	cmp	r3, r2
 801816c:	d005      	beq.n	801817a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018172:	3301      	adds	r3, #1
 8018174:	b29a      	uxth	r2, r3
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00b      	beq.n	801819c <tcp_process_refused_data+0xb4>
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6918      	ldr	r0, [r3, #16]
 801818e:	2300      	movs	r3, #0
 8018190:	2200      	movs	r2, #0
 8018192:	6879      	ldr	r1, [r7, #4]
 8018194:	47a0      	blx	r4
 8018196:	4603      	mov	r3, r0
 8018198:	73fb      	strb	r3, [r7, #15]
 801819a:	e001      	b.n	80181a0 <tcp_process_refused_data+0xb8>
 801819c:	2300      	movs	r3, #0
 801819e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80181a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181a4:	f113 0f0d 	cmn.w	r3, #13
 80181a8:	d110      	bne.n	80181cc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80181aa:	f06f 030c 	mvn.w	r3, #12
 80181ae:	e00e      	b.n	80181ce <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80181b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181b4:	f113 0f0d 	cmn.w	r3, #13
 80181b8:	d102      	bne.n	80181c0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80181ba:	f06f 030c 	mvn.w	r3, #12
 80181be:	e006      	b.n	80181ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	68ba      	ldr	r2, [r7, #8]
 80181c4:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80181c6:	f06f 0304 	mvn.w	r3, #4
 80181ca:	e000      	b.n	80181ce <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80181cc:	2300      	movs	r3, #0
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3714      	adds	r7, #20
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd90      	pop	{r4, r7, pc}
 80181d6:	bf00      	nop
 80181d8:	08022b34 	.word	0x08022b34
 80181dc:	080230ac 	.word	0x080230ac
 80181e0:	08022be0 	.word	0x08022be0

080181e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80181ec:	e007      	b.n	80181fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f000 f80a 	bl	801820e <tcp_seg_free>
    seg = next;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1f4      	bne.n	80181ee <tcp_segs_free+0xa>
  }
}
 8018204:	bf00      	nop
 8018206:	bf00      	nop
 8018208:	3710      	adds	r7, #16
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}

0801820e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801820e:	b580      	push	{r7, lr}
 8018210:	b082      	sub	sp, #8
 8018212:	af00      	add	r7, sp, #0
 8018214:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00c      	beq.n	8018236 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	685b      	ldr	r3, [r3, #4]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d004      	beq.n	801822e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	4618      	mov	r0, r3
 801822a:	f7fe fb59 	bl	80168e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801822e:	6879      	ldr	r1, [r7, #4]
 8018230:	2003      	movs	r0, #3
 8018232:	f7fd fca5 	bl	8015b80 <memp_free>
  }
}
 8018236:	bf00      	nop
 8018238:	3708      	adds	r7, #8
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
	...

08018240 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b084      	sub	sp, #16
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d106      	bne.n	801825c <tcp_seg_copy+0x1c>
 801824e:	4b0f      	ldr	r3, [pc, #60]	; (801828c <tcp_seg_copy+0x4c>)
 8018250:	f240 6282 	movw	r2, #1666	; 0x682
 8018254:	490e      	ldr	r1, [pc, #56]	; (8018290 <tcp_seg_copy+0x50>)
 8018256:	480f      	ldr	r0, [pc, #60]	; (8018294 <tcp_seg_copy+0x54>)
 8018258:	f006 fd98 	bl	801ed8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801825c:	2003      	movs	r0, #3
 801825e:	f7fd fc19 	bl	8015a94 <memp_malloc>
 8018262:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d101      	bne.n	801826e <tcp_seg_copy+0x2e>
    return NULL;
 801826a:	2300      	movs	r3, #0
 801826c:	e00a      	b.n	8018284 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801826e:	2210      	movs	r2, #16
 8018270:	6879      	ldr	r1, [r7, #4]
 8018272:	68f8      	ldr	r0, [r7, #12]
 8018274:	f006 fd5a 	bl	801ed2c <memcpy>
  pbuf_ref(cseg->p);
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	4618      	mov	r0, r3
 801827e:	f7fe fbd5 	bl	8016a2c <pbuf_ref>
  return cseg;
 8018282:	68fb      	ldr	r3, [r7, #12]
}
 8018284:	4618      	mov	r0, r3
 8018286:	3710      	adds	r7, #16
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}
 801828c:	08022b34 	.word	0x08022b34
 8018290:	080230f0 	.word	0x080230f0
 8018294:	08022be0 	.word	0x08022be0

08018298 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b084      	sub	sp, #16
 801829c:	af00      	add	r7, sp, #0
 801829e:	60f8      	str	r0, [r7, #12]
 80182a0:	60b9      	str	r1, [r7, #8]
 80182a2:	607a      	str	r2, [r7, #4]
 80182a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80182a6:	68bb      	ldr	r3, [r7, #8]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d109      	bne.n	80182c0 <tcp_recv_null+0x28>
 80182ac:	4b12      	ldr	r3, [pc, #72]	; (80182f8 <tcp_recv_null+0x60>)
 80182ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80182b2:	4912      	ldr	r1, [pc, #72]	; (80182fc <tcp_recv_null+0x64>)
 80182b4:	4812      	ldr	r0, [pc, #72]	; (8018300 <tcp_recv_null+0x68>)
 80182b6:	f006 fd69 	bl	801ed8c <iprintf>
 80182ba:	f06f 030f 	mvn.w	r3, #15
 80182be:	e016      	b.n	80182ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d009      	beq.n	80182da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	891b      	ldrh	r3, [r3, #8]
 80182ca:	4619      	mov	r1, r3
 80182cc:	68b8      	ldr	r0, [r7, #8]
 80182ce:	f7ff facf 	bl	8017870 <tcp_recved>
    pbuf_free(p);
 80182d2:	6878      	ldr	r0, [r7, #4]
 80182d4:	f7fe fb04 	bl	80168e0 <pbuf_free>
 80182d8:	e008      	b.n	80182ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80182da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d104      	bne.n	80182ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80182e2:	68b8      	ldr	r0, [r7, #8]
 80182e4:	f7fe ffb6 	bl	8017254 <tcp_close>
 80182e8:	4603      	mov	r3, r0
 80182ea:	e000      	b.n	80182ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80182ec:	2300      	movs	r3, #0
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3710      	adds	r7, #16
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	08022b34 	.word	0x08022b34
 80182fc:	0802310c 	.word	0x0802310c
 8018300:	08022be0 	.word	0x08022be0

08018304 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b086      	sub	sp, #24
 8018308:	af00      	add	r7, sp, #0
 801830a:	4603      	mov	r3, r0
 801830c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801830e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018312:	2b00      	cmp	r3, #0
 8018314:	db01      	blt.n	801831a <tcp_kill_prio+0x16>
 8018316:	79fb      	ldrb	r3, [r7, #7]
 8018318:	e000      	b.n	801831c <tcp_kill_prio+0x18>
 801831a:	237f      	movs	r3, #127	; 0x7f
 801831c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801831e:	7afb      	ldrb	r3, [r7, #11]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d034      	beq.n	801838e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8018324:	7afb      	ldrb	r3, [r7, #11]
 8018326:	3b01      	subs	r3, #1
 8018328:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801832a:	2300      	movs	r3, #0
 801832c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801832e:	2300      	movs	r3, #0
 8018330:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018332:	4b19      	ldr	r3, [pc, #100]	; (8018398 <tcp_kill_prio+0x94>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	617b      	str	r3, [r7, #20]
 8018338:	e01f      	b.n	801837a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	7d5b      	ldrb	r3, [r3, #21]
 801833e:	7afa      	ldrb	r2, [r7, #11]
 8018340:	429a      	cmp	r2, r3
 8018342:	d80c      	bhi.n	801835e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018348:	7afa      	ldrb	r2, [r7, #11]
 801834a:	429a      	cmp	r2, r3
 801834c:	d112      	bne.n	8018374 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801834e:	4b13      	ldr	r3, [pc, #76]	; (801839c <tcp_kill_prio+0x98>)
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	697b      	ldr	r3, [r7, #20]
 8018354:	6a1b      	ldr	r3, [r3, #32]
 8018356:	1ad3      	subs	r3, r2, r3
 8018358:	68fa      	ldr	r2, [r7, #12]
 801835a:	429a      	cmp	r2, r3
 801835c:	d80a      	bhi.n	8018374 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801835e:	4b0f      	ldr	r3, [pc, #60]	; (801839c <tcp_kill_prio+0x98>)
 8018360:	681a      	ldr	r2, [r3, #0]
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	6a1b      	ldr	r3, [r3, #32]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	7d5b      	ldrb	r3, [r3, #21]
 8018372:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018374:	697b      	ldr	r3, [r7, #20]
 8018376:	68db      	ldr	r3, [r3, #12]
 8018378:	617b      	str	r3, [r7, #20]
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d1dc      	bne.n	801833a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d004      	beq.n	8018390 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018386:	6938      	ldr	r0, [r7, #16]
 8018388:	f7ff f8aa 	bl	80174e0 <tcp_abort>
 801838c:	e000      	b.n	8018390 <tcp_kill_prio+0x8c>
    return;
 801838e:	bf00      	nop
  }
}
 8018390:	3718      	adds	r7, #24
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
 8018396:	bf00      	nop
 8018398:	20010374 	.word	0x20010374
 801839c:	20010378 	.word	0x20010378

080183a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b086      	sub	sp, #24
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	4603      	mov	r3, r0
 80183a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80183aa:	79fb      	ldrb	r3, [r7, #7]
 80183ac:	2b08      	cmp	r3, #8
 80183ae:	d009      	beq.n	80183c4 <tcp_kill_state+0x24>
 80183b0:	79fb      	ldrb	r3, [r7, #7]
 80183b2:	2b09      	cmp	r3, #9
 80183b4:	d006      	beq.n	80183c4 <tcp_kill_state+0x24>
 80183b6:	4b1a      	ldr	r3, [pc, #104]	; (8018420 <tcp_kill_state+0x80>)
 80183b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80183bc:	4919      	ldr	r1, [pc, #100]	; (8018424 <tcp_kill_state+0x84>)
 80183be:	481a      	ldr	r0, [pc, #104]	; (8018428 <tcp_kill_state+0x88>)
 80183c0:	f006 fce4 	bl	801ed8c <iprintf>

  inactivity = 0;
 80183c4:	2300      	movs	r3, #0
 80183c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80183c8:	2300      	movs	r3, #0
 80183ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80183cc:	4b17      	ldr	r3, [pc, #92]	; (801842c <tcp_kill_state+0x8c>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	617b      	str	r3, [r7, #20]
 80183d2:	e017      	b.n	8018404 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	7d1b      	ldrb	r3, [r3, #20]
 80183d8:	79fa      	ldrb	r2, [r7, #7]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d10f      	bne.n	80183fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80183de:	4b14      	ldr	r3, [pc, #80]	; (8018430 <tcp_kill_state+0x90>)
 80183e0:	681a      	ldr	r2, [r3, #0]
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	6a1b      	ldr	r3, [r3, #32]
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	68fa      	ldr	r2, [r7, #12]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d807      	bhi.n	80183fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80183ee:	4b10      	ldr	r3, [pc, #64]	; (8018430 <tcp_kill_state+0x90>)
 80183f0:	681a      	ldr	r2, [r3, #0]
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	6a1b      	ldr	r3, [r3, #32]
 80183f6:	1ad3      	subs	r3, r2, r3
 80183f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80183fe:	697b      	ldr	r3, [r7, #20]
 8018400:	68db      	ldr	r3, [r3, #12]
 8018402:	617b      	str	r3, [r7, #20]
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d1e4      	bne.n	80183d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801840a:	693b      	ldr	r3, [r7, #16]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d003      	beq.n	8018418 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8018410:	2100      	movs	r1, #0
 8018412:	6938      	ldr	r0, [r7, #16]
 8018414:	f7fe ffa6 	bl	8017364 <tcp_abandon>
  }
}
 8018418:	bf00      	nop
 801841a:	3718      	adds	r7, #24
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	08022b34 	.word	0x08022b34
 8018424:	08023128 	.word	0x08023128
 8018428:	08022be0 	.word	0x08022be0
 801842c:	20010374 	.word	0x20010374
 8018430:	20010378 	.word	0x20010378

08018434 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b084      	sub	sp, #16
 8018438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801843a:	2300      	movs	r3, #0
 801843c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801843e:	2300      	movs	r3, #0
 8018440:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018442:	4b12      	ldr	r3, [pc, #72]	; (801848c <tcp_kill_timewait+0x58>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	60fb      	str	r3, [r7, #12]
 8018448:	e012      	b.n	8018470 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801844a:	4b11      	ldr	r3, [pc, #68]	; (8018490 <tcp_kill_timewait+0x5c>)
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	6a1b      	ldr	r3, [r3, #32]
 8018452:	1ad3      	subs	r3, r2, r3
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	429a      	cmp	r2, r3
 8018458:	d807      	bhi.n	801846a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801845a:	4b0d      	ldr	r3, [pc, #52]	; (8018490 <tcp_kill_timewait+0x5c>)
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	6a1b      	ldr	r3, [r3, #32]
 8018462:	1ad3      	subs	r3, r2, r3
 8018464:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	60fb      	str	r3, [r7, #12]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d1e9      	bne.n	801844a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018476:	68bb      	ldr	r3, [r7, #8]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d002      	beq.n	8018482 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801847c:	68b8      	ldr	r0, [r7, #8]
 801847e:	f7ff f82f 	bl	80174e0 <tcp_abort>
  }
}
 8018482:	bf00      	nop
 8018484:	3710      	adds	r7, #16
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	20010384 	.word	0x20010384
 8018490:	20010378 	.word	0x20010378

08018494 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b082      	sub	sp, #8
 8018498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801849a:	4b10      	ldr	r3, [pc, #64]	; (80184dc <tcp_handle_closepend+0x48>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80184a0:	e014      	b.n	80184cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	68db      	ldr	r3, [r3, #12]
 80184a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	8b5b      	ldrh	r3, [r3, #26]
 80184ac:	f003 0308 	and.w	r3, r3, #8
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d009      	beq.n	80184c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	8b5b      	ldrh	r3, [r3, #26]
 80184b8:	f023 0308 	bic.w	r3, r3, #8
 80184bc:	b29a      	uxth	r2, r3
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80184c2:	6878      	ldr	r0, [r7, #4]
 80184c4:	f7fe fe5c 	bl	8017180 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1e7      	bne.n	80184a2 <tcp_handle_closepend+0xe>
  }
}
 80184d2:	bf00      	nop
 80184d4:	bf00      	nop
 80184d6:	3708      	adds	r7, #8
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	20010374 	.word	0x20010374

080184e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	4603      	mov	r3, r0
 80184e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80184ea:	2001      	movs	r0, #1
 80184ec:	f7fd fad2 	bl	8015a94 <memp_malloc>
 80184f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d126      	bne.n	8018546 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80184f8:	f7ff ffcc 	bl	8018494 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80184fc:	f7ff ff9a 	bl	8018434 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018500:	2001      	movs	r0, #1
 8018502:	f7fd fac7 	bl	8015a94 <memp_malloc>
 8018506:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d11b      	bne.n	8018546 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801850e:	2009      	movs	r0, #9
 8018510:	f7ff ff46 	bl	80183a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018514:	2001      	movs	r0, #1
 8018516:	f7fd fabd 	bl	8015a94 <memp_malloc>
 801851a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d111      	bne.n	8018546 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8018522:	2008      	movs	r0, #8
 8018524:	f7ff ff3c 	bl	80183a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018528:	2001      	movs	r0, #1
 801852a:	f7fd fab3 	bl	8015a94 <memp_malloc>
 801852e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d107      	bne.n	8018546 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8018536:	79fb      	ldrb	r3, [r7, #7]
 8018538:	4618      	mov	r0, r3
 801853a:	f7ff fee3 	bl	8018304 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801853e:	2001      	movs	r0, #1
 8018540:	f7fd faa8 	bl	8015a94 <memp_malloc>
 8018544:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d03f      	beq.n	80185cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801854c:	229c      	movs	r2, #156	; 0x9c
 801854e:	2100      	movs	r1, #0
 8018550:	68f8      	ldr	r0, [r7, #12]
 8018552:	f006 fc13 	bl	801ed7c <memset>
    pcb->prio = prio;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	79fa      	ldrb	r2, [r7, #7]
 801855a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018562:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801856c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	22ff      	movs	r2, #255	; 0xff
 801857a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018582:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2206      	movs	r2, #6
 8018588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	2206      	movs	r2, #6
 8018590:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018598:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	2201      	movs	r2, #1
 801859e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80185a2:	4b0d      	ldr	r3, [pc, #52]	; (80185d8 <tcp_alloc+0xf8>)
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80185aa:	4b0c      	ldr	r3, [pc, #48]	; (80185dc <tcp_alloc+0xfc>)
 80185ac:	781a      	ldrb	r2, [r3, #0]
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80185b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	4a08      	ldr	r2, [pc, #32]	; (80185e0 <tcp_alloc+0x100>)
 80185c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	4a07      	ldr	r2, [pc, #28]	; (80185e4 <tcp_alloc+0x104>)
 80185c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80185cc:	68fb      	ldr	r3, [r7, #12]
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3710      	adds	r7, #16
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}
 80185d6:	bf00      	nop
 80185d8:	20010378 	.word	0x20010378
 80185dc:	2000908a 	.word	0x2000908a
 80185e0:	08018299 	.word	0x08018299
 80185e4:	006ddd00 	.word	0x006ddd00

080185e8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	4603      	mov	r3, r0
 80185f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80185f2:	2040      	movs	r0, #64	; 0x40
 80185f4:	f7ff ff74 	bl	80184e0 <tcp_alloc>
 80185f8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80185fa:	68fb      	ldr	r3, [r7, #12]
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3710      	adds	r7, #16
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8018604:	b480      	push	{r7}
 8018606:	b083      	sub	sp, #12
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d002      	beq.n	801861a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	683a      	ldr	r2, [r7, #0]
 8018618:	611a      	str	r2, [r3, #16]
  }
}
 801861a:	bf00      	nop
 801861c:	370c      	adds	r7, #12
 801861e:	46bd      	mov	sp, r7
 8018620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018624:	4770      	bx	lr
	...

08018628 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b082      	sub	sp, #8
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
 8018630:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d00e      	beq.n	8018656 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	7d1b      	ldrb	r3, [r3, #20]
 801863c:	2b01      	cmp	r3, #1
 801863e:	d106      	bne.n	801864e <tcp_recv+0x26>
 8018640:	4b07      	ldr	r3, [pc, #28]	; (8018660 <tcp_recv+0x38>)
 8018642:	f240 72df 	movw	r2, #2015	; 0x7df
 8018646:	4907      	ldr	r1, [pc, #28]	; (8018664 <tcp_recv+0x3c>)
 8018648:	4807      	ldr	r0, [pc, #28]	; (8018668 <tcp_recv+0x40>)
 801864a:	f006 fb9f 	bl	801ed8c <iprintf>
    pcb->recv = recv;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	683a      	ldr	r2, [r7, #0]
 8018652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8018656:	bf00      	nop
 8018658:	3708      	adds	r7, #8
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}
 801865e:	bf00      	nop
 8018660:	08022b34 	.word	0x08022b34
 8018664:	08023138 	.word	0x08023138
 8018668:	08022be0 	.word	0x08022be0

0801866c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b082      	sub	sp, #8
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
 8018674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d00e      	beq.n	801869a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	7d1b      	ldrb	r3, [r3, #20]
 8018680:	2b01      	cmp	r3, #1
 8018682:	d106      	bne.n	8018692 <tcp_sent+0x26>
 8018684:	4b07      	ldr	r3, [pc, #28]	; (80186a4 <tcp_sent+0x38>)
 8018686:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801868a:	4907      	ldr	r1, [pc, #28]	; (80186a8 <tcp_sent+0x3c>)
 801868c:	4807      	ldr	r0, [pc, #28]	; (80186ac <tcp_sent+0x40>)
 801868e:	f006 fb7d 	bl	801ed8c <iprintf>
    pcb->sent = sent;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	683a      	ldr	r2, [r7, #0]
 8018696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801869a:	bf00      	nop
 801869c:	3708      	adds	r7, #8
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	bf00      	nop
 80186a4:	08022b34 	.word	0x08022b34
 80186a8:	08023160 	.word	0x08023160
 80186ac:	08022be0 	.word	0x08022be0

080186b0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d00e      	beq.n	80186de <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	7d1b      	ldrb	r3, [r3, #20]
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d106      	bne.n	80186d6 <tcp_err+0x26>
 80186c8:	4b07      	ldr	r3, [pc, #28]	; (80186e8 <tcp_err+0x38>)
 80186ca:	f640 020d 	movw	r2, #2061	; 0x80d
 80186ce:	4907      	ldr	r1, [pc, #28]	; (80186ec <tcp_err+0x3c>)
 80186d0:	4807      	ldr	r0, [pc, #28]	; (80186f0 <tcp_err+0x40>)
 80186d2:	f006 fb5b 	bl	801ed8c <iprintf>
    pcb->errf = err;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	683a      	ldr	r2, [r7, #0]
 80186da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80186de:	bf00      	nop
 80186e0:	3708      	adds	r7, #8
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	08022b34 	.word	0x08022b34
 80186ec:	08023188 	.word	0x08023188
 80186f0:	08022be0 	.word	0x08022be0

080186f4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80186f4:	b480      	push	{r7}
 80186f6:	b085      	sub	sp, #20
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d008      	beq.n	8018716 <tcp_accept+0x22>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	7d1b      	ldrb	r3, [r3, #20]
 8018708:	2b01      	cmp	r3, #1
 801870a:	d104      	bne.n	8018716 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	683a      	ldr	r2, [r7, #0]
 8018714:	619a      	str	r2, [r3, #24]
  }
}
 8018716:	bf00      	nop
 8018718:	3714      	adds	r7, #20
 801871a:	46bd      	mov	sp, r7
 801871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018720:	4770      	bx	lr
	...

08018724 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b084      	sub	sp, #16
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	4613      	mov	r3, r2
 8018730:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d107      	bne.n	8018748 <tcp_poll+0x24>
 8018738:	4b0e      	ldr	r3, [pc, #56]	; (8018774 <tcp_poll+0x50>)
 801873a:	f640 023d 	movw	r2, #2109	; 0x83d
 801873e:	490e      	ldr	r1, [pc, #56]	; (8018778 <tcp_poll+0x54>)
 8018740:	480e      	ldr	r0, [pc, #56]	; (801877c <tcp_poll+0x58>)
 8018742:	f006 fb23 	bl	801ed8c <iprintf>
 8018746:	e011      	b.n	801876c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	7d1b      	ldrb	r3, [r3, #20]
 801874c:	2b01      	cmp	r3, #1
 801874e:	d106      	bne.n	801875e <tcp_poll+0x3a>
 8018750:	4b08      	ldr	r3, [pc, #32]	; (8018774 <tcp_poll+0x50>)
 8018752:	f640 023e 	movw	r2, #2110	; 0x83e
 8018756:	490a      	ldr	r1, [pc, #40]	; (8018780 <tcp_poll+0x5c>)
 8018758:	4808      	ldr	r0, [pc, #32]	; (801877c <tcp_poll+0x58>)
 801875a:	f006 fb17 	bl	801ed8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	68ba      	ldr	r2, [r7, #8]
 8018762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	79fa      	ldrb	r2, [r7, #7]
 801876a:	775a      	strb	r2, [r3, #29]
}
 801876c:	3710      	adds	r7, #16
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}
 8018772:	bf00      	nop
 8018774:	08022b34 	.word	0x08022b34
 8018778:	080231b0 	.word	0x080231b0
 801877c:	08022be0 	.word	0x08022be0
 8018780:	080231c8 	.word	0x080231c8

08018784 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d107      	bne.n	80187a2 <tcp_pcb_purge+0x1e>
 8018792:	4b21      	ldr	r3, [pc, #132]	; (8018818 <tcp_pcb_purge+0x94>)
 8018794:	f640 0251 	movw	r2, #2129	; 0x851
 8018798:	4920      	ldr	r1, [pc, #128]	; (801881c <tcp_pcb_purge+0x98>)
 801879a:	4821      	ldr	r0, [pc, #132]	; (8018820 <tcp_pcb_purge+0x9c>)
 801879c:	f006 faf6 	bl	801ed8c <iprintf>
 80187a0:	e037      	b.n	8018812 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	7d1b      	ldrb	r3, [r3, #20]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d033      	beq.n	8018812 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80187ae:	2b0a      	cmp	r3, #10
 80187b0:	d02f      	beq.n	8018812 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d02b      	beq.n	8018812 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d007      	beq.n	80187d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fe f88a 	bl	80168e0 <pbuf_free>
      pcb->refused_data = NULL;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2200      	movs	r2, #0
 80187d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d002      	beq.n	80187e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f000 f986 	bl	8018aec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187e6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7ff fcf9 	bl	80181e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187f6:	4618      	mov	r0, r3
 80187f8:	f7ff fcf4 	bl	80181e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2200      	movs	r2, #0
 8018800:	66da      	str	r2, [r3, #108]	; 0x6c
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2200      	movs	r2, #0
 801880e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018812:	3708      	adds	r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}
 8018818:	08022b34 	.word	0x08022b34
 801881c:	080231e8 	.word	0x080231e8
 8018820:	08022be0 	.word	0x08022be0

08018824 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d106      	bne.n	8018842 <tcp_pcb_remove+0x1e>
 8018834:	4b3e      	ldr	r3, [pc, #248]	; (8018930 <tcp_pcb_remove+0x10c>)
 8018836:	f640 0283 	movw	r2, #2179	; 0x883
 801883a:	493e      	ldr	r1, [pc, #248]	; (8018934 <tcp_pcb_remove+0x110>)
 801883c:	483e      	ldr	r0, [pc, #248]	; (8018938 <tcp_pcb_remove+0x114>)
 801883e:	f006 faa5 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d106      	bne.n	8018856 <tcp_pcb_remove+0x32>
 8018848:	4b39      	ldr	r3, [pc, #228]	; (8018930 <tcp_pcb_remove+0x10c>)
 801884a:	f640 0284 	movw	r2, #2180	; 0x884
 801884e:	493b      	ldr	r1, [pc, #236]	; (801893c <tcp_pcb_remove+0x118>)
 8018850:	4839      	ldr	r0, [pc, #228]	; (8018938 <tcp_pcb_remove+0x114>)
 8018852:	f006 fa9b 	bl	801ed8c <iprintf>

  TCP_RMV(pcblist, pcb);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	683a      	ldr	r2, [r7, #0]
 801885c:	429a      	cmp	r2, r3
 801885e:	d105      	bne.n	801886c <tcp_pcb_remove+0x48>
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	68da      	ldr	r2, [r3, #12]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	601a      	str	r2, [r3, #0]
 801886a:	e013      	b.n	8018894 <tcp_pcb_remove+0x70>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	60fb      	str	r3, [r7, #12]
 8018872:	e00c      	b.n	801888e <tcp_pcb_remove+0x6a>
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	68db      	ldr	r3, [r3, #12]
 8018878:	683a      	ldr	r2, [r7, #0]
 801887a:	429a      	cmp	r2, r3
 801887c:	d104      	bne.n	8018888 <tcp_pcb_remove+0x64>
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	68da      	ldr	r2, [r3, #12]
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	60da      	str	r2, [r3, #12]
 8018886:	e005      	b.n	8018894 <tcp_pcb_remove+0x70>
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	68db      	ldr	r3, [r3, #12]
 801888c:	60fb      	str	r3, [r7, #12]
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d1ef      	bne.n	8018874 <tcp_pcb_remove+0x50>
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	2200      	movs	r2, #0
 8018898:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801889a:	6838      	ldr	r0, [r7, #0]
 801889c:	f7ff ff72 	bl	8018784 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	7d1b      	ldrb	r3, [r3, #20]
 80188a4:	2b0a      	cmp	r3, #10
 80188a6:	d013      	beq.n	80188d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	d00f      	beq.n	80188d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	8b5b      	ldrh	r3, [r3, #26]
 80188b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d009      	beq.n	80188d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	8b5b      	ldrh	r3, [r3, #26]
 80188c0:	f043 0302 	orr.w	r3, r3, #2
 80188c4:	b29a      	uxth	r2, r3
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80188ca:	6838      	ldr	r0, [r7, #0]
 80188cc:	f003 fbc4 	bl	801c058 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80188d0:	683b      	ldr	r3, [r7, #0]
 80188d2:	7d1b      	ldrb	r3, [r3, #20]
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d020      	beq.n	801891a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d006      	beq.n	80188ee <tcp_pcb_remove+0xca>
 80188e0:	4b13      	ldr	r3, [pc, #76]	; (8018930 <tcp_pcb_remove+0x10c>)
 80188e2:	f640 0293 	movw	r2, #2195	; 0x893
 80188e6:	4916      	ldr	r1, [pc, #88]	; (8018940 <tcp_pcb_remove+0x11c>)
 80188e8:	4813      	ldr	r0, [pc, #76]	; (8018938 <tcp_pcb_remove+0x114>)
 80188ea:	f006 fa4f 	bl	801ed8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d006      	beq.n	8018904 <tcp_pcb_remove+0xe0>
 80188f6:	4b0e      	ldr	r3, [pc, #56]	; (8018930 <tcp_pcb_remove+0x10c>)
 80188f8:	f640 0294 	movw	r2, #2196	; 0x894
 80188fc:	4911      	ldr	r1, [pc, #68]	; (8018944 <tcp_pcb_remove+0x120>)
 80188fe:	480e      	ldr	r0, [pc, #56]	; (8018938 <tcp_pcb_remove+0x114>)
 8018900:	f006 fa44 	bl	801ed8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018908:	2b00      	cmp	r3, #0
 801890a:	d006      	beq.n	801891a <tcp_pcb_remove+0xf6>
 801890c:	4b08      	ldr	r3, [pc, #32]	; (8018930 <tcp_pcb_remove+0x10c>)
 801890e:	f640 0296 	movw	r2, #2198	; 0x896
 8018912:	490d      	ldr	r1, [pc, #52]	; (8018948 <tcp_pcb_remove+0x124>)
 8018914:	4808      	ldr	r0, [pc, #32]	; (8018938 <tcp_pcb_remove+0x114>)
 8018916:	f006 fa39 	bl	801ed8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	2200      	movs	r2, #0
 801891e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	2200      	movs	r2, #0
 8018924:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8018926:	bf00      	nop
 8018928:	3710      	adds	r7, #16
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	08022b34 	.word	0x08022b34
 8018934:	08023204 	.word	0x08023204
 8018938:	08022be0 	.word	0x08022be0
 801893c:	08023220 	.word	0x08023220
 8018940:	08023240 	.word	0x08023240
 8018944:	08023258 	.word	0x08023258
 8018948:	08023274 	.word	0x08023274

0801894c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <tcp_next_iss+0x1c>
 801895a:	4b0a      	ldr	r3, [pc, #40]	; (8018984 <tcp_next_iss+0x38>)
 801895c:	f640 02af 	movw	r2, #2223	; 0x8af
 8018960:	4909      	ldr	r1, [pc, #36]	; (8018988 <tcp_next_iss+0x3c>)
 8018962:	480a      	ldr	r0, [pc, #40]	; (801898c <tcp_next_iss+0x40>)
 8018964:	f006 fa12 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018968:	4b09      	ldr	r3, [pc, #36]	; (8018990 <tcp_next_iss+0x44>)
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	4b09      	ldr	r3, [pc, #36]	; (8018994 <tcp_next_iss+0x48>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	4413      	add	r3, r2
 8018972:	4a07      	ldr	r2, [pc, #28]	; (8018990 <tcp_next_iss+0x44>)
 8018974:	6013      	str	r3, [r2, #0]
  return iss;
 8018976:	4b06      	ldr	r3, [pc, #24]	; (8018990 <tcp_next_iss+0x44>)
 8018978:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801897a:	4618      	mov	r0, r3
 801897c:	3708      	adds	r7, #8
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}
 8018982:	bf00      	nop
 8018984:	08022b34 	.word	0x08022b34
 8018988:	0802328c 	.word	0x0802328c
 801898c:	08022be0 	.word	0x08022be0
 8018990:	20000038 	.word	0x20000038
 8018994:	20010378 	.word	0x20010378

08018998 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b086      	sub	sp, #24
 801899c:	af00      	add	r7, sp, #0
 801899e:	4603      	mov	r3, r0
 80189a0:	60b9      	str	r1, [r7, #8]
 80189a2:	607a      	str	r2, [r7, #4]
 80189a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d106      	bne.n	80189ba <tcp_eff_send_mss_netif+0x22>
 80189ac:	4b14      	ldr	r3, [pc, #80]	; (8018a00 <tcp_eff_send_mss_netif+0x68>)
 80189ae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80189b2:	4914      	ldr	r1, [pc, #80]	; (8018a04 <tcp_eff_send_mss_netif+0x6c>)
 80189b4:	4814      	ldr	r0, [pc, #80]	; (8018a08 <tcp_eff_send_mss_netif+0x70>)
 80189b6:	f006 f9e9 	bl	801ed8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d101      	bne.n	80189c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80189c0:	89fb      	ldrh	r3, [r7, #14]
 80189c2:	e019      	b.n	80189f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80189ca:	8afb      	ldrh	r3, [r7, #22]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d012      	beq.n	80189f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80189d0:	2328      	movs	r3, #40	; 0x28
 80189d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80189d4:	8afa      	ldrh	r2, [r7, #22]
 80189d6:	8abb      	ldrh	r3, [r7, #20]
 80189d8:	429a      	cmp	r2, r3
 80189da:	d904      	bls.n	80189e6 <tcp_eff_send_mss_netif+0x4e>
 80189dc:	8afa      	ldrh	r2, [r7, #22]
 80189de:	8abb      	ldrh	r3, [r7, #20]
 80189e0:	1ad3      	subs	r3, r2, r3
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	e000      	b.n	80189e8 <tcp_eff_send_mss_netif+0x50>
 80189e6:	2300      	movs	r3, #0
 80189e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80189ea:	8a7a      	ldrh	r2, [r7, #18]
 80189ec:	89fb      	ldrh	r3, [r7, #14]
 80189ee:	4293      	cmp	r3, r2
 80189f0:	bf28      	it	cs
 80189f2:	4613      	movcs	r3, r2
 80189f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80189f6:	89fb      	ldrh	r3, [r7, #14]
}
 80189f8:	4618      	mov	r0, r3
 80189fa:	3718      	adds	r7, #24
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	08022b34 	.word	0x08022b34
 8018a04:	080232a8 	.word	0x080232a8
 8018a08:	08022be0 	.word	0x08022be0

08018a0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
 8018a14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d119      	bne.n	8018a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018a20:	4b10      	ldr	r3, [pc, #64]	; (8018a64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018a22:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8018a26:	4910      	ldr	r1, [pc, #64]	; (8018a68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8018a28:	4810      	ldr	r0, [pc, #64]	; (8018a6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8018a2a:	f006 f9af 	bl	801ed8c <iprintf>

  while (pcb != NULL) {
 8018a2e:	e011      	b.n	8018a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	681a      	ldr	r2, [r3, #0]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d108      	bne.n	8018a4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018a42:	68f8      	ldr	r0, [r7, #12]
 8018a44:	f7fe fd4c 	bl	80174e0 <tcp_abort>
      pcb = next;
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	60fb      	str	r3, [r7, #12]
 8018a4c:	e002      	b.n	8018a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	68db      	ldr	r3, [r3, #12]
 8018a52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d1ea      	bne.n	8018a30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8018a5a:	bf00      	nop
 8018a5c:	bf00      	nop
 8018a5e:	3710      	adds	r7, #16
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}
 8018a64:	08022b34 	.word	0x08022b34
 8018a68:	080232d0 	.word	0x080232d0
 8018a6c:	08022be0 	.word	0x08022be0

08018a70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b084      	sub	sp, #16
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
 8018a78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d02a      	beq.n	8018ad6 <tcp_netif_ip_addr_changed+0x66>
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d026      	beq.n	8018ad6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018a88:	4b15      	ldr	r3, [pc, #84]	; (8018ae0 <tcp_netif_ip_addr_changed+0x70>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4619      	mov	r1, r3
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f7ff ffbc 	bl	8018a0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018a94:	4b13      	ldr	r3, [pc, #76]	; (8018ae4 <tcp_netif_ip_addr_changed+0x74>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	4619      	mov	r1, r3
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	f7ff ffb6 	bl	8018a0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018aa0:	683b      	ldr	r3, [r7, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d017      	beq.n	8018ad6 <tcp_netif_ip_addr_changed+0x66>
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d013      	beq.n	8018ad6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018aae:	4b0e      	ldr	r3, [pc, #56]	; (8018ae8 <tcp_netif_ip_addr_changed+0x78>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	60fb      	str	r3, [r7, #12]
 8018ab4:	e00c      	b.n	8018ad0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d103      	bne.n	8018aca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	681a      	ldr	r2, [r3, #0]
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	68db      	ldr	r3, [r3, #12]
 8018ace:	60fb      	str	r3, [r7, #12]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d1ef      	bne.n	8018ab6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018ad6:	bf00      	nop
 8018ad8:	3710      	adds	r7, #16
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	20010374 	.word	0x20010374
 8018ae4:	20010380 	.word	0x20010380
 8018ae8:	2001037c 	.word	0x2001037c

08018aec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b082      	sub	sp, #8
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d007      	beq.n	8018b0c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7ff fb6f 	bl	80181e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	2200      	movs	r2, #0
 8018b0a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018b0c:	bf00      	nop
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018b14:	b590      	push	{r4, r7, lr}
 8018b16:	b08d      	sub	sp, #52	; 0x34
 8018b18:	af04      	add	r7, sp, #16
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d105      	bne.n	8018b30 <tcp_input+0x1c>
 8018b24:	4b9b      	ldr	r3, [pc, #620]	; (8018d94 <tcp_input+0x280>)
 8018b26:	2283      	movs	r2, #131	; 0x83
 8018b28:	499b      	ldr	r1, [pc, #620]	; (8018d98 <tcp_input+0x284>)
 8018b2a:	489c      	ldr	r0, [pc, #624]	; (8018d9c <tcp_input+0x288>)
 8018b2c:	f006 f92e 	bl	801ed8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	685b      	ldr	r3, [r3, #4]
 8018b34:	4a9a      	ldr	r2, [pc, #616]	; (8018da0 <tcp_input+0x28c>)
 8018b36:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	895b      	ldrh	r3, [r3, #10]
 8018b3c:	2b13      	cmp	r3, #19
 8018b3e:	f240 83c5 	bls.w	80192cc <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018b42:	4b98      	ldr	r3, [pc, #608]	; (8018da4 <tcp_input+0x290>)
 8018b44:	695b      	ldr	r3, [r3, #20]
 8018b46:	4a97      	ldr	r2, [pc, #604]	; (8018da4 <tcp_input+0x290>)
 8018b48:	6812      	ldr	r2, [r2, #0]
 8018b4a:	4611      	mov	r1, r2
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7fb fb53 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 8018b52:	4603      	mov	r3, r0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	f040 83bb 	bne.w	80192d0 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018b5a:	4b92      	ldr	r3, [pc, #584]	; (8018da4 <tcp_input+0x290>)
 8018b5c:	695b      	ldr	r3, [r3, #20]
 8018b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018b62:	2be0      	cmp	r3, #224	; 0xe0
 8018b64:	f000 83b4 	beq.w	80192d0 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018b68:	4b8d      	ldr	r3, [pc, #564]	; (8018da0 <tcp_input+0x28c>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	899b      	ldrh	r3, [r3, #12]
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7fc fa4d 	bl	8015010 <lwip_htons>
 8018b76:	4603      	mov	r3, r0
 8018b78:	0b1b      	lsrs	r3, r3, #12
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	009b      	lsls	r3, r3, #2
 8018b80:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018b82:	7cbb      	ldrb	r3, [r7, #18]
 8018b84:	2b13      	cmp	r3, #19
 8018b86:	f240 83a5 	bls.w	80192d4 <tcp_input+0x7c0>
 8018b8a:	7cbb      	ldrb	r3, [r7, #18]
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	891b      	ldrh	r3, [r3, #8]
 8018b92:	429a      	cmp	r2, r3
 8018b94:	f200 839e 	bhi.w	80192d4 <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018b98:	7cbb      	ldrb	r3, [r7, #18]
 8018b9a:	b29b      	uxth	r3, r3
 8018b9c:	3b14      	subs	r3, #20
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	4b81      	ldr	r3, [pc, #516]	; (8018da8 <tcp_input+0x294>)
 8018ba2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018ba4:	4b81      	ldr	r3, [pc, #516]	; (8018dac <tcp_input+0x298>)
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	895a      	ldrh	r2, [r3, #10]
 8018bae:	7cbb      	ldrb	r3, [r7, #18]
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d309      	bcc.n	8018bca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018bb6:	4b7c      	ldr	r3, [pc, #496]	; (8018da8 <tcp_input+0x294>)
 8018bb8:	881a      	ldrh	r2, [r3, #0]
 8018bba:	4b7d      	ldr	r3, [pc, #500]	; (8018db0 <tcp_input+0x29c>)
 8018bbc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8018bbe:	7cbb      	ldrb	r3, [r7, #18]
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	6878      	ldr	r0, [r7, #4]
 8018bc4:	f7fd fe06 	bl	80167d4 <pbuf_remove_header>
 8018bc8:	e04e      	b.n	8018c68 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d105      	bne.n	8018bde <tcp_input+0xca>
 8018bd2:	4b70      	ldr	r3, [pc, #448]	; (8018d94 <tcp_input+0x280>)
 8018bd4:	22c2      	movs	r2, #194	; 0xc2
 8018bd6:	4977      	ldr	r1, [pc, #476]	; (8018db4 <tcp_input+0x2a0>)
 8018bd8:	4870      	ldr	r0, [pc, #448]	; (8018d9c <tcp_input+0x288>)
 8018bda:	f006 f8d7 	bl	801ed8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8018bde:	2114      	movs	r1, #20
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	f7fd fdf7 	bl	80167d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	895a      	ldrh	r2, [r3, #10]
 8018bea:	4b71      	ldr	r3, [pc, #452]	; (8018db0 <tcp_input+0x29c>)
 8018bec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018bee:	4b6e      	ldr	r3, [pc, #440]	; (8018da8 <tcp_input+0x294>)
 8018bf0:	881a      	ldrh	r2, [r3, #0]
 8018bf2:	4b6f      	ldr	r3, [pc, #444]	; (8018db0 <tcp_input+0x29c>)
 8018bf4:	881b      	ldrh	r3, [r3, #0]
 8018bf6:	1ad3      	subs	r3, r2, r3
 8018bf8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8018bfa:	4b6d      	ldr	r3, [pc, #436]	; (8018db0 <tcp_input+0x29c>)
 8018bfc:	881b      	ldrh	r3, [r3, #0]
 8018bfe:	4619      	mov	r1, r3
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f7fd fde7 	bl	80167d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	895b      	ldrh	r3, [r3, #10]
 8018c0c:	8a3a      	ldrh	r2, [r7, #16]
 8018c0e:	429a      	cmp	r2, r3
 8018c10:	f200 8362 	bhi.w	80192d8 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	4a64      	ldr	r2, [pc, #400]	; (8018dac <tcp_input+0x298>)
 8018c1c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	8a3a      	ldrh	r2, [r7, #16]
 8018c24:	4611      	mov	r1, r2
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fd fdd4 	bl	80167d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	891a      	ldrh	r2, [r3, #8]
 8018c30:	8a3b      	ldrh	r3, [r7, #16]
 8018c32:	1ad3      	subs	r3, r2, r3
 8018c34:	b29a      	uxth	r2, r3
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	895b      	ldrh	r3, [r3, #10]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d005      	beq.n	8018c4e <tcp_input+0x13a>
 8018c42:	4b54      	ldr	r3, [pc, #336]	; (8018d94 <tcp_input+0x280>)
 8018c44:	22df      	movs	r2, #223	; 0xdf
 8018c46:	495c      	ldr	r1, [pc, #368]	; (8018db8 <tcp_input+0x2a4>)
 8018c48:	4854      	ldr	r0, [pc, #336]	; (8018d9c <tcp_input+0x288>)
 8018c4a:	f006 f89f 	bl	801ed8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	891a      	ldrh	r2, [r3, #8]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	891b      	ldrh	r3, [r3, #8]
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	d005      	beq.n	8018c68 <tcp_input+0x154>
 8018c5c:	4b4d      	ldr	r3, [pc, #308]	; (8018d94 <tcp_input+0x280>)
 8018c5e:	22e0      	movs	r2, #224	; 0xe0
 8018c60:	4956      	ldr	r1, [pc, #344]	; (8018dbc <tcp_input+0x2a8>)
 8018c62:	484e      	ldr	r0, [pc, #312]	; (8018d9c <tcp_input+0x288>)
 8018c64:	f006 f892 	bl	801ed8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018c68:	4b4d      	ldr	r3, [pc, #308]	; (8018da0 <tcp_input+0x28c>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	881b      	ldrh	r3, [r3, #0]
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	4a4b      	ldr	r2, [pc, #300]	; (8018da0 <tcp_input+0x28c>)
 8018c72:	6814      	ldr	r4, [r2, #0]
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7fc f9cb 	bl	8015010 <lwip_htons>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018c7e:	4b48      	ldr	r3, [pc, #288]	; (8018da0 <tcp_input+0x28c>)
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	885b      	ldrh	r3, [r3, #2]
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	4a46      	ldr	r2, [pc, #280]	; (8018da0 <tcp_input+0x28c>)
 8018c88:	6814      	ldr	r4, [r2, #0]
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7fc f9c0 	bl	8015010 <lwip_htons>
 8018c90:	4603      	mov	r3, r0
 8018c92:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018c94:	4b42      	ldr	r3, [pc, #264]	; (8018da0 <tcp_input+0x28c>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	4a41      	ldr	r2, [pc, #260]	; (8018da0 <tcp_input+0x28c>)
 8018c9c:	6814      	ldr	r4, [r2, #0]
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7fc f9cb 	bl	801503a <lwip_htonl>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	6063      	str	r3, [r4, #4]
 8018ca8:	6863      	ldr	r3, [r4, #4]
 8018caa:	4a45      	ldr	r2, [pc, #276]	; (8018dc0 <tcp_input+0x2ac>)
 8018cac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018cae:	4b3c      	ldr	r3, [pc, #240]	; (8018da0 <tcp_input+0x28c>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	689b      	ldr	r3, [r3, #8]
 8018cb4:	4a3a      	ldr	r2, [pc, #232]	; (8018da0 <tcp_input+0x28c>)
 8018cb6:	6814      	ldr	r4, [r2, #0]
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7fc f9be 	bl	801503a <lwip_htonl>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	60a3      	str	r3, [r4, #8]
 8018cc2:	68a3      	ldr	r3, [r4, #8]
 8018cc4:	4a3f      	ldr	r2, [pc, #252]	; (8018dc4 <tcp_input+0x2b0>)
 8018cc6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018cc8:	4b35      	ldr	r3, [pc, #212]	; (8018da0 <tcp_input+0x28c>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	89db      	ldrh	r3, [r3, #14]
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	4a33      	ldr	r2, [pc, #204]	; (8018da0 <tcp_input+0x28c>)
 8018cd2:	6814      	ldr	r4, [r2, #0]
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7fc f99b 	bl	8015010 <lwip_htons>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018cde:	4b30      	ldr	r3, [pc, #192]	; (8018da0 <tcp_input+0x28c>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	899b      	ldrh	r3, [r3, #12]
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7fc f992 	bl	8015010 <lwip_htons>
 8018cec:	4603      	mov	r3, r0
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	4b34      	ldr	r3, [pc, #208]	; (8018dc8 <tcp_input+0x2b4>)
 8018cf8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	891a      	ldrh	r2, [r3, #8]
 8018cfe:	4b33      	ldr	r3, [pc, #204]	; (8018dcc <tcp_input+0x2b8>)
 8018d00:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018d02:	4b31      	ldr	r3, [pc, #196]	; (8018dc8 <tcp_input+0x2b4>)
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	f003 0303 	and.w	r3, r3, #3
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d00c      	beq.n	8018d28 <tcp_input+0x214>
    tcplen++;
 8018d0e:	4b2f      	ldr	r3, [pc, #188]	; (8018dcc <tcp_input+0x2b8>)
 8018d10:	881b      	ldrh	r3, [r3, #0]
 8018d12:	3301      	adds	r3, #1
 8018d14:	b29a      	uxth	r2, r3
 8018d16:	4b2d      	ldr	r3, [pc, #180]	; (8018dcc <tcp_input+0x2b8>)
 8018d18:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	891a      	ldrh	r2, [r3, #8]
 8018d1e:	4b2b      	ldr	r3, [pc, #172]	; (8018dcc <tcp_input+0x2b8>)
 8018d20:	881b      	ldrh	r3, [r3, #0]
 8018d22:	429a      	cmp	r2, r3
 8018d24:	f200 82da 	bhi.w	80192dc <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018d28:	2300      	movs	r3, #0
 8018d2a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018d2c:	4b28      	ldr	r3, [pc, #160]	; (8018dd0 <tcp_input+0x2bc>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	61fb      	str	r3, [r7, #28]
 8018d32:	e09d      	b.n	8018e70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	7d1b      	ldrb	r3, [r3, #20]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d105      	bne.n	8018d48 <tcp_input+0x234>
 8018d3c:	4b15      	ldr	r3, [pc, #84]	; (8018d94 <tcp_input+0x280>)
 8018d3e:	22fb      	movs	r2, #251	; 0xfb
 8018d40:	4924      	ldr	r1, [pc, #144]	; (8018dd4 <tcp_input+0x2c0>)
 8018d42:	4816      	ldr	r0, [pc, #88]	; (8018d9c <tcp_input+0x288>)
 8018d44:	f006 f822 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018d48:	69fb      	ldr	r3, [r7, #28]
 8018d4a:	7d1b      	ldrb	r3, [r3, #20]
 8018d4c:	2b0a      	cmp	r3, #10
 8018d4e:	d105      	bne.n	8018d5c <tcp_input+0x248>
 8018d50:	4b10      	ldr	r3, [pc, #64]	; (8018d94 <tcp_input+0x280>)
 8018d52:	22fc      	movs	r2, #252	; 0xfc
 8018d54:	4920      	ldr	r1, [pc, #128]	; (8018dd8 <tcp_input+0x2c4>)
 8018d56:	4811      	ldr	r0, [pc, #68]	; (8018d9c <tcp_input+0x288>)
 8018d58:	f006 f818 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018d5c:	69fb      	ldr	r3, [r7, #28]
 8018d5e:	7d1b      	ldrb	r3, [r3, #20]
 8018d60:	2b01      	cmp	r3, #1
 8018d62:	d105      	bne.n	8018d70 <tcp_input+0x25c>
 8018d64:	4b0b      	ldr	r3, [pc, #44]	; (8018d94 <tcp_input+0x280>)
 8018d66:	22fd      	movs	r2, #253	; 0xfd
 8018d68:	491c      	ldr	r1, [pc, #112]	; (8018ddc <tcp_input+0x2c8>)
 8018d6a:	480c      	ldr	r0, [pc, #48]	; (8018d9c <tcp_input+0x288>)
 8018d6c:	f006 f80e 	bl	801ed8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	7a1b      	ldrb	r3, [r3, #8]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d033      	beq.n	8018de0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018d78:	69fb      	ldr	r3, [r7, #28]
 8018d7a:	7a1a      	ldrb	r2, [r3, #8]
 8018d7c:	4b09      	ldr	r3, [pc, #36]	; (8018da4 <tcp_input+0x290>)
 8018d7e:	685b      	ldr	r3, [r3, #4]
 8018d80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d84:	3301      	adds	r3, #1
 8018d86:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018d88:	429a      	cmp	r2, r3
 8018d8a:	d029      	beq.n	8018de0 <tcp_input+0x2cc>
      prev = pcb;
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	61bb      	str	r3, [r7, #24]
      continue;
 8018d90:	e06b      	b.n	8018e6a <tcp_input+0x356>
 8018d92:	bf00      	nop
 8018d94:	08023304 	.word	0x08023304
 8018d98:	080233a0 	.word	0x080233a0
 8018d9c:	080233b8 	.word	0x080233b8
 8018da0:	2000909c 	.word	0x2000909c
 8018da4:	20009498 	.word	0x20009498
 8018da8:	200090a0 	.word	0x200090a0
 8018dac:	200090a4 	.word	0x200090a4
 8018db0:	200090a2 	.word	0x200090a2
 8018db4:	080233e0 	.word	0x080233e0
 8018db8:	080233f0 	.word	0x080233f0
 8018dbc:	080233fc 	.word	0x080233fc
 8018dc0:	200090ac 	.word	0x200090ac
 8018dc4:	200090b0 	.word	0x200090b0
 8018dc8:	200090b8 	.word	0x200090b8
 8018dcc:	200090b6 	.word	0x200090b6
 8018dd0:	20010374 	.word	0x20010374
 8018dd4:	0802341c 	.word	0x0802341c
 8018dd8:	08023444 	.word	0x08023444
 8018ddc:	08023470 	.word	0x08023470
    }

    if (pcb->remote_port == tcphdr->src &&
 8018de0:	69fb      	ldr	r3, [r7, #28]
 8018de2:	8b1a      	ldrh	r2, [r3, #24]
 8018de4:	4b94      	ldr	r3, [pc, #592]	; (8019038 <tcp_input+0x524>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d13a      	bne.n	8018e66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018df0:	69fb      	ldr	r3, [r7, #28]
 8018df2:	8ada      	ldrh	r2, [r3, #22]
 8018df4:	4b90      	ldr	r3, [pc, #576]	; (8019038 <tcp_input+0x524>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	885b      	ldrh	r3, [r3, #2]
 8018dfa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018dfc:	429a      	cmp	r2, r3
 8018dfe:	d132      	bne.n	8018e66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	685a      	ldr	r2, [r3, #4]
 8018e04:	4b8d      	ldr	r3, [pc, #564]	; (801903c <tcp_input+0x528>)
 8018e06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	d12c      	bne.n	8018e66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018e0c:	69fb      	ldr	r3, [r7, #28]
 8018e0e:	681a      	ldr	r2, [r3, #0]
 8018e10:	4b8a      	ldr	r3, [pc, #552]	; (801903c <tcp_input+0x528>)
 8018e12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d126      	bne.n	8018e66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018e18:	69fb      	ldr	r3, [r7, #28]
 8018e1a:	68db      	ldr	r3, [r3, #12]
 8018e1c:	69fa      	ldr	r2, [r7, #28]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d106      	bne.n	8018e30 <tcp_input+0x31c>
 8018e22:	4b87      	ldr	r3, [pc, #540]	; (8019040 <tcp_input+0x52c>)
 8018e24:	f240 120d 	movw	r2, #269	; 0x10d
 8018e28:	4986      	ldr	r1, [pc, #536]	; (8019044 <tcp_input+0x530>)
 8018e2a:	4887      	ldr	r0, [pc, #540]	; (8019048 <tcp_input+0x534>)
 8018e2c:	f005 ffae 	bl	801ed8c <iprintf>
      if (prev != NULL) {
 8018e30:	69bb      	ldr	r3, [r7, #24]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d00a      	beq.n	8018e4c <tcp_input+0x338>
        prev->next = pcb->next;
 8018e36:	69fb      	ldr	r3, [r7, #28]
 8018e38:	68da      	ldr	r2, [r3, #12]
 8018e3a:	69bb      	ldr	r3, [r7, #24]
 8018e3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018e3e:	4b83      	ldr	r3, [pc, #524]	; (801904c <tcp_input+0x538>)
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	69fb      	ldr	r3, [r7, #28]
 8018e44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018e46:	4a81      	ldr	r2, [pc, #516]	; (801904c <tcp_input+0x538>)
 8018e48:	69fb      	ldr	r3, [r7, #28]
 8018e4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018e4c:	69fb      	ldr	r3, [r7, #28]
 8018e4e:	68db      	ldr	r3, [r3, #12]
 8018e50:	69fa      	ldr	r2, [r7, #28]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d111      	bne.n	8018e7a <tcp_input+0x366>
 8018e56:	4b7a      	ldr	r3, [pc, #488]	; (8019040 <tcp_input+0x52c>)
 8018e58:	f240 1215 	movw	r2, #277	; 0x115
 8018e5c:	497c      	ldr	r1, [pc, #496]	; (8019050 <tcp_input+0x53c>)
 8018e5e:	487a      	ldr	r0, [pc, #488]	; (8019048 <tcp_input+0x534>)
 8018e60:	f005 ff94 	bl	801ed8c <iprintf>
      break;
 8018e64:	e009      	b.n	8018e7a <tcp_input+0x366>
    }
    prev = pcb;
 8018e66:	69fb      	ldr	r3, [r7, #28]
 8018e68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e6a:	69fb      	ldr	r3, [r7, #28]
 8018e6c:	68db      	ldr	r3, [r3, #12]
 8018e6e:	61fb      	str	r3, [r7, #28]
 8018e70:	69fb      	ldr	r3, [r7, #28]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f47f af5e 	bne.w	8018d34 <tcp_input+0x220>
 8018e78:	e000      	b.n	8018e7c <tcp_input+0x368>
      break;
 8018e7a:	bf00      	nop
  }

  if (pcb == NULL) {
 8018e7c:	69fb      	ldr	r3, [r7, #28]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	f040 8095 	bne.w	8018fae <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e84:	4b73      	ldr	r3, [pc, #460]	; (8019054 <tcp_input+0x540>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	61fb      	str	r3, [r7, #28]
 8018e8a:	e03f      	b.n	8018f0c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018e8c:	69fb      	ldr	r3, [r7, #28]
 8018e8e:	7d1b      	ldrb	r3, [r3, #20]
 8018e90:	2b0a      	cmp	r3, #10
 8018e92:	d006      	beq.n	8018ea2 <tcp_input+0x38e>
 8018e94:	4b6a      	ldr	r3, [pc, #424]	; (8019040 <tcp_input+0x52c>)
 8018e96:	f240 121f 	movw	r2, #287	; 0x11f
 8018e9a:	496f      	ldr	r1, [pc, #444]	; (8019058 <tcp_input+0x544>)
 8018e9c:	486a      	ldr	r0, [pc, #424]	; (8019048 <tcp_input+0x534>)
 8018e9e:	f005 ff75 	bl	801ed8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ea2:	69fb      	ldr	r3, [r7, #28]
 8018ea4:	7a1b      	ldrb	r3, [r3, #8]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d009      	beq.n	8018ebe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	7a1a      	ldrb	r2, [r3, #8]
 8018eae:	4b63      	ldr	r3, [pc, #396]	; (801903c <tcp_input+0x528>)
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018eb6:	3301      	adds	r3, #1
 8018eb8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d122      	bne.n	8018f04 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018ebe:	69fb      	ldr	r3, [r7, #28]
 8018ec0:	8b1a      	ldrh	r2, [r3, #24]
 8018ec2:	4b5d      	ldr	r3, [pc, #372]	; (8019038 <tcp_input+0x524>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	881b      	ldrh	r3, [r3, #0]
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d11b      	bne.n	8018f06 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018ece:	69fb      	ldr	r3, [r7, #28]
 8018ed0:	8ada      	ldrh	r2, [r3, #22]
 8018ed2:	4b59      	ldr	r3, [pc, #356]	; (8019038 <tcp_input+0x524>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	885b      	ldrh	r3, [r3, #2]
 8018ed8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d113      	bne.n	8018f06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018ede:	69fb      	ldr	r3, [r7, #28]
 8018ee0:	685a      	ldr	r2, [r3, #4]
 8018ee2:	4b56      	ldr	r3, [pc, #344]	; (801903c <tcp_input+0x528>)
 8018ee4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	d10d      	bne.n	8018f06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	681a      	ldr	r2, [r3, #0]
 8018eee:	4b53      	ldr	r3, [pc, #332]	; (801903c <tcp_input+0x528>)
 8018ef0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d107      	bne.n	8018f06 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018ef6:	69f8      	ldr	r0, [r7, #28]
 8018ef8:	f000 fb56 	bl	80195a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f7fd fcef 	bl	80168e0 <pbuf_free>
        return;
 8018f02:	e1f1      	b.n	80192e8 <tcp_input+0x7d4>
        continue;
 8018f04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f06:	69fb      	ldr	r3, [r7, #28]
 8018f08:	68db      	ldr	r3, [r3, #12]
 8018f0a:	61fb      	str	r3, [r7, #28]
 8018f0c:	69fb      	ldr	r3, [r7, #28]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d1bc      	bne.n	8018e8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8018f12:	2300      	movs	r3, #0
 8018f14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018f16:	4b51      	ldr	r3, [pc, #324]	; (801905c <tcp_input+0x548>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	617b      	str	r3, [r7, #20]
 8018f1c:	e02a      	b.n	8018f74 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	7a1b      	ldrb	r3, [r3, #8]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d00c      	beq.n	8018f40 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	7a1a      	ldrb	r2, [r3, #8]
 8018f2a:	4b44      	ldr	r3, [pc, #272]	; (801903c <tcp_input+0x528>)
 8018f2c:	685b      	ldr	r3, [r3, #4]
 8018f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018f32:	3301      	adds	r3, #1
 8018f34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018f36:	429a      	cmp	r2, r3
 8018f38:	d002      	beq.n	8018f40 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	61bb      	str	r3, [r7, #24]
        continue;
 8018f3e:	e016      	b.n	8018f6e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	8ada      	ldrh	r2, [r3, #22]
 8018f44:	4b3c      	ldr	r3, [pc, #240]	; (8019038 <tcp_input+0x524>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	885b      	ldrh	r3, [r3, #2]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d10c      	bne.n	8018f6a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	681a      	ldr	r2, [r3, #0]
 8018f54:	4b39      	ldr	r3, [pc, #228]	; (801903c <tcp_input+0x528>)
 8018f56:	695b      	ldr	r3, [r3, #20]
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	d00f      	beq.n	8018f7c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018f5c:	697b      	ldr	r3, [r7, #20]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d00d      	beq.n	8018f7e <tcp_input+0x46a>
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d009      	beq.n	8018f7e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018f6e:	697b      	ldr	r3, [r7, #20]
 8018f70:	68db      	ldr	r3, [r3, #12]
 8018f72:	617b      	str	r3, [r7, #20]
 8018f74:	697b      	ldr	r3, [r7, #20]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d1d1      	bne.n	8018f1e <tcp_input+0x40a>
 8018f7a:	e000      	b.n	8018f7e <tcp_input+0x46a>
            break;
 8018f7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d014      	beq.n	8018fae <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018f84:	69bb      	ldr	r3, [r7, #24]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d00a      	beq.n	8018fa0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018f8a:	697b      	ldr	r3, [r7, #20]
 8018f8c:	68da      	ldr	r2, [r3, #12]
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018f92:	4b32      	ldr	r3, [pc, #200]	; (801905c <tcp_input+0x548>)
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018f9a:	4a30      	ldr	r2, [pc, #192]	; (801905c <tcp_input+0x548>)
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018fa0:	6978      	ldr	r0, [r7, #20]
 8018fa2:	f000 fa03 	bl	80193ac <tcp_listen_input>
      }
      pbuf_free(p);
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	f7fd fc9a 	bl	80168e0 <pbuf_free>
      return;
 8018fac:	e19c      	b.n	80192e8 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018fae:	69fb      	ldr	r3, [r7, #28]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f000 8161 	beq.w	8019278 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018fb6:	4b2a      	ldr	r3, [pc, #168]	; (8019060 <tcp_input+0x54c>)
 8018fb8:	2200      	movs	r2, #0
 8018fba:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	891a      	ldrh	r2, [r3, #8]
 8018fc0:	4b27      	ldr	r3, [pc, #156]	; (8019060 <tcp_input+0x54c>)
 8018fc2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018fc4:	4a26      	ldr	r2, [pc, #152]	; (8019060 <tcp_input+0x54c>)
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018fca:	4b1b      	ldr	r3, [pc, #108]	; (8019038 <tcp_input+0x524>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	4a24      	ldr	r2, [pc, #144]	; (8019060 <tcp_input+0x54c>)
 8018fd0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018fd2:	4b24      	ldr	r3, [pc, #144]	; (8019064 <tcp_input+0x550>)
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018fd8:	4b23      	ldr	r3, [pc, #140]	; (8019068 <tcp_input+0x554>)
 8018fda:	2200      	movs	r2, #0
 8018fdc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018fde:	4b23      	ldr	r3, [pc, #140]	; (801906c <tcp_input+0x558>)
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018fe4:	4b22      	ldr	r3, [pc, #136]	; (8019070 <tcp_input+0x55c>)
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	f003 0308 	and.w	r3, r3, #8
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d006      	beq.n	8018ffe <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	7b5b      	ldrb	r3, [r3, #13]
 8018ff4:	f043 0301 	orr.w	r3, r3, #1
 8018ff8:	b2da      	uxtb	r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019002:	2b00      	cmp	r3, #0
 8019004:	d038      	beq.n	8019078 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019006:	69f8      	ldr	r0, [r7, #28]
 8019008:	f7ff f86e 	bl	80180e8 <tcp_process_refused_data>
 801900c:	4603      	mov	r3, r0
 801900e:	f113 0f0d 	cmn.w	r3, #13
 8019012:	d007      	beq.n	8019024 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019018:	2b00      	cmp	r3, #0
 801901a:	d02d      	beq.n	8019078 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801901c:	4b15      	ldr	r3, [pc, #84]	; (8019074 <tcp_input+0x560>)
 801901e:	881b      	ldrh	r3, [r3, #0]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d029      	beq.n	8019078 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019024:	69fb      	ldr	r3, [r7, #28]
 8019026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019028:	2b00      	cmp	r3, #0
 801902a:	f040 8105 	bne.w	8019238 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801902e:	69f8      	ldr	r0, [r7, #28]
 8019030:	f003 fe18 	bl	801cc64 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019034:	e100      	b.n	8019238 <tcp_input+0x724>
 8019036:	bf00      	nop
 8019038:	2000909c 	.word	0x2000909c
 801903c:	20009498 	.word	0x20009498
 8019040:	08023304 	.word	0x08023304
 8019044:	08023498 	.word	0x08023498
 8019048:	080233b8 	.word	0x080233b8
 801904c:	20010374 	.word	0x20010374
 8019050:	080234c4 	.word	0x080234c4
 8019054:	20010384 	.word	0x20010384
 8019058:	080234f0 	.word	0x080234f0
 801905c:	2001037c 	.word	0x2001037c
 8019060:	2000908c 	.word	0x2000908c
 8019064:	200090bc 	.word	0x200090bc
 8019068:	200090b9 	.word	0x200090b9
 801906c:	200090b4 	.word	0x200090b4
 8019070:	200090b8 	.word	0x200090b8
 8019074:	200090b6 	.word	0x200090b6
      }
    }
    tcp_input_pcb = pcb;
 8019078:	4a9d      	ldr	r2, [pc, #628]	; (80192f0 <tcp_input+0x7dc>)
 801907a:	69fb      	ldr	r3, [r7, #28]
 801907c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801907e:	69f8      	ldr	r0, [r7, #28]
 8019080:	f000 fb0c 	bl	801969c <tcp_process>
 8019084:	4603      	mov	r3, r0
 8019086:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019088:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801908c:	f113 0f0d 	cmn.w	r3, #13
 8019090:	f000 80d4 	beq.w	801923c <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 8019094:	4b97      	ldr	r3, [pc, #604]	; (80192f4 <tcp_input+0x7e0>)
 8019096:	781b      	ldrb	r3, [r3, #0]
 8019098:	f003 0308 	and.w	r3, r3, #8
 801909c:	2b00      	cmp	r3, #0
 801909e:	d015      	beq.n	80190cc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80190a0:	69fb      	ldr	r3, [r7, #28]
 80190a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d008      	beq.n	80190bc <tcp_input+0x5a8>
 80190aa:	69fb      	ldr	r3, [r7, #28]
 80190ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80190b0:	69fa      	ldr	r2, [r7, #28]
 80190b2:	6912      	ldr	r2, [r2, #16]
 80190b4:	f06f 010d 	mvn.w	r1, #13
 80190b8:	4610      	mov	r0, r2
 80190ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80190bc:	69f9      	ldr	r1, [r7, #28]
 80190be:	488e      	ldr	r0, [pc, #568]	; (80192f8 <tcp_input+0x7e4>)
 80190c0:	f7ff fbb0 	bl	8018824 <tcp_pcb_remove>
        tcp_free(pcb);
 80190c4:	69f8      	ldr	r0, [r7, #28]
 80190c6:	f7fd fec7 	bl	8016e58 <tcp_free>
 80190ca:	e0c2      	b.n	8019252 <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 80190cc:	2300      	movs	r3, #0
 80190ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80190d0:	4b8a      	ldr	r3, [pc, #552]	; (80192fc <tcp_input+0x7e8>)
 80190d2:	881b      	ldrh	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d01d      	beq.n	8019114 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80190d8:	4b88      	ldr	r3, [pc, #544]	; (80192fc <tcp_input+0x7e8>)
 80190da:	881b      	ldrh	r3, [r3, #0]
 80190dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80190de:	69fb      	ldr	r3, [r7, #28]
 80190e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d00a      	beq.n	80190fe <tcp_input+0x5ea>
 80190e8:	69fb      	ldr	r3, [r7, #28]
 80190ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80190ee:	69fa      	ldr	r2, [r7, #28]
 80190f0:	6910      	ldr	r0, [r2, #16]
 80190f2:	89fa      	ldrh	r2, [r7, #14]
 80190f4:	69f9      	ldr	r1, [r7, #28]
 80190f6:	4798      	blx	r3
 80190f8:	4603      	mov	r3, r0
 80190fa:	74fb      	strb	r3, [r7, #19]
 80190fc:	e001      	b.n	8019102 <tcp_input+0x5ee>
 80190fe:	2300      	movs	r3, #0
 8019100:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019106:	f113 0f0d 	cmn.w	r3, #13
 801910a:	f000 8099 	beq.w	8019240 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 801910e:	4b7b      	ldr	r3, [pc, #492]	; (80192fc <tcp_input+0x7e8>)
 8019110:	2200      	movs	r2, #0
 8019112:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019114:	69f8      	ldr	r0, [r7, #28]
 8019116:	f000 f909 	bl	801932c <tcp_input_delayed_close>
 801911a:	4603      	mov	r3, r0
 801911c:	2b00      	cmp	r3, #0
 801911e:	f040 8091 	bne.w	8019244 <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019122:	4b77      	ldr	r3, [pc, #476]	; (8019300 <tcp_input+0x7ec>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d041      	beq.n	80191ae <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801912a:	69fb      	ldr	r3, [r7, #28]
 801912c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801912e:	2b00      	cmp	r3, #0
 8019130:	d006      	beq.n	8019140 <tcp_input+0x62c>
 8019132:	4b74      	ldr	r3, [pc, #464]	; (8019304 <tcp_input+0x7f0>)
 8019134:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019138:	4973      	ldr	r1, [pc, #460]	; (8019308 <tcp_input+0x7f4>)
 801913a:	4874      	ldr	r0, [pc, #464]	; (801930c <tcp_input+0x7f8>)
 801913c:	f005 fe26 	bl	801ed8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019140:	69fb      	ldr	r3, [r7, #28]
 8019142:	8b5b      	ldrh	r3, [r3, #26]
 8019144:	f003 0310 	and.w	r3, r3, #16
 8019148:	2b00      	cmp	r3, #0
 801914a:	d008      	beq.n	801915e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801914c:	4b6c      	ldr	r3, [pc, #432]	; (8019300 <tcp_input+0x7ec>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4618      	mov	r0, r3
 8019152:	f7fd fbc5 	bl	80168e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019156:	69f8      	ldr	r0, [r7, #28]
 8019158:	f7fe f9c2 	bl	80174e0 <tcp_abort>
            goto aborted;
 801915c:	e079      	b.n	8019252 <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801915e:	69fb      	ldr	r3, [r7, #28]
 8019160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019164:	2b00      	cmp	r3, #0
 8019166:	d00c      	beq.n	8019182 <tcp_input+0x66e>
 8019168:	69fb      	ldr	r3, [r7, #28]
 801916a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801916e:	69fb      	ldr	r3, [r7, #28]
 8019170:	6918      	ldr	r0, [r3, #16]
 8019172:	4b63      	ldr	r3, [pc, #396]	; (8019300 <tcp_input+0x7ec>)
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	2300      	movs	r3, #0
 8019178:	69f9      	ldr	r1, [r7, #28]
 801917a:	47a0      	blx	r4
 801917c:	4603      	mov	r3, r0
 801917e:	74fb      	strb	r3, [r7, #19]
 8019180:	e008      	b.n	8019194 <tcp_input+0x680>
 8019182:	4b5f      	ldr	r3, [pc, #380]	; (8019300 <tcp_input+0x7ec>)
 8019184:	681a      	ldr	r2, [r3, #0]
 8019186:	2300      	movs	r3, #0
 8019188:	69f9      	ldr	r1, [r7, #28]
 801918a:	2000      	movs	r0, #0
 801918c:	f7ff f884 	bl	8018298 <tcp_recv_null>
 8019190:	4603      	mov	r3, r0
 8019192:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019198:	f113 0f0d 	cmn.w	r3, #13
 801919c:	d054      	beq.n	8019248 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801919e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d003      	beq.n	80191ae <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80191a6:	4b56      	ldr	r3, [pc, #344]	; (8019300 <tcp_input+0x7ec>)
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	69fb      	ldr	r3, [r7, #28]
 80191ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80191ae:	4b51      	ldr	r3, [pc, #324]	; (80192f4 <tcp_input+0x7e0>)
 80191b0:	781b      	ldrb	r3, [r3, #0]
 80191b2:	f003 0320 	and.w	r3, r3, #32
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d031      	beq.n	801921e <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 80191ba:	69fb      	ldr	r3, [r7, #28]
 80191bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d009      	beq.n	80191d6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80191c2:	69fb      	ldr	r3, [r7, #28]
 80191c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191c6:	7b5a      	ldrb	r2, [r3, #13]
 80191c8:	69fb      	ldr	r3, [r7, #28]
 80191ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191cc:	f042 0220 	orr.w	r2, r2, #32
 80191d0:	b2d2      	uxtb	r2, r2
 80191d2:	735a      	strb	r2, [r3, #13]
 80191d4:	e023      	b.n	801921e <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80191d6:	69fb      	ldr	r3, [r7, #28]
 80191d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191da:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80191de:	4293      	cmp	r3, r2
 80191e0:	d005      	beq.n	80191ee <tcp_input+0x6da>
              pcb->rcv_wnd++;
 80191e2:	69fb      	ldr	r3, [r7, #28]
 80191e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191e6:	3301      	adds	r3, #1
 80191e8:	b29a      	uxth	r2, r3
 80191ea:	69fb      	ldr	r3, [r7, #28]
 80191ec:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80191ee:	69fb      	ldr	r3, [r7, #28]
 80191f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d00b      	beq.n	8019210 <tcp_input+0x6fc>
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80191fe:	69fb      	ldr	r3, [r7, #28]
 8019200:	6918      	ldr	r0, [r3, #16]
 8019202:	2300      	movs	r3, #0
 8019204:	2200      	movs	r2, #0
 8019206:	69f9      	ldr	r1, [r7, #28]
 8019208:	47a0      	blx	r4
 801920a:	4603      	mov	r3, r0
 801920c:	74fb      	strb	r3, [r7, #19]
 801920e:	e001      	b.n	8019214 <tcp_input+0x700>
 8019210:	2300      	movs	r3, #0
 8019212:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019214:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019218:	f113 0f0d 	cmn.w	r3, #13
 801921c:	d016      	beq.n	801924c <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801921e:	4b34      	ldr	r3, [pc, #208]	; (80192f0 <tcp_input+0x7dc>)
 8019220:	2200      	movs	r2, #0
 8019222:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019224:	69f8      	ldr	r0, [r7, #28]
 8019226:	f000 f881 	bl	801932c <tcp_input_delayed_close>
 801922a:	4603      	mov	r3, r0
 801922c:	2b00      	cmp	r3, #0
 801922e:	d10f      	bne.n	8019250 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8019230:	69f8      	ldr	r0, [r7, #28]
 8019232:	f002 ff11 	bl	801c058 <tcp_output>
 8019236:	e00c      	b.n	8019252 <tcp_input+0x73e>
        goto aborted;
 8019238:	bf00      	nop
 801923a:	e00a      	b.n	8019252 <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801923c:	bf00      	nop
 801923e:	e008      	b.n	8019252 <tcp_input+0x73e>
              goto aborted;
 8019240:	bf00      	nop
 8019242:	e006      	b.n	8019252 <tcp_input+0x73e>
          goto aborted;
 8019244:	bf00      	nop
 8019246:	e004      	b.n	8019252 <tcp_input+0x73e>
            goto aborted;
 8019248:	bf00      	nop
 801924a:	e002      	b.n	8019252 <tcp_input+0x73e>
              goto aborted;
 801924c:	bf00      	nop
 801924e:	e000      	b.n	8019252 <tcp_input+0x73e>
          goto aborted;
 8019250:	bf00      	nop
    tcp_input_pcb = NULL;
 8019252:	4b27      	ldr	r3, [pc, #156]	; (80192f0 <tcp_input+0x7dc>)
 8019254:	2200      	movs	r2, #0
 8019256:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019258:	4b29      	ldr	r3, [pc, #164]	; (8019300 <tcp_input+0x7ec>)
 801925a:	2200      	movs	r2, #0
 801925c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801925e:	4b2c      	ldr	r3, [pc, #176]	; (8019310 <tcp_input+0x7fc>)
 8019260:	685b      	ldr	r3, [r3, #4]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d03f      	beq.n	80192e6 <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8019266:	4b2a      	ldr	r3, [pc, #168]	; (8019310 <tcp_input+0x7fc>)
 8019268:	685b      	ldr	r3, [r3, #4]
 801926a:	4618      	mov	r0, r3
 801926c:	f7fd fb38 	bl	80168e0 <pbuf_free>
      inseg.p = NULL;
 8019270:	4b27      	ldr	r3, [pc, #156]	; (8019310 <tcp_input+0x7fc>)
 8019272:	2200      	movs	r2, #0
 8019274:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019276:	e036      	b.n	80192e6 <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019278:	4b26      	ldr	r3, [pc, #152]	; (8019314 <tcp_input+0x800>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	899b      	ldrh	r3, [r3, #12]
 801927e:	b29b      	uxth	r3, r3
 8019280:	4618      	mov	r0, r3
 8019282:	f7fb fec5 	bl	8015010 <lwip_htons>
 8019286:	4603      	mov	r3, r0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	f003 0304 	and.w	r3, r3, #4
 801928e:	2b00      	cmp	r3, #0
 8019290:	d118      	bne.n	80192c4 <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019292:	4b21      	ldr	r3, [pc, #132]	; (8019318 <tcp_input+0x804>)
 8019294:	6819      	ldr	r1, [r3, #0]
 8019296:	4b21      	ldr	r3, [pc, #132]	; (801931c <tcp_input+0x808>)
 8019298:	881b      	ldrh	r3, [r3, #0]
 801929a:	461a      	mov	r2, r3
 801929c:	4b20      	ldr	r3, [pc, #128]	; (8019320 <tcp_input+0x80c>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80192a2:	4b1c      	ldr	r3, [pc, #112]	; (8019314 <tcp_input+0x800>)
 80192a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80192a6:	885b      	ldrh	r3, [r3, #2]
 80192a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80192aa:	4a1a      	ldr	r2, [pc, #104]	; (8019314 <tcp_input+0x800>)
 80192ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80192ae:	8812      	ldrh	r2, [r2, #0]
 80192b0:	b292      	uxth	r2, r2
 80192b2:	9202      	str	r2, [sp, #8]
 80192b4:	9301      	str	r3, [sp, #4]
 80192b6:	4b1b      	ldr	r3, [pc, #108]	; (8019324 <tcp_input+0x810>)
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	4b1b      	ldr	r3, [pc, #108]	; (8019328 <tcp_input+0x814>)
 80192bc:	4602      	mov	r2, r0
 80192be:	2000      	movs	r0, #0
 80192c0:	f003 fc7e 	bl	801cbc0 <tcp_rst>
    pbuf_free(p);
 80192c4:	6878      	ldr	r0, [r7, #4]
 80192c6:	f7fd fb0b 	bl	80168e0 <pbuf_free>
  return;
 80192ca:	e00c      	b.n	80192e6 <tcp_input+0x7d2>
    goto dropped;
 80192cc:	bf00      	nop
 80192ce:	e006      	b.n	80192de <tcp_input+0x7ca>
    goto dropped;
 80192d0:	bf00      	nop
 80192d2:	e004      	b.n	80192de <tcp_input+0x7ca>
    goto dropped;
 80192d4:	bf00      	nop
 80192d6:	e002      	b.n	80192de <tcp_input+0x7ca>
      goto dropped;
 80192d8:	bf00      	nop
 80192da:	e000      	b.n	80192de <tcp_input+0x7ca>
      goto dropped;
 80192dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80192de:	6878      	ldr	r0, [r7, #4]
 80192e0:	f7fd fafe 	bl	80168e0 <pbuf_free>
 80192e4:	e000      	b.n	80192e8 <tcp_input+0x7d4>
  return;
 80192e6:	bf00      	nop
}
 80192e8:	3724      	adds	r7, #36	; 0x24
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd90      	pop	{r4, r7, pc}
 80192ee:	bf00      	nop
 80192f0:	20010388 	.word	0x20010388
 80192f4:	200090b9 	.word	0x200090b9
 80192f8:	20010374 	.word	0x20010374
 80192fc:	200090b4 	.word	0x200090b4
 8019300:	200090bc 	.word	0x200090bc
 8019304:	08023304 	.word	0x08023304
 8019308:	08023520 	.word	0x08023520
 801930c:	080233b8 	.word	0x080233b8
 8019310:	2000908c 	.word	0x2000908c
 8019314:	2000909c 	.word	0x2000909c
 8019318:	200090b0 	.word	0x200090b0
 801931c:	200090b6 	.word	0x200090b6
 8019320:	200090ac 	.word	0x200090ac
 8019324:	200094a8 	.word	0x200094a8
 8019328:	200094ac 	.word	0x200094ac

0801932c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b082      	sub	sp, #8
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d106      	bne.n	8019348 <tcp_input_delayed_close+0x1c>
 801933a:	4b17      	ldr	r3, [pc, #92]	; (8019398 <tcp_input_delayed_close+0x6c>)
 801933c:	f240 225a 	movw	r2, #602	; 0x25a
 8019340:	4916      	ldr	r1, [pc, #88]	; (801939c <tcp_input_delayed_close+0x70>)
 8019342:	4817      	ldr	r0, [pc, #92]	; (80193a0 <tcp_input_delayed_close+0x74>)
 8019344:	f005 fd22 	bl	801ed8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019348:	4b16      	ldr	r3, [pc, #88]	; (80193a4 <tcp_input_delayed_close+0x78>)
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	f003 0310 	and.w	r3, r3, #16
 8019350:	2b00      	cmp	r3, #0
 8019352:	d01c      	beq.n	801938e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	8b5b      	ldrh	r3, [r3, #26]
 8019358:	f003 0310 	and.w	r3, r3, #16
 801935c:	2b00      	cmp	r3, #0
 801935e:	d10d      	bne.n	801937c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019366:	2b00      	cmp	r3, #0
 8019368:	d008      	beq.n	801937c <tcp_input_delayed_close+0x50>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	6912      	ldr	r2, [r2, #16]
 8019374:	f06f 010e 	mvn.w	r1, #14
 8019378:	4610      	mov	r0, r2
 801937a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801937c:	6879      	ldr	r1, [r7, #4]
 801937e:	480a      	ldr	r0, [pc, #40]	; (80193a8 <tcp_input_delayed_close+0x7c>)
 8019380:	f7ff fa50 	bl	8018824 <tcp_pcb_remove>
    tcp_free(pcb);
 8019384:	6878      	ldr	r0, [r7, #4]
 8019386:	f7fd fd67 	bl	8016e58 <tcp_free>
    return 1;
 801938a:	2301      	movs	r3, #1
 801938c:	e000      	b.n	8019390 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801938e:	2300      	movs	r3, #0
}
 8019390:	4618      	mov	r0, r3
 8019392:	3708      	adds	r7, #8
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	08023304 	.word	0x08023304
 801939c:	0802353c 	.word	0x0802353c
 80193a0:	080233b8 	.word	0x080233b8
 80193a4:	200090b9 	.word	0x200090b9
 80193a8:	20010374 	.word	0x20010374

080193ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80193ac:	b590      	push	{r4, r7, lr}
 80193ae:	b08b      	sub	sp, #44	; 0x2c
 80193b0:	af04      	add	r7, sp, #16
 80193b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80193b4:	4b6f      	ldr	r3, [pc, #444]	; (8019574 <tcp_listen_input+0x1c8>)
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	f003 0304 	and.w	r3, r3, #4
 80193bc:	2b00      	cmp	r3, #0
 80193be:	f040 80d2 	bne.w	8019566 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d106      	bne.n	80193d6 <tcp_listen_input+0x2a>
 80193c8:	4b6b      	ldr	r3, [pc, #428]	; (8019578 <tcp_listen_input+0x1cc>)
 80193ca:	f240 2281 	movw	r2, #641	; 0x281
 80193ce:	496b      	ldr	r1, [pc, #428]	; (801957c <tcp_listen_input+0x1d0>)
 80193d0:	486b      	ldr	r0, [pc, #428]	; (8019580 <tcp_listen_input+0x1d4>)
 80193d2:	f005 fcdb 	bl	801ed8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80193d6:	4b67      	ldr	r3, [pc, #412]	; (8019574 <tcp_listen_input+0x1c8>)
 80193d8:	781b      	ldrb	r3, [r3, #0]
 80193da:	f003 0310 	and.w	r3, r3, #16
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d019      	beq.n	8019416 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193e2:	4b68      	ldr	r3, [pc, #416]	; (8019584 <tcp_listen_input+0x1d8>)
 80193e4:	6819      	ldr	r1, [r3, #0]
 80193e6:	4b68      	ldr	r3, [pc, #416]	; (8019588 <tcp_listen_input+0x1dc>)
 80193e8:	881b      	ldrh	r3, [r3, #0]
 80193ea:	461a      	mov	r2, r3
 80193ec:	4b67      	ldr	r3, [pc, #412]	; (801958c <tcp_listen_input+0x1e0>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80193f2:	4b67      	ldr	r3, [pc, #412]	; (8019590 <tcp_listen_input+0x1e4>)
 80193f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193f6:	885b      	ldrh	r3, [r3, #2]
 80193f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80193fa:	4a65      	ldr	r2, [pc, #404]	; (8019590 <tcp_listen_input+0x1e4>)
 80193fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193fe:	8812      	ldrh	r2, [r2, #0]
 8019400:	b292      	uxth	r2, r2
 8019402:	9202      	str	r2, [sp, #8]
 8019404:	9301      	str	r3, [sp, #4]
 8019406:	4b63      	ldr	r3, [pc, #396]	; (8019594 <tcp_listen_input+0x1e8>)
 8019408:	9300      	str	r3, [sp, #0]
 801940a:	4b63      	ldr	r3, [pc, #396]	; (8019598 <tcp_listen_input+0x1ec>)
 801940c:	4602      	mov	r2, r0
 801940e:	6878      	ldr	r0, [r7, #4]
 8019410:	f003 fbd6 	bl	801cbc0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8019414:	e0a9      	b.n	801956a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8019416:	4b57      	ldr	r3, [pc, #348]	; (8019574 <tcp_listen_input+0x1c8>)
 8019418:	781b      	ldrb	r3, [r3, #0]
 801941a:	f003 0302 	and.w	r3, r3, #2
 801941e:	2b00      	cmp	r3, #0
 8019420:	f000 80a3 	beq.w	801956a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	7d5b      	ldrb	r3, [r3, #21]
 8019428:	4618      	mov	r0, r3
 801942a:	f7ff f859 	bl	80184e0 <tcp_alloc>
 801942e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019430:	697b      	ldr	r3, [r7, #20]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d111      	bne.n	801945a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	699b      	ldr	r3, [r3, #24]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d00a      	beq.n	8019454 <tcp_listen_input+0xa8>
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	699b      	ldr	r3, [r3, #24]
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	6910      	ldr	r0, [r2, #16]
 8019446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801944a:	2100      	movs	r1, #0
 801944c:	4798      	blx	r3
 801944e:	4603      	mov	r3, r0
 8019450:	73bb      	strb	r3, [r7, #14]
      return;
 8019452:	e08b      	b.n	801956c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019454:	23f0      	movs	r3, #240	; 0xf0
 8019456:	73bb      	strb	r3, [r7, #14]
      return;
 8019458:	e088      	b.n	801956c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801945a:	4b50      	ldr	r3, [pc, #320]	; (801959c <tcp_listen_input+0x1f0>)
 801945c:	695a      	ldr	r2, [r3, #20]
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019462:	4b4e      	ldr	r3, [pc, #312]	; (801959c <tcp_listen_input+0x1f0>)
 8019464:	691a      	ldr	r2, [r3, #16]
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	8ada      	ldrh	r2, [r3, #22]
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8019472:	4b47      	ldr	r3, [pc, #284]	; (8019590 <tcp_listen_input+0x1e4>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	881b      	ldrh	r3, [r3, #0]
 8019478:	b29a      	uxth	r2, r3
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801947e:	697b      	ldr	r3, [r7, #20]
 8019480:	2203      	movs	r2, #3
 8019482:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8019484:	4b41      	ldr	r3, [pc, #260]	; (801958c <tcp_listen_input+0x1e0>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	1c5a      	adds	r2, r3, #1
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019496:	6978      	ldr	r0, [r7, #20]
 8019498:	f7ff fa58 	bl	801894c <tcp_next_iss>
 801949c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801949e:	697b      	ldr	r3, [r7, #20]
 80194a0:	693a      	ldr	r2, [r7, #16]
 80194a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	693a      	ldr	r2, [r7, #16]
 80194a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80194aa:	697b      	ldr	r3, [r7, #20]
 80194ac:	693a      	ldr	r2, [r7, #16]
 80194ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80194b0:	697b      	ldr	r3, [r7, #20]
 80194b2:	693a      	ldr	r2, [r7, #16]
 80194b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80194b6:	4b35      	ldr	r3, [pc, #212]	; (801958c <tcp_listen_input+0x1e0>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	1e5a      	subs	r2, r3, #1
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	691a      	ldr	r2, [r3, #16]
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	687a      	ldr	r2, [r7, #4]
 80194cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	7a5b      	ldrb	r3, [r3, #9]
 80194d2:	f003 030c 	and.w	r3, r3, #12
 80194d6:	b2da      	uxtb	r2, r3
 80194d8:	697b      	ldr	r3, [r7, #20]
 80194da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	7a1a      	ldrb	r2, [r3, #8]
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80194e4:	4b2e      	ldr	r3, [pc, #184]	; (80195a0 <tcp_listen_input+0x1f4>)
 80194e6:	681a      	ldr	r2, [r3, #0]
 80194e8:	697b      	ldr	r3, [r7, #20]
 80194ea:	60da      	str	r2, [r3, #12]
 80194ec:	4a2c      	ldr	r2, [pc, #176]	; (80195a0 <tcp_listen_input+0x1f4>)
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	6013      	str	r3, [r2, #0]
 80194f2:	f003 fd27 	bl	801cf44 <tcp_timer_needed>
 80194f6:	4b2b      	ldr	r3, [pc, #172]	; (80195a4 <tcp_listen_input+0x1f8>)
 80194f8:	2201      	movs	r2, #1
 80194fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80194fc:	6978      	ldr	r0, [r7, #20]
 80194fe:	f001 fd8d 	bl	801b01c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019502:	4b23      	ldr	r3, [pc, #140]	; (8019590 <tcp_listen_input+0x1e4>)
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	89db      	ldrh	r3, [r3, #14]
 8019508:	b29a      	uxth	r2, r3
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019510:	697b      	ldr	r3, [r7, #20]
 8019512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019516:	697b      	ldr	r3, [r7, #20]
 8019518:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	3304      	adds	r3, #4
 8019524:	4618      	mov	r0, r3
 8019526:	f7fa fbb3 	bl	8013c90 <ip4_route>
 801952a:	4601      	mov	r1, r0
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	3304      	adds	r3, #4
 8019530:	461a      	mov	r2, r3
 8019532:	4620      	mov	r0, r4
 8019534:	f7ff fa30 	bl	8018998 <tcp_eff_send_mss_netif>
 8019538:	4603      	mov	r3, r0
 801953a:	461a      	mov	r2, r3
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019540:	2112      	movs	r1, #18
 8019542:	6978      	ldr	r0, [r7, #20]
 8019544:	f002 fc9a 	bl	801be7c <tcp_enqueue_flags>
 8019548:	4603      	mov	r3, r0
 801954a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801954c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d004      	beq.n	801955e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8019554:	2100      	movs	r1, #0
 8019556:	6978      	ldr	r0, [r7, #20]
 8019558:	f7fd ff04 	bl	8017364 <tcp_abandon>
      return;
 801955c:	e006      	b.n	801956c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801955e:	6978      	ldr	r0, [r7, #20]
 8019560:	f002 fd7a 	bl	801c058 <tcp_output>
  return;
 8019564:	e001      	b.n	801956a <tcp_listen_input+0x1be>
    return;
 8019566:	bf00      	nop
 8019568:	e000      	b.n	801956c <tcp_listen_input+0x1c0>
  return;
 801956a:	bf00      	nop
}
 801956c:	371c      	adds	r7, #28
 801956e:	46bd      	mov	sp, r7
 8019570:	bd90      	pop	{r4, r7, pc}
 8019572:	bf00      	nop
 8019574:	200090b8 	.word	0x200090b8
 8019578:	08023304 	.word	0x08023304
 801957c:	08023564 	.word	0x08023564
 8019580:	080233b8 	.word	0x080233b8
 8019584:	200090b0 	.word	0x200090b0
 8019588:	200090b6 	.word	0x200090b6
 801958c:	200090ac 	.word	0x200090ac
 8019590:	2000909c 	.word	0x2000909c
 8019594:	200094a8 	.word	0x200094a8
 8019598:	200094ac 	.word	0x200094ac
 801959c:	20009498 	.word	0x20009498
 80195a0:	20010374 	.word	0x20010374
 80195a4:	20010370 	.word	0x20010370

080195a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b086      	sub	sp, #24
 80195ac:	af04      	add	r7, sp, #16
 80195ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80195b0:	4b2f      	ldr	r3, [pc, #188]	; (8019670 <tcp_timewait_input+0xc8>)
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	f003 0304 	and.w	r3, r3, #4
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d153      	bne.n	8019664 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d106      	bne.n	80195d0 <tcp_timewait_input+0x28>
 80195c2:	4b2c      	ldr	r3, [pc, #176]	; (8019674 <tcp_timewait_input+0xcc>)
 80195c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80195c8:	492b      	ldr	r1, [pc, #172]	; (8019678 <tcp_timewait_input+0xd0>)
 80195ca:	482c      	ldr	r0, [pc, #176]	; (801967c <tcp_timewait_input+0xd4>)
 80195cc:	f005 fbde 	bl	801ed8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80195d0:	4b27      	ldr	r3, [pc, #156]	; (8019670 <tcp_timewait_input+0xc8>)
 80195d2:	781b      	ldrb	r3, [r3, #0]
 80195d4:	f003 0302 	and.w	r3, r3, #2
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d02a      	beq.n	8019632 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80195dc:	4b28      	ldr	r3, [pc, #160]	; (8019680 <tcp_timewait_input+0xd8>)
 80195de:	681a      	ldr	r2, [r3, #0]
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195e4:	1ad3      	subs	r3, r2, r3
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	db2d      	blt.n	8019646 <tcp_timewait_input+0x9e>
 80195ea:	4b25      	ldr	r3, [pc, #148]	; (8019680 <tcp_timewait_input+0xd8>)
 80195ec:	681a      	ldr	r2, [r3, #0]
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195f2:	6879      	ldr	r1, [r7, #4]
 80195f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80195f6:	440b      	add	r3, r1
 80195f8:	1ad3      	subs	r3, r2, r3
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	dc23      	bgt.n	8019646 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80195fe:	4b21      	ldr	r3, [pc, #132]	; (8019684 <tcp_timewait_input+0xdc>)
 8019600:	6819      	ldr	r1, [r3, #0]
 8019602:	4b21      	ldr	r3, [pc, #132]	; (8019688 <tcp_timewait_input+0xe0>)
 8019604:	881b      	ldrh	r3, [r3, #0]
 8019606:	461a      	mov	r2, r3
 8019608:	4b1d      	ldr	r3, [pc, #116]	; (8019680 <tcp_timewait_input+0xd8>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801960e:	4b1f      	ldr	r3, [pc, #124]	; (801968c <tcp_timewait_input+0xe4>)
 8019610:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019612:	885b      	ldrh	r3, [r3, #2]
 8019614:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019616:	4a1d      	ldr	r2, [pc, #116]	; (801968c <tcp_timewait_input+0xe4>)
 8019618:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801961a:	8812      	ldrh	r2, [r2, #0]
 801961c:	b292      	uxth	r2, r2
 801961e:	9202      	str	r2, [sp, #8]
 8019620:	9301      	str	r3, [sp, #4]
 8019622:	4b1b      	ldr	r3, [pc, #108]	; (8019690 <tcp_timewait_input+0xe8>)
 8019624:	9300      	str	r3, [sp, #0]
 8019626:	4b1b      	ldr	r3, [pc, #108]	; (8019694 <tcp_timewait_input+0xec>)
 8019628:	4602      	mov	r2, r0
 801962a:	6878      	ldr	r0, [r7, #4]
 801962c:	f003 fac8 	bl	801cbc0 <tcp_rst>
      return;
 8019630:	e01b      	b.n	801966a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8019632:	4b0f      	ldr	r3, [pc, #60]	; (8019670 <tcp_timewait_input+0xc8>)
 8019634:	781b      	ldrb	r3, [r3, #0]
 8019636:	f003 0301 	and.w	r3, r3, #1
 801963a:	2b00      	cmp	r3, #0
 801963c:	d003      	beq.n	8019646 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801963e:	4b16      	ldr	r3, [pc, #88]	; (8019698 <tcp_timewait_input+0xf0>)
 8019640:	681a      	ldr	r2, [r3, #0]
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8019646:	4b10      	ldr	r3, [pc, #64]	; (8019688 <tcp_timewait_input+0xe0>)
 8019648:	881b      	ldrh	r3, [r3, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d00c      	beq.n	8019668 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	8b5b      	ldrh	r3, [r3, #26]
 8019652:	f043 0302 	orr.w	r3, r3, #2
 8019656:	b29a      	uxth	r2, r3
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f002 fcfb 	bl	801c058 <tcp_output>
  }
  return;
 8019662:	e001      	b.n	8019668 <tcp_timewait_input+0xc0>
    return;
 8019664:	bf00      	nop
 8019666:	e000      	b.n	801966a <tcp_timewait_input+0xc2>
  return;
 8019668:	bf00      	nop
}
 801966a:	3708      	adds	r7, #8
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}
 8019670:	200090b8 	.word	0x200090b8
 8019674:	08023304 	.word	0x08023304
 8019678:	08023584 	.word	0x08023584
 801967c:	080233b8 	.word	0x080233b8
 8019680:	200090ac 	.word	0x200090ac
 8019684:	200090b0 	.word	0x200090b0
 8019688:	200090b6 	.word	0x200090b6
 801968c:	2000909c 	.word	0x2000909c
 8019690:	200094a8 	.word	0x200094a8
 8019694:	200094ac 	.word	0x200094ac
 8019698:	20010378 	.word	0x20010378

0801969c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801969c:	b590      	push	{r4, r7, lr}
 801969e:	b08d      	sub	sp, #52	; 0x34
 80196a0:	af04      	add	r7, sp, #16
 80196a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80196a4:	2300      	movs	r3, #0
 80196a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80196a8:	2300      	movs	r3, #0
 80196aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d106      	bne.n	80196c0 <tcp_process+0x24>
 80196b2:	4ba5      	ldr	r3, [pc, #660]	; (8019948 <tcp_process+0x2ac>)
 80196b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80196b8:	49a4      	ldr	r1, [pc, #656]	; (801994c <tcp_process+0x2b0>)
 80196ba:	48a5      	ldr	r0, [pc, #660]	; (8019950 <tcp_process+0x2b4>)
 80196bc:	f005 fb66 	bl	801ed8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80196c0:	4ba4      	ldr	r3, [pc, #656]	; (8019954 <tcp_process+0x2b8>)
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	f003 0304 	and.w	r3, r3, #4
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d04e      	beq.n	801976a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	7d1b      	ldrb	r3, [r3, #20]
 80196d0:	2b02      	cmp	r3, #2
 80196d2:	d108      	bne.n	80196e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196d8:	4b9f      	ldr	r3, [pc, #636]	; (8019958 <tcp_process+0x2bc>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	429a      	cmp	r2, r3
 80196de:	d123      	bne.n	8019728 <tcp_process+0x8c>
        acceptable = 1;
 80196e0:	2301      	movs	r3, #1
 80196e2:	76fb      	strb	r3, [r7, #27]
 80196e4:	e020      	b.n	8019728 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196ea:	4b9c      	ldr	r3, [pc, #624]	; (801995c <tcp_process+0x2c0>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	d102      	bne.n	80196f8 <tcp_process+0x5c>
        acceptable = 1;
 80196f2:	2301      	movs	r3, #1
 80196f4:	76fb      	strb	r3, [r7, #27]
 80196f6:	e017      	b.n	8019728 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80196f8:	4b98      	ldr	r3, [pc, #608]	; (801995c <tcp_process+0x2c0>)
 80196fa:	681a      	ldr	r2, [r3, #0]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019700:	1ad3      	subs	r3, r2, r3
 8019702:	2b00      	cmp	r3, #0
 8019704:	db10      	blt.n	8019728 <tcp_process+0x8c>
 8019706:	4b95      	ldr	r3, [pc, #596]	; (801995c <tcp_process+0x2c0>)
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801970e:	6879      	ldr	r1, [r7, #4]
 8019710:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019712:	440b      	add	r3, r1
 8019714:	1ad3      	subs	r3, r2, r3
 8019716:	2b00      	cmp	r3, #0
 8019718:	dc06      	bgt.n	8019728 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	8b5b      	ldrh	r3, [r3, #26]
 801971e:	f043 0302 	orr.w	r3, r3, #2
 8019722:	b29a      	uxth	r2, r3
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019728:	7efb      	ldrb	r3, [r7, #27]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d01b      	beq.n	8019766 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	7d1b      	ldrb	r3, [r3, #20]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d106      	bne.n	8019744 <tcp_process+0xa8>
 8019736:	4b84      	ldr	r3, [pc, #528]	; (8019948 <tcp_process+0x2ac>)
 8019738:	f44f 724e 	mov.w	r2, #824	; 0x338
 801973c:	4988      	ldr	r1, [pc, #544]	; (8019960 <tcp_process+0x2c4>)
 801973e:	4884      	ldr	r0, [pc, #528]	; (8019950 <tcp_process+0x2b4>)
 8019740:	f005 fb24 	bl	801ed8c <iprintf>
      recv_flags |= TF_RESET;
 8019744:	4b87      	ldr	r3, [pc, #540]	; (8019964 <tcp_process+0x2c8>)
 8019746:	781b      	ldrb	r3, [r3, #0]
 8019748:	f043 0308 	orr.w	r3, r3, #8
 801974c:	b2da      	uxtb	r2, r3
 801974e:	4b85      	ldr	r3, [pc, #532]	; (8019964 <tcp_process+0x2c8>)
 8019750:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	8b5b      	ldrh	r3, [r3, #26]
 8019756:	f023 0301 	bic.w	r3, r3, #1
 801975a:	b29a      	uxth	r2, r3
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019760:	f06f 030d 	mvn.w	r3, #13
 8019764:	e37a      	b.n	8019e5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8019766:	2300      	movs	r3, #0
 8019768:	e378      	b.n	8019e5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801976a:	4b7a      	ldr	r3, [pc, #488]	; (8019954 <tcp_process+0x2b8>)
 801976c:	781b      	ldrb	r3, [r3, #0]
 801976e:	f003 0302 	and.w	r3, r3, #2
 8019772:	2b00      	cmp	r3, #0
 8019774:	d010      	beq.n	8019798 <tcp_process+0xfc>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	7d1b      	ldrb	r3, [r3, #20]
 801977a:	2b02      	cmp	r3, #2
 801977c:	d00c      	beq.n	8019798 <tcp_process+0xfc>
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	7d1b      	ldrb	r3, [r3, #20]
 8019782:	2b03      	cmp	r3, #3
 8019784:	d008      	beq.n	8019798 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	8b5b      	ldrh	r3, [r3, #26]
 801978a:	f043 0302 	orr.w	r3, r3, #2
 801978e:	b29a      	uxth	r2, r3
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8019794:	2300      	movs	r3, #0
 8019796:	e361      	b.n	8019e5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	8b5b      	ldrh	r3, [r3, #26]
 801979c:	f003 0310 	and.w	r3, r3, #16
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d103      	bne.n	80197ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80197a4:	4b70      	ldr	r3, [pc, #448]	; (8019968 <tcp_process+0x2cc>)
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	2200      	movs	r2, #0
 80197b0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2200      	movs	r2, #0
 80197b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80197bc:	6878      	ldr	r0, [r7, #4]
 80197be:	f001 fc2d 	bl	801b01c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	7d1b      	ldrb	r3, [r3, #20]
 80197c6:	3b02      	subs	r3, #2
 80197c8:	2b07      	cmp	r3, #7
 80197ca:	f200 8337 	bhi.w	8019e3c <tcp_process+0x7a0>
 80197ce:	a201      	add	r2, pc, #4	; (adr r2, 80197d4 <tcp_process+0x138>)
 80197d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197d4:	080197f5 	.word	0x080197f5
 80197d8:	08019a25 	.word	0x08019a25
 80197dc:	08019b9d 	.word	0x08019b9d
 80197e0:	08019bc7 	.word	0x08019bc7
 80197e4:	08019ceb 	.word	0x08019ceb
 80197e8:	08019b9d 	.word	0x08019b9d
 80197ec:	08019d77 	.word	0x08019d77
 80197f0:	08019e07 	.word	0x08019e07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80197f4:	4b57      	ldr	r3, [pc, #348]	; (8019954 <tcp_process+0x2b8>)
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	f003 0310 	and.w	r3, r3, #16
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	f000 80e4 	beq.w	80199ca <tcp_process+0x32e>
 8019802:	4b54      	ldr	r3, [pc, #336]	; (8019954 <tcp_process+0x2b8>)
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	f003 0302 	and.w	r3, r3, #2
 801980a:	2b00      	cmp	r3, #0
 801980c:	f000 80dd 	beq.w	80199ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019814:	1c5a      	adds	r2, r3, #1
 8019816:	4b50      	ldr	r3, [pc, #320]	; (8019958 <tcp_process+0x2bc>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	429a      	cmp	r2, r3
 801981c:	f040 80d5 	bne.w	80199ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019820:	4b4e      	ldr	r3, [pc, #312]	; (801995c <tcp_process+0x2c0>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	1c5a      	adds	r2, r3, #1
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019832:	4b49      	ldr	r3, [pc, #292]	; (8019958 <tcp_process+0x2bc>)
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801983a:	4b4c      	ldr	r3, [pc, #304]	; (801996c <tcp_process+0x2d0>)
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	89db      	ldrh	r3, [r3, #14]
 8019840:	b29a      	uxth	r2, r3
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019854:	4b41      	ldr	r3, [pc, #260]	; (801995c <tcp_process+0x2c0>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	1e5a      	subs	r2, r3, #1
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2204      	movs	r2, #4
 8019862:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	3304      	adds	r3, #4
 801986c:	4618      	mov	r0, r3
 801986e:	f7fa fa0f 	bl	8013c90 <ip4_route>
 8019872:	4601      	mov	r1, r0
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	3304      	adds	r3, #4
 8019878:	461a      	mov	r2, r3
 801987a:	4620      	mov	r0, r4
 801987c:	f7ff f88c 	bl	8018998 <tcp_eff_send_mss_netif>
 8019880:	4603      	mov	r3, r0
 8019882:	461a      	mov	r2, r3
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801988c:	009a      	lsls	r2, r3, #2
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019892:	005b      	lsls	r3, r3, #1
 8019894:	f241 111c 	movw	r1, #4380	; 0x111c
 8019898:	428b      	cmp	r3, r1
 801989a:	bf38      	it	cc
 801989c:	460b      	movcc	r3, r1
 801989e:	429a      	cmp	r2, r3
 80198a0:	d204      	bcs.n	80198ac <tcp_process+0x210>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	e00d      	b.n	80198c8 <tcp_process+0x22c>
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80198b6:	4293      	cmp	r3, r2
 80198b8:	d904      	bls.n	80198c4 <tcp_process+0x228>
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198be:	005b      	lsls	r3, r3, #1
 80198c0:	b29b      	uxth	r3, r3
 80198c2:	e001      	b.n	80198c8 <tcp_process+0x22c>
 80198c4:	f241 131c 	movw	r3, #4380	; 0x111c
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d106      	bne.n	80198e6 <tcp_process+0x24a>
 80198d8:	4b1b      	ldr	r3, [pc, #108]	; (8019948 <tcp_process+0x2ac>)
 80198da:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80198de:	4924      	ldr	r1, [pc, #144]	; (8019970 <tcp_process+0x2d4>)
 80198e0:	481b      	ldr	r0, [pc, #108]	; (8019950 <tcp_process+0x2b4>)
 80198e2:	f005 fa53 	bl	801ed8c <iprintf>
        --pcb->snd_queuelen;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198ec:	3b01      	subs	r3, #1
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80198fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80198fc:	69fb      	ldr	r3, [r7, #28]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d111      	bne.n	8019926 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019906:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d106      	bne.n	801991c <tcp_process+0x280>
 801990e:	4b0e      	ldr	r3, [pc, #56]	; (8019948 <tcp_process+0x2ac>)
 8019910:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019914:	4917      	ldr	r1, [pc, #92]	; (8019974 <tcp_process+0x2d8>)
 8019916:	480e      	ldr	r0, [pc, #56]	; (8019950 <tcp_process+0x2b4>)
 8019918:	f005 fa38 	bl	801ed8c <iprintf>
          pcb->unsent = rseg->next;
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	681a      	ldr	r2, [r3, #0]
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	66da      	str	r2, [r3, #108]	; 0x6c
 8019924:	e003      	b.n	801992e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8019926:	69fb      	ldr	r3, [r7, #28]
 8019928:	681a      	ldr	r2, [r3, #0]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801992e:	69f8      	ldr	r0, [r7, #28]
 8019930:	f7fe fc6d 	bl	801820e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019938:	2b00      	cmp	r3, #0
 801993a:	d11d      	bne.n	8019978 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019942:	861a      	strh	r2, [r3, #48]	; 0x30
 8019944:	e01f      	b.n	8019986 <tcp_process+0x2ea>
 8019946:	bf00      	nop
 8019948:	08023304 	.word	0x08023304
 801994c:	080235a4 	.word	0x080235a4
 8019950:	080233b8 	.word	0x080233b8
 8019954:	200090b8 	.word	0x200090b8
 8019958:	200090b0 	.word	0x200090b0
 801995c:	200090ac 	.word	0x200090ac
 8019960:	080235c0 	.word	0x080235c0
 8019964:	200090b9 	.word	0x200090b9
 8019968:	20010378 	.word	0x20010378
 801996c:	2000909c 	.word	0x2000909c
 8019970:	080235e0 	.word	0x080235e0
 8019974:	080235f8 	.word	0x080235f8
        } else {
          pcb->rtime = 0;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2200      	movs	r2, #0
 801997c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2200      	movs	r2, #0
 8019982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801998c:	2b00      	cmp	r3, #0
 801998e:	d00a      	beq.n	80199a6 <tcp_process+0x30a>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019996:	687a      	ldr	r2, [r7, #4]
 8019998:	6910      	ldr	r0, [r2, #16]
 801999a:	2200      	movs	r2, #0
 801999c:	6879      	ldr	r1, [r7, #4]
 801999e:	4798      	blx	r3
 80199a0:	4603      	mov	r3, r0
 80199a2:	76bb      	strb	r3, [r7, #26]
 80199a4:	e001      	b.n	80199aa <tcp_process+0x30e>
 80199a6:	2300      	movs	r3, #0
 80199a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80199aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80199ae:	f113 0f0d 	cmn.w	r3, #13
 80199b2:	d102      	bne.n	80199ba <tcp_process+0x31e>
          return ERR_ABRT;
 80199b4:	f06f 030c 	mvn.w	r3, #12
 80199b8:	e250      	b.n	8019e5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	8b5b      	ldrh	r3, [r3, #26]
 80199be:	f043 0302 	orr.w	r3, r3, #2
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80199c8:	e23a      	b.n	8019e40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80199ca:	4b9d      	ldr	r3, [pc, #628]	; (8019c40 <tcp_process+0x5a4>)
 80199cc:	781b      	ldrb	r3, [r3, #0]
 80199ce:	f003 0310 	and.w	r3, r3, #16
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	f000 8234 	beq.w	8019e40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199d8:	4b9a      	ldr	r3, [pc, #616]	; (8019c44 <tcp_process+0x5a8>)
 80199da:	6819      	ldr	r1, [r3, #0]
 80199dc:	4b9a      	ldr	r3, [pc, #616]	; (8019c48 <tcp_process+0x5ac>)
 80199de:	881b      	ldrh	r3, [r3, #0]
 80199e0:	461a      	mov	r2, r3
 80199e2:	4b9a      	ldr	r3, [pc, #616]	; (8019c4c <tcp_process+0x5b0>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199e8:	4b99      	ldr	r3, [pc, #612]	; (8019c50 <tcp_process+0x5b4>)
 80199ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199ec:	885b      	ldrh	r3, [r3, #2]
 80199ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199f0:	4a97      	ldr	r2, [pc, #604]	; (8019c50 <tcp_process+0x5b4>)
 80199f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199f4:	8812      	ldrh	r2, [r2, #0]
 80199f6:	b292      	uxth	r2, r2
 80199f8:	9202      	str	r2, [sp, #8]
 80199fa:	9301      	str	r3, [sp, #4]
 80199fc:	4b95      	ldr	r3, [pc, #596]	; (8019c54 <tcp_process+0x5b8>)
 80199fe:	9300      	str	r3, [sp, #0]
 8019a00:	4b95      	ldr	r3, [pc, #596]	; (8019c58 <tcp_process+0x5bc>)
 8019a02:	4602      	mov	r2, r0
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f003 f8db 	bl	801cbc0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019a10:	2b05      	cmp	r3, #5
 8019a12:	f200 8215 	bhi.w	8019e40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	2200      	movs	r2, #0
 8019a1a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f002 fea5 	bl	801c76c <tcp_rexmit_rto>
      break;
 8019a22:	e20d      	b.n	8019e40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019a24:	4b86      	ldr	r3, [pc, #536]	; (8019c40 <tcp_process+0x5a4>)
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	f003 0310 	and.w	r3, r3, #16
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	f000 80a1 	beq.w	8019b74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a32:	4b84      	ldr	r3, [pc, #528]	; (8019c44 <tcp_process+0x5a8>)
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a3a:	1ad3      	subs	r3, r2, r3
 8019a3c:	3b01      	subs	r3, #1
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	db7e      	blt.n	8019b40 <tcp_process+0x4a4>
 8019a42:	4b80      	ldr	r3, [pc, #512]	; (8019c44 <tcp_process+0x5a8>)
 8019a44:	681a      	ldr	r2, [r3, #0]
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a4a:	1ad3      	subs	r3, r2, r3
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	dc77      	bgt.n	8019b40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2204      	movs	r2, #4
 8019a54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d102      	bne.n	8019a64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019a5e:	23fa      	movs	r3, #250	; 0xfa
 8019a60:	76bb      	strb	r3, [r7, #26]
 8019a62:	e01d      	b.n	8019aa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a68:	699b      	ldr	r3, [r3, #24]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d106      	bne.n	8019a7c <tcp_process+0x3e0>
 8019a6e:	4b7b      	ldr	r3, [pc, #492]	; (8019c5c <tcp_process+0x5c0>)
 8019a70:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019a74:	497a      	ldr	r1, [pc, #488]	; (8019c60 <tcp_process+0x5c4>)
 8019a76:	487b      	ldr	r0, [pc, #492]	; (8019c64 <tcp_process+0x5c8>)
 8019a78:	f005 f988 	bl	801ed8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a80:	699b      	ldr	r3, [r3, #24]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d00a      	beq.n	8019a9c <tcp_process+0x400>
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a8a:	699b      	ldr	r3, [r3, #24]
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	6910      	ldr	r0, [r2, #16]
 8019a90:	2200      	movs	r2, #0
 8019a92:	6879      	ldr	r1, [r7, #4]
 8019a94:	4798      	blx	r3
 8019a96:	4603      	mov	r3, r0
 8019a98:	76bb      	strb	r3, [r7, #26]
 8019a9a:	e001      	b.n	8019aa0 <tcp_process+0x404>
 8019a9c:	23f0      	movs	r3, #240	; 0xf0
 8019a9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019aa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d00a      	beq.n	8019abe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019aa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019aac:	f113 0f0d 	cmn.w	r3, #13
 8019ab0:	d002      	beq.n	8019ab8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f7fd fd14 	bl	80174e0 <tcp_abort>
            }
            return ERR_ABRT;
 8019ab8:	f06f 030c 	mvn.w	r3, #12
 8019abc:	e1ce      	b.n	8019e5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8019abe:	6878      	ldr	r0, [r7, #4]
 8019ac0:	f000 fae0 	bl	801a084 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019ac4:	4b68      	ldr	r3, [pc, #416]	; (8019c68 <tcp_process+0x5cc>)
 8019ac6:	881b      	ldrh	r3, [r3, #0]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d005      	beq.n	8019ad8 <tcp_process+0x43c>
            recv_acked--;
 8019acc:	4b66      	ldr	r3, [pc, #408]	; (8019c68 <tcp_process+0x5cc>)
 8019ace:	881b      	ldrh	r3, [r3, #0]
 8019ad0:	3b01      	subs	r3, #1
 8019ad2:	b29a      	uxth	r2, r3
 8019ad4:	4b64      	ldr	r3, [pc, #400]	; (8019c68 <tcp_process+0x5cc>)
 8019ad6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019adc:	009a      	lsls	r2, r3, #2
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ae2:	005b      	lsls	r3, r3, #1
 8019ae4:	f241 111c 	movw	r1, #4380	; 0x111c
 8019ae8:	428b      	cmp	r3, r1
 8019aea:	bf38      	it	cc
 8019aec:	460b      	movcc	r3, r1
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d204      	bcs.n	8019afc <tcp_process+0x460>
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019af6:	009b      	lsls	r3, r3, #2
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	e00d      	b.n	8019b18 <tcp_process+0x47c>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019b00:	005b      	lsls	r3, r3, #1
 8019b02:	f241 121c 	movw	r2, #4380	; 0x111c
 8019b06:	4293      	cmp	r3, r2
 8019b08:	d904      	bls.n	8019b14 <tcp_process+0x478>
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019b0e:	005b      	lsls	r3, r3, #1
 8019b10:	b29b      	uxth	r3, r3
 8019b12:	e001      	b.n	8019b18 <tcp_process+0x47c>
 8019b14:	f241 131c 	movw	r3, #4380	; 0x111c
 8019b18:	687a      	ldr	r2, [r7, #4]
 8019b1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019b1e:	4b53      	ldr	r3, [pc, #332]	; (8019c6c <tcp_process+0x5d0>)
 8019b20:	781b      	ldrb	r3, [r3, #0]
 8019b22:	f003 0320 	and.w	r3, r3, #32
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d037      	beq.n	8019b9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	8b5b      	ldrh	r3, [r3, #26]
 8019b2e:	f043 0302 	orr.w	r3, r3, #2
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2207      	movs	r2, #7
 8019b3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019b3e:	e02c      	b.n	8019b9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b40:	4b40      	ldr	r3, [pc, #256]	; (8019c44 <tcp_process+0x5a8>)
 8019b42:	6819      	ldr	r1, [r3, #0]
 8019b44:	4b40      	ldr	r3, [pc, #256]	; (8019c48 <tcp_process+0x5ac>)
 8019b46:	881b      	ldrh	r3, [r3, #0]
 8019b48:	461a      	mov	r2, r3
 8019b4a:	4b40      	ldr	r3, [pc, #256]	; (8019c4c <tcp_process+0x5b0>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019b50:	4b3f      	ldr	r3, [pc, #252]	; (8019c50 <tcp_process+0x5b4>)
 8019b52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b54:	885b      	ldrh	r3, [r3, #2]
 8019b56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019b58:	4a3d      	ldr	r2, [pc, #244]	; (8019c50 <tcp_process+0x5b4>)
 8019b5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b5c:	8812      	ldrh	r2, [r2, #0]
 8019b5e:	b292      	uxth	r2, r2
 8019b60:	9202      	str	r2, [sp, #8]
 8019b62:	9301      	str	r3, [sp, #4]
 8019b64:	4b3b      	ldr	r3, [pc, #236]	; (8019c54 <tcp_process+0x5b8>)
 8019b66:	9300      	str	r3, [sp, #0]
 8019b68:	4b3b      	ldr	r3, [pc, #236]	; (8019c58 <tcp_process+0x5bc>)
 8019b6a:	4602      	mov	r2, r0
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f003 f827 	bl	801cbc0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019b72:	e167      	b.n	8019e44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019b74:	4b32      	ldr	r3, [pc, #200]	; (8019c40 <tcp_process+0x5a4>)
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	f003 0302 	and.w	r3, r3, #2
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	f000 8161 	beq.w	8019e44 <tcp_process+0x7a8>
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b86:	1e5a      	subs	r2, r3, #1
 8019b88:	4b30      	ldr	r3, [pc, #192]	; (8019c4c <tcp_process+0x5b0>)
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	f040 8159 	bne.w	8019e44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019b92:	6878      	ldr	r0, [r7, #4]
 8019b94:	f002 fe0c 	bl	801c7b0 <tcp_rexmit>
      break;
 8019b98:	e154      	b.n	8019e44 <tcp_process+0x7a8>
 8019b9a:	e153      	b.n	8019e44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019b9c:	6878      	ldr	r0, [r7, #4]
 8019b9e:	f000 fa71 	bl	801a084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019ba2:	4b32      	ldr	r3, [pc, #200]	; (8019c6c <tcp_process+0x5d0>)
 8019ba4:	781b      	ldrb	r3, [r3, #0]
 8019ba6:	f003 0320 	and.w	r3, r3, #32
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	f000 814c 	beq.w	8019e48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	8b5b      	ldrh	r3, [r3, #26]
 8019bb4:	f043 0302 	orr.w	r3, r3, #2
 8019bb8:	b29a      	uxth	r2, r3
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2207      	movs	r2, #7
 8019bc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019bc4:	e140      	b.n	8019e48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019bc6:	6878      	ldr	r0, [r7, #4]
 8019bc8:	f000 fa5c 	bl	801a084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019bcc:	4b27      	ldr	r3, [pc, #156]	; (8019c6c <tcp_process+0x5d0>)
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	f003 0320 	and.w	r3, r3, #32
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d071      	beq.n	8019cbc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019bd8:	4b19      	ldr	r3, [pc, #100]	; (8019c40 <tcp_process+0x5a4>)
 8019bda:	781b      	ldrb	r3, [r3, #0]
 8019bdc:	f003 0310 	and.w	r3, r3, #16
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d060      	beq.n	8019ca6 <tcp_process+0x60a>
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019be8:	4b16      	ldr	r3, [pc, #88]	; (8019c44 <tcp_process+0x5a8>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	429a      	cmp	r2, r3
 8019bee:	d15a      	bne.n	8019ca6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d156      	bne.n	8019ca6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	8b5b      	ldrh	r3, [r3, #26]
 8019bfc:	f043 0302 	orr.w	r3, r3, #2
 8019c00:	b29a      	uxth	r2, r3
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8019c06:	6878      	ldr	r0, [r7, #4]
 8019c08:	f7fe fdbc 	bl	8018784 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019c0c:	4b18      	ldr	r3, [pc, #96]	; (8019c70 <tcp_process+0x5d4>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	687a      	ldr	r2, [r7, #4]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d105      	bne.n	8019c22 <tcp_process+0x586>
 8019c16:	4b16      	ldr	r3, [pc, #88]	; (8019c70 <tcp_process+0x5d4>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	68db      	ldr	r3, [r3, #12]
 8019c1c:	4a14      	ldr	r2, [pc, #80]	; (8019c70 <tcp_process+0x5d4>)
 8019c1e:	6013      	str	r3, [r2, #0]
 8019c20:	e02e      	b.n	8019c80 <tcp_process+0x5e4>
 8019c22:	4b13      	ldr	r3, [pc, #76]	; (8019c70 <tcp_process+0x5d4>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	617b      	str	r3, [r7, #20]
 8019c28:	e027      	b.n	8019c7a <tcp_process+0x5de>
 8019c2a:	697b      	ldr	r3, [r7, #20]
 8019c2c:	68db      	ldr	r3, [r3, #12]
 8019c2e:	687a      	ldr	r2, [r7, #4]
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d11f      	bne.n	8019c74 <tcp_process+0x5d8>
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	68da      	ldr	r2, [r3, #12]
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	60da      	str	r2, [r3, #12]
 8019c3c:	e020      	b.n	8019c80 <tcp_process+0x5e4>
 8019c3e:	bf00      	nop
 8019c40:	200090b8 	.word	0x200090b8
 8019c44:	200090b0 	.word	0x200090b0
 8019c48:	200090b6 	.word	0x200090b6
 8019c4c:	200090ac 	.word	0x200090ac
 8019c50:	2000909c 	.word	0x2000909c
 8019c54:	200094a8 	.word	0x200094a8
 8019c58:	200094ac 	.word	0x200094ac
 8019c5c:	08023304 	.word	0x08023304
 8019c60:	0802360c 	.word	0x0802360c
 8019c64:	080233b8 	.word	0x080233b8
 8019c68:	200090b4 	.word	0x200090b4
 8019c6c:	200090b9 	.word	0x200090b9
 8019c70:	20010374 	.word	0x20010374
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	617b      	str	r3, [r7, #20]
 8019c7a:	697b      	ldr	r3, [r7, #20]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d1d4      	bne.n	8019c2a <tcp_process+0x58e>
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2200      	movs	r2, #0
 8019c84:	60da      	str	r2, [r3, #12]
 8019c86:	4b77      	ldr	r3, [pc, #476]	; (8019e64 <tcp_process+0x7c8>)
 8019c88:	2201      	movs	r2, #1
 8019c8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	220a      	movs	r2, #10
 8019c90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019c92:	4b75      	ldr	r3, [pc, #468]	; (8019e68 <tcp_process+0x7cc>)
 8019c94:	681a      	ldr	r2, [r3, #0]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	60da      	str	r2, [r3, #12]
 8019c9a:	4a73      	ldr	r2, [pc, #460]	; (8019e68 <tcp_process+0x7cc>)
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	6013      	str	r3, [r2, #0]
 8019ca0:	f003 f950 	bl	801cf44 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019ca4:	e0d2      	b.n	8019e4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	8b5b      	ldrh	r3, [r3, #26]
 8019caa:	f043 0302 	orr.w	r3, r3, #2
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	2208      	movs	r2, #8
 8019cb8:	751a      	strb	r2, [r3, #20]
      break;
 8019cba:	e0c7      	b.n	8019e4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019cbc:	4b6b      	ldr	r3, [pc, #428]	; (8019e6c <tcp_process+0x7d0>)
 8019cbe:	781b      	ldrb	r3, [r3, #0]
 8019cc0:	f003 0310 	and.w	r3, r3, #16
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	f000 80c1 	beq.w	8019e4c <tcp_process+0x7b0>
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019cce:	4b68      	ldr	r3, [pc, #416]	; (8019e70 <tcp_process+0x7d4>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	f040 80ba 	bne.w	8019e4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	f040 80b5 	bne.w	8019e4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2206      	movs	r2, #6
 8019ce6:	751a      	strb	r2, [r3, #20]
      break;
 8019ce8:	e0b0      	b.n	8019e4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8019cea:	6878      	ldr	r0, [r7, #4]
 8019cec:	f000 f9ca 	bl	801a084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019cf0:	4b60      	ldr	r3, [pc, #384]	; (8019e74 <tcp_process+0x7d8>)
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	f003 0320 	and.w	r3, r3, #32
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	f000 80a9 	beq.w	8019e50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	8b5b      	ldrh	r3, [r3, #26]
 8019d02:	f043 0302 	orr.w	r3, r3, #2
 8019d06:	b29a      	uxth	r2, r3
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f7fe fd39 	bl	8018784 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019d12:	4b59      	ldr	r3, [pc, #356]	; (8019e78 <tcp_process+0x7dc>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	429a      	cmp	r2, r3
 8019d1a:	d105      	bne.n	8019d28 <tcp_process+0x68c>
 8019d1c:	4b56      	ldr	r3, [pc, #344]	; (8019e78 <tcp_process+0x7dc>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	68db      	ldr	r3, [r3, #12]
 8019d22:	4a55      	ldr	r2, [pc, #340]	; (8019e78 <tcp_process+0x7dc>)
 8019d24:	6013      	str	r3, [r2, #0]
 8019d26:	e013      	b.n	8019d50 <tcp_process+0x6b4>
 8019d28:	4b53      	ldr	r3, [pc, #332]	; (8019e78 <tcp_process+0x7dc>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	613b      	str	r3, [r7, #16]
 8019d2e:	e00c      	b.n	8019d4a <tcp_process+0x6ae>
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	68db      	ldr	r3, [r3, #12]
 8019d34:	687a      	ldr	r2, [r7, #4]
 8019d36:	429a      	cmp	r2, r3
 8019d38:	d104      	bne.n	8019d44 <tcp_process+0x6a8>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	68da      	ldr	r2, [r3, #12]
 8019d3e:	693b      	ldr	r3, [r7, #16]
 8019d40:	60da      	str	r2, [r3, #12]
 8019d42:	e005      	b.n	8019d50 <tcp_process+0x6b4>
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	68db      	ldr	r3, [r3, #12]
 8019d48:	613b      	str	r3, [r7, #16]
 8019d4a:	693b      	ldr	r3, [r7, #16]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d1ef      	bne.n	8019d30 <tcp_process+0x694>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2200      	movs	r2, #0
 8019d54:	60da      	str	r2, [r3, #12]
 8019d56:	4b43      	ldr	r3, [pc, #268]	; (8019e64 <tcp_process+0x7c8>)
 8019d58:	2201      	movs	r2, #1
 8019d5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	220a      	movs	r2, #10
 8019d60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019d62:	4b41      	ldr	r3, [pc, #260]	; (8019e68 <tcp_process+0x7cc>)
 8019d64:	681a      	ldr	r2, [r3, #0]
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	60da      	str	r2, [r3, #12]
 8019d6a:	4a3f      	ldr	r2, [pc, #252]	; (8019e68 <tcp_process+0x7cc>)
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	6013      	str	r3, [r2, #0]
 8019d70:	f003 f8e8 	bl	801cf44 <tcp_timer_needed>
      }
      break;
 8019d74:	e06c      	b.n	8019e50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019d76:	6878      	ldr	r0, [r7, #4]
 8019d78:	f000 f984 	bl	801a084 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019d7c:	4b3b      	ldr	r3, [pc, #236]	; (8019e6c <tcp_process+0x7d0>)
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	f003 0310 	and.w	r3, r3, #16
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d065      	beq.n	8019e54 <tcp_process+0x7b8>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019d8c:	4b38      	ldr	r3, [pc, #224]	; (8019e70 <tcp_process+0x7d4>)
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	429a      	cmp	r2, r3
 8019d92:	d15f      	bne.n	8019e54 <tcp_process+0x7b8>
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d15b      	bne.n	8019e54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019d9c:	6878      	ldr	r0, [r7, #4]
 8019d9e:	f7fe fcf1 	bl	8018784 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019da2:	4b35      	ldr	r3, [pc, #212]	; (8019e78 <tcp_process+0x7dc>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	687a      	ldr	r2, [r7, #4]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	d105      	bne.n	8019db8 <tcp_process+0x71c>
 8019dac:	4b32      	ldr	r3, [pc, #200]	; (8019e78 <tcp_process+0x7dc>)
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	4a31      	ldr	r2, [pc, #196]	; (8019e78 <tcp_process+0x7dc>)
 8019db4:	6013      	str	r3, [r2, #0]
 8019db6:	e013      	b.n	8019de0 <tcp_process+0x744>
 8019db8:	4b2f      	ldr	r3, [pc, #188]	; (8019e78 <tcp_process+0x7dc>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	60fb      	str	r3, [r7, #12]
 8019dbe:	e00c      	b.n	8019dda <tcp_process+0x73e>
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	68db      	ldr	r3, [r3, #12]
 8019dc4:	687a      	ldr	r2, [r7, #4]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d104      	bne.n	8019dd4 <tcp_process+0x738>
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	68da      	ldr	r2, [r3, #12]
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	60da      	str	r2, [r3, #12]
 8019dd2:	e005      	b.n	8019de0 <tcp_process+0x744>
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	68db      	ldr	r3, [r3, #12]
 8019dd8:	60fb      	str	r3, [r7, #12]
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d1ef      	bne.n	8019dc0 <tcp_process+0x724>
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2200      	movs	r2, #0
 8019de4:	60da      	str	r2, [r3, #12]
 8019de6:	4b1f      	ldr	r3, [pc, #124]	; (8019e64 <tcp_process+0x7c8>)
 8019de8:	2201      	movs	r2, #1
 8019dea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	220a      	movs	r2, #10
 8019df0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019df2:	4b1d      	ldr	r3, [pc, #116]	; (8019e68 <tcp_process+0x7cc>)
 8019df4:	681a      	ldr	r2, [r3, #0]
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	60da      	str	r2, [r3, #12]
 8019dfa:	4a1b      	ldr	r2, [pc, #108]	; (8019e68 <tcp_process+0x7cc>)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6013      	str	r3, [r2, #0]
 8019e00:	f003 f8a0 	bl	801cf44 <tcp_timer_needed>
      }
      break;
 8019e04:	e026      	b.n	8019e54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8019e06:	6878      	ldr	r0, [r7, #4]
 8019e08:	f000 f93c 	bl	801a084 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019e0c:	4b17      	ldr	r3, [pc, #92]	; (8019e6c <tcp_process+0x7d0>)
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	f003 0310 	and.w	r3, r3, #16
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d01f      	beq.n	8019e58 <tcp_process+0x7bc>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e1c:	4b14      	ldr	r3, [pc, #80]	; (8019e70 <tcp_process+0x7d4>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	429a      	cmp	r2, r3
 8019e22:	d119      	bne.n	8019e58 <tcp_process+0x7bc>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d115      	bne.n	8019e58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019e2c:	4b11      	ldr	r3, [pc, #68]	; (8019e74 <tcp_process+0x7d8>)
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	f043 0310 	orr.w	r3, r3, #16
 8019e34:	b2da      	uxtb	r2, r3
 8019e36:	4b0f      	ldr	r3, [pc, #60]	; (8019e74 <tcp_process+0x7d8>)
 8019e38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8019e3a:	e00d      	b.n	8019e58 <tcp_process+0x7bc>
    default:
      break;
 8019e3c:	bf00      	nop
 8019e3e:	e00c      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e40:	bf00      	nop
 8019e42:	e00a      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e44:	bf00      	nop
 8019e46:	e008      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e48:	bf00      	nop
 8019e4a:	e006      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e4c:	bf00      	nop
 8019e4e:	e004      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e50:	bf00      	nop
 8019e52:	e002      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e54:	bf00      	nop
 8019e56:	e000      	b.n	8019e5a <tcp_process+0x7be>
      break;
 8019e58:	bf00      	nop
  }
  return ERR_OK;
 8019e5a:	2300      	movs	r3, #0
}
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	3724      	adds	r7, #36	; 0x24
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd90      	pop	{r4, r7, pc}
 8019e64:	20010370 	.word	0x20010370
 8019e68:	20010384 	.word	0x20010384
 8019e6c:	200090b8 	.word	0x200090b8
 8019e70:	200090b0 	.word	0x200090b0
 8019e74:	200090b9 	.word	0x200090b9
 8019e78:	20010374 	.word	0x20010374

08019e7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019e7c:	b590      	push	{r4, r7, lr}
 8019e7e:	b085      	sub	sp, #20
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d106      	bne.n	8019e9a <tcp_oos_insert_segment+0x1e>
 8019e8c:	4b3b      	ldr	r3, [pc, #236]	; (8019f7c <tcp_oos_insert_segment+0x100>)
 8019e8e:	f240 421f 	movw	r2, #1055	; 0x41f
 8019e92:	493b      	ldr	r1, [pc, #236]	; (8019f80 <tcp_oos_insert_segment+0x104>)
 8019e94:	483b      	ldr	r0, [pc, #236]	; (8019f84 <tcp_oos_insert_segment+0x108>)
 8019e96:	f004 ff79 	bl	801ed8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	68db      	ldr	r3, [r3, #12]
 8019e9e:	899b      	ldrh	r3, [r3, #12]
 8019ea0:	b29b      	uxth	r3, r3
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7fb f8b4 	bl	8015010 <lwip_htons>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	f003 0301 	and.w	r3, r3, #1
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d028      	beq.n	8019f06 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019eb4:	6838      	ldr	r0, [r7, #0]
 8019eb6:	f7fe f995 	bl	80181e4 <tcp_segs_free>
    next = NULL;
 8019eba:	2300      	movs	r3, #0
 8019ebc:	603b      	str	r3, [r7, #0]
 8019ebe:	e056      	b.n	8019f6e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019ec0:	683b      	ldr	r3, [r7, #0]
 8019ec2:	68db      	ldr	r3, [r3, #12]
 8019ec4:	899b      	ldrh	r3, [r3, #12]
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4618      	mov	r0, r3
 8019eca:	f7fb f8a1 	bl	8015010 <lwip_htons>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	f003 0301 	and.w	r3, r3, #1
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d00d      	beq.n	8019ef6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	899b      	ldrh	r3, [r3, #12]
 8019ee0:	b29c      	uxth	r4, r3
 8019ee2:	2001      	movs	r0, #1
 8019ee4:	f7fb f894 	bl	8015010 <lwip_htons>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	461a      	mov	r2, r3
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	68db      	ldr	r3, [r3, #12]
 8019ef0:	4322      	orrs	r2, r4
 8019ef2:	b292      	uxth	r2, r2
 8019ef4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019f00:	68f8      	ldr	r0, [r7, #12]
 8019f02:	f7fe f984 	bl	801820e <tcp_seg_free>
    while (next &&
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d00e      	beq.n	8019f2a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	891b      	ldrh	r3, [r3, #8]
 8019f10:	461a      	mov	r2, r3
 8019f12:	4b1d      	ldr	r3, [pc, #116]	; (8019f88 <tcp_oos_insert_segment+0x10c>)
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	441a      	add	r2, r3
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	68db      	ldr	r3, [r3, #12]
 8019f1c:	685b      	ldr	r3, [r3, #4]
 8019f1e:	6839      	ldr	r1, [r7, #0]
 8019f20:	8909      	ldrh	r1, [r1, #8]
 8019f22:	440b      	add	r3, r1
 8019f24:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	daca      	bge.n	8019ec0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d01e      	beq.n	8019f6e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	891b      	ldrh	r3, [r3, #8]
 8019f34:	461a      	mov	r2, r3
 8019f36:	4b14      	ldr	r3, [pc, #80]	; (8019f88 <tcp_oos_insert_segment+0x10c>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	441a      	add	r2, r3
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	68db      	ldr	r3, [r3, #12]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	dd12      	ble.n	8019f6e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	b29a      	uxth	r2, r3
 8019f50:	4b0d      	ldr	r3, [pc, #52]	; (8019f88 <tcp_oos_insert_segment+0x10c>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	1ad3      	subs	r3, r2, r3
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	685a      	ldr	r2, [r3, #4]
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	891b      	ldrh	r3, [r3, #8]
 8019f66:	4619      	mov	r1, r3
 8019f68:	4610      	mov	r0, r2
 8019f6a:	f7fc fb33 	bl	80165d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	683a      	ldr	r2, [r7, #0]
 8019f72:	601a      	str	r2, [r3, #0]
}
 8019f74:	bf00      	nop
 8019f76:	3714      	adds	r7, #20
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bd90      	pop	{r4, r7, pc}
 8019f7c:	08023304 	.word	0x08023304
 8019f80:	0802362c 	.word	0x0802362c
 8019f84:	080233b8 	.word	0x080233b8
 8019f88:	200090ac 	.word	0x200090ac

08019f8c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019f8c:	b5b0      	push	{r4, r5, r7, lr}
 8019f8e:	b086      	sub	sp, #24
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
 8019f98:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8019f9a:	e03e      	b.n	801a01a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7fc fd26 	bl	80169fc <pbuf_clen>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019fba:	8a7a      	ldrh	r2, [r7, #18]
 8019fbc:	429a      	cmp	r2, r3
 8019fbe:	d906      	bls.n	8019fce <tcp_free_acked_segments+0x42>
 8019fc0:	4b2a      	ldr	r3, [pc, #168]	; (801a06c <tcp_free_acked_segments+0xe0>)
 8019fc2:	f240 4257 	movw	r2, #1111	; 0x457
 8019fc6:	492a      	ldr	r1, [pc, #168]	; (801a070 <tcp_free_acked_segments+0xe4>)
 8019fc8:	482a      	ldr	r0, [pc, #168]	; (801a074 <tcp_free_acked_segments+0xe8>)
 8019fca:	f004 fedf 	bl	801ed8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019fd4:	8a7b      	ldrh	r3, [r7, #18]
 8019fd6:	1ad3      	subs	r3, r2, r3
 8019fd8:	b29a      	uxth	r2, r3
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	891a      	ldrh	r2, [r3, #8]
 8019fe4:	4b24      	ldr	r3, [pc, #144]	; (801a078 <tcp_free_acked_segments+0xec>)
 8019fe6:	881b      	ldrh	r3, [r3, #0]
 8019fe8:	4413      	add	r3, r2
 8019fea:	b29a      	uxth	r2, r3
 8019fec:	4b22      	ldr	r3, [pc, #136]	; (801a078 <tcp_free_acked_segments+0xec>)
 8019fee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019ff0:	6978      	ldr	r0, [r7, #20]
 8019ff2:	f7fe f90c 	bl	801820e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d00c      	beq.n	801a01a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d109      	bne.n	801a01a <tcp_free_acked_segments+0x8e>
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d106      	bne.n	801a01a <tcp_free_acked_segments+0x8e>
 801a00c:	4b17      	ldr	r3, [pc, #92]	; (801a06c <tcp_free_acked_segments+0xe0>)
 801a00e:	f240 4261 	movw	r2, #1121	; 0x461
 801a012:	491a      	ldr	r1, [pc, #104]	; (801a07c <tcp_free_acked_segments+0xf0>)
 801a014:	4817      	ldr	r0, [pc, #92]	; (801a074 <tcp_free_acked_segments+0xe8>)
 801a016:	f004 feb9 	bl	801ed8c <iprintf>
  while (seg_list != NULL &&
 801a01a:	68bb      	ldr	r3, [r7, #8]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d020      	beq.n	801a062 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a020:	68bb      	ldr	r3, [r7, #8]
 801a022:	68db      	ldr	r3, [r3, #12]
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	4618      	mov	r0, r3
 801a028:	f7fb f807 	bl	801503a <lwip_htonl>
 801a02c:	4604      	mov	r4, r0
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	891b      	ldrh	r3, [r3, #8]
 801a032:	461d      	mov	r5, r3
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	68db      	ldr	r3, [r3, #12]
 801a038:	899b      	ldrh	r3, [r3, #12]
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	4618      	mov	r0, r3
 801a03e:	f7fa ffe7 	bl	8015010 <lwip_htons>
 801a042:	4603      	mov	r3, r0
 801a044:	b2db      	uxtb	r3, r3
 801a046:	f003 0303 	and.w	r3, r3, #3
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d001      	beq.n	801a052 <tcp_free_acked_segments+0xc6>
 801a04e:	2301      	movs	r3, #1
 801a050:	e000      	b.n	801a054 <tcp_free_acked_segments+0xc8>
 801a052:	2300      	movs	r3, #0
 801a054:	442b      	add	r3, r5
 801a056:	18e2      	adds	r2, r4, r3
 801a058:	4b09      	ldr	r3, [pc, #36]	; (801a080 <tcp_free_acked_segments+0xf4>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801a05e:	2b00      	cmp	r3, #0
 801a060:	dd9c      	ble.n	8019f9c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801a062:	68bb      	ldr	r3, [r7, #8]
}
 801a064:	4618      	mov	r0, r3
 801a066:	3718      	adds	r7, #24
 801a068:	46bd      	mov	sp, r7
 801a06a:	bdb0      	pop	{r4, r5, r7, pc}
 801a06c:	08023304 	.word	0x08023304
 801a070:	08023654 	.word	0x08023654
 801a074:	080233b8 	.word	0x080233b8
 801a078:	200090b4 	.word	0x200090b4
 801a07c:	0802367c 	.word	0x0802367c
 801a080:	200090b0 	.word	0x200090b0

0801a084 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801a084:	b5b0      	push	{r4, r5, r7, lr}
 801a086:	b094      	sub	sp, #80	; 0x50
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801a08c:	2300      	movs	r3, #0
 801a08e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d106      	bne.n	801a0a4 <tcp_receive+0x20>
 801a096:	4ba6      	ldr	r3, [pc, #664]	; (801a330 <tcp_receive+0x2ac>)
 801a098:	f240 427b 	movw	r2, #1147	; 0x47b
 801a09c:	49a5      	ldr	r1, [pc, #660]	; (801a334 <tcp_receive+0x2b0>)
 801a09e:	48a6      	ldr	r0, [pc, #664]	; (801a338 <tcp_receive+0x2b4>)
 801a0a0:	f004 fe74 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	7d1b      	ldrb	r3, [r3, #20]
 801a0a8:	2b03      	cmp	r3, #3
 801a0aa:	d806      	bhi.n	801a0ba <tcp_receive+0x36>
 801a0ac:	4ba0      	ldr	r3, [pc, #640]	; (801a330 <tcp_receive+0x2ac>)
 801a0ae:	f240 427c 	movw	r2, #1148	; 0x47c
 801a0b2:	49a2      	ldr	r1, [pc, #648]	; (801a33c <tcp_receive+0x2b8>)
 801a0b4:	48a0      	ldr	r0, [pc, #640]	; (801a338 <tcp_receive+0x2b4>)
 801a0b6:	f004 fe69 	bl	801ed8c <iprintf>

  if (flags & TCP_ACK) {
 801a0ba:	4ba1      	ldr	r3, [pc, #644]	; (801a340 <tcp_receive+0x2bc>)
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	f003 0310 	and.w	r3, r3, #16
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	f000 8263 	beq.w	801a58e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a0d4:	4413      	add	r3, r2
 801a0d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a0dc:	4b99      	ldr	r3, [pc, #612]	; (801a344 <tcp_receive+0x2c0>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	1ad3      	subs	r3, r2, r3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	db1b      	blt.n	801a11e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a0ea:	4b96      	ldr	r3, [pc, #600]	; (801a344 <tcp_receive+0x2c0>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	d106      	bne.n	801a100 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a0f6:	4b94      	ldr	r3, [pc, #592]	; (801a348 <tcp_receive+0x2c4>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	1ad3      	subs	r3, r2, r3
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	db0e      	blt.n	801a11e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a104:	4b90      	ldr	r3, [pc, #576]	; (801a348 <tcp_receive+0x2c4>)
 801a106:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a108:	429a      	cmp	r2, r3
 801a10a:	d125      	bne.n	801a158 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a10c:	4b8f      	ldr	r3, [pc, #572]	; (801a34c <tcp_receive+0x2c8>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	89db      	ldrh	r3, [r3, #14]
 801a112:	b29a      	uxth	r2, r3
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d91c      	bls.n	801a158 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a11e:	4b8b      	ldr	r3, [pc, #556]	; (801a34c <tcp_receive+0x2c8>)
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	89db      	ldrh	r3, [r3, #14]
 801a124:	b29a      	uxth	r2, r3
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a138:	429a      	cmp	r2, r3
 801a13a:	d205      	bcs.n	801a148 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801a148:	4b7e      	ldr	r3, [pc, #504]	; (801a344 <tcp_receive+0x2c0>)
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801a150:	4b7d      	ldr	r3, [pc, #500]	; (801a348 <tcp_receive+0x2c4>)
 801a152:	681a      	ldr	r2, [r3, #0]
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a158:	4b7b      	ldr	r3, [pc, #492]	; (801a348 <tcp_receive+0x2c4>)
 801a15a:	681a      	ldr	r2, [r3, #0]
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a160:	1ad3      	subs	r3, r2, r3
 801a162:	2b00      	cmp	r3, #0
 801a164:	dc58      	bgt.n	801a218 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801a166:	4b7a      	ldr	r3, [pc, #488]	; (801a350 <tcp_receive+0x2cc>)
 801a168:	881b      	ldrh	r3, [r3, #0]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d14b      	bne.n	801a206 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801a178:	4413      	add	r3, r2
 801a17a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a17c:	429a      	cmp	r2, r3
 801a17e:	d142      	bne.n	801a206 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a186:	2b00      	cmp	r3, #0
 801a188:	db3d      	blt.n	801a206 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a18e:	4b6e      	ldr	r3, [pc, #440]	; (801a348 <tcp_receive+0x2c4>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	429a      	cmp	r2, r3
 801a194:	d137      	bne.n	801a206 <tcp_receive+0x182>
              found_dupack = 1;
 801a196:	2301      	movs	r3, #1
 801a198:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a1a0:	2bff      	cmp	r3, #255	; 0xff
 801a1a2:	d007      	beq.n	801a1b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	b2da      	uxtb	r2, r3
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a1ba:	2b03      	cmp	r3, #3
 801a1bc:	d91b      	bls.n	801a1f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1c8:	4413      	add	r3, r2
 801a1ca:	b29a      	uxth	r2, r3
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a1d2:	429a      	cmp	r2, r3
 801a1d4:	d30a      	bcc.n	801a1ec <tcp_receive+0x168>
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1e0:	4413      	add	r3, r2
 801a1e2:	b29a      	uxth	r2, r3
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a1ea:	e004      	b.n	801a1f6 <tcp_receive+0x172>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a1f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a1fc:	2b02      	cmp	r3, #2
 801a1fe:	d902      	bls.n	801a206 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	f002 fb41 	bl	801c888 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801a206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a208:	2b00      	cmp	r3, #0
 801a20a:	f040 8160 	bne.w	801a4ce <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2200      	movs	r2, #0
 801a212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a216:	e15a      	b.n	801a4ce <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a218:	4b4b      	ldr	r3, [pc, #300]	; (801a348 <tcp_receive+0x2c4>)
 801a21a:	681a      	ldr	r2, [r3, #0]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a220:	1ad3      	subs	r3, r2, r3
 801a222:	3b01      	subs	r3, #1
 801a224:	2b00      	cmp	r3, #0
 801a226:	f2c0 814d 	blt.w	801a4c4 <tcp_receive+0x440>
 801a22a:	4b47      	ldr	r3, [pc, #284]	; (801a348 <tcp_receive+0x2c4>)
 801a22c:	681a      	ldr	r2, [r3, #0]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a232:	1ad3      	subs	r3, r2, r3
 801a234:	2b00      	cmp	r3, #0
 801a236:	f300 8145 	bgt.w	801a4c4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	8b5b      	ldrh	r3, [r3, #26]
 801a23e:	f003 0304 	and.w	r3, r3, #4
 801a242:	2b00      	cmp	r3, #0
 801a244:	d010      	beq.n	801a268 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	8b5b      	ldrh	r3, [r3, #26]
 801a24a:	f023 0304 	bic.w	r3, r3, #4
 801a24e:	b29a      	uxth	r2, r3
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	2200      	movs	r2, #0
 801a264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2200      	movs	r2, #0
 801a26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a276:	10db      	asrs	r3, r3, #3
 801a278:	b21b      	sxth	r3, r3
 801a27a:	b29a      	uxth	r2, r3
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a282:	b29b      	uxth	r3, r3
 801a284:	4413      	add	r3, r2
 801a286:	b29b      	uxth	r3, r3
 801a288:	b21a      	sxth	r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a290:	4b2d      	ldr	r3, [pc, #180]	; (801a348 <tcp_receive+0x2c4>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	b29a      	uxth	r2, r3
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	1ad3      	subs	r3, r2, r3
 801a29e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801a2a8:	4b27      	ldr	r3, [pc, #156]	; (801a348 <tcp_receive+0x2c4>)
 801a2aa:	681a      	ldr	r2, [r3, #0]
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	7d1b      	ldrb	r3, [r3, #20]
 801a2b4:	2b03      	cmp	r3, #3
 801a2b6:	f240 8096 	bls.w	801a3e6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a2c6:	429a      	cmp	r2, r3
 801a2c8:	d244      	bcs.n	801a354 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	8b5b      	ldrh	r3, [r3, #26]
 801a2ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d001      	beq.n	801a2da <tcp_receive+0x256>
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	e000      	b.n	801a2dc <tcp_receive+0x258>
 801a2da:	2302      	movs	r3, #2
 801a2dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a2e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a2e4:	b29a      	uxth	r2, r3
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a2ea:	fb12 f303 	smulbb	r3, r2, r3
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	bf28      	it	cs
 801a2f6:	4613      	movcs	r3, r2
 801a2f8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a300:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a302:	4413      	add	r3, r2
 801a304:	b29a      	uxth	r2, r3
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d309      	bcc.n	801a324 <tcp_receive+0x2a0>
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a316:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a318:	4413      	add	r3, r2
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a322:	e060      	b.n	801a3e6 <tcp_receive+0x362>
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a32a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a32e:	e05a      	b.n	801a3e6 <tcp_receive+0x362>
 801a330:	08023304 	.word	0x08023304
 801a334:	0802369c 	.word	0x0802369c
 801a338:	080233b8 	.word	0x080233b8
 801a33c:	080236b8 	.word	0x080236b8
 801a340:	200090b8 	.word	0x200090b8
 801a344:	200090ac 	.word	0x200090ac
 801a348:	200090b0 	.word	0x200090b0
 801a34c:	2000909c 	.word	0x2000909c
 801a350:	200090b6 	.word	0x200090b6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a35a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a35c:	4413      	add	r3, r2
 801a35e:	b29a      	uxth	r2, r3
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801a366:	429a      	cmp	r2, r3
 801a368:	d309      	bcc.n	801a37e <tcp_receive+0x2fa>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a372:	4413      	add	r3, r2
 801a374:	b29a      	uxth	r2, r3
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801a37c:	e004      	b.n	801a388 <tcp_receive+0x304>
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a394:	429a      	cmp	r2, r3
 801a396:	d326      	bcc.n	801a3e6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a3a4:	1ad3      	subs	r3, r2, r3
 801a3a6:	b29a      	uxth	r2, r3
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3b8:	4413      	add	r3, r2
 801a3ba:	b29a      	uxth	r2, r3
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	d30a      	bcc.n	801a3dc <tcp_receive+0x358>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3d0:	4413      	add	r3, r2
 801a3d2:	b29a      	uxth	r2, r3
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a3da:	e004      	b.n	801a3e6 <tcp_receive+0x362>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3ee:	4a98      	ldr	r2, [pc, #608]	; (801a650 <tcp_receive+0x5cc>)
 801a3f0:	6878      	ldr	r0, [r7, #4]
 801a3f2:	f7ff fdcb 	bl	8019f8c <tcp_free_acked_segments>
 801a3f6:	4602      	mov	r2, r0
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a404:	4a93      	ldr	r2, [pc, #588]	; (801a654 <tcp_receive+0x5d0>)
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f7ff fdc0 	bl	8019f8c <tcp_free_acked_segments>
 801a40c:	4602      	mov	r2, r0
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a416:	2b00      	cmp	r3, #0
 801a418:	d104      	bne.n	801a424 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a420:	861a      	strh	r2, [r3, #48]	; 0x30
 801a422:	e002      	b.n	801a42a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	2200      	movs	r2, #0
 801a428:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2200      	movs	r2, #0
 801a42e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a434:	2b00      	cmp	r3, #0
 801a436:	d103      	bne.n	801a440 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	2200      	movs	r2, #0
 801a43c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a446:	4b84      	ldr	r3, [pc, #528]	; (801a658 <tcp_receive+0x5d4>)
 801a448:	881b      	ldrh	r3, [r3, #0]
 801a44a:	4413      	add	r3, r2
 801a44c:	b29a      	uxth	r2, r3
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	8b5b      	ldrh	r3, [r3, #26]
 801a458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d035      	beq.n	801a4cc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a464:	2b00      	cmp	r3, #0
 801a466:	d118      	bne.n	801a49a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d00c      	beq.n	801a48a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a478:	68db      	ldr	r3, [r3, #12]
 801a47a:	685b      	ldr	r3, [r3, #4]
 801a47c:	4618      	mov	r0, r3
 801a47e:	f7fa fddc 	bl	801503a <lwip_htonl>
 801a482:	4603      	mov	r3, r0
 801a484:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801a486:	2b00      	cmp	r3, #0
 801a488:	dc20      	bgt.n	801a4cc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	8b5b      	ldrh	r3, [r3, #26]
 801a48e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a492:	b29a      	uxth	r2, r3
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a498:	e018      	b.n	801a4cc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4a2:	68db      	ldr	r3, [r3, #12]
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f7fa fdc7 	bl	801503a <lwip_htonl>
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	1ae3      	subs	r3, r4, r3
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	dc0b      	bgt.n	801a4cc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	8b5b      	ldrh	r3, [r3, #26]
 801a4b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a4c2:	e003      	b.n	801a4cc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801a4c4:	6878      	ldr	r0, [r7, #4]
 801a4c6:	f002 fbcd 	bl	801cc64 <tcp_send_empty_ack>
 801a4ca:	e000      	b.n	801a4ce <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a4cc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d05b      	beq.n	801a58e <tcp_receive+0x50a>
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4da:	4b60      	ldr	r3, [pc, #384]	; (801a65c <tcp_receive+0x5d8>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	da54      	bge.n	801a58e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a4e4:	4b5e      	ldr	r3, [pc, #376]	; (801a660 <tcp_receive+0x5dc>)
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	b29a      	uxth	r2, r3
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a4ee:	b29b      	uxth	r3, r3
 801a4f0:	1ad3      	subs	r3, r2, r3
 801a4f2:	b29b      	uxth	r3, r3
 801a4f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801a4f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a502:	10db      	asrs	r3, r3, #3
 801a504:	b21b      	sxth	r3, r3
 801a506:	b29b      	uxth	r3, r3
 801a508:	1ad3      	subs	r3, r2, r3
 801a50a:	b29b      	uxth	r3, r3
 801a50c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a516:	b29a      	uxth	r2, r3
 801a518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a51c:	4413      	add	r3, r2
 801a51e:	b29b      	uxth	r3, r3
 801a520:	b21a      	sxth	r2, r3
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801a526:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	da05      	bge.n	801a53a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801a52e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a532:	425b      	negs	r3, r3
 801a534:	b29b      	uxth	r3, r3
 801a536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801a53a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a544:	109b      	asrs	r3, r3, #2
 801a546:	b21b      	sxth	r3, r3
 801a548:	b29b      	uxth	r3, r3
 801a54a:	1ad3      	subs	r3, r2, r3
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a558:	b29a      	uxth	r2, r3
 801a55a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a55e:	4413      	add	r3, r2
 801a560:	b29b      	uxth	r3, r3
 801a562:	b21a      	sxth	r2, r3
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a56e:	10db      	asrs	r3, r3, #3
 801a570:	b21b      	sxth	r3, r3
 801a572:	b29a      	uxth	r2, r3
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a57a:	b29b      	uxth	r3, r3
 801a57c:	4413      	add	r3, r2
 801a57e:	b29b      	uxth	r3, r3
 801a580:	b21a      	sxth	r2, r3
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	2200      	movs	r2, #0
 801a58c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a58e:	4b35      	ldr	r3, [pc, #212]	; (801a664 <tcp_receive+0x5e0>)
 801a590:	881b      	ldrh	r3, [r3, #0]
 801a592:	2b00      	cmp	r3, #0
 801a594:	f000 84e1 	beq.w	801af5a <tcp_receive+0xed6>
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	7d1b      	ldrb	r3, [r3, #20]
 801a59c:	2b06      	cmp	r3, #6
 801a59e:	f200 84dc 	bhi.w	801af5a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a5a6:	4b30      	ldr	r3, [pc, #192]	; (801a668 <tcp_receive+0x5e4>)
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	1ad3      	subs	r3, r2, r3
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	f2c0 808e 	blt.w	801a6d0 <tcp_receive+0x64c>
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a5b8:	4b2a      	ldr	r3, [pc, #168]	; (801a664 <tcp_receive+0x5e0>)
 801a5ba:	881b      	ldrh	r3, [r3, #0]
 801a5bc:	4619      	mov	r1, r3
 801a5be:	4b2a      	ldr	r3, [pc, #168]	; (801a668 <tcp_receive+0x5e4>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	440b      	add	r3, r1
 801a5c4:	1ad3      	subs	r3, r2, r3
 801a5c6:	3301      	adds	r3, #1
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	f300 8081 	bgt.w	801a6d0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801a5ce:	4b27      	ldr	r3, [pc, #156]	; (801a66c <tcp_receive+0x5e8>)
 801a5d0:	685b      	ldr	r3, [r3, #4]
 801a5d2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a5d8:	4b23      	ldr	r3, [pc, #140]	; (801a668 <tcp_receive+0x5e4>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	1ad3      	subs	r3, r2, r3
 801a5de:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a5e0:	4b22      	ldr	r3, [pc, #136]	; (801a66c <tcp_receive+0x5e8>)
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d106      	bne.n	801a5f6 <tcp_receive+0x572>
 801a5e8:	4b21      	ldr	r3, [pc, #132]	; (801a670 <tcp_receive+0x5ec>)
 801a5ea:	f240 5294 	movw	r2, #1428	; 0x594
 801a5ee:	4921      	ldr	r1, [pc, #132]	; (801a674 <tcp_receive+0x5f0>)
 801a5f0:	4821      	ldr	r0, [pc, #132]	; (801a678 <tcp_receive+0x5f4>)
 801a5f2:	f004 fbcb 	bl	801ed8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a5fc:	4293      	cmp	r3, r2
 801a5fe:	d906      	bls.n	801a60e <tcp_receive+0x58a>
 801a600:	4b1b      	ldr	r3, [pc, #108]	; (801a670 <tcp_receive+0x5ec>)
 801a602:	f240 5295 	movw	r2, #1429	; 0x595
 801a606:	491d      	ldr	r1, [pc, #116]	; (801a67c <tcp_receive+0x5f8>)
 801a608:	481b      	ldr	r0, [pc, #108]	; (801a678 <tcp_receive+0x5f4>)
 801a60a:	f004 fbbf 	bl	801ed8c <iprintf>
      off = (u16_t)off32;
 801a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a610:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a614:	4b15      	ldr	r3, [pc, #84]	; (801a66c <tcp_receive+0x5e8>)
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	891b      	ldrh	r3, [r3, #8]
 801a61a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a61e:	429a      	cmp	r2, r3
 801a620:	d906      	bls.n	801a630 <tcp_receive+0x5ac>
 801a622:	4b13      	ldr	r3, [pc, #76]	; (801a670 <tcp_receive+0x5ec>)
 801a624:	f240 5297 	movw	r2, #1431	; 0x597
 801a628:	4915      	ldr	r1, [pc, #84]	; (801a680 <tcp_receive+0x5fc>)
 801a62a:	4813      	ldr	r0, [pc, #76]	; (801a678 <tcp_receive+0x5f4>)
 801a62c:	f004 fbae 	bl	801ed8c <iprintf>
      inseg.len -= off;
 801a630:	4b0e      	ldr	r3, [pc, #56]	; (801a66c <tcp_receive+0x5e8>)
 801a632:	891a      	ldrh	r2, [r3, #8]
 801a634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a638:	1ad3      	subs	r3, r2, r3
 801a63a:	b29a      	uxth	r2, r3
 801a63c:	4b0b      	ldr	r3, [pc, #44]	; (801a66c <tcp_receive+0x5e8>)
 801a63e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a640:	4b0a      	ldr	r3, [pc, #40]	; (801a66c <tcp_receive+0x5e8>)
 801a642:	685b      	ldr	r3, [r3, #4]
 801a644:	891a      	ldrh	r2, [r3, #8]
 801a646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a64a:	1ad3      	subs	r3, r2, r3
 801a64c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801a64e:	e029      	b.n	801a6a4 <tcp_receive+0x620>
 801a650:	080236d4 	.word	0x080236d4
 801a654:	080236dc 	.word	0x080236dc
 801a658:	200090b4 	.word	0x200090b4
 801a65c:	200090b0 	.word	0x200090b0
 801a660:	20010378 	.word	0x20010378
 801a664:	200090b6 	.word	0x200090b6
 801a668:	200090ac 	.word	0x200090ac
 801a66c:	2000908c 	.word	0x2000908c
 801a670:	08023304 	.word	0x08023304
 801a674:	080236e4 	.word	0x080236e4
 801a678:	080233b8 	.word	0x080233b8
 801a67c:	080236f4 	.word	0x080236f4
 801a680:	08023704 	.word	0x08023704
        off -= p->len;
 801a684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a686:	895b      	ldrh	r3, [r3, #10]
 801a688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a68c:	1ad3      	subs	r3, r2, r3
 801a68e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801a692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a694:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a696:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801a698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a69a:	2200      	movs	r2, #0
 801a69c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801a69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801a6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6a6:	895b      	ldrh	r3, [r3, #10]
 801a6a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	d8e9      	bhi.n	801a684 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801a6b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a6b4:	4619      	mov	r1, r3
 801a6b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a6b8:	f7fc f88c 	bl	80167d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c0:	4a91      	ldr	r2, [pc, #580]	; (801a908 <tcp_receive+0x884>)
 801a6c2:	6013      	str	r3, [r2, #0]
 801a6c4:	4b91      	ldr	r3, [pc, #580]	; (801a90c <tcp_receive+0x888>)
 801a6c6:	68db      	ldr	r3, [r3, #12]
 801a6c8:	4a8f      	ldr	r2, [pc, #572]	; (801a908 <tcp_receive+0x884>)
 801a6ca:	6812      	ldr	r2, [r2, #0]
 801a6cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a6ce:	e00d      	b.n	801a6ec <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a6d0:	4b8d      	ldr	r3, [pc, #564]	; (801a908 <tcp_receive+0x884>)
 801a6d2:	681a      	ldr	r2, [r3, #0]
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6d8:	1ad3      	subs	r3, r2, r3
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	da06      	bge.n	801a6ec <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	8b5b      	ldrh	r3, [r3, #26]
 801a6e2:	f043 0302 	orr.w	r3, r3, #2
 801a6e6:	b29a      	uxth	r2, r3
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a6ec:	4b86      	ldr	r3, [pc, #536]	; (801a908 <tcp_receive+0x884>)
 801a6ee:	681a      	ldr	r2, [r3, #0]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f4:	1ad3      	subs	r3, r2, r3
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	f2c0 842a 	blt.w	801af50 <tcp_receive+0xecc>
 801a6fc:	4b82      	ldr	r3, [pc, #520]	; (801a908 <tcp_receive+0x884>)
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a704:	6879      	ldr	r1, [r7, #4]
 801a706:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a708:	440b      	add	r3, r1
 801a70a:	1ad3      	subs	r3, r2, r3
 801a70c:	3301      	adds	r3, #1
 801a70e:	2b00      	cmp	r3, #0
 801a710:	f300 841e 	bgt.w	801af50 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a718:	4b7b      	ldr	r3, [pc, #492]	; (801a908 <tcp_receive+0x884>)
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	429a      	cmp	r2, r3
 801a71e:	f040 829a 	bne.w	801ac56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801a722:	4b7a      	ldr	r3, [pc, #488]	; (801a90c <tcp_receive+0x888>)
 801a724:	891c      	ldrh	r4, [r3, #8]
 801a726:	4b79      	ldr	r3, [pc, #484]	; (801a90c <tcp_receive+0x888>)
 801a728:	68db      	ldr	r3, [r3, #12]
 801a72a:	899b      	ldrh	r3, [r3, #12]
 801a72c:	b29b      	uxth	r3, r3
 801a72e:	4618      	mov	r0, r3
 801a730:	f7fa fc6e 	bl	8015010 <lwip_htons>
 801a734:	4603      	mov	r3, r0
 801a736:	b2db      	uxtb	r3, r3
 801a738:	f003 0303 	and.w	r3, r3, #3
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d001      	beq.n	801a744 <tcp_receive+0x6c0>
 801a740:	2301      	movs	r3, #1
 801a742:	e000      	b.n	801a746 <tcp_receive+0x6c2>
 801a744:	2300      	movs	r3, #0
 801a746:	4423      	add	r3, r4
 801a748:	b29a      	uxth	r2, r3
 801a74a:	4b71      	ldr	r3, [pc, #452]	; (801a910 <tcp_receive+0x88c>)
 801a74c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a752:	4b6f      	ldr	r3, [pc, #444]	; (801a910 <tcp_receive+0x88c>)
 801a754:	881b      	ldrh	r3, [r3, #0]
 801a756:	429a      	cmp	r2, r3
 801a758:	d275      	bcs.n	801a846 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a75a:	4b6c      	ldr	r3, [pc, #432]	; (801a90c <tcp_receive+0x888>)
 801a75c:	68db      	ldr	r3, [r3, #12]
 801a75e:	899b      	ldrh	r3, [r3, #12]
 801a760:	b29b      	uxth	r3, r3
 801a762:	4618      	mov	r0, r3
 801a764:	f7fa fc54 	bl	8015010 <lwip_htons>
 801a768:	4603      	mov	r3, r0
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	f003 0301 	and.w	r3, r3, #1
 801a770:	2b00      	cmp	r3, #0
 801a772:	d01f      	beq.n	801a7b4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a774:	4b65      	ldr	r3, [pc, #404]	; (801a90c <tcp_receive+0x888>)
 801a776:	68db      	ldr	r3, [r3, #12]
 801a778:	899b      	ldrh	r3, [r3, #12]
 801a77a:	b29b      	uxth	r3, r3
 801a77c:	b21b      	sxth	r3, r3
 801a77e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a782:	b21c      	sxth	r4, r3
 801a784:	4b61      	ldr	r3, [pc, #388]	; (801a90c <tcp_receive+0x888>)
 801a786:	68db      	ldr	r3, [r3, #12]
 801a788:	899b      	ldrh	r3, [r3, #12]
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	4618      	mov	r0, r3
 801a78e:	f7fa fc3f 	bl	8015010 <lwip_htons>
 801a792:	4603      	mov	r3, r0
 801a794:	b2db      	uxtb	r3, r3
 801a796:	b29b      	uxth	r3, r3
 801a798:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7fa fc36 	bl	8015010 <lwip_htons>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	b21b      	sxth	r3, r3
 801a7a8:	4323      	orrs	r3, r4
 801a7aa:	b21a      	sxth	r2, r3
 801a7ac:	4b57      	ldr	r3, [pc, #348]	; (801a90c <tcp_receive+0x888>)
 801a7ae:	68db      	ldr	r3, [r3, #12]
 801a7b0:	b292      	uxth	r2, r2
 801a7b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a7b8:	4b54      	ldr	r3, [pc, #336]	; (801a90c <tcp_receive+0x888>)
 801a7ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a7bc:	4b53      	ldr	r3, [pc, #332]	; (801a90c <tcp_receive+0x888>)
 801a7be:	68db      	ldr	r3, [r3, #12]
 801a7c0:	899b      	ldrh	r3, [r3, #12]
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7fa fc23 	bl	8015010 <lwip_htons>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	b2db      	uxtb	r3, r3
 801a7ce:	f003 0302 	and.w	r3, r3, #2
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d005      	beq.n	801a7e2 <tcp_receive+0x75e>
            inseg.len -= 1;
 801a7d6:	4b4d      	ldr	r3, [pc, #308]	; (801a90c <tcp_receive+0x888>)
 801a7d8:	891b      	ldrh	r3, [r3, #8]
 801a7da:	3b01      	subs	r3, #1
 801a7dc:	b29a      	uxth	r2, r3
 801a7de:	4b4b      	ldr	r3, [pc, #300]	; (801a90c <tcp_receive+0x888>)
 801a7e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801a7e2:	4b4a      	ldr	r3, [pc, #296]	; (801a90c <tcp_receive+0x888>)
 801a7e4:	685b      	ldr	r3, [r3, #4]
 801a7e6:	4a49      	ldr	r2, [pc, #292]	; (801a90c <tcp_receive+0x888>)
 801a7e8:	8912      	ldrh	r2, [r2, #8]
 801a7ea:	4611      	mov	r1, r2
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f7fb fef1 	bl	80165d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a7f2:	4b46      	ldr	r3, [pc, #280]	; (801a90c <tcp_receive+0x888>)
 801a7f4:	891c      	ldrh	r4, [r3, #8]
 801a7f6:	4b45      	ldr	r3, [pc, #276]	; (801a90c <tcp_receive+0x888>)
 801a7f8:	68db      	ldr	r3, [r3, #12]
 801a7fa:	899b      	ldrh	r3, [r3, #12]
 801a7fc:	b29b      	uxth	r3, r3
 801a7fe:	4618      	mov	r0, r3
 801a800:	f7fa fc06 	bl	8015010 <lwip_htons>
 801a804:	4603      	mov	r3, r0
 801a806:	b2db      	uxtb	r3, r3
 801a808:	f003 0303 	and.w	r3, r3, #3
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d001      	beq.n	801a814 <tcp_receive+0x790>
 801a810:	2301      	movs	r3, #1
 801a812:	e000      	b.n	801a816 <tcp_receive+0x792>
 801a814:	2300      	movs	r3, #0
 801a816:	4423      	add	r3, r4
 801a818:	b29a      	uxth	r2, r3
 801a81a:	4b3d      	ldr	r3, [pc, #244]	; (801a910 <tcp_receive+0x88c>)
 801a81c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a81e:	4b3c      	ldr	r3, [pc, #240]	; (801a910 <tcp_receive+0x88c>)
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	461a      	mov	r2, r3
 801a824:	4b38      	ldr	r3, [pc, #224]	; (801a908 <tcp_receive+0x884>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	441a      	add	r2, r3
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a82e:	6879      	ldr	r1, [r7, #4]
 801a830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a832:	440b      	add	r3, r1
 801a834:	429a      	cmp	r2, r3
 801a836:	d006      	beq.n	801a846 <tcp_receive+0x7c2>
 801a838:	4b36      	ldr	r3, [pc, #216]	; (801a914 <tcp_receive+0x890>)
 801a83a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801a83e:	4936      	ldr	r1, [pc, #216]	; (801a918 <tcp_receive+0x894>)
 801a840:	4836      	ldr	r0, [pc, #216]	; (801a91c <tcp_receive+0x898>)
 801a842:	f004 faa3 	bl	801ed8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	f000 80e7 	beq.w	801aa1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a850:	4b2e      	ldr	r3, [pc, #184]	; (801a90c <tcp_receive+0x888>)
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	899b      	ldrh	r3, [r3, #12]
 801a856:	b29b      	uxth	r3, r3
 801a858:	4618      	mov	r0, r3
 801a85a:	f7fa fbd9 	bl	8015010 <lwip_htons>
 801a85e:	4603      	mov	r3, r0
 801a860:	b2db      	uxtb	r3, r3
 801a862:	f003 0301 	and.w	r3, r3, #1
 801a866:	2b00      	cmp	r3, #0
 801a868:	d010      	beq.n	801a88c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801a86a:	e00a      	b.n	801a882 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a870:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801a87c:	68f8      	ldr	r0, [r7, #12]
 801a87e:	f7fd fcc6 	bl	801820e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a886:	2b00      	cmp	r3, #0
 801a888:	d1f0      	bne.n	801a86c <tcp_receive+0x7e8>
 801a88a:	e0c8      	b.n	801aa1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a890:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801a892:	e052      	b.n	801a93a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a896:	68db      	ldr	r3, [r3, #12]
 801a898:	899b      	ldrh	r3, [r3, #12]
 801a89a:	b29b      	uxth	r3, r3
 801a89c:	4618      	mov	r0, r3
 801a89e:	f7fa fbb7 	bl	8015010 <lwip_htons>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	b2db      	uxtb	r3, r3
 801a8a6:	f003 0301 	and.w	r3, r3, #1
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d03d      	beq.n	801a92a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a8ae:	4b17      	ldr	r3, [pc, #92]	; (801a90c <tcp_receive+0x888>)
 801a8b0:	68db      	ldr	r3, [r3, #12]
 801a8b2:	899b      	ldrh	r3, [r3, #12]
 801a8b4:	b29b      	uxth	r3, r3
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7fa fbaa 	bl	8015010 <lwip_htons>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	b2db      	uxtb	r3, r3
 801a8c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d130      	bne.n	801a92a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a8c8:	4b10      	ldr	r3, [pc, #64]	; (801a90c <tcp_receive+0x888>)
 801a8ca:	68db      	ldr	r3, [r3, #12]
 801a8cc:	899b      	ldrh	r3, [r3, #12]
 801a8ce:	b29c      	uxth	r4, r3
 801a8d0:	2001      	movs	r0, #1
 801a8d2:	f7fa fb9d 	bl	8015010 <lwip_htons>
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	461a      	mov	r2, r3
 801a8da:	4b0c      	ldr	r3, [pc, #48]	; (801a90c <tcp_receive+0x888>)
 801a8dc:	68db      	ldr	r3, [r3, #12]
 801a8de:	4322      	orrs	r2, r4
 801a8e0:	b292      	uxth	r2, r2
 801a8e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a8e4:	4b09      	ldr	r3, [pc, #36]	; (801a90c <tcp_receive+0x888>)
 801a8e6:	891c      	ldrh	r4, [r3, #8]
 801a8e8:	4b08      	ldr	r3, [pc, #32]	; (801a90c <tcp_receive+0x888>)
 801a8ea:	68db      	ldr	r3, [r3, #12]
 801a8ec:	899b      	ldrh	r3, [r3, #12]
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f7fa fb8d 	bl	8015010 <lwip_htons>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	b2db      	uxtb	r3, r3
 801a8fa:	f003 0303 	and.w	r3, r3, #3
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d00e      	beq.n	801a920 <tcp_receive+0x89c>
 801a902:	2301      	movs	r3, #1
 801a904:	e00d      	b.n	801a922 <tcp_receive+0x89e>
 801a906:	bf00      	nop
 801a908:	200090ac 	.word	0x200090ac
 801a90c:	2000908c 	.word	0x2000908c
 801a910:	200090b6 	.word	0x200090b6
 801a914:	08023304 	.word	0x08023304
 801a918:	08023714 	.word	0x08023714
 801a91c:	080233b8 	.word	0x080233b8
 801a920:	2300      	movs	r3, #0
 801a922:	4423      	add	r3, r4
 801a924:	b29a      	uxth	r2, r3
 801a926:	4b98      	ldr	r3, [pc, #608]	; (801ab88 <tcp_receive+0xb04>)
 801a928:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a92c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a934:	6938      	ldr	r0, [r7, #16]
 801a936:	f7fd fc6a 	bl	801820e <tcp_seg_free>
            while (next &&
 801a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d00e      	beq.n	801a95e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a940:	4b91      	ldr	r3, [pc, #580]	; (801ab88 <tcp_receive+0xb04>)
 801a942:	881b      	ldrh	r3, [r3, #0]
 801a944:	461a      	mov	r2, r3
 801a946:	4b91      	ldr	r3, [pc, #580]	; (801ab8c <tcp_receive+0xb08>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	441a      	add	r2, r3
 801a94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a94e:	68db      	ldr	r3, [r3, #12]
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a954:	8909      	ldrh	r1, [r1, #8]
 801a956:	440b      	add	r3, r1
 801a958:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	da9a      	bge.n	801a894 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a960:	2b00      	cmp	r3, #0
 801a962:	d059      	beq.n	801aa18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a964:	4b88      	ldr	r3, [pc, #544]	; (801ab88 <tcp_receive+0xb04>)
 801a966:	881b      	ldrh	r3, [r3, #0]
 801a968:	461a      	mov	r2, r3
 801a96a:	4b88      	ldr	r3, [pc, #544]	; (801ab8c <tcp_receive+0xb08>)
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	441a      	add	r2, r3
 801a970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a972:	68db      	ldr	r3, [r3, #12]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a978:	2b00      	cmp	r3, #0
 801a97a:	dd4d      	ble.n	801aa18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a97e:	68db      	ldr	r3, [r3, #12]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	b29a      	uxth	r2, r3
 801a984:	4b81      	ldr	r3, [pc, #516]	; (801ab8c <tcp_receive+0xb08>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	b29b      	uxth	r3, r3
 801a98a:	1ad3      	subs	r3, r2, r3
 801a98c:	b29a      	uxth	r2, r3
 801a98e:	4b80      	ldr	r3, [pc, #512]	; (801ab90 <tcp_receive+0xb0c>)
 801a990:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a992:	4b7f      	ldr	r3, [pc, #508]	; (801ab90 <tcp_receive+0xb0c>)
 801a994:	68db      	ldr	r3, [r3, #12]
 801a996:	899b      	ldrh	r3, [r3, #12]
 801a998:	b29b      	uxth	r3, r3
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7fa fb38 	bl	8015010 <lwip_htons>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	f003 0302 	and.w	r3, r3, #2
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d005      	beq.n	801a9b8 <tcp_receive+0x934>
                inseg.len -= 1;
 801a9ac:	4b78      	ldr	r3, [pc, #480]	; (801ab90 <tcp_receive+0xb0c>)
 801a9ae:	891b      	ldrh	r3, [r3, #8]
 801a9b0:	3b01      	subs	r3, #1
 801a9b2:	b29a      	uxth	r2, r3
 801a9b4:	4b76      	ldr	r3, [pc, #472]	; (801ab90 <tcp_receive+0xb0c>)
 801a9b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a9b8:	4b75      	ldr	r3, [pc, #468]	; (801ab90 <tcp_receive+0xb0c>)
 801a9ba:	685b      	ldr	r3, [r3, #4]
 801a9bc:	4a74      	ldr	r2, [pc, #464]	; (801ab90 <tcp_receive+0xb0c>)
 801a9be:	8912      	ldrh	r2, [r2, #8]
 801a9c0:	4611      	mov	r1, r2
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fb fe06 	bl	80165d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a9c8:	4b71      	ldr	r3, [pc, #452]	; (801ab90 <tcp_receive+0xb0c>)
 801a9ca:	891c      	ldrh	r4, [r3, #8]
 801a9cc:	4b70      	ldr	r3, [pc, #448]	; (801ab90 <tcp_receive+0xb0c>)
 801a9ce:	68db      	ldr	r3, [r3, #12]
 801a9d0:	899b      	ldrh	r3, [r3, #12]
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7fa fb1b 	bl	8015010 <lwip_htons>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	b2db      	uxtb	r3, r3
 801a9de:	f003 0303 	and.w	r3, r3, #3
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d001      	beq.n	801a9ea <tcp_receive+0x966>
 801a9e6:	2301      	movs	r3, #1
 801a9e8:	e000      	b.n	801a9ec <tcp_receive+0x968>
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	4423      	add	r3, r4
 801a9ee:	b29a      	uxth	r2, r3
 801a9f0:	4b65      	ldr	r3, [pc, #404]	; (801ab88 <tcp_receive+0xb04>)
 801a9f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a9f4:	4b64      	ldr	r3, [pc, #400]	; (801ab88 <tcp_receive+0xb04>)
 801a9f6:	881b      	ldrh	r3, [r3, #0]
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	4b64      	ldr	r3, [pc, #400]	; (801ab8c <tcp_receive+0xb08>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	441a      	add	r2, r3
 801aa00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa02:	68db      	ldr	r3, [r3, #12]
 801aa04:	685b      	ldr	r3, [r3, #4]
 801aa06:	429a      	cmp	r2, r3
 801aa08:	d006      	beq.n	801aa18 <tcp_receive+0x994>
 801aa0a:	4b62      	ldr	r3, [pc, #392]	; (801ab94 <tcp_receive+0xb10>)
 801aa0c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801aa10:	4961      	ldr	r1, [pc, #388]	; (801ab98 <tcp_receive+0xb14>)
 801aa12:	4862      	ldr	r0, [pc, #392]	; (801ab9c <tcp_receive+0xb18>)
 801aa14:	f004 f9ba 	bl	801ed8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801aa1c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801aa1e:	4b5a      	ldr	r3, [pc, #360]	; (801ab88 <tcp_receive+0xb04>)
 801aa20:	881b      	ldrh	r3, [r3, #0]
 801aa22:	461a      	mov	r2, r3
 801aa24:	4b59      	ldr	r3, [pc, #356]	; (801ab8c <tcp_receive+0xb08>)
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	441a      	add	r2, r3
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801aa32:	4b55      	ldr	r3, [pc, #340]	; (801ab88 <tcp_receive+0xb04>)
 801aa34:	881b      	ldrh	r3, [r3, #0]
 801aa36:	429a      	cmp	r2, r3
 801aa38:	d206      	bcs.n	801aa48 <tcp_receive+0x9c4>
 801aa3a:	4b56      	ldr	r3, [pc, #344]	; (801ab94 <tcp_receive+0xb10>)
 801aa3c:	f240 6207 	movw	r2, #1543	; 0x607
 801aa40:	4957      	ldr	r1, [pc, #348]	; (801aba0 <tcp_receive+0xb1c>)
 801aa42:	4856      	ldr	r0, [pc, #344]	; (801ab9c <tcp_receive+0xb18>)
 801aa44:	f004 f9a2 	bl	801ed8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801aa4c:	4b4e      	ldr	r3, [pc, #312]	; (801ab88 <tcp_receive+0xb04>)
 801aa4e:	881b      	ldrh	r3, [r3, #0]
 801aa50:	1ad3      	subs	r3, r2, r3
 801aa52:	b29a      	uxth	r2, r3
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801aa58:	6878      	ldr	r0, [r7, #4]
 801aa5a:	f7fc feaf 	bl	80177bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801aa5e:	4b4c      	ldr	r3, [pc, #304]	; (801ab90 <tcp_receive+0xb0c>)
 801aa60:	685b      	ldr	r3, [r3, #4]
 801aa62:	891b      	ldrh	r3, [r3, #8]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d006      	beq.n	801aa76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801aa68:	4b49      	ldr	r3, [pc, #292]	; (801ab90 <tcp_receive+0xb0c>)
 801aa6a:	685b      	ldr	r3, [r3, #4]
 801aa6c:	4a4d      	ldr	r2, [pc, #308]	; (801aba4 <tcp_receive+0xb20>)
 801aa6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801aa70:	4b47      	ldr	r3, [pc, #284]	; (801ab90 <tcp_receive+0xb0c>)
 801aa72:	2200      	movs	r2, #0
 801aa74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801aa76:	4b46      	ldr	r3, [pc, #280]	; (801ab90 <tcp_receive+0xb0c>)
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	899b      	ldrh	r3, [r3, #12]
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f7fa fac6 	bl	8015010 <lwip_htons>
 801aa84:	4603      	mov	r3, r0
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	f003 0301 	and.w	r3, r3, #1
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f000 80b8 	beq.w	801ac02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801aa92:	4b45      	ldr	r3, [pc, #276]	; (801aba8 <tcp_receive+0xb24>)
 801aa94:	781b      	ldrb	r3, [r3, #0]
 801aa96:	f043 0320 	orr.w	r3, r3, #32
 801aa9a:	b2da      	uxtb	r2, r3
 801aa9c:	4b42      	ldr	r3, [pc, #264]	; (801aba8 <tcp_receive+0xb24>)
 801aa9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801aaa0:	e0af      	b.n	801ac02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aaa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aaac:	68db      	ldr	r3, [r3, #12]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	4a36      	ldr	r2, [pc, #216]	; (801ab8c <tcp_receive+0xb08>)
 801aab2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	891b      	ldrh	r3, [r3, #8]
 801aab8:	461c      	mov	r4, r3
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	68db      	ldr	r3, [r3, #12]
 801aabe:	899b      	ldrh	r3, [r3, #12]
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	4618      	mov	r0, r3
 801aac4:	f7fa faa4 	bl	8015010 <lwip_htons>
 801aac8:	4603      	mov	r3, r0
 801aaca:	b2db      	uxtb	r3, r3
 801aacc:	f003 0303 	and.w	r3, r3, #3
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d001      	beq.n	801aad8 <tcp_receive+0xa54>
 801aad4:	2301      	movs	r3, #1
 801aad6:	e000      	b.n	801aada <tcp_receive+0xa56>
 801aad8:	2300      	movs	r3, #0
 801aada:	191a      	adds	r2, r3, r4
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aae0:	441a      	add	r2, r3
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aaea:	461c      	mov	r4, r3
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	891b      	ldrh	r3, [r3, #8]
 801aaf0:	461d      	mov	r5, r3
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	68db      	ldr	r3, [r3, #12]
 801aaf6:	899b      	ldrh	r3, [r3, #12]
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	4618      	mov	r0, r3
 801aafc:	f7fa fa88 	bl	8015010 <lwip_htons>
 801ab00:	4603      	mov	r3, r0
 801ab02:	b2db      	uxtb	r3, r3
 801ab04:	f003 0303 	and.w	r3, r3, #3
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d001      	beq.n	801ab10 <tcp_receive+0xa8c>
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	e000      	b.n	801ab12 <tcp_receive+0xa8e>
 801ab10:	2300      	movs	r3, #0
 801ab12:	442b      	add	r3, r5
 801ab14:	429c      	cmp	r4, r3
 801ab16:	d206      	bcs.n	801ab26 <tcp_receive+0xaa2>
 801ab18:	4b1e      	ldr	r3, [pc, #120]	; (801ab94 <tcp_receive+0xb10>)
 801ab1a:	f240 622b 	movw	r2, #1579	; 0x62b
 801ab1e:	4923      	ldr	r1, [pc, #140]	; (801abac <tcp_receive+0xb28>)
 801ab20:	481e      	ldr	r0, [pc, #120]	; (801ab9c <tcp_receive+0xb18>)
 801ab22:	f004 f933 	bl	801ed8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	891b      	ldrh	r3, [r3, #8]
 801ab2a:	461c      	mov	r4, r3
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	68db      	ldr	r3, [r3, #12]
 801ab30:	899b      	ldrh	r3, [r3, #12]
 801ab32:	b29b      	uxth	r3, r3
 801ab34:	4618      	mov	r0, r3
 801ab36:	f7fa fa6b 	bl	8015010 <lwip_htons>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	b2db      	uxtb	r3, r3
 801ab3e:	f003 0303 	and.w	r3, r3, #3
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d001      	beq.n	801ab4a <tcp_receive+0xac6>
 801ab46:	2301      	movs	r3, #1
 801ab48:	e000      	b.n	801ab4c <tcp_receive+0xac8>
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	1919      	adds	r1, r3, r4
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ab52:	b28b      	uxth	r3, r1
 801ab54:	1ad3      	subs	r3, r2, r3
 801ab56:	b29a      	uxth	r2, r3
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ab5c:	6878      	ldr	r0, [r7, #4]
 801ab5e:	f7fc fe2d 	bl	80177bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	685b      	ldr	r3, [r3, #4]
 801ab66:	891b      	ldrh	r3, [r3, #8]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d028      	beq.n	801abbe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ab6c:	4b0d      	ldr	r3, [pc, #52]	; (801aba4 <tcp_receive+0xb20>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d01d      	beq.n	801abb0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801ab74:	4b0b      	ldr	r3, [pc, #44]	; (801aba4 <tcp_receive+0xb20>)
 801ab76:	681a      	ldr	r2, [r3, #0]
 801ab78:	68bb      	ldr	r3, [r7, #8]
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	4619      	mov	r1, r3
 801ab7e:	4610      	mov	r0, r2
 801ab80:	f7fb ff7c 	bl	8016a7c <pbuf_cat>
 801ab84:	e018      	b.n	801abb8 <tcp_receive+0xb34>
 801ab86:	bf00      	nop
 801ab88:	200090b6 	.word	0x200090b6
 801ab8c:	200090ac 	.word	0x200090ac
 801ab90:	2000908c 	.word	0x2000908c
 801ab94:	08023304 	.word	0x08023304
 801ab98:	0802374c 	.word	0x0802374c
 801ab9c:	080233b8 	.word	0x080233b8
 801aba0:	08023788 	.word	0x08023788
 801aba4:	200090bc 	.word	0x200090bc
 801aba8:	200090b9 	.word	0x200090b9
 801abac:	080237a8 	.word	0x080237a8
            } else {
              recv_data = cseg->p;
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	685b      	ldr	r3, [r3, #4]
 801abb4:	4a70      	ldr	r2, [pc, #448]	; (801ad78 <tcp_receive+0xcf4>)
 801abb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	2200      	movs	r2, #0
 801abbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	68db      	ldr	r3, [r3, #12]
 801abc2:	899b      	ldrh	r3, [r3, #12]
 801abc4:	b29b      	uxth	r3, r3
 801abc6:	4618      	mov	r0, r3
 801abc8:	f7fa fa22 	bl	8015010 <lwip_htons>
 801abcc:	4603      	mov	r3, r0
 801abce:	b2db      	uxtb	r3, r3
 801abd0:	f003 0301 	and.w	r3, r3, #1
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d00d      	beq.n	801abf4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801abd8:	4b68      	ldr	r3, [pc, #416]	; (801ad7c <tcp_receive+0xcf8>)
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	f043 0320 	orr.w	r3, r3, #32
 801abe0:	b2da      	uxtb	r2, r3
 801abe2:	4b66      	ldr	r3, [pc, #408]	; (801ad7c <tcp_receive+0xcf8>)
 801abe4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	7d1b      	ldrb	r3, [r3, #20]
 801abea:	2b04      	cmp	r3, #4
 801abec:	d102      	bne.n	801abf4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	2207      	movs	r2, #7
 801abf2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	681a      	ldr	r2, [r3, #0]
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801abfc:	68b8      	ldr	r0, [r7, #8]
 801abfe:	f7fd fb06 	bl	801820e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d008      	beq.n	801ac1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ac0e:	68db      	ldr	r3, [r3, #12]
 801ac10:	685a      	ldr	r2, [r3, #4]
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ac16:	429a      	cmp	r2, r3
 801ac18:	f43f af43 	beq.w	801aaa2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	8b5b      	ldrh	r3, [r3, #26]
 801ac20:	f003 0301 	and.w	r3, r3, #1
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d00e      	beq.n	801ac46 <tcp_receive+0xbc2>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	8b5b      	ldrh	r3, [r3, #26]
 801ac2c:	f023 0301 	bic.w	r3, r3, #1
 801ac30:	b29a      	uxth	r2, r3
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	835a      	strh	r2, [r3, #26]
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	8b5b      	ldrh	r3, [r3, #26]
 801ac3a:	f043 0302 	orr.w	r3, r3, #2
 801ac3e:	b29a      	uxth	r2, r3
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ac44:	e188      	b.n	801af58 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	8b5b      	ldrh	r3, [r3, #26]
 801ac4a:	f043 0301 	orr.w	r3, r3, #1
 801ac4e:	b29a      	uxth	r2, r3
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ac54:	e180      	b.n	801af58 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d106      	bne.n	801ac6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ac5e:	4848      	ldr	r0, [pc, #288]	; (801ad80 <tcp_receive+0xcfc>)
 801ac60:	f7fd faee 	bl	8018240 <tcp_seg_copy>
 801ac64:	4602      	mov	r2, r0
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	675a      	str	r2, [r3, #116]	; 0x74
 801ac6a:	e16d      	b.n	801af48 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ac74:	63bb      	str	r3, [r7, #56]	; 0x38
 801ac76:	e157      	b.n	801af28 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac7a:	68db      	ldr	r3, [r3, #12]
 801ac7c:	685a      	ldr	r2, [r3, #4]
 801ac7e:	4b41      	ldr	r3, [pc, #260]	; (801ad84 <tcp_receive+0xd00>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	429a      	cmp	r2, r3
 801ac84:	d11d      	bne.n	801acc2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801ac86:	4b3e      	ldr	r3, [pc, #248]	; (801ad80 <tcp_receive+0xcfc>)
 801ac88:	891a      	ldrh	r2, [r3, #8]
 801ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac8c:	891b      	ldrh	r3, [r3, #8]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	f240 814f 	bls.w	801af32 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ac94:	483a      	ldr	r0, [pc, #232]	; (801ad80 <tcp_receive+0xcfc>)
 801ac96:	f7fd fad3 	bl	8018240 <tcp_seg_copy>
 801ac9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	f000 8149 	beq.w	801af36 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d003      	beq.n	801acb2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acac:	697a      	ldr	r2, [r7, #20]
 801acae:	601a      	str	r2, [r3, #0]
 801acb0:	e002      	b.n	801acb8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	697a      	ldr	r2, [r7, #20]
 801acb6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801acb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801acba:	6978      	ldr	r0, [r7, #20]
 801acbc:	f7ff f8de 	bl	8019e7c <tcp_oos_insert_segment>
                }
                break;
 801acc0:	e139      	b.n	801af36 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801acc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d117      	bne.n	801acf8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801acc8:	4b2e      	ldr	r3, [pc, #184]	; (801ad84 <tcp_receive+0xd00>)
 801acca:	681a      	ldr	r2, [r3, #0]
 801accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acce:	68db      	ldr	r3, [r3, #12]
 801acd0:	685b      	ldr	r3, [r3, #4]
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	da57      	bge.n	801ad88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801acd8:	4829      	ldr	r0, [pc, #164]	; (801ad80 <tcp_receive+0xcfc>)
 801acda:	f7fd fab1 	bl	8018240 <tcp_seg_copy>
 801acde:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801ace0:	69bb      	ldr	r3, [r7, #24]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	f000 8129 	beq.w	801af3a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	69ba      	ldr	r2, [r7, #24]
 801acec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801acee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801acf0:	69b8      	ldr	r0, [r7, #24]
 801acf2:	f7ff f8c3 	bl	8019e7c <tcp_oos_insert_segment>
                  }
                  break;
 801acf6:	e120      	b.n	801af3a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801acf8:	4b22      	ldr	r3, [pc, #136]	; (801ad84 <tcp_receive+0xd00>)
 801acfa:	681a      	ldr	r2, [r3, #0]
 801acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acfe:	68db      	ldr	r3, [r3, #12]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	1ad3      	subs	r3, r2, r3
 801ad04:	3b01      	subs	r3, #1
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	db3e      	blt.n	801ad88 <tcp_receive+0xd04>
 801ad0a:	4b1e      	ldr	r3, [pc, #120]	; (801ad84 <tcp_receive+0xd00>)
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad10:	68db      	ldr	r3, [r3, #12]
 801ad12:	685b      	ldr	r3, [r3, #4]
 801ad14:	1ad3      	subs	r3, r2, r3
 801ad16:	3301      	adds	r3, #1
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	dc35      	bgt.n	801ad88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ad1c:	4818      	ldr	r0, [pc, #96]	; (801ad80 <tcp_receive+0xcfc>)
 801ad1e:	f7fd fa8f 	bl	8018240 <tcp_seg_copy>
 801ad22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801ad24:	69fb      	ldr	r3, [r7, #28]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	f000 8109 	beq.w	801af3e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ad2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad2e:	68db      	ldr	r3, [r3, #12]
 801ad30:	685b      	ldr	r3, [r3, #4]
 801ad32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad34:	8912      	ldrh	r2, [r2, #8]
 801ad36:	441a      	add	r2, r3
 801ad38:	4b12      	ldr	r3, [pc, #72]	; (801ad84 <tcp_receive+0xd00>)
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	1ad3      	subs	r3, r2, r3
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	dd12      	ble.n	801ad68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ad42:	4b10      	ldr	r3, [pc, #64]	; (801ad84 <tcp_receive+0xd00>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	b29a      	uxth	r2, r3
 801ad48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	685b      	ldr	r3, [r3, #4]
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	1ad3      	subs	r3, r2, r3
 801ad52:	b29a      	uxth	r2, r3
 801ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad5a:	685a      	ldr	r2, [r3, #4]
 801ad5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad5e:	891b      	ldrh	r3, [r3, #8]
 801ad60:	4619      	mov	r1, r3
 801ad62:	4610      	mov	r0, r2
 801ad64:	f7fb fc36 	bl	80165d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad6a:	69fa      	ldr	r2, [r7, #28]
 801ad6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801ad6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ad70:	69f8      	ldr	r0, [r7, #28]
 801ad72:	f7ff f883 	bl	8019e7c <tcp_oos_insert_segment>
                  }
                  break;
 801ad76:	e0e2      	b.n	801af3e <tcp_receive+0xeba>
 801ad78:	200090bc 	.word	0x200090bc
 801ad7c:	200090b9 	.word	0x200090b9
 801ad80:	2000908c 	.word	0x2000908c
 801ad84:	200090ac 	.word	0x200090ac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad8a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	f040 80c6 	bne.w	801af22 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ad96:	4b80      	ldr	r3, [pc, #512]	; (801af98 <tcp_receive+0xf14>)
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad9c:	68db      	ldr	r3, [r3, #12]
 801ad9e:	685b      	ldr	r3, [r3, #4]
 801ada0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	f340 80bd 	ble.w	801af22 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adaa:	68db      	ldr	r3, [r3, #12]
 801adac:	899b      	ldrh	r3, [r3, #12]
 801adae:	b29b      	uxth	r3, r3
 801adb0:	4618      	mov	r0, r3
 801adb2:	f7fa f92d 	bl	8015010 <lwip_htons>
 801adb6:	4603      	mov	r3, r0
 801adb8:	b2db      	uxtb	r3, r3
 801adba:	f003 0301 	and.w	r3, r3, #1
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	f040 80bf 	bne.w	801af42 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801adc4:	4875      	ldr	r0, [pc, #468]	; (801af9c <tcp_receive+0xf18>)
 801adc6:	f7fd fa3b 	bl	8018240 <tcp_seg_copy>
 801adca:	4602      	mov	r2, r0
 801adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	2b00      	cmp	r3, #0
 801add6:	f000 80b6 	beq.w	801af46 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801addc:	68db      	ldr	r3, [r3, #12]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ade2:	8912      	ldrh	r2, [r2, #8]
 801ade4:	441a      	add	r2, r3
 801ade6:	4b6c      	ldr	r3, [pc, #432]	; (801af98 <tcp_receive+0xf14>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	1ad3      	subs	r3, r2, r3
 801adec:	2b00      	cmp	r3, #0
 801adee:	dd12      	ble.n	801ae16 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801adf0:	4b69      	ldr	r3, [pc, #420]	; (801af98 <tcp_receive+0xf14>)
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	b29a      	uxth	r2, r3
 801adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adf8:	68db      	ldr	r3, [r3, #12]
 801adfa:	685b      	ldr	r3, [r3, #4]
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	1ad3      	subs	r3, r2, r3
 801ae00:	b29a      	uxth	r2, r3
 801ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae08:	685a      	ldr	r2, [r3, #4]
 801ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae0c:	891b      	ldrh	r3, [r3, #8]
 801ae0e:	4619      	mov	r1, r3
 801ae10:	4610      	mov	r0, r2
 801ae12:	f7fb fbdf 	bl	80165d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801ae16:	4b62      	ldr	r3, [pc, #392]	; (801afa0 <tcp_receive+0xf1c>)
 801ae18:	881b      	ldrh	r3, [r3, #0]
 801ae1a:	461a      	mov	r2, r3
 801ae1c:	4b5e      	ldr	r3, [pc, #376]	; (801af98 <tcp_receive+0xf14>)
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	441a      	add	r2, r3
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae26:	6879      	ldr	r1, [r7, #4]
 801ae28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ae2a:	440b      	add	r3, r1
 801ae2c:	1ad3      	subs	r3, r2, r3
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	f340 8089 	ble.w	801af46 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	68db      	ldr	r3, [r3, #12]
 801ae3a:	899b      	ldrh	r3, [r3, #12]
 801ae3c:	b29b      	uxth	r3, r3
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f7fa f8e6 	bl	8015010 <lwip_htons>
 801ae44:	4603      	mov	r3, r0
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	f003 0301 	and.w	r3, r3, #1
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d022      	beq.n	801ae96 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ae50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	68db      	ldr	r3, [r3, #12]
 801ae56:	899b      	ldrh	r3, [r3, #12]
 801ae58:	b29b      	uxth	r3, r3
 801ae5a:	b21b      	sxth	r3, r3
 801ae5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ae60:	b21c      	sxth	r4, r3
 801ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	68db      	ldr	r3, [r3, #12]
 801ae68:	899b      	ldrh	r3, [r3, #12]
 801ae6a:	b29b      	uxth	r3, r3
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f7fa f8cf 	bl	8015010 <lwip_htons>
 801ae72:	4603      	mov	r3, r0
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7fa f8c6 	bl	8015010 <lwip_htons>
 801ae84:	4603      	mov	r3, r0
 801ae86:	b21b      	sxth	r3, r3
 801ae88:	4323      	orrs	r3, r4
 801ae8a:	b21a      	sxth	r2, r3
 801ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	68db      	ldr	r3, [r3, #12]
 801ae92:	b292      	uxth	r2, r2
 801ae94:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae9a:	b29a      	uxth	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aea0:	4413      	add	r3, r2
 801aea2:	b299      	uxth	r1, r3
 801aea4:	4b3c      	ldr	r3, [pc, #240]	; (801af98 <tcp_receive+0xf14>)
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	b29a      	uxth	r2, r3
 801aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	1a8a      	subs	r2, r1, r2
 801aeb0:	b292      	uxth	r2, r2
 801aeb2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	685a      	ldr	r2, [r3, #4]
 801aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	891b      	ldrh	r3, [r3, #8]
 801aec0:	4619      	mov	r1, r3
 801aec2:	4610      	mov	r0, r2
 801aec4:	f7fb fb86 	bl	80165d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	891c      	ldrh	r4, [r3, #8]
 801aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	68db      	ldr	r3, [r3, #12]
 801aed4:	899b      	ldrh	r3, [r3, #12]
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	4618      	mov	r0, r3
 801aeda:	f7fa f899 	bl	8015010 <lwip_htons>
 801aede:	4603      	mov	r3, r0
 801aee0:	b2db      	uxtb	r3, r3
 801aee2:	f003 0303 	and.w	r3, r3, #3
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d001      	beq.n	801aeee <tcp_receive+0xe6a>
 801aeea:	2301      	movs	r3, #1
 801aeec:	e000      	b.n	801aef0 <tcp_receive+0xe6c>
 801aeee:	2300      	movs	r3, #0
 801aef0:	4423      	add	r3, r4
 801aef2:	b29a      	uxth	r2, r3
 801aef4:	4b2a      	ldr	r3, [pc, #168]	; (801afa0 <tcp_receive+0xf1c>)
 801aef6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801aef8:	4b29      	ldr	r3, [pc, #164]	; (801afa0 <tcp_receive+0xf1c>)
 801aefa:	881b      	ldrh	r3, [r3, #0]
 801aefc:	461a      	mov	r2, r3
 801aefe:	4b26      	ldr	r3, [pc, #152]	; (801af98 <tcp_receive+0xf14>)
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	441a      	add	r2, r3
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af08:	6879      	ldr	r1, [r7, #4]
 801af0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801af0c:	440b      	add	r3, r1
 801af0e:	429a      	cmp	r2, r3
 801af10:	d019      	beq.n	801af46 <tcp_receive+0xec2>
 801af12:	4b24      	ldr	r3, [pc, #144]	; (801afa4 <tcp_receive+0xf20>)
 801af14:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801af18:	4923      	ldr	r1, [pc, #140]	; (801afa8 <tcp_receive+0xf24>)
 801af1a:	4824      	ldr	r0, [pc, #144]	; (801afac <tcp_receive+0xf28>)
 801af1c:	f003 ff36 	bl	801ed8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801af20:	e011      	b.n	801af46 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	63bb      	str	r3, [r7, #56]	; 0x38
 801af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	f47f aea4 	bne.w	801ac78 <tcp_receive+0xbf4>
 801af30:	e00a      	b.n	801af48 <tcp_receive+0xec4>
                break;
 801af32:	bf00      	nop
 801af34:	e008      	b.n	801af48 <tcp_receive+0xec4>
                break;
 801af36:	bf00      	nop
 801af38:	e006      	b.n	801af48 <tcp_receive+0xec4>
                  break;
 801af3a:	bf00      	nop
 801af3c:	e004      	b.n	801af48 <tcp_receive+0xec4>
                  break;
 801af3e:	bf00      	nop
 801af40:	e002      	b.n	801af48 <tcp_receive+0xec4>
                  break;
 801af42:	bf00      	nop
 801af44:	e000      	b.n	801af48 <tcp_receive+0xec4>
                break;
 801af46:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f001 fe8b 	bl	801cc64 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801af4e:	e003      	b.n	801af58 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801af50:	6878      	ldr	r0, [r7, #4]
 801af52:	f001 fe87 	bl	801cc64 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801af56:	e01a      	b.n	801af8e <tcp_receive+0xf0a>
 801af58:	e019      	b.n	801af8e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801af5a:	4b0f      	ldr	r3, [pc, #60]	; (801af98 <tcp_receive+0xf14>)
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af62:	1ad3      	subs	r3, r2, r3
 801af64:	2b00      	cmp	r3, #0
 801af66:	db0a      	blt.n	801af7e <tcp_receive+0xefa>
 801af68:	4b0b      	ldr	r3, [pc, #44]	; (801af98 <tcp_receive+0xf14>)
 801af6a:	681a      	ldr	r2, [r3, #0]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af70:	6879      	ldr	r1, [r7, #4]
 801af72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801af74:	440b      	add	r3, r1
 801af76:	1ad3      	subs	r3, r2, r3
 801af78:	3301      	adds	r3, #1
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	dd07      	ble.n	801af8e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	8b5b      	ldrh	r3, [r3, #26]
 801af82:	f043 0302 	orr.w	r3, r3, #2
 801af86:	b29a      	uxth	r2, r3
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801af8c:	e7ff      	b.n	801af8e <tcp_receive+0xf0a>
 801af8e:	bf00      	nop
 801af90:	3750      	adds	r7, #80	; 0x50
 801af92:	46bd      	mov	sp, r7
 801af94:	bdb0      	pop	{r4, r5, r7, pc}
 801af96:	bf00      	nop
 801af98:	200090ac 	.word	0x200090ac
 801af9c:	2000908c 	.word	0x2000908c
 801afa0:	200090b6 	.word	0x200090b6
 801afa4:	08023304 	.word	0x08023304
 801afa8:	08023714 	.word	0x08023714
 801afac:	080233b8 	.word	0x080233b8

0801afb0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801afb0:	b480      	push	{r7}
 801afb2:	b083      	sub	sp, #12
 801afb4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801afb6:	4b15      	ldr	r3, [pc, #84]	; (801b00c <tcp_get_next_optbyte+0x5c>)
 801afb8:	881b      	ldrh	r3, [r3, #0]
 801afba:	1c5a      	adds	r2, r3, #1
 801afbc:	b291      	uxth	r1, r2
 801afbe:	4a13      	ldr	r2, [pc, #76]	; (801b00c <tcp_get_next_optbyte+0x5c>)
 801afc0:	8011      	strh	r1, [r2, #0]
 801afc2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801afc4:	4b12      	ldr	r3, [pc, #72]	; (801b010 <tcp_get_next_optbyte+0x60>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d004      	beq.n	801afd6 <tcp_get_next_optbyte+0x26>
 801afcc:	4b11      	ldr	r3, [pc, #68]	; (801b014 <tcp_get_next_optbyte+0x64>)
 801afce:	881b      	ldrh	r3, [r3, #0]
 801afd0:	88fa      	ldrh	r2, [r7, #6]
 801afd2:	429a      	cmp	r2, r3
 801afd4:	d208      	bcs.n	801afe8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801afd6:	4b10      	ldr	r3, [pc, #64]	; (801b018 <tcp_get_next_optbyte+0x68>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	3314      	adds	r3, #20
 801afdc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801afde:	88fb      	ldrh	r3, [r7, #6]
 801afe0:	683a      	ldr	r2, [r7, #0]
 801afe2:	4413      	add	r3, r2
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	e00b      	b.n	801b000 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801afe8:	88fb      	ldrh	r3, [r7, #6]
 801afea:	b2da      	uxtb	r2, r3
 801afec:	4b09      	ldr	r3, [pc, #36]	; (801b014 <tcp_get_next_optbyte+0x64>)
 801afee:	881b      	ldrh	r3, [r3, #0]
 801aff0:	b2db      	uxtb	r3, r3
 801aff2:	1ad3      	subs	r3, r2, r3
 801aff4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801aff6:	4b06      	ldr	r3, [pc, #24]	; (801b010 <tcp_get_next_optbyte+0x60>)
 801aff8:	681a      	ldr	r2, [r3, #0]
 801affa:	797b      	ldrb	r3, [r7, #5]
 801affc:	4413      	add	r3, r2
 801affe:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b000:	4618      	mov	r0, r3
 801b002:	370c      	adds	r7, #12
 801b004:	46bd      	mov	sp, r7
 801b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00a:	4770      	bx	lr
 801b00c:	200090a8 	.word	0x200090a8
 801b010:	200090a4 	.word	0x200090a4
 801b014:	200090a2 	.word	0x200090a2
 801b018:	2000909c 	.word	0x2000909c

0801b01c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b084      	sub	sp, #16
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d106      	bne.n	801b038 <tcp_parseopt+0x1c>
 801b02a:	4b32      	ldr	r3, [pc, #200]	; (801b0f4 <tcp_parseopt+0xd8>)
 801b02c:	f240 727d 	movw	r2, #1917	; 0x77d
 801b030:	4931      	ldr	r1, [pc, #196]	; (801b0f8 <tcp_parseopt+0xdc>)
 801b032:	4832      	ldr	r0, [pc, #200]	; (801b0fc <tcp_parseopt+0xe0>)
 801b034:	f003 feaa 	bl	801ed8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801b038:	4b31      	ldr	r3, [pc, #196]	; (801b100 <tcp_parseopt+0xe4>)
 801b03a:	881b      	ldrh	r3, [r3, #0]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d056      	beq.n	801b0ee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b040:	4b30      	ldr	r3, [pc, #192]	; (801b104 <tcp_parseopt+0xe8>)
 801b042:	2200      	movs	r2, #0
 801b044:	801a      	strh	r2, [r3, #0]
 801b046:	e046      	b.n	801b0d6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801b048:	f7ff ffb2 	bl	801afb0 <tcp_get_next_optbyte>
 801b04c:	4603      	mov	r3, r0
 801b04e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801b050:	7bfb      	ldrb	r3, [r7, #15]
 801b052:	2b02      	cmp	r3, #2
 801b054:	d006      	beq.n	801b064 <tcp_parseopt+0x48>
 801b056:	2b02      	cmp	r3, #2
 801b058:	dc2c      	bgt.n	801b0b4 <tcp_parseopt+0x98>
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d042      	beq.n	801b0e4 <tcp_parseopt+0xc8>
 801b05e:	2b01      	cmp	r3, #1
 801b060:	d128      	bne.n	801b0b4 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801b062:	e038      	b.n	801b0d6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801b064:	f7ff ffa4 	bl	801afb0 <tcp_get_next_optbyte>
 801b068:	4603      	mov	r3, r0
 801b06a:	2b04      	cmp	r3, #4
 801b06c:	d13c      	bne.n	801b0e8 <tcp_parseopt+0xcc>
 801b06e:	4b25      	ldr	r3, [pc, #148]	; (801b104 <tcp_parseopt+0xe8>)
 801b070:	881b      	ldrh	r3, [r3, #0]
 801b072:	3301      	adds	r3, #1
 801b074:	4a22      	ldr	r2, [pc, #136]	; (801b100 <tcp_parseopt+0xe4>)
 801b076:	8812      	ldrh	r2, [r2, #0]
 801b078:	4293      	cmp	r3, r2
 801b07a:	da35      	bge.n	801b0e8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801b07c:	f7ff ff98 	bl	801afb0 <tcp_get_next_optbyte>
 801b080:	4603      	mov	r3, r0
 801b082:	b29b      	uxth	r3, r3
 801b084:	021b      	lsls	r3, r3, #8
 801b086:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801b088:	f7ff ff92 	bl	801afb0 <tcp_get_next_optbyte>
 801b08c:	4603      	mov	r3, r0
 801b08e:	b29a      	uxth	r2, r3
 801b090:	89bb      	ldrh	r3, [r7, #12]
 801b092:	4313      	orrs	r3, r2
 801b094:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801b096:	89bb      	ldrh	r3, [r7, #12]
 801b098:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801b09c:	4293      	cmp	r3, r2
 801b09e:	d804      	bhi.n	801b0aa <tcp_parseopt+0x8e>
 801b0a0:	89bb      	ldrh	r3, [r7, #12]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d001      	beq.n	801b0aa <tcp_parseopt+0x8e>
 801b0a6:	89ba      	ldrh	r2, [r7, #12]
 801b0a8:	e001      	b.n	801b0ae <tcp_parseopt+0x92>
 801b0aa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801b0b2:	e010      	b.n	801b0d6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801b0b4:	f7ff ff7c 	bl	801afb0 <tcp_get_next_optbyte>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801b0bc:	7afb      	ldrb	r3, [r7, #11]
 801b0be:	2b01      	cmp	r3, #1
 801b0c0:	d914      	bls.n	801b0ec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801b0c2:	7afb      	ldrb	r3, [r7, #11]
 801b0c4:	b29a      	uxth	r2, r3
 801b0c6:	4b0f      	ldr	r3, [pc, #60]	; (801b104 <tcp_parseopt+0xe8>)
 801b0c8:	881b      	ldrh	r3, [r3, #0]
 801b0ca:	4413      	add	r3, r2
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	3b02      	subs	r3, #2
 801b0d0:	b29a      	uxth	r2, r3
 801b0d2:	4b0c      	ldr	r3, [pc, #48]	; (801b104 <tcp_parseopt+0xe8>)
 801b0d4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b0d6:	4b0b      	ldr	r3, [pc, #44]	; (801b104 <tcp_parseopt+0xe8>)
 801b0d8:	881a      	ldrh	r2, [r3, #0]
 801b0da:	4b09      	ldr	r3, [pc, #36]	; (801b100 <tcp_parseopt+0xe4>)
 801b0dc:	881b      	ldrh	r3, [r3, #0]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d3b2      	bcc.n	801b048 <tcp_parseopt+0x2c>
 801b0e2:	e004      	b.n	801b0ee <tcp_parseopt+0xd2>
          return;
 801b0e4:	bf00      	nop
 801b0e6:	e002      	b.n	801b0ee <tcp_parseopt+0xd2>
            return;
 801b0e8:	bf00      	nop
 801b0ea:	e000      	b.n	801b0ee <tcp_parseopt+0xd2>
            return;
 801b0ec:	bf00      	nop
      }
    }
  }
}
 801b0ee:	3710      	adds	r7, #16
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	08023304 	.word	0x08023304
 801b0f8:	080237d0 	.word	0x080237d0
 801b0fc:	080233b8 	.word	0x080233b8
 801b100:	200090a0 	.word	0x200090a0
 801b104:	200090a8 	.word	0x200090a8

0801b108 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801b108:	b480      	push	{r7}
 801b10a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b10c:	4b05      	ldr	r3, [pc, #20]	; (801b124 <tcp_trigger_input_pcb_close+0x1c>)
 801b10e:	781b      	ldrb	r3, [r3, #0]
 801b110:	f043 0310 	orr.w	r3, r3, #16
 801b114:	b2da      	uxtb	r2, r3
 801b116:	4b03      	ldr	r3, [pc, #12]	; (801b124 <tcp_trigger_input_pcb_close+0x1c>)
 801b118:	701a      	strb	r2, [r3, #0]
}
 801b11a:	bf00      	nop
 801b11c:	46bd      	mov	sp, r7
 801b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b122:	4770      	bx	lr
 801b124:	200090b9 	.word	0x200090b9

0801b128 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b084      	sub	sp, #16
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	60f8      	str	r0, [r7, #12]
 801b130:	60b9      	str	r1, [r7, #8]
 801b132:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d00a      	beq.n	801b150 <tcp_route+0x28>
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	7a1b      	ldrb	r3, [r3, #8]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d006      	beq.n	801b150 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	7a1b      	ldrb	r3, [r3, #8]
 801b146:	4618      	mov	r0, r3
 801b148:	f7fb f83c 	bl	80161c4 <netif_get_by_index>
 801b14c:	4603      	mov	r3, r0
 801b14e:	e003      	b.n	801b158 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b150:	6878      	ldr	r0, [r7, #4]
 801b152:	f7f8 fd9d 	bl	8013c90 <ip4_route>
 801b156:	4603      	mov	r3, r0
  }
}
 801b158:	4618      	mov	r0, r3
 801b15a:	3710      	adds	r7, #16
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd80      	pop	{r7, pc}

0801b160 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b160:	b590      	push	{r4, r7, lr}
 801b162:	b087      	sub	sp, #28
 801b164:	af00      	add	r7, sp, #0
 801b166:	60f8      	str	r0, [r7, #12]
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	603b      	str	r3, [r7, #0]
 801b16c:	4613      	mov	r3, r2
 801b16e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d105      	bne.n	801b182 <tcp_create_segment+0x22>
 801b176:	4b44      	ldr	r3, [pc, #272]	; (801b288 <tcp_create_segment+0x128>)
 801b178:	22a3      	movs	r2, #163	; 0xa3
 801b17a:	4944      	ldr	r1, [pc, #272]	; (801b28c <tcp_create_segment+0x12c>)
 801b17c:	4844      	ldr	r0, [pc, #272]	; (801b290 <tcp_create_segment+0x130>)
 801b17e:	f003 fe05 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d105      	bne.n	801b194 <tcp_create_segment+0x34>
 801b188:	4b3f      	ldr	r3, [pc, #252]	; (801b288 <tcp_create_segment+0x128>)
 801b18a:	22a4      	movs	r2, #164	; 0xa4
 801b18c:	4941      	ldr	r1, [pc, #260]	; (801b294 <tcp_create_segment+0x134>)
 801b18e:	4840      	ldr	r0, [pc, #256]	; (801b290 <tcp_create_segment+0x130>)
 801b190:	f003 fdfc 	bl	801ed8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b198:	009b      	lsls	r3, r3, #2
 801b19a:	b2db      	uxtb	r3, r3
 801b19c:	f003 0304 	and.w	r3, r3, #4
 801b1a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b1a2:	2003      	movs	r0, #3
 801b1a4:	f7fa fc76 	bl	8015a94 <memp_malloc>
 801b1a8:	6138      	str	r0, [r7, #16]
 801b1aa:	693b      	ldr	r3, [r7, #16]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d104      	bne.n	801b1ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b1b0:	68b8      	ldr	r0, [r7, #8]
 801b1b2:	f7fb fb95 	bl	80168e0 <pbuf_free>
    return NULL;
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	e061      	b.n	801b27e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b1ba:	693b      	ldr	r3, [r7, #16]
 801b1bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b1c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b1c2:	693b      	ldr	r3, [r7, #16]
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b1c8:	693b      	ldr	r3, [r7, #16]
 801b1ca:	68ba      	ldr	r2, [r7, #8]
 801b1cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b1ce:	68bb      	ldr	r3, [r7, #8]
 801b1d0:	891a      	ldrh	r2, [r3, #8]
 801b1d2:	7dfb      	ldrb	r3, [r7, #23]
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d205      	bcs.n	801b1e6 <tcp_create_segment+0x86>
 801b1da:	4b2b      	ldr	r3, [pc, #172]	; (801b288 <tcp_create_segment+0x128>)
 801b1dc:	22b0      	movs	r2, #176	; 0xb0
 801b1de:	492e      	ldr	r1, [pc, #184]	; (801b298 <tcp_create_segment+0x138>)
 801b1e0:	482b      	ldr	r0, [pc, #172]	; (801b290 <tcp_create_segment+0x130>)
 801b1e2:	f003 fdd3 	bl	801ed8c <iprintf>
  seg->len = p->tot_len - optlen;
 801b1e6:	68bb      	ldr	r3, [r7, #8]
 801b1e8:	891a      	ldrh	r2, [r3, #8]
 801b1ea:	7dfb      	ldrb	r3, [r7, #23]
 801b1ec:	b29b      	uxth	r3, r3
 801b1ee:	1ad3      	subs	r3, r2, r3
 801b1f0:	b29a      	uxth	r2, r3
 801b1f2:	693b      	ldr	r3, [r7, #16]
 801b1f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b1f6:	2114      	movs	r1, #20
 801b1f8:	68b8      	ldr	r0, [r7, #8]
 801b1fa:	f7fb fadb 	bl	80167b4 <pbuf_add_header>
 801b1fe:	4603      	mov	r3, r0
 801b200:	2b00      	cmp	r3, #0
 801b202:	d004      	beq.n	801b20e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b204:	6938      	ldr	r0, [r7, #16]
 801b206:	f7fd f802 	bl	801820e <tcp_seg_free>
    return NULL;
 801b20a:	2300      	movs	r3, #0
 801b20c:	e037      	b.n	801b27e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	685b      	ldr	r3, [r3, #4]
 801b212:	685a      	ldr	r2, [r3, #4]
 801b214:	693b      	ldr	r3, [r7, #16]
 801b216:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	8ada      	ldrh	r2, [r3, #22]
 801b21c:	693b      	ldr	r3, [r7, #16]
 801b21e:	68dc      	ldr	r4, [r3, #12]
 801b220:	4610      	mov	r0, r2
 801b222:	f7f9 fef5 	bl	8015010 <lwip_htons>
 801b226:	4603      	mov	r3, r0
 801b228:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	8b1a      	ldrh	r2, [r3, #24]
 801b22e:	693b      	ldr	r3, [r7, #16]
 801b230:	68dc      	ldr	r4, [r3, #12]
 801b232:	4610      	mov	r0, r2
 801b234:	f7f9 feec 	bl	8015010 <lwip_htons>
 801b238:	4603      	mov	r3, r0
 801b23a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	68dc      	ldr	r4, [r3, #12]
 801b240:	6838      	ldr	r0, [r7, #0]
 801b242:	f7f9 fefa 	bl	801503a <lwip_htonl>
 801b246:	4603      	mov	r3, r0
 801b248:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b24a:	7dfb      	ldrb	r3, [r7, #23]
 801b24c:	089b      	lsrs	r3, r3, #2
 801b24e:	b2db      	uxtb	r3, r3
 801b250:	b29b      	uxth	r3, r3
 801b252:	3305      	adds	r3, #5
 801b254:	b29b      	uxth	r3, r3
 801b256:	031b      	lsls	r3, r3, #12
 801b258:	b29a      	uxth	r2, r3
 801b25a:	79fb      	ldrb	r3, [r7, #7]
 801b25c:	b29b      	uxth	r3, r3
 801b25e:	4313      	orrs	r3, r2
 801b260:	b29a      	uxth	r2, r3
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	68dc      	ldr	r4, [r3, #12]
 801b266:	4610      	mov	r0, r2
 801b268:	f7f9 fed2 	bl	8015010 <lwip_htons>
 801b26c:	4603      	mov	r3, r0
 801b26e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	68db      	ldr	r3, [r3, #12]
 801b274:	2200      	movs	r2, #0
 801b276:	749a      	strb	r2, [r3, #18]
 801b278:	2200      	movs	r2, #0
 801b27a:	74da      	strb	r2, [r3, #19]
  return seg;
 801b27c:	693b      	ldr	r3, [r7, #16]
}
 801b27e:	4618      	mov	r0, r3
 801b280:	371c      	adds	r7, #28
 801b282:	46bd      	mov	sp, r7
 801b284:	bd90      	pop	{r4, r7, pc}
 801b286:	bf00      	nop
 801b288:	080237ec 	.word	0x080237ec
 801b28c:	08023888 	.word	0x08023888
 801b290:	080238a8 	.word	0x080238a8
 801b294:	080238d0 	.word	0x080238d0
 801b298:	080238f4 	.word	0x080238f4

0801b29c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b086      	sub	sp, #24
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	607b      	str	r3, [r7, #4]
 801b2a4:	4603      	mov	r3, r0
 801b2a6:	73fb      	strb	r3, [r7, #15]
 801b2a8:	460b      	mov	r3, r1
 801b2aa:	81bb      	strh	r3, [r7, #12]
 801b2ac:	4613      	mov	r3, r2
 801b2ae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b2b0:	89bb      	ldrh	r3, [r7, #12]
 801b2b2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d105      	bne.n	801b2c6 <tcp_pbuf_prealloc+0x2a>
 801b2ba:	4b30      	ldr	r3, [pc, #192]	; (801b37c <tcp_pbuf_prealloc+0xe0>)
 801b2bc:	22e8      	movs	r2, #232	; 0xe8
 801b2be:	4930      	ldr	r1, [pc, #192]	; (801b380 <tcp_pbuf_prealloc+0xe4>)
 801b2c0:	4830      	ldr	r0, [pc, #192]	; (801b384 <tcp_pbuf_prealloc+0xe8>)
 801b2c2:	f003 fd63 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b2c6:	6a3b      	ldr	r3, [r7, #32]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d105      	bne.n	801b2d8 <tcp_pbuf_prealloc+0x3c>
 801b2cc:	4b2b      	ldr	r3, [pc, #172]	; (801b37c <tcp_pbuf_prealloc+0xe0>)
 801b2ce:	22e9      	movs	r2, #233	; 0xe9
 801b2d0:	492d      	ldr	r1, [pc, #180]	; (801b388 <tcp_pbuf_prealloc+0xec>)
 801b2d2:	482c      	ldr	r0, [pc, #176]	; (801b384 <tcp_pbuf_prealloc+0xe8>)
 801b2d4:	f003 fd5a 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b2d8:	89ba      	ldrh	r2, [r7, #12]
 801b2da:	897b      	ldrh	r3, [r7, #10]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d221      	bcs.n	801b324 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b2e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b2e4:	f003 0302 	and.w	r3, r3, #2
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d111      	bne.n	801b310 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801b2ec:	6a3b      	ldr	r3, [r7, #32]
 801b2ee:	8b5b      	ldrh	r3, [r3, #26]
 801b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d115      	bne.n	801b324 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801b2f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d007      	beq.n	801b310 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801b300:	6a3b      	ldr	r3, [r7, #32]
 801b302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801b304:	2b00      	cmp	r3, #0
 801b306:	d103      	bne.n	801b310 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801b308:	6a3b      	ldr	r3, [r7, #32]
 801b30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d009      	beq.n	801b324 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b310:	89bb      	ldrh	r3, [r7, #12]
 801b312:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801b316:	f023 0203 	bic.w	r2, r3, #3
 801b31a:	897b      	ldrh	r3, [r7, #10]
 801b31c:	4293      	cmp	r3, r2
 801b31e:	bf28      	it	cs
 801b320:	4613      	movcs	r3, r2
 801b322:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b324:	8af9      	ldrh	r1, [r7, #22]
 801b326:	7bfb      	ldrb	r3, [r7, #15]
 801b328:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b32c:	4618      	mov	r0, r3
 801b32e:	f7fa fff3 	bl	8016318 <pbuf_alloc>
 801b332:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b334:	693b      	ldr	r3, [r7, #16]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d101      	bne.n	801b33e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801b33a:	2300      	movs	r3, #0
 801b33c:	e019      	b.n	801b372 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d006      	beq.n	801b354 <tcp_pbuf_prealloc+0xb8>
 801b346:	4b0d      	ldr	r3, [pc, #52]	; (801b37c <tcp_pbuf_prealloc+0xe0>)
 801b348:	f240 120b 	movw	r2, #267	; 0x10b
 801b34c:	490f      	ldr	r1, [pc, #60]	; (801b38c <tcp_pbuf_prealloc+0xf0>)
 801b34e:	480d      	ldr	r0, [pc, #52]	; (801b384 <tcp_pbuf_prealloc+0xe8>)
 801b350:	f003 fd1c 	bl	801ed8c <iprintf>
  *oversize = p->len - length;
 801b354:	693b      	ldr	r3, [r7, #16]
 801b356:	895a      	ldrh	r2, [r3, #10]
 801b358:	89bb      	ldrh	r3, [r7, #12]
 801b35a:	1ad3      	subs	r3, r2, r3
 801b35c:	b29a      	uxth	r2, r3
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801b362:	693b      	ldr	r3, [r7, #16]
 801b364:	89ba      	ldrh	r2, [r7, #12]
 801b366:	811a      	strh	r2, [r3, #8]
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	891a      	ldrh	r2, [r3, #8]
 801b36c:	693b      	ldr	r3, [r7, #16]
 801b36e:	815a      	strh	r2, [r3, #10]
  return p;
 801b370:	693b      	ldr	r3, [r7, #16]
}
 801b372:	4618      	mov	r0, r3
 801b374:	3718      	adds	r7, #24
 801b376:	46bd      	mov	sp, r7
 801b378:	bd80      	pop	{r7, pc}
 801b37a:	bf00      	nop
 801b37c:	080237ec 	.word	0x080237ec
 801b380:	0802390c 	.word	0x0802390c
 801b384:	080238a8 	.word	0x080238a8
 801b388:	08023930 	.word	0x08023930
 801b38c:	08023950 	.word	0x08023950

0801b390 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b082      	sub	sp, #8
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	460b      	mov	r3, r1
 801b39a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d106      	bne.n	801b3b0 <tcp_write_checks+0x20>
 801b3a2:	4b33      	ldr	r3, [pc, #204]	; (801b470 <tcp_write_checks+0xe0>)
 801b3a4:	f240 1233 	movw	r2, #307	; 0x133
 801b3a8:	4932      	ldr	r1, [pc, #200]	; (801b474 <tcp_write_checks+0xe4>)
 801b3aa:	4833      	ldr	r0, [pc, #204]	; (801b478 <tcp_write_checks+0xe8>)
 801b3ac:	f003 fcee 	bl	801ed8c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	7d1b      	ldrb	r3, [r3, #20]
 801b3b4:	2b04      	cmp	r3, #4
 801b3b6:	d00e      	beq.n	801b3d6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b3bc:	2b07      	cmp	r3, #7
 801b3be:	d00a      	beq.n	801b3d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b3c4:	2b02      	cmp	r3, #2
 801b3c6:	d006      	beq.n	801b3d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b3cc:	2b03      	cmp	r3, #3
 801b3ce:	d002      	beq.n	801b3d6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b3d0:	f06f 030a 	mvn.w	r3, #10
 801b3d4:	e048      	b.n	801b468 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b3d6:	887b      	ldrh	r3, [r7, #2]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d101      	bne.n	801b3e0 <tcp_write_checks+0x50>
    return ERR_OK;
 801b3dc:	2300      	movs	r3, #0
 801b3de:	e043      	b.n	801b468 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b3e6:	887a      	ldrh	r2, [r7, #2]
 801b3e8:	429a      	cmp	r2, r3
 801b3ea:	d909      	bls.n	801b400 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	8b5b      	ldrh	r3, [r3, #26]
 801b3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b3f4:	b29a      	uxth	r2, r3
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b3fe:	e033      	b.n	801b468 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b406:	2b0f      	cmp	r3, #15
 801b408:	d909      	bls.n	801b41e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	8b5b      	ldrh	r3, [r3, #26]
 801b40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b412:	b29a      	uxth	r2, r3
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b41c:	e024      	b.n	801b468 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b424:	2b00      	cmp	r3, #0
 801b426:	d00f      	beq.n	801b448 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d11a      	bne.n	801b466 <tcp_write_checks+0xd6>
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b434:	2b00      	cmp	r3, #0
 801b436:	d116      	bne.n	801b466 <tcp_write_checks+0xd6>
 801b438:	4b0d      	ldr	r3, [pc, #52]	; (801b470 <tcp_write_checks+0xe0>)
 801b43a:	f240 1255 	movw	r2, #341	; 0x155
 801b43e:	490f      	ldr	r1, [pc, #60]	; (801b47c <tcp_write_checks+0xec>)
 801b440:	480d      	ldr	r0, [pc, #52]	; (801b478 <tcp_write_checks+0xe8>)
 801b442:	f003 fca3 	bl	801ed8c <iprintf>
 801b446:	e00e      	b.n	801b466 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d103      	bne.n	801b458 <tcp_write_checks+0xc8>
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b454:	2b00      	cmp	r3, #0
 801b456:	d006      	beq.n	801b466 <tcp_write_checks+0xd6>
 801b458:	4b05      	ldr	r3, [pc, #20]	; (801b470 <tcp_write_checks+0xe0>)
 801b45a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b45e:	4908      	ldr	r1, [pc, #32]	; (801b480 <tcp_write_checks+0xf0>)
 801b460:	4805      	ldr	r0, [pc, #20]	; (801b478 <tcp_write_checks+0xe8>)
 801b462:	f003 fc93 	bl	801ed8c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b466:	2300      	movs	r3, #0
}
 801b468:	4618      	mov	r0, r3
 801b46a:	3708      	adds	r7, #8
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}
 801b470:	080237ec 	.word	0x080237ec
 801b474:	08023964 	.word	0x08023964
 801b478:	080238a8 	.word	0x080238a8
 801b47c:	08023984 	.word	0x08023984
 801b480:	080239c0 	.word	0x080239c0

0801b484 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801b484:	b590      	push	{r4, r7, lr}
 801b486:	b09b      	sub	sp, #108	; 0x6c
 801b488:	af04      	add	r7, sp, #16
 801b48a:	60f8      	str	r0, [r7, #12]
 801b48c:	60b9      	str	r1, [r7, #8]
 801b48e:	4611      	mov	r1, r2
 801b490:	461a      	mov	r2, r3
 801b492:	460b      	mov	r3, r1
 801b494:	80fb      	strh	r3, [r7, #6]
 801b496:	4613      	mov	r3, r2
 801b498:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801b49a:	2300      	movs	r3, #0
 801b49c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	653b      	str	r3, [r7, #80]	; 0x50
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	64bb      	str	r3, [r7, #72]	; 0x48
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801b4be:	2300      	movs	r3, #0
 801b4c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d109      	bne.n	801b4e0 <tcp_write+0x5c>
 801b4cc:	4ba4      	ldr	r3, [pc, #656]	; (801b760 <tcp_write+0x2dc>)
 801b4ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b4d2:	49a4      	ldr	r1, [pc, #656]	; (801b764 <tcp_write+0x2e0>)
 801b4d4:	48a4      	ldr	r0, [pc, #656]	; (801b768 <tcp_write+0x2e4>)
 801b4d6:	f003 fc59 	bl	801ed8c <iprintf>
 801b4da:	f06f 030f 	mvn.w	r3, #15
 801b4de:	e32a      	b.n	801bb36 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801b4e6:	085b      	lsrs	r3, r3, #1
 801b4e8:	b29a      	uxth	r2, r3
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	bf28      	it	cs
 801b4f2:	4613      	movcs	r3, r2
 801b4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801b4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d102      	bne.n	801b502 <tcp_write+0x7e>
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b500:	e000      	b.n	801b504 <tcp_write+0x80>
 801b502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b504:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d109      	bne.n	801b520 <tcp_write+0x9c>
 801b50c:	4b94      	ldr	r3, [pc, #592]	; (801b760 <tcp_write+0x2dc>)
 801b50e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b512:	4996      	ldr	r1, [pc, #600]	; (801b76c <tcp_write+0x2e8>)
 801b514:	4894      	ldr	r0, [pc, #592]	; (801b768 <tcp_write+0x2e4>)
 801b516:	f003 fc39 	bl	801ed8c <iprintf>
 801b51a:	f06f 030f 	mvn.w	r3, #15
 801b51e:	e30a      	b.n	801bb36 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801b520:	88fb      	ldrh	r3, [r7, #6]
 801b522:	4619      	mov	r1, r3
 801b524:	68f8      	ldr	r0, [r7, #12]
 801b526:	f7ff ff33 	bl	801b390 <tcp_write_checks>
 801b52a:	4603      	mov	r3, r0
 801b52c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801b530:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b534:	2b00      	cmp	r3, #0
 801b536:	d002      	beq.n	801b53e <tcp_write+0xba>
    return err;
 801b538:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b53c:	e2fb      	b.n	801bb36 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b544:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b548:	2300      	movs	r3, #0
 801b54a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b552:	2b00      	cmp	r3, #0
 801b554:	f000 80f6 	beq.w	801b744 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b55c:	653b      	str	r3, [r7, #80]	; 0x50
 801b55e:	e002      	b.n	801b566 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801b560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d1f8      	bne.n	801b560 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b570:	7a9b      	ldrb	r3, [r3, #10]
 801b572:	009b      	lsls	r3, r3, #2
 801b574:	b29b      	uxth	r3, r3
 801b576:	f003 0304 	and.w	r3, r3, #4
 801b57a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b57c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b580:	891b      	ldrh	r3, [r3, #8]
 801b582:	4619      	mov	r1, r3
 801b584:	8c3b      	ldrh	r3, [r7, #32]
 801b586:	440b      	add	r3, r1
 801b588:	429a      	cmp	r2, r3
 801b58a:	da06      	bge.n	801b59a <tcp_write+0x116>
 801b58c:	4b74      	ldr	r3, [pc, #464]	; (801b760 <tcp_write+0x2dc>)
 801b58e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b592:	4977      	ldr	r1, [pc, #476]	; (801b770 <tcp_write+0x2ec>)
 801b594:	4874      	ldr	r0, [pc, #464]	; (801b768 <tcp_write+0x2e4>)
 801b596:	f003 fbf9 	bl	801ed8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b59c:	891a      	ldrh	r2, [r3, #8]
 801b59e:	8c3b      	ldrh	r3, [r7, #32]
 801b5a0:	4413      	add	r3, r2
 801b5a2:	b29b      	uxth	r3, r3
 801b5a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b5a6:	1ad3      	subs	r3, r2, r3
 801b5a8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b5b0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801b5b2:	8a7b      	ldrh	r3, [r7, #18]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d026      	beq.n	801b606 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b5b8:	8a7b      	ldrh	r3, [r7, #18]
 801b5ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d206      	bcs.n	801b5ce <tcp_write+0x14a>
 801b5c0:	4b67      	ldr	r3, [pc, #412]	; (801b760 <tcp_write+0x2dc>)
 801b5c2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b5c6:	496b      	ldr	r1, [pc, #428]	; (801b774 <tcp_write+0x2f0>)
 801b5c8:	4867      	ldr	r0, [pc, #412]	; (801b768 <tcp_write+0x2e4>)
 801b5ca:	f003 fbdf 	bl	801ed8c <iprintf>
      seg = last_unsent;
 801b5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b5d2:	8a7b      	ldrh	r3, [r7, #18]
 801b5d4:	88fa      	ldrh	r2, [r7, #6]
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	bf28      	it	cs
 801b5da:	4613      	movcs	r3, r2
 801b5dc:	b29b      	uxth	r3, r3
 801b5de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b5e0:	4293      	cmp	r3, r2
 801b5e2:	bf28      	it	cs
 801b5e4:	4613      	movcs	r3, r2
 801b5e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801b5e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b5ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b5ee:	4413      	add	r3, r2
 801b5f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801b5f4:	8a7a      	ldrh	r2, [r7, #18]
 801b5f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b5f8:	1ad3      	subs	r3, r2, r3
 801b5fa:	b29b      	uxth	r3, r3
 801b5fc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801b5fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b600:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b602:	1ad3      	subs	r3, r2, r3
 801b604:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b606:	8a7b      	ldrh	r3, [r7, #18]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d00b      	beq.n	801b624 <tcp_write+0x1a0>
 801b60c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b610:	88fb      	ldrh	r3, [r7, #6]
 801b612:	429a      	cmp	r2, r3
 801b614:	d006      	beq.n	801b624 <tcp_write+0x1a0>
 801b616:	4b52      	ldr	r3, [pc, #328]	; (801b760 <tcp_write+0x2dc>)
 801b618:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b61c:	4956      	ldr	r1, [pc, #344]	; (801b778 <tcp_write+0x2f4>)
 801b61e:	4852      	ldr	r0, [pc, #328]	; (801b768 <tcp_write+0x2e4>)
 801b620:	f003 fbb4 	bl	801ed8c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b624:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b628:	88fb      	ldrh	r3, [r7, #6]
 801b62a:	429a      	cmp	r2, r3
 801b62c:	f080 8167 	bcs.w	801b8fe <tcp_write+0x47a>
 801b630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b632:	2b00      	cmp	r3, #0
 801b634:	f000 8163 	beq.w	801b8fe <tcp_write+0x47a>
 801b638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b63a:	891b      	ldrh	r3, [r3, #8]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	f000 815e 	beq.w	801b8fe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b642:	88fa      	ldrh	r2, [r7, #6]
 801b644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b648:	1ad2      	subs	r2, r2, r3
 801b64a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b64c:	4293      	cmp	r3, r2
 801b64e:	bfa8      	it	ge
 801b650:	4613      	movge	r3, r2
 801b652:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801b654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b656:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b658:	797b      	ldrb	r3, [r7, #5]
 801b65a:	f003 0301 	and.w	r3, r3, #1
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d027      	beq.n	801b6b2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b662:	f107 0012 	add.w	r0, r7, #18
 801b666:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b668:	8bf9      	ldrh	r1, [r7, #30]
 801b66a:	2301      	movs	r3, #1
 801b66c:	9302      	str	r3, [sp, #8]
 801b66e:	797b      	ldrb	r3, [r7, #5]
 801b670:	9301      	str	r3, [sp, #4]
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	9300      	str	r3, [sp, #0]
 801b676:	4603      	mov	r3, r0
 801b678:	2000      	movs	r0, #0
 801b67a:	f7ff fe0f 	bl	801b29c <tcp_pbuf_prealloc>
 801b67e:	6578      	str	r0, [r7, #84]	; 0x54
 801b680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b682:	2b00      	cmp	r3, #0
 801b684:	f000 8225 	beq.w	801bad2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b68a:	6858      	ldr	r0, [r3, #4]
 801b68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b690:	68ba      	ldr	r2, [r7, #8]
 801b692:	4413      	add	r3, r2
 801b694:	8bfa      	ldrh	r2, [r7, #30]
 801b696:	4619      	mov	r1, r3
 801b698:	f003 fb48 	bl	801ed2c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801b69c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b69e:	f7fb f9ad 	bl	80169fc <pbuf_clen>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	461a      	mov	r2, r3
 801b6a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b6aa:	4413      	add	r3, r2
 801b6ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b6b0:	e041      	b.n	801b736 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	637b      	str	r3, [r7, #52]	; 0x34
 801b6b8:	e002      	b.n	801b6c0 <tcp_write+0x23c>
 801b6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	637b      	str	r3, [r7, #52]	; 0x34
 801b6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d1f8      	bne.n	801b6ba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ca:	7b1b      	ldrb	r3, [r3, #12]
 801b6cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d115      	bne.n	801b700 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6d6:	685b      	ldr	r3, [r3, #4]
 801b6d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b6da:	8952      	ldrh	r2, [r2, #10]
 801b6dc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b6de:	68ba      	ldr	r2, [r7, #8]
 801b6e0:	429a      	cmp	r2, r3
 801b6e2:	d10d      	bne.n	801b700 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b6e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d006      	beq.n	801b6fa <tcp_write+0x276>
 801b6ec:	4b1c      	ldr	r3, [pc, #112]	; (801b760 <tcp_write+0x2dc>)
 801b6ee:	f240 2231 	movw	r2, #561	; 0x231
 801b6f2:	4922      	ldr	r1, [pc, #136]	; (801b77c <tcp_write+0x2f8>)
 801b6f4:	481c      	ldr	r0, [pc, #112]	; (801b768 <tcp_write+0x2e4>)
 801b6f6:	f003 fb49 	bl	801ed8c <iprintf>
          extendlen = seglen;
 801b6fa:	8bfb      	ldrh	r3, [r7, #30]
 801b6fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801b6fe:	e01a      	b.n	801b736 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b700:	8bfb      	ldrh	r3, [r7, #30]
 801b702:	2201      	movs	r2, #1
 801b704:	4619      	mov	r1, r3
 801b706:	2000      	movs	r0, #0
 801b708:	f7fa fe06 	bl	8016318 <pbuf_alloc>
 801b70c:	6578      	str	r0, [r7, #84]	; 0x54
 801b70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b710:	2b00      	cmp	r3, #0
 801b712:	f000 81e0 	beq.w	801bad6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b716:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b71a:	68ba      	ldr	r2, [r7, #8]
 801b71c:	441a      	add	r2, r3
 801b71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b720:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801b722:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b724:	f7fb f96a 	bl	80169fc <pbuf_clen>
 801b728:	4603      	mov	r3, r0
 801b72a:	461a      	mov	r2, r3
 801b72c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b730:	4413      	add	r3, r2
 801b732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801b736:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b73a:	8bfb      	ldrh	r3, [r7, #30]
 801b73c:	4413      	add	r3, r2
 801b73e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b742:	e0dc      	b.n	801b8fe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	f000 80d7 	beq.w	801b8fe <tcp_write+0x47a>
 801b750:	4b03      	ldr	r3, [pc, #12]	; (801b760 <tcp_write+0x2dc>)
 801b752:	f240 224a 	movw	r2, #586	; 0x24a
 801b756:	490a      	ldr	r1, [pc, #40]	; (801b780 <tcp_write+0x2fc>)
 801b758:	4803      	ldr	r0, [pc, #12]	; (801b768 <tcp_write+0x2e4>)
 801b75a:	f003 fb17 	bl	801ed8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801b75e:	e0ce      	b.n	801b8fe <tcp_write+0x47a>
 801b760:	080237ec 	.word	0x080237ec
 801b764:	080239f4 	.word	0x080239f4
 801b768:	080238a8 	.word	0x080238a8
 801b76c:	08023a0c 	.word	0x08023a0c
 801b770:	08023a40 	.word	0x08023a40
 801b774:	08023a58 	.word	0x08023a58
 801b778:	08023a78 	.word	0x08023a78
 801b77c:	08023a98 	.word	0x08023a98
 801b780:	08023ac4 	.word	0x08023ac4
    struct pbuf *p;
    u16_t left = len - pos;
 801b784:	88fa      	ldrh	r2, [r7, #6]
 801b786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b78a:	1ad3      	subs	r3, r2, r3
 801b78c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801b78e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b792:	b29b      	uxth	r3, r3
 801b794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b796:	1ad3      	subs	r3, r2, r3
 801b798:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801b79a:	8b7a      	ldrh	r2, [r7, #26]
 801b79c:	8bbb      	ldrh	r3, [r7, #28]
 801b79e:	4293      	cmp	r3, r2
 801b7a0:	bf28      	it	cs
 801b7a2:	4613      	movcs	r3, r2
 801b7a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b7a6:	797b      	ldrb	r3, [r7, #5]
 801b7a8:	f003 0301 	and.w	r3, r3, #1
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d036      	beq.n	801b81e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b7b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b7b4:	b29a      	uxth	r2, r3
 801b7b6:	8b3b      	ldrh	r3, [r7, #24]
 801b7b8:	4413      	add	r3, r2
 801b7ba:	b299      	uxth	r1, r3
 801b7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	bf0c      	ite	eq
 801b7c2:	2301      	moveq	r3, #1
 801b7c4:	2300      	movne	r3, #0
 801b7c6:	b2db      	uxtb	r3, r3
 801b7c8:	f107 0012 	add.w	r0, r7, #18
 801b7cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b7ce:	9302      	str	r3, [sp, #8]
 801b7d0:	797b      	ldrb	r3, [r7, #5]
 801b7d2:	9301      	str	r3, [sp, #4]
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	9300      	str	r3, [sp, #0]
 801b7d8:	4603      	mov	r3, r0
 801b7da:	2036      	movs	r0, #54	; 0x36
 801b7dc:	f7ff fd5e 	bl	801b29c <tcp_pbuf_prealloc>
 801b7e0:	6338      	str	r0, [r7, #48]	; 0x30
 801b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	f000 8178 	beq.w	801bada <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ec:	895b      	ldrh	r3, [r3, #10]
 801b7ee:	8b3a      	ldrh	r2, [r7, #24]
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	d906      	bls.n	801b802 <tcp_write+0x37e>
 801b7f4:	4b8c      	ldr	r3, [pc, #560]	; (801ba28 <tcp_write+0x5a4>)
 801b7f6:	f240 2266 	movw	r2, #614	; 0x266
 801b7fa:	498c      	ldr	r1, [pc, #560]	; (801ba2c <tcp_write+0x5a8>)
 801b7fc:	488c      	ldr	r0, [pc, #560]	; (801ba30 <tcp_write+0x5ac>)
 801b7fe:	f003 fac5 	bl	801ed8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b804:	685a      	ldr	r2, [r3, #4]
 801b806:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b80a:	18d0      	adds	r0, r2, r3
 801b80c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b810:	68ba      	ldr	r2, [r7, #8]
 801b812:	4413      	add	r3, r2
 801b814:	8b3a      	ldrh	r2, [r7, #24]
 801b816:	4619      	mov	r1, r3
 801b818:	f003 fa88 	bl	801ed2c <memcpy>
 801b81c:	e02f      	b.n	801b87e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b81e:	8a7b      	ldrh	r3, [r7, #18]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d006      	beq.n	801b832 <tcp_write+0x3ae>
 801b824:	4b80      	ldr	r3, [pc, #512]	; (801ba28 <tcp_write+0x5a4>)
 801b826:	f240 2271 	movw	r2, #625	; 0x271
 801b82a:	4982      	ldr	r1, [pc, #520]	; (801ba34 <tcp_write+0x5b0>)
 801b82c:	4880      	ldr	r0, [pc, #512]	; (801ba30 <tcp_write+0x5ac>)
 801b82e:	f003 faad 	bl	801ed8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b832:	8b3b      	ldrh	r3, [r7, #24]
 801b834:	2201      	movs	r2, #1
 801b836:	4619      	mov	r1, r3
 801b838:	2036      	movs	r0, #54	; 0x36
 801b83a:	f7fa fd6d 	bl	8016318 <pbuf_alloc>
 801b83e:	6178      	str	r0, [r7, #20]
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	2b00      	cmp	r3, #0
 801b844:	f000 814b 	beq.w	801bade <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b84c:	68ba      	ldr	r2, [r7, #8]
 801b84e:	441a      	add	r2, r3
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b858:	b29b      	uxth	r3, r3
 801b85a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b85e:	4619      	mov	r1, r3
 801b860:	2036      	movs	r0, #54	; 0x36
 801b862:	f7fa fd59 	bl	8016318 <pbuf_alloc>
 801b866:	6338      	str	r0, [r7, #48]	; 0x30
 801b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d103      	bne.n	801b876 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801b86e:	6978      	ldr	r0, [r7, #20]
 801b870:	f7fb f836 	bl	80168e0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801b874:	e136      	b.n	801bae4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801b876:	6979      	ldr	r1, [r7, #20]
 801b878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b87a:	f7fb f8ff 	bl	8016a7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801b87e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b880:	f7fb f8bc 	bl	80169fc <pbuf_clen>
 801b884:	4603      	mov	r3, r0
 801b886:	461a      	mov	r2, r3
 801b888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b88c:	4413      	add	r3, r2
 801b88e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801b892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b896:	2b10      	cmp	r3, #16
 801b898:	d903      	bls.n	801b8a2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801b89a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b89c:	f7fb f820 	bl	80168e0 <pbuf_free>
      goto memerr;
 801b8a0:	e120      	b.n	801bae4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b8a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b8aa:	441a      	add	r2, r3
 801b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	4613      	mov	r3, r2
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b8b8:	68f8      	ldr	r0, [r7, #12]
 801b8ba:	f7ff fc51 	bl	801b160 <tcp_create_segment>
 801b8be:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	f000 810d 	beq.w	801bae2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801b8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d102      	bne.n	801b8d4 <tcp_write+0x450>
      queue = seg;
 801b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8d0:	647b      	str	r3, [r7, #68]	; 0x44
 801b8d2:	e00c      	b.n	801b8ee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d106      	bne.n	801b8e8 <tcp_write+0x464>
 801b8da:	4b53      	ldr	r3, [pc, #332]	; (801ba28 <tcp_write+0x5a4>)
 801b8dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b8e0:	4955      	ldr	r1, [pc, #340]	; (801ba38 <tcp_write+0x5b4>)
 801b8e2:	4853      	ldr	r0, [pc, #332]	; (801ba30 <tcp_write+0x5ac>)
 801b8e4:	f003 fa52 	bl	801ed8c <iprintf>
      prev_seg->next = seg;
 801b8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b8ec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801b8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8f0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801b8f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b8f6:	8b3b      	ldrh	r3, [r7, #24]
 801b8f8:	4413      	add	r3, r2
 801b8fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801b8fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b902:	88fb      	ldrh	r3, [r7, #6]
 801b904:	429a      	cmp	r2, r3
 801b906:	f4ff af3d 	bcc.w	801b784 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801b90a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d02c      	beq.n	801b96a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801b910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b912:	685b      	ldr	r3, [r3, #4]
 801b914:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b916:	e01e      	b.n	801b956 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b91a:	891a      	ldrh	r2, [r3, #8]
 801b91c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b91e:	4413      	add	r3, r2
 801b920:	b29a      	uxth	r2, r3
 801b922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b924:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d110      	bne.n	801b950 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b934:	8952      	ldrh	r2, [r2, #10]
 801b936:	4413      	add	r3, r2
 801b938:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b93a:	68b9      	ldr	r1, [r7, #8]
 801b93c:	4618      	mov	r0, r3
 801b93e:	f003 f9f5 	bl	801ed2c <memcpy>
        p->len += oversize_used;
 801b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b944:	895a      	ldrh	r2, [r3, #10]
 801b946:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b948:	4413      	add	r3, r2
 801b94a:	b29a      	uxth	r2, r3
 801b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b94e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d1dd      	bne.n	801b918 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801b95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b95e:	891a      	ldrh	r2, [r3, #8]
 801b960:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b962:	4413      	add	r3, r2
 801b964:	b29a      	uxth	r2, r3
 801b966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b968:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b96a:	8a7a      	ldrh	r2, [r7, #18]
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b974:	2b00      	cmp	r3, #0
 801b976:	d018      	beq.n	801b9aa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d106      	bne.n	801b98c <tcp_write+0x508>
 801b97e:	4b2a      	ldr	r3, [pc, #168]	; (801ba28 <tcp_write+0x5a4>)
 801b980:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b984:	492d      	ldr	r1, [pc, #180]	; (801ba3c <tcp_write+0x5b8>)
 801b986:	482a      	ldr	r0, [pc, #168]	; (801ba30 <tcp_write+0x5ac>)
 801b988:	f003 fa00 	bl	801ed8c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b98e:	685b      	ldr	r3, [r3, #4]
 801b990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b992:	4618      	mov	r0, r3
 801b994:	f7fb f872 	bl	8016a7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b99a:	891a      	ldrh	r2, [r3, #8]
 801b99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b99e:	891b      	ldrh	r3, [r3, #8]
 801b9a0:	4413      	add	r3, r2
 801b9a2:	b29a      	uxth	r2, r3
 801b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9a6:	811a      	strh	r2, [r3, #8]
 801b9a8:	e037      	b.n	801ba1a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b9aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d034      	beq.n	801ba1a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d003      	beq.n	801b9be <tcp_write+0x53a>
 801b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9b8:	685b      	ldr	r3, [r3, #4]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d106      	bne.n	801b9cc <tcp_write+0x548>
 801b9be:	4b1a      	ldr	r3, [pc, #104]	; (801ba28 <tcp_write+0x5a4>)
 801b9c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b9c4:	491e      	ldr	r1, [pc, #120]	; (801ba40 <tcp_write+0x5bc>)
 801b9c6:	481a      	ldr	r0, [pc, #104]	; (801ba30 <tcp_write+0x5ac>)
 801b9c8:	f003 f9e0 	bl	801ed8c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9ce:	685b      	ldr	r3, [r3, #4]
 801b9d0:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9d2:	e009      	b.n	801b9e8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9d6:	891a      	ldrh	r2, [r3, #8]
 801b9d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b9da:	4413      	add	r3, r2
 801b9dc:	b29a      	uxth	r2, r3
 801b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9e0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d1f1      	bne.n	801b9d4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9f2:	891a      	ldrh	r2, [r3, #8]
 801b9f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b9f6:	4413      	add	r3, r2
 801b9f8:	b29a      	uxth	r2, r3
 801b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9fc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba00:	895a      	ldrh	r2, [r3, #10]
 801ba02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ba04:	4413      	add	r3, r2
 801ba06:	b29a      	uxth	r2, r3
 801ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba0a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ba0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba0e:	891a      	ldrh	r2, [r3, #8]
 801ba10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ba12:	4413      	add	r3, r2
 801ba14:	b29a      	uxth	r2, r3
 801ba16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba18:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ba1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d111      	bne.n	801ba44 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ba24:	66da      	str	r2, [r3, #108]	; 0x6c
 801ba26:	e010      	b.n	801ba4a <tcp_write+0x5c6>
 801ba28:	080237ec 	.word	0x080237ec
 801ba2c:	08023af4 	.word	0x08023af4
 801ba30:	080238a8 	.word	0x080238a8
 801ba34:	08023b34 	.word	0x08023b34
 801ba38:	08023b44 	.word	0x08023b44
 801ba3c:	08023b58 	.word	0x08023b58
 801ba40:	08023b90 	.word	0x08023b90
  } else {
    last_unsent->next = queue;
 801ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ba48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ba4e:	88fb      	ldrh	r3, [r7, #6]
 801ba50:	441a      	add	r2, r3
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801ba5c:	88fb      	ldrh	r3, [r7, #6]
 801ba5e:	1ad3      	subs	r3, r2, r3
 801ba60:	b29a      	uxth	r2, r3
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ba6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d00e      	beq.n	801ba9a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d10a      	bne.n	801ba9a <tcp_write+0x616>
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d106      	bne.n	801ba9a <tcp_write+0x616>
 801ba8c:	4b2c      	ldr	r3, [pc, #176]	; (801bb40 <tcp_write+0x6bc>)
 801ba8e:	f240 3212 	movw	r2, #786	; 0x312
 801ba92:	492c      	ldr	r1, [pc, #176]	; (801bb44 <tcp_write+0x6c0>)
 801ba94:	482c      	ldr	r0, [pc, #176]	; (801bb48 <tcp_write+0x6c4>)
 801ba96:	f003 f979 	bl	801ed8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801ba9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d016      	beq.n	801bace <tcp_write+0x64a>
 801baa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801baa2:	68db      	ldr	r3, [r3, #12]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d012      	beq.n	801bace <tcp_write+0x64a>
 801baa8:	797b      	ldrb	r3, [r7, #5]
 801baaa:	f003 0302 	and.w	r3, r3, #2
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d10d      	bne.n	801bace <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801bab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	899b      	ldrh	r3, [r3, #12]
 801bab8:	b29c      	uxth	r4, r3
 801baba:	2008      	movs	r0, #8
 801babc:	f7f9 faa8 	bl	8015010 <lwip_htons>
 801bac0:	4603      	mov	r3, r0
 801bac2:	461a      	mov	r2, r3
 801bac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bac6:	68db      	ldr	r3, [r3, #12]
 801bac8:	4322      	orrs	r2, r4
 801baca:	b292      	uxth	r2, r2
 801bacc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801bace:	2300      	movs	r3, #0
 801bad0:	e031      	b.n	801bb36 <tcp_write+0x6b2>
          goto memerr;
 801bad2:	bf00      	nop
 801bad4:	e006      	b.n	801bae4 <tcp_write+0x660>
            goto memerr;
 801bad6:	bf00      	nop
 801bad8:	e004      	b.n	801bae4 <tcp_write+0x660>
        goto memerr;
 801bada:	bf00      	nop
 801badc:	e002      	b.n	801bae4 <tcp_write+0x660>
        goto memerr;
 801bade:	bf00      	nop
 801bae0:	e000      	b.n	801bae4 <tcp_write+0x660>
      goto memerr;
 801bae2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	8b5b      	ldrh	r3, [r3, #26]
 801bae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801baec:	b29a      	uxth	r2, r3
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801baf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d002      	beq.n	801bafe <tcp_write+0x67a>
    pbuf_free(concat_p);
 801baf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bafa:	f7fa fef1 	bl	80168e0 <pbuf_free>
  }
  if (queue != NULL) {
 801bafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d002      	beq.n	801bb0a <tcp_write+0x686>
    tcp_segs_free(queue);
 801bb04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bb06:	f7fc fb6d 	bl	80181e4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d00e      	beq.n	801bb32 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d10a      	bne.n	801bb32 <tcp_write+0x6ae>
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d106      	bne.n	801bb32 <tcp_write+0x6ae>
 801bb24:	4b06      	ldr	r3, [pc, #24]	; (801bb40 <tcp_write+0x6bc>)
 801bb26:	f240 3227 	movw	r2, #807	; 0x327
 801bb2a:	4906      	ldr	r1, [pc, #24]	; (801bb44 <tcp_write+0x6c0>)
 801bb2c:	4806      	ldr	r0, [pc, #24]	; (801bb48 <tcp_write+0x6c4>)
 801bb2e:	f003 f92d 	bl	801ed8c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801bb32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801bb36:	4618      	mov	r0, r3
 801bb38:	375c      	adds	r7, #92	; 0x5c
 801bb3a:	46bd      	mov	sp, r7
 801bb3c:	bd90      	pop	{r4, r7, pc}
 801bb3e:	bf00      	nop
 801bb40:	080237ec 	.word	0x080237ec
 801bb44:	08023bc8 	.word	0x08023bc8
 801bb48:	080238a8 	.word	0x080238a8

0801bb4c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801bb4c:	b590      	push	{r4, r7, lr}
 801bb4e:	b08b      	sub	sp, #44	; 0x2c
 801bb50:	af02      	add	r7, sp, #8
 801bb52:	6078      	str	r0, [r7, #4]
 801bb54:	460b      	mov	r3, r1
 801bb56:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801bb58:	2300      	movs	r3, #0
 801bb5a:	61fb      	str	r3, [r7, #28]
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801bb60:	2300      	movs	r3, #0
 801bb62:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d106      	bne.n	801bb78 <tcp_split_unsent_seg+0x2c>
 801bb6a:	4b95      	ldr	r3, [pc, #596]	; (801bdc0 <tcp_split_unsent_seg+0x274>)
 801bb6c:	f240 324b 	movw	r2, #843	; 0x34b
 801bb70:	4994      	ldr	r1, [pc, #592]	; (801bdc4 <tcp_split_unsent_seg+0x278>)
 801bb72:	4895      	ldr	r0, [pc, #596]	; (801bdc8 <tcp_split_unsent_seg+0x27c>)
 801bb74:	f003 f90a 	bl	801ed8c <iprintf>

  useg = pcb->unsent;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb7c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d102      	bne.n	801bb8a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801bb84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb88:	e116      	b.n	801bdb8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801bb8a:	887b      	ldrh	r3, [r7, #2]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d109      	bne.n	801bba4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801bb90:	4b8b      	ldr	r3, [pc, #556]	; (801bdc0 <tcp_split_unsent_seg+0x274>)
 801bb92:	f240 3253 	movw	r2, #851	; 0x353
 801bb96:	498d      	ldr	r1, [pc, #564]	; (801bdcc <tcp_split_unsent_seg+0x280>)
 801bb98:	488b      	ldr	r0, [pc, #556]	; (801bdc8 <tcp_split_unsent_seg+0x27c>)
 801bb9a:	f003 f8f7 	bl	801ed8c <iprintf>
    return ERR_VAL;
 801bb9e:	f06f 0305 	mvn.w	r3, #5
 801bba2:	e109      	b.n	801bdb8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	891b      	ldrh	r3, [r3, #8]
 801bba8:	887a      	ldrh	r2, [r7, #2]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d301      	bcc.n	801bbb2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801bbae:	2300      	movs	r3, #0
 801bbb0:	e102      	b.n	801bdb8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbb6:	887a      	ldrh	r2, [r7, #2]
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	d906      	bls.n	801bbca <tcp_split_unsent_seg+0x7e>
 801bbbc:	4b80      	ldr	r3, [pc, #512]	; (801bdc0 <tcp_split_unsent_seg+0x274>)
 801bbbe:	f240 325b 	movw	r2, #859	; 0x35b
 801bbc2:	4983      	ldr	r1, [pc, #524]	; (801bdd0 <tcp_split_unsent_seg+0x284>)
 801bbc4:	4880      	ldr	r0, [pc, #512]	; (801bdc8 <tcp_split_unsent_seg+0x27c>)
 801bbc6:	f003 f8e1 	bl	801ed8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	891b      	ldrh	r3, [r3, #8]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d106      	bne.n	801bbe0 <tcp_split_unsent_seg+0x94>
 801bbd2:	4b7b      	ldr	r3, [pc, #492]	; (801bdc0 <tcp_split_unsent_seg+0x274>)
 801bbd4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801bbd8:	497e      	ldr	r1, [pc, #504]	; (801bdd4 <tcp_split_unsent_seg+0x288>)
 801bbda:	487b      	ldr	r0, [pc, #492]	; (801bdc8 <tcp_split_unsent_seg+0x27c>)
 801bbdc:	f003 f8d6 	bl	801ed8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801bbe0:	697b      	ldr	r3, [r7, #20]
 801bbe2:	7a9b      	ldrb	r3, [r3, #10]
 801bbe4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bbe6:	7bfb      	ldrb	r3, [r7, #15]
 801bbe8:	009b      	lsls	r3, r3, #2
 801bbea:	b2db      	uxtb	r3, r3
 801bbec:	f003 0304 	and.w	r3, r3, #4
 801bbf0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	891a      	ldrh	r2, [r3, #8]
 801bbf6:	887b      	ldrh	r3, [r7, #2]
 801bbf8:	1ad3      	subs	r3, r2, r3
 801bbfa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801bbfc:	7bbb      	ldrb	r3, [r7, #14]
 801bbfe:	b29a      	uxth	r2, r3
 801bc00:	89bb      	ldrh	r3, [r7, #12]
 801bc02:	4413      	add	r3, r2
 801bc04:	b29b      	uxth	r3, r3
 801bc06:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bc0a:	4619      	mov	r1, r3
 801bc0c:	2036      	movs	r0, #54	; 0x36
 801bc0e:	f7fa fb83 	bl	8016318 <pbuf_alloc>
 801bc12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bc14:	693b      	ldr	r3, [r7, #16]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	f000 80b7 	beq.w	801bd8a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801bc1c:	697b      	ldr	r3, [r7, #20]
 801bc1e:	685b      	ldr	r3, [r3, #4]
 801bc20:	891a      	ldrh	r2, [r3, #8]
 801bc22:	697b      	ldr	r3, [r7, #20]
 801bc24:	891b      	ldrh	r3, [r3, #8]
 801bc26:	1ad3      	subs	r3, r2, r3
 801bc28:	b29a      	uxth	r2, r3
 801bc2a:	887b      	ldrh	r3, [r7, #2]
 801bc2c:	4413      	add	r3, r2
 801bc2e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	6858      	ldr	r0, [r3, #4]
 801bc34:	693b      	ldr	r3, [r7, #16]
 801bc36:	685a      	ldr	r2, [r3, #4]
 801bc38:	7bbb      	ldrb	r3, [r7, #14]
 801bc3a:	18d1      	adds	r1, r2, r3
 801bc3c:	897b      	ldrh	r3, [r7, #10]
 801bc3e:	89ba      	ldrh	r2, [r7, #12]
 801bc40:	f7fb f854 	bl	8016cec <pbuf_copy_partial>
 801bc44:	4603      	mov	r3, r0
 801bc46:	461a      	mov	r2, r3
 801bc48:	89bb      	ldrh	r3, [r7, #12]
 801bc4a:	4293      	cmp	r3, r2
 801bc4c:	f040 809f 	bne.w	801bd8e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	68db      	ldr	r3, [r3, #12]
 801bc54:	899b      	ldrh	r3, [r3, #12]
 801bc56:	b29b      	uxth	r3, r3
 801bc58:	4618      	mov	r0, r3
 801bc5a:	f7f9 f9d9 	bl	8015010 <lwip_htons>
 801bc5e:	4603      	mov	r3, r0
 801bc60:	b2db      	uxtb	r3, r3
 801bc62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bc66:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801bc68:	2300      	movs	r3, #0
 801bc6a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801bc6c:	7efb      	ldrb	r3, [r7, #27]
 801bc6e:	f003 0308 	and.w	r3, r3, #8
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d007      	beq.n	801bc86 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801bc76:	7efb      	ldrb	r3, [r7, #27]
 801bc78:	f023 0308 	bic.w	r3, r3, #8
 801bc7c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801bc7e:	7ebb      	ldrb	r3, [r7, #26]
 801bc80:	f043 0308 	orr.w	r3, r3, #8
 801bc84:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801bc86:	7efb      	ldrb	r3, [r7, #27]
 801bc88:	f003 0301 	and.w	r3, r3, #1
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d007      	beq.n	801bca0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801bc90:	7efb      	ldrb	r3, [r7, #27]
 801bc92:	f023 0301 	bic.w	r3, r3, #1
 801bc96:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801bc98:	7ebb      	ldrb	r3, [r7, #26]
 801bc9a:	f043 0301 	orr.w	r3, r3, #1
 801bc9e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	68db      	ldr	r3, [r3, #12]
 801bca4:	685b      	ldr	r3, [r3, #4]
 801bca6:	4618      	mov	r0, r3
 801bca8:	f7f9 f9c7 	bl	801503a <lwip_htonl>
 801bcac:	4602      	mov	r2, r0
 801bcae:	887b      	ldrh	r3, [r7, #2]
 801bcb0:	18d1      	adds	r1, r2, r3
 801bcb2:	7eba      	ldrb	r2, [r7, #26]
 801bcb4:	7bfb      	ldrb	r3, [r7, #15]
 801bcb6:	9300      	str	r3, [sp, #0]
 801bcb8:	460b      	mov	r3, r1
 801bcba:	6939      	ldr	r1, [r7, #16]
 801bcbc:	6878      	ldr	r0, [r7, #4]
 801bcbe:	f7ff fa4f 	bl	801b160 <tcp_create_segment>
 801bcc2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d063      	beq.n	801bd92 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	685b      	ldr	r3, [r3, #4]
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7fa fe94 	bl	80169fc <pbuf_clen>
 801bcd4:	4603      	mov	r3, r0
 801bcd6:	461a      	mov	r2, r3
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bcde:	1a9b      	subs	r3, r3, r2
 801bce0:	b29a      	uxth	r2, r3
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801bce8:	697b      	ldr	r3, [r7, #20]
 801bcea:	6858      	ldr	r0, [r3, #4]
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	891a      	ldrh	r2, [r3, #8]
 801bcf2:	89bb      	ldrh	r3, [r7, #12]
 801bcf4:	1ad3      	subs	r3, r2, r3
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	4619      	mov	r1, r3
 801bcfa:	f7fa fc6b 	bl	80165d4 <pbuf_realloc>
  useg->len -= remainder;
 801bcfe:	697b      	ldr	r3, [r7, #20]
 801bd00:	891a      	ldrh	r2, [r3, #8]
 801bd02:	89bb      	ldrh	r3, [r7, #12]
 801bd04:	1ad3      	subs	r3, r2, r3
 801bd06:	b29a      	uxth	r2, r3
 801bd08:	697b      	ldr	r3, [r7, #20]
 801bd0a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	68db      	ldr	r3, [r3, #12]
 801bd10:	899b      	ldrh	r3, [r3, #12]
 801bd12:	b29c      	uxth	r4, r3
 801bd14:	7efb      	ldrb	r3, [r7, #27]
 801bd16:	b29b      	uxth	r3, r3
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f7f9 f979 	bl	8015010 <lwip_htons>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	461a      	mov	r2, r3
 801bd22:	697b      	ldr	r3, [r7, #20]
 801bd24:	68db      	ldr	r3, [r3, #12]
 801bd26:	4322      	orrs	r2, r4
 801bd28:	b292      	uxth	r2, r2
 801bd2a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	685b      	ldr	r3, [r3, #4]
 801bd30:	4618      	mov	r0, r3
 801bd32:	f7fa fe63 	bl	80169fc <pbuf_clen>
 801bd36:	4603      	mov	r3, r0
 801bd38:	461a      	mov	r2, r3
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bd40:	4413      	add	r3, r2
 801bd42:	b29a      	uxth	r2, r3
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bd4a:	69fb      	ldr	r3, [r7, #28]
 801bd4c:	685b      	ldr	r3, [r3, #4]
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7fa fe54 	bl	80169fc <pbuf_clen>
 801bd54:	4603      	mov	r3, r0
 801bd56:	461a      	mov	r2, r3
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bd5e:	4413      	add	r3, r2
 801bd60:	b29a      	uxth	r2, r3
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	681a      	ldr	r2, [r3, #0]
 801bd6c:	69fb      	ldr	r3, [r7, #28]
 801bd6e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	69fa      	ldr	r2, [r7, #28]
 801bd74:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801bd76:	69fb      	ldr	r3, [r7, #28]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d103      	bne.n	801bd86 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2200      	movs	r2, #0
 801bd82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801bd86:	2300      	movs	r3, #0
 801bd88:	e016      	b.n	801bdb8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801bd8a:	bf00      	nop
 801bd8c:	e002      	b.n	801bd94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801bd8e:	bf00      	nop
 801bd90:	e000      	b.n	801bd94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801bd92:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801bd94:	69fb      	ldr	r3, [r7, #28]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d006      	beq.n	801bda8 <tcp_split_unsent_seg+0x25c>
 801bd9a:	4b09      	ldr	r3, [pc, #36]	; (801bdc0 <tcp_split_unsent_seg+0x274>)
 801bd9c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801bda0:	490d      	ldr	r1, [pc, #52]	; (801bdd8 <tcp_split_unsent_seg+0x28c>)
 801bda2:	4809      	ldr	r0, [pc, #36]	; (801bdc8 <tcp_split_unsent_seg+0x27c>)
 801bda4:	f002 fff2 	bl	801ed8c <iprintf>
  if (p != NULL) {
 801bda8:	693b      	ldr	r3, [r7, #16]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d002      	beq.n	801bdb4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801bdae:	6938      	ldr	r0, [r7, #16]
 801bdb0:	f7fa fd96 	bl	80168e0 <pbuf_free>
  }

  return ERR_MEM;
 801bdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801bdb8:	4618      	mov	r0, r3
 801bdba:	3724      	adds	r7, #36	; 0x24
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd90      	pop	{r4, r7, pc}
 801bdc0:	080237ec 	.word	0x080237ec
 801bdc4:	08023be8 	.word	0x08023be8
 801bdc8:	080238a8 	.word	0x080238a8
 801bdcc:	08023c0c 	.word	0x08023c0c
 801bdd0:	08023c30 	.word	0x08023c30
 801bdd4:	08023c40 	.word	0x08023c40
 801bdd8:	08023c50 	.word	0x08023c50

0801bddc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801bddc:	b590      	push	{r4, r7, lr}
 801bdde:	b085      	sub	sp, #20
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d106      	bne.n	801bdf8 <tcp_send_fin+0x1c>
 801bdea:	4b21      	ldr	r3, [pc, #132]	; (801be70 <tcp_send_fin+0x94>)
 801bdec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801bdf0:	4920      	ldr	r1, [pc, #128]	; (801be74 <tcp_send_fin+0x98>)
 801bdf2:	4821      	ldr	r0, [pc, #132]	; (801be78 <tcp_send_fin+0x9c>)
 801bdf4:	f002 ffca 	bl	801ed8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d02e      	beq.n	801be5e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be04:	60fb      	str	r3, [r7, #12]
 801be06:	e002      	b.n	801be0e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d1f8      	bne.n	801be08 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	68db      	ldr	r3, [r3, #12]
 801be1a:	899b      	ldrh	r3, [r3, #12]
 801be1c:	b29b      	uxth	r3, r3
 801be1e:	4618      	mov	r0, r3
 801be20:	f7f9 f8f6 	bl	8015010 <lwip_htons>
 801be24:	4603      	mov	r3, r0
 801be26:	b2db      	uxtb	r3, r3
 801be28:	f003 0307 	and.w	r3, r3, #7
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d116      	bne.n	801be5e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	68db      	ldr	r3, [r3, #12]
 801be34:	899b      	ldrh	r3, [r3, #12]
 801be36:	b29c      	uxth	r4, r3
 801be38:	2001      	movs	r0, #1
 801be3a:	f7f9 f8e9 	bl	8015010 <lwip_htons>
 801be3e:	4603      	mov	r3, r0
 801be40:	461a      	mov	r2, r3
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	68db      	ldr	r3, [r3, #12]
 801be46:	4322      	orrs	r2, r4
 801be48:	b292      	uxth	r2, r2
 801be4a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	8b5b      	ldrh	r3, [r3, #26]
 801be50:	f043 0320 	orr.w	r3, r3, #32
 801be54:	b29a      	uxth	r2, r3
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801be5a:	2300      	movs	r3, #0
 801be5c:	e004      	b.n	801be68 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801be5e:	2101      	movs	r1, #1
 801be60:	6878      	ldr	r0, [r7, #4]
 801be62:	f000 f80b 	bl	801be7c <tcp_enqueue_flags>
 801be66:	4603      	mov	r3, r0
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3714      	adds	r7, #20
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd90      	pop	{r4, r7, pc}
 801be70:	080237ec 	.word	0x080237ec
 801be74:	08023c5c 	.word	0x08023c5c
 801be78:	080238a8 	.word	0x080238a8

0801be7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b08a      	sub	sp, #40	; 0x28
 801be80:	af02      	add	r7, sp, #8
 801be82:	6078      	str	r0, [r7, #4]
 801be84:	460b      	mov	r3, r1
 801be86:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801be88:	2300      	movs	r3, #0
 801be8a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801be8c:	2300      	movs	r3, #0
 801be8e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801be90:	78fb      	ldrb	r3, [r7, #3]
 801be92:	f003 0303 	and.w	r3, r3, #3
 801be96:	2b00      	cmp	r3, #0
 801be98:	d106      	bne.n	801bea8 <tcp_enqueue_flags+0x2c>
 801be9a:	4b67      	ldr	r3, [pc, #412]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801be9c:	f240 4211 	movw	r2, #1041	; 0x411
 801bea0:	4966      	ldr	r1, [pc, #408]	; (801c03c <tcp_enqueue_flags+0x1c0>)
 801bea2:	4867      	ldr	r0, [pc, #412]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801bea4:	f002 ff72 	bl	801ed8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d106      	bne.n	801bebc <tcp_enqueue_flags+0x40>
 801beae:	4b62      	ldr	r3, [pc, #392]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801beb0:	f240 4213 	movw	r2, #1043	; 0x413
 801beb4:	4963      	ldr	r1, [pc, #396]	; (801c044 <tcp_enqueue_flags+0x1c8>)
 801beb6:	4862      	ldr	r0, [pc, #392]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801beb8:	f002 ff68 	bl	801ed8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801bebc:	78fb      	ldrb	r3, [r7, #3]
 801bebe:	f003 0302 	and.w	r3, r3, #2
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d001      	beq.n	801beca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801bec6:	2301      	movs	r3, #1
 801bec8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801beca:	7ffb      	ldrb	r3, [r7, #31]
 801becc:	009b      	lsls	r3, r3, #2
 801bece:	b2db      	uxtb	r3, r3
 801bed0:	f003 0304 	and.w	r3, r3, #4
 801bed4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bed6:	7dfb      	ldrb	r3, [r7, #23]
 801bed8:	b29b      	uxth	r3, r3
 801beda:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bede:	4619      	mov	r1, r3
 801bee0:	2036      	movs	r0, #54	; 0x36
 801bee2:	f7fa fa19 	bl	8016318 <pbuf_alloc>
 801bee6:	6138      	str	r0, [r7, #16]
 801bee8:	693b      	ldr	r3, [r7, #16]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d109      	bne.n	801bf02 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	8b5b      	ldrh	r3, [r3, #26]
 801bef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bef6:	b29a      	uxth	r2, r3
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801befc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf00:	e095      	b.n	801c02e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bf02:	693b      	ldr	r3, [r7, #16]
 801bf04:	895a      	ldrh	r2, [r3, #10]
 801bf06:	7dfb      	ldrb	r3, [r7, #23]
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	429a      	cmp	r2, r3
 801bf0c:	d206      	bcs.n	801bf1c <tcp_enqueue_flags+0xa0>
 801bf0e:	4b4a      	ldr	r3, [pc, #296]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801bf10:	f240 4239 	movw	r2, #1081	; 0x439
 801bf14:	494c      	ldr	r1, [pc, #304]	; (801c048 <tcp_enqueue_flags+0x1cc>)
 801bf16:	484a      	ldr	r0, [pc, #296]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801bf18:	f002 ff38 	bl	801ed8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801bf20:	78fa      	ldrb	r2, [r7, #3]
 801bf22:	7ffb      	ldrb	r3, [r7, #31]
 801bf24:	9300      	str	r3, [sp, #0]
 801bf26:	460b      	mov	r3, r1
 801bf28:	6939      	ldr	r1, [r7, #16]
 801bf2a:	6878      	ldr	r0, [r7, #4]
 801bf2c:	f7ff f918 	bl	801b160 <tcp_create_segment>
 801bf30:	60f8      	str	r0, [r7, #12]
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d109      	bne.n	801bf4c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	8b5b      	ldrh	r3, [r3, #26]
 801bf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf40:	b29a      	uxth	r2, r3
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801bf46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf4a:	e070      	b.n	801c02e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	68db      	ldr	r3, [r3, #12]
 801bf50:	f003 0303 	and.w	r3, r3, #3
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d006      	beq.n	801bf66 <tcp_enqueue_flags+0xea>
 801bf58:	4b37      	ldr	r3, [pc, #220]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801bf5a:	f240 4242 	movw	r2, #1090	; 0x442
 801bf5e:	493b      	ldr	r1, [pc, #236]	; (801c04c <tcp_enqueue_flags+0x1d0>)
 801bf60:	4837      	ldr	r0, [pc, #220]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801bf62:	f002 ff13 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	891b      	ldrh	r3, [r3, #8]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d006      	beq.n	801bf7c <tcp_enqueue_flags+0x100>
 801bf6e:	4b32      	ldr	r3, [pc, #200]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801bf70:	f240 4243 	movw	r2, #1091	; 0x443
 801bf74:	4936      	ldr	r1, [pc, #216]	; (801c050 <tcp_enqueue_flags+0x1d4>)
 801bf76:	4832      	ldr	r0, [pc, #200]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801bf78:	f002 ff08 	bl	801ed8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d103      	bne.n	801bf8c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	68fa      	ldr	r2, [r7, #12]
 801bf88:	66da      	str	r2, [r3, #108]	; 0x6c
 801bf8a:	e00d      	b.n	801bfa8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf90:	61bb      	str	r3, [r7, #24]
 801bf92:	e002      	b.n	801bf9a <tcp_enqueue_flags+0x11e>
 801bf94:	69bb      	ldr	r3, [r7, #24]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	61bb      	str	r3, [r7, #24]
 801bf9a:	69bb      	ldr	r3, [r7, #24]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d1f8      	bne.n	801bf94 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801bfa2:	69bb      	ldr	r3, [r7, #24]
 801bfa4:	68fa      	ldr	r2, [r7, #12]
 801bfa6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2200      	movs	r2, #0
 801bfac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801bfb0:	78fb      	ldrb	r3, [r7, #3]
 801bfb2:	f003 0302 	and.w	r3, r3, #2
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d104      	bne.n	801bfc4 <tcp_enqueue_flags+0x148>
 801bfba:	78fb      	ldrb	r3, [r7, #3]
 801bfbc:	f003 0301 	and.w	r3, r3, #1
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d004      	beq.n	801bfce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bfc8:	1c5a      	adds	r2, r3, #1
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801bfce:	78fb      	ldrb	r3, [r7, #3]
 801bfd0:	f003 0301 	and.w	r3, r3, #1
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d006      	beq.n	801bfe6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	8b5b      	ldrh	r3, [r3, #26]
 801bfdc:	f043 0320 	orr.w	r3, r3, #32
 801bfe0:	b29a      	uxth	r2, r3
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	685b      	ldr	r3, [r3, #4]
 801bfea:	4618      	mov	r0, r3
 801bfec:	f7fa fd06 	bl	80169fc <pbuf_clen>
 801bff0:	4603      	mov	r3, r0
 801bff2:	461a      	mov	r2, r3
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bffa:	4413      	add	r3, r2
 801bffc:	b29a      	uxth	r2, r3
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d00e      	beq.n	801c02c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c012:	2b00      	cmp	r3, #0
 801c014:	d10a      	bne.n	801c02c <tcp_enqueue_flags+0x1b0>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d106      	bne.n	801c02c <tcp_enqueue_flags+0x1b0>
 801c01e:	4b06      	ldr	r3, [pc, #24]	; (801c038 <tcp_enqueue_flags+0x1bc>)
 801c020:	f240 4265 	movw	r2, #1125	; 0x465
 801c024:	490b      	ldr	r1, [pc, #44]	; (801c054 <tcp_enqueue_flags+0x1d8>)
 801c026:	4806      	ldr	r0, [pc, #24]	; (801c040 <tcp_enqueue_flags+0x1c4>)
 801c028:	f002 feb0 	bl	801ed8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c02c:	2300      	movs	r3, #0
}
 801c02e:	4618      	mov	r0, r3
 801c030:	3720      	adds	r7, #32
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	080237ec 	.word	0x080237ec
 801c03c:	08023c78 	.word	0x08023c78
 801c040:	080238a8 	.word	0x080238a8
 801c044:	08023cd0 	.word	0x08023cd0
 801c048:	08023cf0 	.word	0x08023cf0
 801c04c:	08023d2c 	.word	0x08023d2c
 801c050:	08023d44 	.word	0x08023d44
 801c054:	08023d70 	.word	0x08023d70

0801c058 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c058:	b5b0      	push	{r4, r5, r7, lr}
 801c05a:	b08a      	sub	sp, #40	; 0x28
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d106      	bne.n	801c074 <tcp_output+0x1c>
 801c066:	4b9e      	ldr	r3, [pc, #632]	; (801c2e0 <tcp_output+0x288>)
 801c068:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c06c:	499d      	ldr	r1, [pc, #628]	; (801c2e4 <tcp_output+0x28c>)
 801c06e:	489e      	ldr	r0, [pc, #632]	; (801c2e8 <tcp_output+0x290>)
 801c070:	f002 fe8c 	bl	801ed8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	7d1b      	ldrb	r3, [r3, #20]
 801c078:	2b01      	cmp	r3, #1
 801c07a:	d106      	bne.n	801c08a <tcp_output+0x32>
 801c07c:	4b98      	ldr	r3, [pc, #608]	; (801c2e0 <tcp_output+0x288>)
 801c07e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801c082:	499a      	ldr	r1, [pc, #616]	; (801c2ec <tcp_output+0x294>)
 801c084:	4898      	ldr	r0, [pc, #608]	; (801c2e8 <tcp_output+0x290>)
 801c086:	f002 fe81 	bl	801ed8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c08a:	4b99      	ldr	r3, [pc, #612]	; (801c2f0 <tcp_output+0x298>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	687a      	ldr	r2, [r7, #4]
 801c090:	429a      	cmp	r2, r3
 801c092:	d101      	bne.n	801c098 <tcp_output+0x40>
    return ERR_OK;
 801c094:	2300      	movs	r3, #0
 801c096:	e1ce      	b.n	801c436 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c0a4:	4293      	cmp	r3, r2
 801c0a6:	bf28      	it	cs
 801c0a8:	4613      	movcs	r3, r2
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d10b      	bne.n	801c0d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	8b5b      	ldrh	r3, [r3, #26]
 801c0be:	f003 0302 	and.w	r3, r3, #2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	f000 81aa 	beq.w	801c41c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801c0c8:	6878      	ldr	r0, [r7, #4]
 801c0ca:	f000 fdcb 	bl	801cc64 <tcp_send_empty_ack>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	e1b1      	b.n	801c436 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c0d2:	6879      	ldr	r1, [r7, #4]
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	3304      	adds	r3, #4
 801c0d8:	461a      	mov	r2, r3
 801c0da:	6878      	ldr	r0, [r7, #4]
 801c0dc:	f7ff f824 	bl	801b128 <tcp_route>
 801c0e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d102      	bne.n	801c0ee <tcp_output+0x96>
    return ERR_RTE;
 801c0e8:	f06f 0303 	mvn.w	r3, #3
 801c0ec:	e1a3      	b.n	801c436 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d003      	beq.n	801c0fc <tcp_output+0xa4>
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d111      	bne.n	801c120 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d002      	beq.n	801c108 <tcp_output+0xb0>
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	3304      	adds	r3, #4
 801c106:	e000      	b.n	801c10a <tcp_output+0xb2>
 801c108:	2300      	movs	r3, #0
 801c10a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c10c:	693b      	ldr	r3, [r7, #16]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d102      	bne.n	801c118 <tcp_output+0xc0>
      return ERR_RTE;
 801c112:	f06f 0303 	mvn.w	r3, #3
 801c116:	e18e      	b.n	801c436 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c118:	693b      	ldr	r3, [r7, #16]
 801c11a:	681a      	ldr	r2, [r3, #0]
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c122:	68db      	ldr	r3, [r3, #12]
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	4618      	mov	r0, r3
 801c128:	f7f8 ff87 	bl	801503a <lwip_htonl>
 801c12c:	4602      	mov	r2, r0
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c136:	8912      	ldrh	r2, [r2, #8]
 801c138:	4413      	add	r3, r2
 801c13a:	69ba      	ldr	r2, [r7, #24]
 801c13c:	429a      	cmp	r2, r3
 801c13e:	d227      	bcs.n	801c190 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c146:	461a      	mov	r2, r3
 801c148:	69bb      	ldr	r3, [r7, #24]
 801c14a:	4293      	cmp	r3, r2
 801c14c:	d114      	bne.n	801c178 <tcp_output+0x120>
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c152:	2b00      	cmp	r3, #0
 801c154:	d110      	bne.n	801c178 <tcp_output+0x120>
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d10b      	bne.n	801c178 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	2200      	movs	r2, #0
 801c164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2201      	movs	r2, #1
 801c16c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	2200      	movs	r2, #0
 801c174:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	8b5b      	ldrh	r3, [r3, #26]
 801c17c:	f003 0302 	and.w	r3, r3, #2
 801c180:	2b00      	cmp	r3, #0
 801c182:	f000 814d 	beq.w	801c420 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801c186:	6878      	ldr	r0, [r7, #4]
 801c188:	f000 fd6c 	bl	801cc64 <tcp_send_empty_ack>
 801c18c:	4603      	mov	r3, r0
 801c18e:	e152      	b.n	801c436 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	2200      	movs	r2, #0
 801c194:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c19c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c19e:	6a3b      	ldr	r3, [r7, #32]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	f000 811c 	beq.w	801c3de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801c1a6:	e002      	b.n	801c1ae <tcp_output+0x156>
 801c1a8:	6a3b      	ldr	r3, [r7, #32]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	623b      	str	r3, [r7, #32]
 801c1ae:	6a3b      	ldr	r3, [r7, #32]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d1f8      	bne.n	801c1a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c1b6:	e112      	b.n	801c3de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ba:	68db      	ldr	r3, [r3, #12]
 801c1bc:	899b      	ldrh	r3, [r3, #12]
 801c1be:	b29b      	uxth	r3, r3
 801c1c0:	4618      	mov	r0, r3
 801c1c2:	f7f8 ff25 	bl	8015010 <lwip_htons>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	b2db      	uxtb	r3, r3
 801c1ca:	f003 0304 	and.w	r3, r3, #4
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d006      	beq.n	801c1e0 <tcp_output+0x188>
 801c1d2:	4b43      	ldr	r3, [pc, #268]	; (801c2e0 <tcp_output+0x288>)
 801c1d4:	f240 5236 	movw	r2, #1334	; 0x536
 801c1d8:	4946      	ldr	r1, [pc, #280]	; (801c2f4 <tcp_output+0x29c>)
 801c1da:	4843      	ldr	r0, [pc, #268]	; (801c2e8 <tcp_output+0x290>)
 801c1dc:	f002 fdd6 	bl	801ed8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d01f      	beq.n	801c228 <tcp_output+0x1d0>
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	8b5b      	ldrh	r3, [r3, #26]
 801c1ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d119      	bne.n	801c228 <tcp_output+0x1d0>
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d00b      	beq.n	801c214 <tcp_output+0x1bc>
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d110      	bne.n	801c228 <tcp_output+0x1d0>
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c20a:	891a      	ldrh	r2, [r3, #8]
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c210:	429a      	cmp	r2, r3
 801c212:	d209      	bcs.n	801c228 <tcp_output+0x1d0>
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d004      	beq.n	801c228 <tcp_output+0x1d0>
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c224:	2b0f      	cmp	r3, #15
 801c226:	d901      	bls.n	801c22c <tcp_output+0x1d4>
 801c228:	2301      	movs	r3, #1
 801c22a:	e000      	b.n	801c22e <tcp_output+0x1d6>
 801c22c:	2300      	movs	r3, #0
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d106      	bne.n	801c240 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	8b5b      	ldrh	r3, [r3, #26]
 801c236:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	f000 80e4 	beq.w	801c408 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	7d1b      	ldrb	r3, [r3, #20]
 801c244:	2b02      	cmp	r3, #2
 801c246:	d00d      	beq.n	801c264 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24a:	68db      	ldr	r3, [r3, #12]
 801c24c:	899b      	ldrh	r3, [r3, #12]
 801c24e:	b29c      	uxth	r4, r3
 801c250:	2010      	movs	r0, #16
 801c252:	f7f8 fedd 	bl	8015010 <lwip_htons>
 801c256:	4603      	mov	r3, r0
 801c258:	461a      	mov	r2, r3
 801c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c25c:	68db      	ldr	r3, [r3, #12]
 801c25e:	4322      	orrs	r2, r4
 801c260:	b292      	uxth	r2, r2
 801c262:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c264:	697a      	ldr	r2, [r7, #20]
 801c266:	6879      	ldr	r1, [r7, #4]
 801c268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c26a:	f000 f909 	bl	801c480 <tcp_output_segment>
 801c26e:	4603      	mov	r3, r0
 801c270:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d009      	beq.n	801c28e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	8b5b      	ldrh	r3, [r3, #26]
 801c27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c282:	b29a      	uxth	r2, r3
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	835a      	strh	r2, [r3, #26]
      return err;
 801c288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c28c:	e0d3      	b.n	801c436 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c290:	681a      	ldr	r2, [r3, #0]
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	7d1b      	ldrb	r3, [r3, #20]
 801c29a:	2b02      	cmp	r3, #2
 801c29c:	d006      	beq.n	801c2ac <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	8b5b      	ldrh	r3, [r3, #26]
 801c2a2:	f023 0303 	bic.w	r3, r3, #3
 801c2a6:	b29a      	uxth	r2, r3
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ae:	68db      	ldr	r3, [r3, #12]
 801c2b0:	685b      	ldr	r3, [r3, #4]
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	f7f8 fec1 	bl	801503a <lwip_htonl>
 801c2b8:	4604      	mov	r4, r0
 801c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2bc:	891b      	ldrh	r3, [r3, #8]
 801c2be:	461d      	mov	r5, r3
 801c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c2:	68db      	ldr	r3, [r3, #12]
 801c2c4:	899b      	ldrh	r3, [r3, #12]
 801c2c6:	b29b      	uxth	r3, r3
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f7f8 fea1 	bl	8015010 <lwip_htons>
 801c2ce:	4603      	mov	r3, r0
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	f003 0303 	and.w	r3, r3, #3
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d00e      	beq.n	801c2f8 <tcp_output+0x2a0>
 801c2da:	2301      	movs	r3, #1
 801c2dc:	e00d      	b.n	801c2fa <tcp_output+0x2a2>
 801c2de:	bf00      	nop
 801c2e0:	080237ec 	.word	0x080237ec
 801c2e4:	08023d98 	.word	0x08023d98
 801c2e8:	080238a8 	.word	0x080238a8
 801c2ec:	08023db0 	.word	0x08023db0
 801c2f0:	20010388 	.word	0x20010388
 801c2f4:	08023dd8 	.word	0x08023dd8
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	442b      	add	r3, r5
 801c2fc:	4423      	add	r3, r4
 801c2fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c304:	68bb      	ldr	r3, [r7, #8]
 801c306:	1ad3      	subs	r3, r2, r3
 801c308:	2b00      	cmp	r3, #0
 801c30a:	da02      	bge.n	801c312 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	68ba      	ldr	r2, [r7, #8]
 801c310:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c314:	891b      	ldrh	r3, [r3, #8]
 801c316:	461c      	mov	r4, r3
 801c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c31a:	68db      	ldr	r3, [r3, #12]
 801c31c:	899b      	ldrh	r3, [r3, #12]
 801c31e:	b29b      	uxth	r3, r3
 801c320:	4618      	mov	r0, r3
 801c322:	f7f8 fe75 	bl	8015010 <lwip_htons>
 801c326:	4603      	mov	r3, r0
 801c328:	b2db      	uxtb	r3, r3
 801c32a:	f003 0303 	and.w	r3, r3, #3
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d001      	beq.n	801c336 <tcp_output+0x2de>
 801c332:	2301      	movs	r3, #1
 801c334:	e000      	b.n	801c338 <tcp_output+0x2e0>
 801c336:	2300      	movs	r3, #0
 801c338:	4423      	add	r3, r4
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d049      	beq.n	801c3d2 <tcp_output+0x37a>
      seg->next = NULL;
 801c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c340:	2200      	movs	r2, #0
 801c342:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d105      	bne.n	801c358 <tcp_output+0x300>
        pcb->unacked = seg;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c350:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c354:	623b      	str	r3, [r7, #32]
 801c356:	e03f      	b.n	801c3d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c35a:	68db      	ldr	r3, [r3, #12]
 801c35c:	685b      	ldr	r3, [r3, #4]
 801c35e:	4618      	mov	r0, r3
 801c360:	f7f8 fe6b 	bl	801503a <lwip_htonl>
 801c364:	4604      	mov	r4, r0
 801c366:	6a3b      	ldr	r3, [r7, #32]
 801c368:	68db      	ldr	r3, [r3, #12]
 801c36a:	685b      	ldr	r3, [r3, #4]
 801c36c:	4618      	mov	r0, r3
 801c36e:	f7f8 fe64 	bl	801503a <lwip_htonl>
 801c372:	4603      	mov	r3, r0
 801c374:	1ae3      	subs	r3, r4, r3
 801c376:	2b00      	cmp	r3, #0
 801c378:	da24      	bge.n	801c3c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	3370      	adds	r3, #112	; 0x70
 801c37e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c380:	e002      	b.n	801c388 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801c382:	69fb      	ldr	r3, [r7, #28]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c388:	69fb      	ldr	r3, [r7, #28]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d011      	beq.n	801c3b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c390:	69fb      	ldr	r3, [r7, #28]
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	68db      	ldr	r3, [r3, #12]
 801c396:	685b      	ldr	r3, [r3, #4]
 801c398:	4618      	mov	r0, r3
 801c39a:	f7f8 fe4e 	bl	801503a <lwip_htonl>
 801c39e:	4604      	mov	r4, r0
 801c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3a2:	68db      	ldr	r3, [r3, #12]
 801c3a4:	685b      	ldr	r3, [r3, #4]
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	f7f8 fe47 	bl	801503a <lwip_htonl>
 801c3ac:	4603      	mov	r3, r0
 801c3ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	dbe6      	blt.n	801c382 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801c3b4:	69fb      	ldr	r3, [r7, #28]
 801c3b6:	681a      	ldr	r2, [r3, #0]
 801c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c3bc:	69fb      	ldr	r3, [r7, #28]
 801c3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3c0:	601a      	str	r2, [r3, #0]
 801c3c2:	e009      	b.n	801c3d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c3c4:	6a3b      	ldr	r3, [r7, #32]
 801c3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c3ca:	6a3b      	ldr	r3, [r7, #32]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	623b      	str	r3, [r7, #32]
 801c3d0:	e002      	b.n	801c3d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c3d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3d4:	f7fb ff1b 	bl	801820e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d012      	beq.n	801c40a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e6:	68db      	ldr	r3, [r3, #12]
 801c3e8:	685b      	ldr	r3, [r3, #4]
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7f8 fe25 	bl	801503a <lwip_htonl>
 801c3f0:	4602      	mov	r2, r0
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3f6:	1ad3      	subs	r3, r2, r3
 801c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3fa:	8912      	ldrh	r2, [r2, #8]
 801c3fc:	4413      	add	r3, r2
  while (seg != NULL &&
 801c3fe:	69ba      	ldr	r2, [r7, #24]
 801c400:	429a      	cmp	r2, r3
 801c402:	f4bf aed9 	bcs.w	801c1b8 <tcp_output+0x160>
 801c406:	e000      	b.n	801c40a <tcp_output+0x3b2>
      break;
 801c408:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d108      	bne.n	801c424 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	2200      	movs	r2, #0
 801c416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c41a:	e004      	b.n	801c426 <tcp_output+0x3ce>
    goto output_done;
 801c41c:	bf00      	nop
 801c41e:	e002      	b.n	801c426 <tcp_output+0x3ce>
    goto output_done;
 801c420:	bf00      	nop
 801c422:	e000      	b.n	801c426 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c424:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	8b5b      	ldrh	r3, [r3, #26]
 801c42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c42e:	b29a      	uxth	r2, r3
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c434:	2300      	movs	r3, #0
}
 801c436:	4618      	mov	r0, r3
 801c438:	3728      	adds	r7, #40	; 0x28
 801c43a:	46bd      	mov	sp, r7
 801c43c:	bdb0      	pop	{r4, r5, r7, pc}
 801c43e:	bf00      	nop

0801c440 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b082      	sub	sp, #8
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d106      	bne.n	801c45c <tcp_output_segment_busy+0x1c>
 801c44e:	4b09      	ldr	r3, [pc, #36]	; (801c474 <tcp_output_segment_busy+0x34>)
 801c450:	f240 529a 	movw	r2, #1434	; 0x59a
 801c454:	4908      	ldr	r1, [pc, #32]	; (801c478 <tcp_output_segment_busy+0x38>)
 801c456:	4809      	ldr	r0, [pc, #36]	; (801c47c <tcp_output_segment_busy+0x3c>)
 801c458:	f002 fc98 	bl	801ed8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	685b      	ldr	r3, [r3, #4]
 801c460:	7b9b      	ldrb	r3, [r3, #14]
 801c462:	2b01      	cmp	r3, #1
 801c464:	d001      	beq.n	801c46a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801c466:	2301      	movs	r3, #1
 801c468:	e000      	b.n	801c46c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801c46a:	2300      	movs	r3, #0
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	3708      	adds	r7, #8
 801c470:	46bd      	mov	sp, r7
 801c472:	bd80      	pop	{r7, pc}
 801c474:	080237ec 	.word	0x080237ec
 801c478:	08023df0 	.word	0x08023df0
 801c47c:	080238a8 	.word	0x080238a8

0801c480 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801c480:	b5b0      	push	{r4, r5, r7, lr}
 801c482:	b08c      	sub	sp, #48	; 0x30
 801c484:	af04      	add	r7, sp, #16
 801c486:	60f8      	str	r0, [r7, #12]
 801c488:	60b9      	str	r1, [r7, #8]
 801c48a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d106      	bne.n	801c4a0 <tcp_output_segment+0x20>
 801c492:	4b63      	ldr	r3, [pc, #396]	; (801c620 <tcp_output_segment+0x1a0>)
 801c494:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801c498:	4962      	ldr	r1, [pc, #392]	; (801c624 <tcp_output_segment+0x1a4>)
 801c49a:	4863      	ldr	r0, [pc, #396]	; (801c628 <tcp_output_segment+0x1a8>)
 801c49c:	f002 fc76 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d106      	bne.n	801c4b4 <tcp_output_segment+0x34>
 801c4a6:	4b5e      	ldr	r3, [pc, #376]	; (801c620 <tcp_output_segment+0x1a0>)
 801c4a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801c4ac:	495f      	ldr	r1, [pc, #380]	; (801c62c <tcp_output_segment+0x1ac>)
 801c4ae:	485e      	ldr	r0, [pc, #376]	; (801c628 <tcp_output_segment+0x1a8>)
 801c4b0:	f002 fc6c 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d106      	bne.n	801c4c8 <tcp_output_segment+0x48>
 801c4ba:	4b59      	ldr	r3, [pc, #356]	; (801c620 <tcp_output_segment+0x1a0>)
 801c4bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801c4c0:	495b      	ldr	r1, [pc, #364]	; (801c630 <tcp_output_segment+0x1b0>)
 801c4c2:	4859      	ldr	r0, [pc, #356]	; (801c628 <tcp_output_segment+0x1a8>)
 801c4c4:	f002 fc62 	bl	801ed8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801c4c8:	68f8      	ldr	r0, [r7, #12]
 801c4ca:	f7ff ffb9 	bl	801c440 <tcp_output_segment_busy>
 801c4ce:	4603      	mov	r3, r0
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d001      	beq.n	801c4d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	e09f      	b.n	801c618 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	68dc      	ldr	r4, [r3, #12]
 801c4e0:	4610      	mov	r0, r2
 801c4e2:	f7f8 fdaa 	bl	801503a <lwip_htonl>
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801c4ea:	68bb      	ldr	r3, [r7, #8]
 801c4ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	68dc      	ldr	r4, [r3, #12]
 801c4f2:	4610      	mov	r0, r2
 801c4f4:	f7f8 fd8c 	bl	8015010 <lwip_htons>
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c4fc:	68bb      	ldr	r3, [r7, #8]
 801c4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c500:	68ba      	ldr	r2, [r7, #8]
 801c502:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c504:	441a      	add	r2, r3
 801c506:	68bb      	ldr	r3, [r7, #8]
 801c508:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	68db      	ldr	r3, [r3, #12]
 801c50e:	3314      	adds	r3, #20
 801c510:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	7a9b      	ldrb	r3, [r3, #10]
 801c516:	f003 0301 	and.w	r3, r3, #1
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d015      	beq.n	801c54a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801c51e:	68bb      	ldr	r3, [r7, #8]
 801c520:	3304      	adds	r3, #4
 801c522:	461a      	mov	r2, r3
 801c524:	6879      	ldr	r1, [r7, #4]
 801c526:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801c52a:	f7fc fa35 	bl	8018998 <tcp_eff_send_mss_netif>
 801c52e:	4603      	mov	r3, r0
 801c530:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801c532:	8b7b      	ldrh	r3, [r7, #26]
 801c534:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801c538:	4618      	mov	r0, r3
 801c53a:	f7f8 fd7e 	bl	801503a <lwip_htonl>
 801c53e:	4602      	mov	r2, r0
 801c540:	69fb      	ldr	r3, [r7, #28]
 801c542:	601a      	str	r2, [r3, #0]
    opts += 1;
 801c544:	69fb      	ldr	r3, [r7, #28]
 801c546:	3304      	adds	r3, #4
 801c548:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801c54a:	68bb      	ldr	r3, [r7, #8]
 801c54c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c550:	2b00      	cmp	r3, #0
 801c552:	da02      	bge.n	801c55a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801c554:	68bb      	ldr	r3, [r7, #8]
 801c556:	2200      	movs	r2, #0
 801c558:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801c55a:	68bb      	ldr	r3, [r7, #8]
 801c55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d10c      	bne.n	801c57c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801c562:	4b34      	ldr	r3, [pc, #208]	; (801c634 <tcp_output_segment+0x1b4>)
 801c564:	681a      	ldr	r2, [r3, #0]
 801c566:	68bb      	ldr	r3, [r7, #8]
 801c568:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	68db      	ldr	r3, [r3, #12]
 801c56e:	685b      	ldr	r3, [r3, #4]
 801c570:	4618      	mov	r0, r3
 801c572:	f7f8 fd62 	bl	801503a <lwip_htonl>
 801c576:	4602      	mov	r2, r0
 801c578:	68bb      	ldr	r3, [r7, #8]
 801c57a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	68da      	ldr	r2, [r3, #12]
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	1ad3      	subs	r3, r2, r3
 801c588:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	8959      	ldrh	r1, [r3, #10]
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	685b      	ldr	r3, [r3, #4]
 801c594:	8b3a      	ldrh	r2, [r7, #24]
 801c596:	1a8a      	subs	r2, r1, r2
 801c598:	b292      	uxth	r2, r2
 801c59a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	8919      	ldrh	r1, [r3, #8]
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	685b      	ldr	r3, [r3, #4]
 801c5a6:	8b3a      	ldrh	r2, [r7, #24]
 801c5a8:	1a8a      	subs	r2, r1, r2
 801c5aa:	b292      	uxth	r2, r2
 801c5ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	685b      	ldr	r3, [r3, #4]
 801c5b2:	68fa      	ldr	r2, [r7, #12]
 801c5b4:	68d2      	ldr	r2, [r2, #12]
 801c5b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	68db      	ldr	r3, [r3, #12]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	741a      	strb	r2, [r3, #16]
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	68db      	ldr	r3, [r3, #12]
 801c5c8:	f103 0214 	add.w	r2, r3, #20
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	7a9b      	ldrb	r3, [r3, #10]
 801c5d0:	009b      	lsls	r3, r3, #2
 801c5d2:	f003 0304 	and.w	r3, r3, #4
 801c5d6:	4413      	add	r3, r2
 801c5d8:	69fa      	ldr	r2, [r7, #28]
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	d006      	beq.n	801c5ec <tcp_output_segment+0x16c>
 801c5de:	4b10      	ldr	r3, [pc, #64]	; (801c620 <tcp_output_segment+0x1a0>)
 801c5e0:	f240 621c 	movw	r2, #1564	; 0x61c
 801c5e4:	4914      	ldr	r1, [pc, #80]	; (801c638 <tcp_output_segment+0x1b8>)
 801c5e6:	4810      	ldr	r0, [pc, #64]	; (801c628 <tcp_output_segment+0x1a8>)
 801c5e8:	f002 fbd0 	bl	801ed8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	6858      	ldr	r0, [r3, #4]
 801c5f0:	68b9      	ldr	r1, [r7, #8]
 801c5f2:	68bb      	ldr	r3, [r7, #8]
 801c5f4:	1d1c      	adds	r4, r3, #4
 801c5f6:	68bb      	ldr	r3, [r7, #8]
 801c5f8:	7add      	ldrb	r5, [r3, #11]
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	7a9b      	ldrb	r3, [r3, #10]
 801c5fe:	687a      	ldr	r2, [r7, #4]
 801c600:	9202      	str	r2, [sp, #8]
 801c602:	2206      	movs	r2, #6
 801c604:	9201      	str	r2, [sp, #4]
 801c606:	9300      	str	r3, [sp, #0]
 801c608:	462b      	mov	r3, r5
 801c60a:	4622      	mov	r2, r4
 801c60c:	f7f7 fd1c 	bl	8014048 <ip4_output_if>
 801c610:	4603      	mov	r3, r0
 801c612:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801c614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c618:	4618      	mov	r0, r3
 801c61a:	3720      	adds	r7, #32
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bdb0      	pop	{r4, r5, r7, pc}
 801c620:	080237ec 	.word	0x080237ec
 801c624:	08023e18 	.word	0x08023e18
 801c628:	080238a8 	.word	0x080238a8
 801c62c:	08023e38 	.word	0x08023e38
 801c630:	08023e58 	.word	0x08023e58
 801c634:	20010378 	.word	0x20010378
 801c638:	08023e7c 	.word	0x08023e7c

0801c63c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801c63c:	b5b0      	push	{r4, r5, r7, lr}
 801c63e:	b084      	sub	sp, #16
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d106      	bne.n	801c658 <tcp_rexmit_rto_prepare+0x1c>
 801c64a:	4b31      	ldr	r3, [pc, #196]	; (801c710 <tcp_rexmit_rto_prepare+0xd4>)
 801c64c:	f240 6263 	movw	r2, #1635	; 0x663
 801c650:	4930      	ldr	r1, [pc, #192]	; (801c714 <tcp_rexmit_rto_prepare+0xd8>)
 801c652:	4831      	ldr	r0, [pc, #196]	; (801c718 <tcp_rexmit_rto_prepare+0xdc>)
 801c654:	f002 fb9a 	bl	801ed8c <iprintf>

  if (pcb->unacked == NULL) {
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d102      	bne.n	801c666 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801c660:	f06f 0305 	mvn.w	r3, #5
 801c664:	e050      	b.n	801c708 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c66a:	60fb      	str	r3, [r7, #12]
 801c66c:	e00b      	b.n	801c686 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801c66e:	68f8      	ldr	r0, [r7, #12]
 801c670:	f7ff fee6 	bl	801c440 <tcp_output_segment_busy>
 801c674:	4603      	mov	r3, r0
 801c676:	2b00      	cmp	r3, #0
 801c678:	d002      	beq.n	801c680 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801c67a:	f06f 0305 	mvn.w	r3, #5
 801c67e:	e043      	b.n	801c708 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	60fb      	str	r3, [r7, #12]
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d1ef      	bne.n	801c66e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801c68e:	68f8      	ldr	r0, [r7, #12]
 801c690:	f7ff fed6 	bl	801c440 <tcp_output_segment_busy>
 801c694:	4603      	mov	r3, r0
 801c696:	2b00      	cmp	r3, #0
 801c698:	d002      	beq.n	801c6a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801c69a:	f06f 0305 	mvn.w	r3, #5
 801c69e:	e033      	b.n	801c708 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	8b5b      	ldrh	r3, [r3, #26]
 801c6ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c6be:	b29a      	uxth	r2, r3
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	68db      	ldr	r3, [r3, #12]
 801c6c8:	685b      	ldr	r3, [r3, #4]
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f7f8 fcb5 	bl	801503a <lwip_htonl>
 801c6d0:	4604      	mov	r4, r0
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	891b      	ldrh	r3, [r3, #8]
 801c6d6:	461d      	mov	r5, r3
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	68db      	ldr	r3, [r3, #12]
 801c6dc:	899b      	ldrh	r3, [r3, #12]
 801c6de:	b29b      	uxth	r3, r3
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7f8 fc95 	bl	8015010 <lwip_htons>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	b2db      	uxtb	r3, r3
 801c6ea:	f003 0303 	and.w	r3, r3, #3
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d001      	beq.n	801c6f6 <tcp_rexmit_rto_prepare+0xba>
 801c6f2:	2301      	movs	r3, #1
 801c6f4:	e000      	b.n	801c6f8 <tcp_rexmit_rto_prepare+0xbc>
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	442b      	add	r3, r5
 801c6fa:	18e2      	adds	r2, r4, r3
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	2200      	movs	r2, #0
 801c704:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801c706:	2300      	movs	r3, #0
}
 801c708:	4618      	mov	r0, r3
 801c70a:	3710      	adds	r7, #16
 801c70c:	46bd      	mov	sp, r7
 801c70e:	bdb0      	pop	{r4, r5, r7, pc}
 801c710:	080237ec 	.word	0x080237ec
 801c714:	08023e90 	.word	0x08023e90
 801c718:	080238a8 	.word	0x080238a8

0801c71c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801c71c:	b580      	push	{r7, lr}
 801c71e:	b082      	sub	sp, #8
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d106      	bne.n	801c738 <tcp_rexmit_rto_commit+0x1c>
 801c72a:	4b0d      	ldr	r3, [pc, #52]	; (801c760 <tcp_rexmit_rto_commit+0x44>)
 801c72c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c730:	490c      	ldr	r1, [pc, #48]	; (801c764 <tcp_rexmit_rto_commit+0x48>)
 801c732:	480d      	ldr	r0, [pc, #52]	; (801c768 <tcp_rexmit_rto_commit+0x4c>)
 801c734:	f002 fb2a 	bl	801ed8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c73e:	2bff      	cmp	r3, #255	; 0xff
 801c740:	d007      	beq.n	801c752 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c748:	3301      	adds	r3, #1
 801c74a:	b2da      	uxtb	r2, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f7ff fc80 	bl	801c058 <tcp_output>
}
 801c758:	bf00      	nop
 801c75a:	3708      	adds	r7, #8
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}
 801c760:	080237ec 	.word	0x080237ec
 801c764:	08023eb4 	.word	0x08023eb4
 801c768:	080238a8 	.word	0x080238a8

0801c76c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b082      	sub	sp, #8
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d106      	bne.n	801c788 <tcp_rexmit_rto+0x1c>
 801c77a:	4b0a      	ldr	r3, [pc, #40]	; (801c7a4 <tcp_rexmit_rto+0x38>)
 801c77c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801c780:	4909      	ldr	r1, [pc, #36]	; (801c7a8 <tcp_rexmit_rto+0x3c>)
 801c782:	480a      	ldr	r0, [pc, #40]	; (801c7ac <tcp_rexmit_rto+0x40>)
 801c784:	f002 fb02 	bl	801ed8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801c788:	6878      	ldr	r0, [r7, #4]
 801c78a:	f7ff ff57 	bl	801c63c <tcp_rexmit_rto_prepare>
 801c78e:	4603      	mov	r3, r0
 801c790:	2b00      	cmp	r3, #0
 801c792:	d102      	bne.n	801c79a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801c794:	6878      	ldr	r0, [r7, #4]
 801c796:	f7ff ffc1 	bl	801c71c <tcp_rexmit_rto_commit>
  }
}
 801c79a:	bf00      	nop
 801c79c:	3708      	adds	r7, #8
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	bd80      	pop	{r7, pc}
 801c7a2:	bf00      	nop
 801c7a4:	080237ec 	.word	0x080237ec
 801c7a8:	08023ed8 	.word	0x08023ed8
 801c7ac:	080238a8 	.word	0x080238a8

0801c7b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c7b0:	b590      	push	{r4, r7, lr}
 801c7b2:	b085      	sub	sp, #20
 801c7b4:	af00      	add	r7, sp, #0
 801c7b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d106      	bne.n	801c7cc <tcp_rexmit+0x1c>
 801c7be:	4b2f      	ldr	r3, [pc, #188]	; (801c87c <tcp_rexmit+0xcc>)
 801c7c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801c7c4:	492e      	ldr	r1, [pc, #184]	; (801c880 <tcp_rexmit+0xd0>)
 801c7c6:	482f      	ldr	r0, [pc, #188]	; (801c884 <tcp_rexmit+0xd4>)
 801c7c8:	f002 fae0 	bl	801ed8c <iprintf>

  if (pcb->unacked == NULL) {
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d102      	bne.n	801c7da <tcp_rexmit+0x2a>
    return ERR_VAL;
 801c7d4:	f06f 0305 	mvn.w	r3, #5
 801c7d8:	e04c      	b.n	801c874 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801c7e0:	68b8      	ldr	r0, [r7, #8]
 801c7e2:	f7ff fe2d 	bl	801c440 <tcp_output_segment_busy>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d002      	beq.n	801c7f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801c7ec:	f06f 0305 	mvn.w	r3, #5
 801c7f0:	e040      	b.n	801c874 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801c7f2:	68bb      	ldr	r3, [r7, #8]
 801c7f4:	681a      	ldr	r2, [r3, #0]
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	336c      	adds	r3, #108	; 0x6c
 801c7fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c800:	e002      	b.n	801c808 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d011      	beq.n	801c834 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	68db      	ldr	r3, [r3, #12]
 801c816:	685b      	ldr	r3, [r3, #4]
 801c818:	4618      	mov	r0, r3
 801c81a:	f7f8 fc0e 	bl	801503a <lwip_htonl>
 801c81e:	4604      	mov	r4, r0
 801c820:	68bb      	ldr	r3, [r7, #8]
 801c822:	68db      	ldr	r3, [r3, #12]
 801c824:	685b      	ldr	r3, [r3, #4]
 801c826:	4618      	mov	r0, r3
 801c828:	f7f8 fc07 	bl	801503a <lwip_htonl>
 801c82c:	4603      	mov	r3, r0
 801c82e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801c830:	2b00      	cmp	r3, #0
 801c832:	dbe6      	blt.n	801c802 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	681a      	ldr	r2, [r3, #0]
 801c838:	68bb      	ldr	r3, [r7, #8]
 801c83a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	68ba      	ldr	r2, [r7, #8]
 801c840:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d103      	bne.n	801c852 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	2200      	movs	r2, #0
 801c84e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c858:	2bff      	cmp	r3, #255	; 0xff
 801c85a:	d007      	beq.n	801c86c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c862:	3301      	adds	r3, #1
 801c864:	b2da      	uxtb	r2, r3
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	2200      	movs	r2, #0
 801c870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801c872:	2300      	movs	r3, #0
}
 801c874:	4618      	mov	r0, r3
 801c876:	3714      	adds	r7, #20
 801c878:	46bd      	mov	sp, r7
 801c87a:	bd90      	pop	{r4, r7, pc}
 801c87c:	080237ec 	.word	0x080237ec
 801c880:	08023ef4 	.word	0x08023ef4
 801c884:	080238a8 	.word	0x080238a8

0801c888 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801c888:	b580      	push	{r7, lr}
 801c88a:	b082      	sub	sp, #8
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d106      	bne.n	801c8a4 <tcp_rexmit_fast+0x1c>
 801c896:	4b2a      	ldr	r3, [pc, #168]	; (801c940 <tcp_rexmit_fast+0xb8>)
 801c898:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801c89c:	4929      	ldr	r1, [pc, #164]	; (801c944 <tcp_rexmit_fast+0xbc>)
 801c89e:	482a      	ldr	r0, [pc, #168]	; (801c948 <tcp_rexmit_fast+0xc0>)
 801c8a0:	f002 fa74 	bl	801ed8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d045      	beq.n	801c938 <tcp_rexmit_fast+0xb0>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	8b5b      	ldrh	r3, [r3, #26]
 801c8b0:	f003 0304 	and.w	r3, r3, #4
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d13f      	bne.n	801c938 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f7ff ff79 	bl	801c7b0 <tcp_rexmit>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d139      	bne.n	801c938 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c8d0:	4293      	cmp	r3, r2
 801c8d2:	bf28      	it	cs
 801c8d4:	4613      	movcs	r3, r2
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	da00      	bge.n	801c8de <tcp_rexmit_fast+0x56>
 801c8dc:	3301      	adds	r3, #1
 801c8de:	105b      	asrs	r3, r3, #1
 801c8e0:	b29a      	uxth	r2, r3
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c8ee:	461a      	mov	r2, r3
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c8f4:	005b      	lsls	r3, r3, #1
 801c8f6:	429a      	cmp	r2, r3
 801c8f8:	d206      	bcs.n	801c908 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	b29a      	uxth	r2, r3
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c912:	4619      	mov	r1, r3
 801c914:	0049      	lsls	r1, r1, #1
 801c916:	440b      	add	r3, r1
 801c918:	b29b      	uxth	r3, r3
 801c91a:	4413      	add	r3, r2
 801c91c:	b29a      	uxth	r2, r3
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	8b5b      	ldrh	r3, [r3, #26]
 801c928:	f043 0304 	orr.w	r3, r3, #4
 801c92c:	b29a      	uxth	r2, r3
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	2200      	movs	r2, #0
 801c936:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801c938:	bf00      	nop
 801c93a:	3708      	adds	r7, #8
 801c93c:	46bd      	mov	sp, r7
 801c93e:	bd80      	pop	{r7, pc}
 801c940:	080237ec 	.word	0x080237ec
 801c944:	08023f0c 	.word	0x08023f0c
 801c948:	080238a8 	.word	0x080238a8

0801c94c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b086      	sub	sp, #24
 801c950:	af00      	add	r7, sp, #0
 801c952:	60f8      	str	r0, [r7, #12]
 801c954:	607b      	str	r3, [r7, #4]
 801c956:	460b      	mov	r3, r1
 801c958:	817b      	strh	r3, [r7, #10]
 801c95a:	4613      	mov	r3, r2
 801c95c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c95e:	897a      	ldrh	r2, [r7, #10]
 801c960:	893b      	ldrh	r3, [r7, #8]
 801c962:	4413      	add	r3, r2
 801c964:	b29b      	uxth	r3, r3
 801c966:	3314      	adds	r3, #20
 801c968:	b29b      	uxth	r3, r3
 801c96a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c96e:	4619      	mov	r1, r3
 801c970:	2022      	movs	r0, #34	; 0x22
 801c972:	f7f9 fcd1 	bl	8016318 <pbuf_alloc>
 801c976:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d04d      	beq.n	801ca1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c97e:	897b      	ldrh	r3, [r7, #10]
 801c980:	3313      	adds	r3, #19
 801c982:	697a      	ldr	r2, [r7, #20]
 801c984:	8952      	ldrh	r2, [r2, #10]
 801c986:	4293      	cmp	r3, r2
 801c988:	db06      	blt.n	801c998 <tcp_output_alloc_header_common+0x4c>
 801c98a:	4b26      	ldr	r3, [pc, #152]	; (801ca24 <tcp_output_alloc_header_common+0xd8>)
 801c98c:	f240 7223 	movw	r2, #1827	; 0x723
 801c990:	4925      	ldr	r1, [pc, #148]	; (801ca28 <tcp_output_alloc_header_common+0xdc>)
 801c992:	4826      	ldr	r0, [pc, #152]	; (801ca2c <tcp_output_alloc_header_common+0xe0>)
 801c994:	f002 f9fa 	bl	801ed8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c998:	697b      	ldr	r3, [r7, #20]
 801c99a:	685b      	ldr	r3, [r3, #4]
 801c99c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c99e:	8c3b      	ldrh	r3, [r7, #32]
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f7f8 fb35 	bl	8015010 <lwip_htons>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	461a      	mov	r2, r3
 801c9aa:	693b      	ldr	r3, [r7, #16]
 801c9ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f7f8 fb2d 	bl	8015010 <lwip_htons>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	461a      	mov	r2, r3
 801c9ba:	693b      	ldr	r3, [r7, #16]
 801c9bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c9be:	693b      	ldr	r3, [r7, #16]
 801c9c0:	687a      	ldr	r2, [r7, #4]
 801c9c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c9c4:	68f8      	ldr	r0, [r7, #12]
 801c9c6:	f7f8 fb38 	bl	801503a <lwip_htonl>
 801c9ca:	4602      	mov	r2, r0
 801c9cc:	693b      	ldr	r3, [r7, #16]
 801c9ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c9d0:	897b      	ldrh	r3, [r7, #10]
 801c9d2:	089b      	lsrs	r3, r3, #2
 801c9d4:	b29b      	uxth	r3, r3
 801c9d6:	3305      	adds	r3, #5
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	031b      	lsls	r3, r3, #12
 801c9dc:	b29a      	uxth	r2, r3
 801c9de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c9e2:	b29b      	uxth	r3, r3
 801c9e4:	4313      	orrs	r3, r2
 801c9e6:	b29b      	uxth	r3, r3
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7f8 fb11 	bl	8015010 <lwip_htons>
 801c9ee:	4603      	mov	r3, r0
 801c9f0:	461a      	mov	r2, r3
 801c9f2:	693b      	ldr	r3, [r7, #16]
 801c9f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c9f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	f7f8 fb09 	bl	8015010 <lwip_htons>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	461a      	mov	r2, r3
 801ca02:	693b      	ldr	r3, [r7, #16]
 801ca04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ca06:	693b      	ldr	r3, [r7, #16]
 801ca08:	2200      	movs	r2, #0
 801ca0a:	741a      	strb	r2, [r3, #16]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ca10:	693b      	ldr	r3, [r7, #16]
 801ca12:	2200      	movs	r2, #0
 801ca14:	749a      	strb	r2, [r3, #18]
 801ca16:	2200      	movs	r2, #0
 801ca18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ca1a:	697b      	ldr	r3, [r7, #20]
}
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	3718      	adds	r7, #24
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bd80      	pop	{r7, pc}
 801ca24:	080237ec 	.word	0x080237ec
 801ca28:	08023f2c 	.word	0x08023f2c
 801ca2c:	080238a8 	.word	0x080238a8

0801ca30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ca30:	b5b0      	push	{r4, r5, r7, lr}
 801ca32:	b08a      	sub	sp, #40	; 0x28
 801ca34:	af04      	add	r7, sp, #16
 801ca36:	60f8      	str	r0, [r7, #12]
 801ca38:	607b      	str	r3, [r7, #4]
 801ca3a:	460b      	mov	r3, r1
 801ca3c:	817b      	strh	r3, [r7, #10]
 801ca3e:	4613      	mov	r3, r2
 801ca40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d106      	bne.n	801ca56 <tcp_output_alloc_header+0x26>
 801ca48:	4b15      	ldr	r3, [pc, #84]	; (801caa0 <tcp_output_alloc_header+0x70>)
 801ca4a:	f240 7242 	movw	r2, #1858	; 0x742
 801ca4e:	4915      	ldr	r1, [pc, #84]	; (801caa4 <tcp_output_alloc_header+0x74>)
 801ca50:	4815      	ldr	r0, [pc, #84]	; (801caa8 <tcp_output_alloc_header+0x78>)
 801ca52:	f002 f99b 	bl	801ed8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	8adb      	ldrh	r3, [r3, #22]
 801ca5e:	68fa      	ldr	r2, [r7, #12]
 801ca60:	8b12      	ldrh	r2, [r2, #24]
 801ca62:	68f9      	ldr	r1, [r7, #12]
 801ca64:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ca66:	893d      	ldrh	r5, [r7, #8]
 801ca68:	897c      	ldrh	r4, [r7, #10]
 801ca6a:	9103      	str	r1, [sp, #12]
 801ca6c:	2110      	movs	r1, #16
 801ca6e:	9102      	str	r1, [sp, #8]
 801ca70:	9201      	str	r2, [sp, #4]
 801ca72:	9300      	str	r3, [sp, #0]
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	462a      	mov	r2, r5
 801ca78:	4621      	mov	r1, r4
 801ca7a:	f7ff ff67 	bl	801c94c <tcp_output_alloc_header_common>
 801ca7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d006      	beq.n	801ca94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca8a:	68fa      	ldr	r2, [r7, #12]
 801ca8c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ca8e:	441a      	add	r2, r3
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ca94:	697b      	ldr	r3, [r7, #20]
}
 801ca96:	4618      	mov	r0, r3
 801ca98:	3718      	adds	r7, #24
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	bdb0      	pop	{r4, r5, r7, pc}
 801ca9e:	bf00      	nop
 801caa0:	080237ec 	.word	0x080237ec
 801caa4:	08023f5c 	.word	0x08023f5c
 801caa8:	080238a8 	.word	0x080238a8

0801caac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801caac:	b580      	push	{r7, lr}
 801caae:	b088      	sub	sp, #32
 801cab0:	af00      	add	r7, sp, #0
 801cab2:	60f8      	str	r0, [r7, #12]
 801cab4:	60b9      	str	r1, [r7, #8]
 801cab6:	4611      	mov	r1, r2
 801cab8:	461a      	mov	r2, r3
 801caba:	460b      	mov	r3, r1
 801cabc:	71fb      	strb	r3, [r7, #7]
 801cabe:	4613      	mov	r3, r2
 801cac0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801cac2:	2300      	movs	r3, #0
 801cac4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801cac6:	68bb      	ldr	r3, [r7, #8]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d106      	bne.n	801cada <tcp_output_fill_options+0x2e>
 801cacc:	4b13      	ldr	r3, [pc, #76]	; (801cb1c <tcp_output_fill_options+0x70>)
 801cace:	f240 7256 	movw	r2, #1878	; 0x756
 801cad2:	4913      	ldr	r1, [pc, #76]	; (801cb20 <tcp_output_fill_options+0x74>)
 801cad4:	4813      	ldr	r0, [pc, #76]	; (801cb24 <tcp_output_fill_options+0x78>)
 801cad6:	f002 f959 	bl	801ed8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801cada:	68bb      	ldr	r3, [r7, #8]
 801cadc:	685b      	ldr	r3, [r3, #4]
 801cade:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801cae0:	69bb      	ldr	r3, [r7, #24]
 801cae2:	3314      	adds	r3, #20
 801cae4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801cae6:	69bb      	ldr	r3, [r7, #24]
 801cae8:	f103 0214 	add.w	r2, r3, #20
 801caec:	8bfb      	ldrh	r3, [r7, #30]
 801caee:	009b      	lsls	r3, r3, #2
 801caf0:	4619      	mov	r1, r3
 801caf2:	79fb      	ldrb	r3, [r7, #7]
 801caf4:	009b      	lsls	r3, r3, #2
 801caf6:	f003 0304 	and.w	r3, r3, #4
 801cafa:	440b      	add	r3, r1
 801cafc:	4413      	add	r3, r2
 801cafe:	697a      	ldr	r2, [r7, #20]
 801cb00:	429a      	cmp	r2, r3
 801cb02:	d006      	beq.n	801cb12 <tcp_output_fill_options+0x66>
 801cb04:	4b05      	ldr	r3, [pc, #20]	; (801cb1c <tcp_output_fill_options+0x70>)
 801cb06:	f240 7275 	movw	r2, #1909	; 0x775
 801cb0a:	4907      	ldr	r1, [pc, #28]	; (801cb28 <tcp_output_fill_options+0x7c>)
 801cb0c:	4805      	ldr	r0, [pc, #20]	; (801cb24 <tcp_output_fill_options+0x78>)
 801cb0e:	f002 f93d 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801cb12:	bf00      	nop
 801cb14:	3720      	adds	r7, #32
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bd80      	pop	{r7, pc}
 801cb1a:	bf00      	nop
 801cb1c:	080237ec 	.word	0x080237ec
 801cb20:	08023f84 	.word	0x08023f84
 801cb24:	080238a8 	.word	0x080238a8
 801cb28:	08023e7c 	.word	0x08023e7c

0801cb2c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b08a      	sub	sp, #40	; 0x28
 801cb30:	af04      	add	r7, sp, #16
 801cb32:	60f8      	str	r0, [r7, #12]
 801cb34:	60b9      	str	r1, [r7, #8]
 801cb36:	607a      	str	r2, [r7, #4]
 801cb38:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801cb3a:	68bb      	ldr	r3, [r7, #8]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d106      	bne.n	801cb4e <tcp_output_control_segment+0x22>
 801cb40:	4b1c      	ldr	r3, [pc, #112]	; (801cbb4 <tcp_output_control_segment+0x88>)
 801cb42:	f240 7287 	movw	r2, #1927	; 0x787
 801cb46:	491c      	ldr	r1, [pc, #112]	; (801cbb8 <tcp_output_control_segment+0x8c>)
 801cb48:	481c      	ldr	r0, [pc, #112]	; (801cbbc <tcp_output_control_segment+0x90>)
 801cb4a:	f002 f91f 	bl	801ed8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801cb4e:	683a      	ldr	r2, [r7, #0]
 801cb50:	6879      	ldr	r1, [r7, #4]
 801cb52:	68f8      	ldr	r0, [r7, #12]
 801cb54:	f7fe fae8 	bl	801b128 <tcp_route>
 801cb58:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801cb5a:	693b      	ldr	r3, [r7, #16]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d102      	bne.n	801cb66 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801cb60:	23fc      	movs	r3, #252	; 0xfc
 801cb62:	75fb      	strb	r3, [r7, #23]
 801cb64:	e01c      	b.n	801cba0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d006      	beq.n	801cb7a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	7adb      	ldrb	r3, [r3, #11]
 801cb70:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	7a9b      	ldrb	r3, [r3, #10]
 801cb76:	757b      	strb	r3, [r7, #21]
 801cb78:	e003      	b.n	801cb82 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801cb7a:	23ff      	movs	r3, #255	; 0xff
 801cb7c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801cb7e:	2300      	movs	r3, #0
 801cb80:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801cb82:	7dba      	ldrb	r2, [r7, #22]
 801cb84:	693b      	ldr	r3, [r7, #16]
 801cb86:	9302      	str	r3, [sp, #8]
 801cb88:	2306      	movs	r3, #6
 801cb8a:	9301      	str	r3, [sp, #4]
 801cb8c:	7d7b      	ldrb	r3, [r7, #21]
 801cb8e:	9300      	str	r3, [sp, #0]
 801cb90:	4613      	mov	r3, r2
 801cb92:	683a      	ldr	r2, [r7, #0]
 801cb94:	6879      	ldr	r1, [r7, #4]
 801cb96:	68b8      	ldr	r0, [r7, #8]
 801cb98:	f7f7 fa56 	bl	8014048 <ip4_output_if>
 801cb9c:	4603      	mov	r3, r0
 801cb9e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801cba0:	68b8      	ldr	r0, [r7, #8]
 801cba2:	f7f9 fe9d 	bl	80168e0 <pbuf_free>
  return err;
 801cba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cbaa:	4618      	mov	r0, r3
 801cbac:	3718      	adds	r7, #24
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	bd80      	pop	{r7, pc}
 801cbb2:	bf00      	nop
 801cbb4:	080237ec 	.word	0x080237ec
 801cbb8:	08023fac 	.word	0x08023fac
 801cbbc:	080238a8 	.word	0x080238a8

0801cbc0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801cbc0:	b590      	push	{r4, r7, lr}
 801cbc2:	b08b      	sub	sp, #44	; 0x2c
 801cbc4:	af04      	add	r7, sp, #16
 801cbc6:	60f8      	str	r0, [r7, #12]
 801cbc8:	60b9      	str	r1, [r7, #8]
 801cbca:	607a      	str	r2, [r7, #4]
 801cbcc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d106      	bne.n	801cbe2 <tcp_rst+0x22>
 801cbd4:	4b1f      	ldr	r3, [pc, #124]	; (801cc54 <tcp_rst+0x94>)
 801cbd6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801cbda:	491f      	ldr	r1, [pc, #124]	; (801cc58 <tcp_rst+0x98>)
 801cbdc:	481f      	ldr	r0, [pc, #124]	; (801cc5c <tcp_rst+0x9c>)
 801cbde:	f002 f8d5 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801cbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d106      	bne.n	801cbf6 <tcp_rst+0x36>
 801cbe8:	4b1a      	ldr	r3, [pc, #104]	; (801cc54 <tcp_rst+0x94>)
 801cbea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801cbee:	491c      	ldr	r1, [pc, #112]	; (801cc60 <tcp_rst+0xa0>)
 801cbf0:	481a      	ldr	r0, [pc, #104]	; (801cc5c <tcp_rst+0x9c>)
 801cbf2:	f002 f8cb 	bl	801ed8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cbf6:	2300      	movs	r3, #0
 801cbf8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801cbfa:	f24d 0316 	movw	r3, #53270	; 0xd016
 801cbfe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801cc00:	7dfb      	ldrb	r3, [r7, #23]
 801cc02:	b29c      	uxth	r4, r3
 801cc04:	68b8      	ldr	r0, [r7, #8]
 801cc06:	f7f8 fa18 	bl	801503a <lwip_htonl>
 801cc0a:	4602      	mov	r2, r0
 801cc0c:	8abb      	ldrh	r3, [r7, #20]
 801cc0e:	9303      	str	r3, [sp, #12]
 801cc10:	2314      	movs	r3, #20
 801cc12:	9302      	str	r3, [sp, #8]
 801cc14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801cc16:	9301      	str	r3, [sp, #4]
 801cc18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cc1a:	9300      	str	r3, [sp, #0]
 801cc1c:	4613      	mov	r3, r2
 801cc1e:	2200      	movs	r2, #0
 801cc20:	4621      	mov	r1, r4
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f7ff fe92 	bl	801c94c <tcp_output_alloc_header_common>
 801cc28:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801cc2a:	693b      	ldr	r3, [r7, #16]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d00c      	beq.n	801cc4a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cc30:	7dfb      	ldrb	r3, [r7, #23]
 801cc32:	2200      	movs	r2, #0
 801cc34:	6939      	ldr	r1, [r7, #16]
 801cc36:	68f8      	ldr	r0, [r7, #12]
 801cc38:	f7ff ff38 	bl	801caac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc3e:	683a      	ldr	r2, [r7, #0]
 801cc40:	6939      	ldr	r1, [r7, #16]
 801cc42:	68f8      	ldr	r0, [r7, #12]
 801cc44:	f7ff ff72 	bl	801cb2c <tcp_output_control_segment>
 801cc48:	e000      	b.n	801cc4c <tcp_rst+0x8c>
    return;
 801cc4a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801cc4c:	371c      	adds	r7, #28
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd90      	pop	{r4, r7, pc}
 801cc52:	bf00      	nop
 801cc54:	080237ec 	.word	0x080237ec
 801cc58:	08023fd8 	.word	0x08023fd8
 801cc5c:	080238a8 	.word	0x080238a8
 801cc60:	08023ff4 	.word	0x08023ff4

0801cc64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801cc64:	b590      	push	{r4, r7, lr}
 801cc66:	b087      	sub	sp, #28
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801cc70:	2300      	movs	r3, #0
 801cc72:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d106      	bne.n	801cc88 <tcp_send_empty_ack+0x24>
 801cc7a:	4b28      	ldr	r3, [pc, #160]	; (801cd1c <tcp_send_empty_ack+0xb8>)
 801cc7c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801cc80:	4927      	ldr	r1, [pc, #156]	; (801cd20 <tcp_send_empty_ack+0xbc>)
 801cc82:	4828      	ldr	r0, [pc, #160]	; (801cd24 <tcp_send_empty_ack+0xc0>)
 801cc84:	f002 f882 	bl	801ed8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cc88:	7dfb      	ldrb	r3, [r7, #23]
 801cc8a:	009b      	lsls	r3, r3, #2
 801cc8c:	b2db      	uxtb	r3, r3
 801cc8e:	f003 0304 	and.w	r3, r3, #4
 801cc92:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801cc94:	7d7b      	ldrb	r3, [r7, #21]
 801cc96:	b29c      	uxth	r4, r3
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f7f8 f9cc 	bl	801503a <lwip_htonl>
 801cca2:	4603      	mov	r3, r0
 801cca4:	2200      	movs	r2, #0
 801cca6:	4621      	mov	r1, r4
 801cca8:	6878      	ldr	r0, [r7, #4]
 801ccaa:	f7ff fec1 	bl	801ca30 <tcp_output_alloc_header>
 801ccae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ccb0:	693b      	ldr	r3, [r7, #16]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d109      	bne.n	801ccca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	8b5b      	ldrh	r3, [r3, #26]
 801ccba:	f043 0303 	orr.w	r3, r3, #3
 801ccbe:	b29a      	uxth	r2, r3
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ccc4:	f06f 0301 	mvn.w	r3, #1
 801ccc8:	e023      	b.n	801cd12 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ccca:	7dbb      	ldrb	r3, [r7, #22]
 801cccc:	7dfa      	ldrb	r2, [r7, #23]
 801ccce:	6939      	ldr	r1, [r7, #16]
 801ccd0:	6878      	ldr	r0, [r7, #4]
 801ccd2:	f7ff feeb 	bl	801caac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ccd6:	687a      	ldr	r2, [r7, #4]
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	3304      	adds	r3, #4
 801ccdc:	6939      	ldr	r1, [r7, #16]
 801ccde:	6878      	ldr	r0, [r7, #4]
 801cce0:	f7ff ff24 	bl	801cb2c <tcp_output_control_segment>
 801cce4:	4603      	mov	r3, r0
 801cce6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801cce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d007      	beq.n	801cd00 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	8b5b      	ldrh	r3, [r3, #26]
 801ccf4:	f043 0303 	orr.w	r3, r3, #3
 801ccf8:	b29a      	uxth	r2, r3
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	835a      	strh	r2, [r3, #26]
 801ccfe:	e006      	b.n	801cd0e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	8b5b      	ldrh	r3, [r3, #26]
 801cd04:	f023 0303 	bic.w	r3, r3, #3
 801cd08:	b29a      	uxth	r2, r3
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801cd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cd12:	4618      	mov	r0, r3
 801cd14:	371c      	adds	r7, #28
 801cd16:	46bd      	mov	sp, r7
 801cd18:	bd90      	pop	{r4, r7, pc}
 801cd1a:	bf00      	nop
 801cd1c:	080237ec 	.word	0x080237ec
 801cd20:	08024010 	.word	0x08024010
 801cd24:	080238a8 	.word	0x080238a8

0801cd28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801cd28:	b590      	push	{r4, r7, lr}
 801cd2a:	b087      	sub	sp, #28
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cd30:	2300      	movs	r3, #0
 801cd32:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d106      	bne.n	801cd48 <tcp_keepalive+0x20>
 801cd3a:	4b18      	ldr	r3, [pc, #96]	; (801cd9c <tcp_keepalive+0x74>)
 801cd3c:	f640 0224 	movw	r2, #2084	; 0x824
 801cd40:	4917      	ldr	r1, [pc, #92]	; (801cda0 <tcp_keepalive+0x78>)
 801cd42:	4818      	ldr	r0, [pc, #96]	; (801cda4 <tcp_keepalive+0x7c>)
 801cd44:	f002 f822 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801cd48:	7dfb      	ldrb	r3, [r7, #23]
 801cd4a:	b29c      	uxth	r4, r3
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd50:	3b01      	subs	r3, #1
 801cd52:	4618      	mov	r0, r3
 801cd54:	f7f8 f971 	bl	801503a <lwip_htonl>
 801cd58:	4603      	mov	r3, r0
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	4621      	mov	r1, r4
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7ff fe66 	bl	801ca30 <tcp_output_alloc_header>
 801cd64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cd66:	693b      	ldr	r3, [r7, #16]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d102      	bne.n	801cd72 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801cd6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd70:	e010      	b.n	801cd94 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cd72:	7dfb      	ldrb	r3, [r7, #23]
 801cd74:	2200      	movs	r2, #0
 801cd76:	6939      	ldr	r1, [r7, #16]
 801cd78:	6878      	ldr	r0, [r7, #4]
 801cd7a:	f7ff fe97 	bl	801caac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cd7e:	687a      	ldr	r2, [r7, #4]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	3304      	adds	r3, #4
 801cd84:	6939      	ldr	r1, [r7, #16]
 801cd86:	6878      	ldr	r0, [r7, #4]
 801cd88:	f7ff fed0 	bl	801cb2c <tcp_output_control_segment>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cd94:	4618      	mov	r0, r3
 801cd96:	371c      	adds	r7, #28
 801cd98:	46bd      	mov	sp, r7
 801cd9a:	bd90      	pop	{r4, r7, pc}
 801cd9c:	080237ec 	.word	0x080237ec
 801cda0:	08024030 	.word	0x08024030
 801cda4:	080238a8 	.word	0x080238a8

0801cda8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801cda8:	b590      	push	{r4, r7, lr}
 801cdaa:	b08b      	sub	sp, #44	; 0x2c
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d106      	bne.n	801cdca <tcp_zero_window_probe+0x22>
 801cdbc:	4b4c      	ldr	r3, [pc, #304]	; (801cef0 <tcp_zero_window_probe+0x148>)
 801cdbe:	f640 024f 	movw	r2, #2127	; 0x84f
 801cdc2:	494c      	ldr	r1, [pc, #304]	; (801cef4 <tcp_zero_window_probe+0x14c>)
 801cdc4:	484c      	ldr	r0, [pc, #304]	; (801cef8 <tcp_zero_window_probe+0x150>)
 801cdc6:	f001 ffe1 	bl	801ed8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cdce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801cdd0:	6a3b      	ldr	r3, [r7, #32]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d101      	bne.n	801cdda <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	e086      	b.n	801cee8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cde0:	2bff      	cmp	r3, #255	; 0xff
 801cde2:	d007      	beq.n	801cdf4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cdea:	3301      	adds	r3, #1
 801cdec:	b2da      	uxtb	r2, r3
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801cdf4:	6a3b      	ldr	r3, [r7, #32]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	899b      	ldrh	r3, [r3, #12]
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	f7f8 f907 	bl	8015010 <lwip_htons>
 801ce02:	4603      	mov	r3, r0
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	f003 0301 	and.w	r3, r3, #1
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d005      	beq.n	801ce1a <tcp_zero_window_probe+0x72>
 801ce0e:	6a3b      	ldr	r3, [r7, #32]
 801ce10:	891b      	ldrh	r3, [r3, #8]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d101      	bne.n	801ce1a <tcp_zero_window_probe+0x72>
 801ce16:	2301      	movs	r3, #1
 801ce18:	e000      	b.n	801ce1c <tcp_zero_window_probe+0x74>
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ce1e:	7ffb      	ldrb	r3, [r7, #31]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	bf0c      	ite	eq
 801ce24:	2301      	moveq	r3, #1
 801ce26:	2300      	movne	r3, #0
 801ce28:	b2db      	uxtb	r3, r3
 801ce2a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ce2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce30:	b299      	uxth	r1, r3
 801ce32:	6a3b      	ldr	r3, [r7, #32]
 801ce34:	68db      	ldr	r3, [r3, #12]
 801ce36:	685b      	ldr	r3, [r3, #4]
 801ce38:	8bba      	ldrh	r2, [r7, #28]
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7ff fdf8 	bl	801ca30 <tcp_output_alloc_header>
 801ce40:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ce42:	69bb      	ldr	r3, [r7, #24]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d102      	bne.n	801ce4e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ce48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce4c:	e04c      	b.n	801cee8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ce4e:	69bb      	ldr	r3, [r7, #24]
 801ce50:	685b      	ldr	r3, [r3, #4]
 801ce52:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ce54:	7ffb      	ldrb	r3, [r7, #31]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d011      	beq.n	801ce7e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	899b      	ldrh	r3, [r3, #12]
 801ce5e:	b29b      	uxth	r3, r3
 801ce60:	b21b      	sxth	r3, r3
 801ce62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ce66:	b21c      	sxth	r4, r3
 801ce68:	2011      	movs	r0, #17
 801ce6a:	f7f8 f8d1 	bl	8015010 <lwip_htons>
 801ce6e:	4603      	mov	r3, r0
 801ce70:	b21b      	sxth	r3, r3
 801ce72:	4323      	orrs	r3, r4
 801ce74:	b21b      	sxth	r3, r3
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	697b      	ldr	r3, [r7, #20]
 801ce7a:	819a      	strh	r2, [r3, #12]
 801ce7c:	e010      	b.n	801cea0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ce7e:	69bb      	ldr	r3, [r7, #24]
 801ce80:	685b      	ldr	r3, [r3, #4]
 801ce82:	3314      	adds	r3, #20
 801ce84:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ce86:	6a3b      	ldr	r3, [r7, #32]
 801ce88:	6858      	ldr	r0, [r3, #4]
 801ce8a:	6a3b      	ldr	r3, [r7, #32]
 801ce8c:	685b      	ldr	r3, [r3, #4]
 801ce8e:	891a      	ldrh	r2, [r3, #8]
 801ce90:	6a3b      	ldr	r3, [r7, #32]
 801ce92:	891b      	ldrh	r3, [r3, #8]
 801ce94:	1ad3      	subs	r3, r2, r3
 801ce96:	b29b      	uxth	r3, r3
 801ce98:	2201      	movs	r2, #1
 801ce9a:	6939      	ldr	r1, [r7, #16]
 801ce9c:	f7f9 ff26 	bl	8016cec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801cea0:	6a3b      	ldr	r3, [r7, #32]
 801cea2:	68db      	ldr	r3, [r3, #12]
 801cea4:	685b      	ldr	r3, [r3, #4]
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7f8 f8c7 	bl	801503a <lwip_htonl>
 801ceac:	4603      	mov	r3, r0
 801ceae:	3301      	adds	r3, #1
 801ceb0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	1ad3      	subs	r3, r2, r3
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	da02      	bge.n	801cec4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	68fa      	ldr	r2, [r7, #12]
 801cec2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cec8:	2200      	movs	r2, #0
 801ceca:	69b9      	ldr	r1, [r7, #24]
 801cecc:	6878      	ldr	r0, [r7, #4]
 801cece:	f7ff fded 	bl	801caac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ced2:	687a      	ldr	r2, [r7, #4]
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	3304      	adds	r3, #4
 801ced8:	69b9      	ldr	r1, [r7, #24]
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7ff fe26 	bl	801cb2c <tcp_output_control_segment>
 801cee0:	4603      	mov	r3, r0
 801cee2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cee4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cee8:	4618      	mov	r0, r3
 801ceea:	372c      	adds	r7, #44	; 0x2c
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd90      	pop	{r4, r7, pc}
 801cef0:	080237ec 	.word	0x080237ec
 801cef4:	0802404c 	.word	0x0802404c
 801cef8:	080238a8 	.word	0x080238a8

0801cefc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b082      	sub	sp, #8
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801cf04:	f7f9 ffe0 	bl	8016ec8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801cf08:	4b0a      	ldr	r3, [pc, #40]	; (801cf34 <tcpip_tcp_timer+0x38>)
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d103      	bne.n	801cf18 <tcpip_tcp_timer+0x1c>
 801cf10:	4b09      	ldr	r3, [pc, #36]	; (801cf38 <tcpip_tcp_timer+0x3c>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d005      	beq.n	801cf24 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801cf18:	2200      	movs	r2, #0
 801cf1a:	4908      	ldr	r1, [pc, #32]	; (801cf3c <tcpip_tcp_timer+0x40>)
 801cf1c:	20fa      	movs	r0, #250	; 0xfa
 801cf1e:	f000 f8f3 	bl	801d108 <sys_timeout>
 801cf22:	e003      	b.n	801cf2c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801cf24:	4b06      	ldr	r3, [pc, #24]	; (801cf40 <tcpip_tcp_timer+0x44>)
 801cf26:	2200      	movs	r2, #0
 801cf28:	601a      	str	r2, [r3, #0]
  }
}
 801cf2a:	bf00      	nop
 801cf2c:	bf00      	nop
 801cf2e:	3708      	adds	r7, #8
 801cf30:	46bd      	mov	sp, r7
 801cf32:	bd80      	pop	{r7, pc}
 801cf34:	20010374 	.word	0x20010374
 801cf38:	20010384 	.word	0x20010384
 801cf3c:	0801cefd 	.word	0x0801cefd
 801cf40:	200090c8 	.word	0x200090c8

0801cf44 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801cf48:	4b0a      	ldr	r3, [pc, #40]	; (801cf74 <tcp_timer_needed+0x30>)
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d10f      	bne.n	801cf70 <tcp_timer_needed+0x2c>
 801cf50:	4b09      	ldr	r3, [pc, #36]	; (801cf78 <tcp_timer_needed+0x34>)
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d103      	bne.n	801cf60 <tcp_timer_needed+0x1c>
 801cf58:	4b08      	ldr	r3, [pc, #32]	; (801cf7c <tcp_timer_needed+0x38>)
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d007      	beq.n	801cf70 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801cf60:	4b04      	ldr	r3, [pc, #16]	; (801cf74 <tcp_timer_needed+0x30>)
 801cf62:	2201      	movs	r2, #1
 801cf64:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801cf66:	2200      	movs	r2, #0
 801cf68:	4905      	ldr	r1, [pc, #20]	; (801cf80 <tcp_timer_needed+0x3c>)
 801cf6a:	20fa      	movs	r0, #250	; 0xfa
 801cf6c:	f000 f8cc 	bl	801d108 <sys_timeout>
  }
}
 801cf70:	bf00      	nop
 801cf72:	bd80      	pop	{r7, pc}
 801cf74:	200090c8 	.word	0x200090c8
 801cf78:	20010374 	.word	0x20010374
 801cf7c:	20010384 	.word	0x20010384
 801cf80:	0801cefd 	.word	0x0801cefd

0801cf84 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b086      	sub	sp, #24
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	60f8      	str	r0, [r7, #12]
 801cf8c:	60b9      	str	r1, [r7, #8]
 801cf8e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cf90:	200a      	movs	r0, #10
 801cf92:	f7f8 fd7f 	bl	8015a94 <memp_malloc>
 801cf96:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801cf98:	693b      	ldr	r3, [r7, #16]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d109      	bne.n	801cfb2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801cf9e:	693b      	ldr	r3, [r7, #16]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d151      	bne.n	801d048 <sys_timeout_abs+0xc4>
 801cfa4:	4b2a      	ldr	r3, [pc, #168]	; (801d050 <sys_timeout_abs+0xcc>)
 801cfa6:	22be      	movs	r2, #190	; 0xbe
 801cfa8:	492a      	ldr	r1, [pc, #168]	; (801d054 <sys_timeout_abs+0xd0>)
 801cfaa:	482b      	ldr	r0, [pc, #172]	; (801d058 <sys_timeout_abs+0xd4>)
 801cfac:	f001 feee 	bl	801ed8c <iprintf>
    return;
 801cfb0:	e04a      	b.n	801d048 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801cfb2:	693b      	ldr	r3, [r7, #16]
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801cfb8:	693b      	ldr	r3, [r7, #16]
 801cfba:	68ba      	ldr	r2, [r7, #8]
 801cfbc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801cfbe:	693b      	ldr	r3, [r7, #16]
 801cfc0:	687a      	ldr	r2, [r7, #4]
 801cfc2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801cfc4:	693b      	ldr	r3, [r7, #16]
 801cfc6:	68fa      	ldr	r2, [r7, #12]
 801cfc8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801cfca:	4b24      	ldr	r3, [pc, #144]	; (801d05c <sys_timeout_abs+0xd8>)
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d103      	bne.n	801cfda <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801cfd2:	4a22      	ldr	r2, [pc, #136]	; (801d05c <sys_timeout_abs+0xd8>)
 801cfd4:	693b      	ldr	r3, [r7, #16]
 801cfd6:	6013      	str	r3, [r2, #0]
    return;
 801cfd8:	e037      	b.n	801d04a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801cfda:	693b      	ldr	r3, [r7, #16]
 801cfdc:	685a      	ldr	r2, [r3, #4]
 801cfde:	4b1f      	ldr	r3, [pc, #124]	; (801d05c <sys_timeout_abs+0xd8>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	685b      	ldr	r3, [r3, #4]
 801cfe4:	1ad3      	subs	r3, r2, r3
 801cfe6:	0fdb      	lsrs	r3, r3, #31
 801cfe8:	f003 0301 	and.w	r3, r3, #1
 801cfec:	b2db      	uxtb	r3, r3
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d007      	beq.n	801d002 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801cff2:	4b1a      	ldr	r3, [pc, #104]	; (801d05c <sys_timeout_abs+0xd8>)
 801cff4:	681a      	ldr	r2, [r3, #0]
 801cff6:	693b      	ldr	r3, [r7, #16]
 801cff8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801cffa:	4a18      	ldr	r2, [pc, #96]	; (801d05c <sys_timeout_abs+0xd8>)
 801cffc:	693b      	ldr	r3, [r7, #16]
 801cffe:	6013      	str	r3, [r2, #0]
 801d000:	e023      	b.n	801d04a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d002:	4b16      	ldr	r3, [pc, #88]	; (801d05c <sys_timeout_abs+0xd8>)
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	617b      	str	r3, [r7, #20]
 801d008:	e01a      	b.n	801d040 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d00a:	697b      	ldr	r3, [r7, #20]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d00b      	beq.n	801d02a <sys_timeout_abs+0xa6>
 801d012:	693b      	ldr	r3, [r7, #16]
 801d014:	685a      	ldr	r2, [r3, #4]
 801d016:	697b      	ldr	r3, [r7, #20]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	685b      	ldr	r3, [r3, #4]
 801d01c:	1ad3      	subs	r3, r2, r3
 801d01e:	0fdb      	lsrs	r3, r3, #31
 801d020:	f003 0301 	and.w	r3, r3, #1
 801d024:	b2db      	uxtb	r3, r3
 801d026:	2b00      	cmp	r3, #0
 801d028:	d007      	beq.n	801d03a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d02a:	697b      	ldr	r3, [r7, #20]
 801d02c:	681a      	ldr	r2, [r3, #0]
 801d02e:	693b      	ldr	r3, [r7, #16]
 801d030:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	693a      	ldr	r2, [r7, #16]
 801d036:	601a      	str	r2, [r3, #0]
        break;
 801d038:	e007      	b.n	801d04a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d03a:	697b      	ldr	r3, [r7, #20]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	617b      	str	r3, [r7, #20]
 801d040:	697b      	ldr	r3, [r7, #20]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d1e1      	bne.n	801d00a <sys_timeout_abs+0x86>
 801d046:	e000      	b.n	801d04a <sys_timeout_abs+0xc6>
    return;
 801d048:	bf00      	nop
      }
    }
  }
}
 801d04a:	3718      	adds	r7, #24
 801d04c:	46bd      	mov	sp, r7
 801d04e:	bd80      	pop	{r7, pc}
 801d050:	08024070 	.word	0x08024070
 801d054:	0802410c 	.word	0x0802410c
 801d058:	0802414c 	.word	0x0802414c
 801d05c:	200090c0 	.word	0x200090c0

0801d060 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b086      	sub	sp, #24
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801d06c:	697b      	ldr	r3, [r7, #20]
 801d06e:	685b      	ldr	r3, [r3, #4]
 801d070:	4798      	blx	r3

  now = sys_now();
 801d072:	f7e3 fcdd 	bl	8000a30 <sys_now>
 801d076:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801d078:	697b      	ldr	r3, [r7, #20]
 801d07a:	681a      	ldr	r2, [r3, #0]
 801d07c:	4b0f      	ldr	r3, [pc, #60]	; (801d0bc <lwip_cyclic_timer+0x5c>)
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	4413      	add	r3, r2
 801d082:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801d084:	68fa      	ldr	r2, [r7, #12]
 801d086:	693b      	ldr	r3, [r7, #16]
 801d088:	1ad3      	subs	r3, r2, r3
 801d08a:	0fdb      	lsrs	r3, r3, #31
 801d08c:	f003 0301 	and.w	r3, r3, #1
 801d090:	b2db      	uxtb	r3, r3
 801d092:	2b00      	cmp	r3, #0
 801d094:	d009      	beq.n	801d0aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801d096:	697b      	ldr	r3, [r7, #20]
 801d098:	681a      	ldr	r2, [r3, #0]
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	4413      	add	r3, r2
 801d09e:	687a      	ldr	r2, [r7, #4]
 801d0a0:	4907      	ldr	r1, [pc, #28]	; (801d0c0 <lwip_cyclic_timer+0x60>)
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7ff ff6e 	bl	801cf84 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801d0a8:	e004      	b.n	801d0b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801d0aa:	687a      	ldr	r2, [r7, #4]
 801d0ac:	4904      	ldr	r1, [pc, #16]	; (801d0c0 <lwip_cyclic_timer+0x60>)
 801d0ae:	68f8      	ldr	r0, [r7, #12]
 801d0b0:	f7ff ff68 	bl	801cf84 <sys_timeout_abs>
}
 801d0b4:	bf00      	nop
 801d0b6:	3718      	adds	r7, #24
 801d0b8:	46bd      	mov	sp, r7
 801d0ba:	bd80      	pop	{r7, pc}
 801d0bc:	200090c4 	.word	0x200090c4
 801d0c0:	0801d061 	.word	0x0801d061

0801d0c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d0ca:	2301      	movs	r3, #1
 801d0cc:	607b      	str	r3, [r7, #4]
 801d0ce:	e00e      	b.n	801d0ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d0d0:	4a0b      	ldr	r2, [pc, #44]	; (801d100 <sys_timeouts_init+0x3c>)
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	00db      	lsls	r3, r3, #3
 801d0dc:	4a08      	ldr	r2, [pc, #32]	; (801d100 <sys_timeouts_init+0x3c>)
 801d0de:	4413      	add	r3, r2
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	4908      	ldr	r1, [pc, #32]	; (801d104 <sys_timeouts_init+0x40>)
 801d0e4:	f000 f810 	bl	801d108 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	3301      	adds	r3, #1
 801d0ec:	607b      	str	r3, [r7, #4]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	2b04      	cmp	r3, #4
 801d0f2:	d9ed      	bls.n	801d0d0 <sys_timeouts_init+0xc>
  }
}
 801d0f4:	bf00      	nop
 801d0f6:	bf00      	nop
 801d0f8:	3708      	adds	r7, #8
 801d0fa:	46bd      	mov	sp, r7
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	bf00      	nop
 801d100:	08024ea4 	.word	0x08024ea4
 801d104:	0801d061 	.word	0x0801d061

0801d108 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b086      	sub	sp, #24
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	60f8      	str	r0, [r7, #12]
 801d110:	60b9      	str	r1, [r7, #8]
 801d112:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d11a:	d306      	bcc.n	801d12a <sys_timeout+0x22>
 801d11c:	4b0a      	ldr	r3, [pc, #40]	; (801d148 <sys_timeout+0x40>)
 801d11e:	f240 1229 	movw	r2, #297	; 0x129
 801d122:	490a      	ldr	r1, [pc, #40]	; (801d14c <sys_timeout+0x44>)
 801d124:	480a      	ldr	r0, [pc, #40]	; (801d150 <sys_timeout+0x48>)
 801d126:	f001 fe31 	bl	801ed8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d12a:	f7e3 fc81 	bl	8000a30 <sys_now>
 801d12e:	4602      	mov	r2, r0
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	4413      	add	r3, r2
 801d134:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d136:	687a      	ldr	r2, [r7, #4]
 801d138:	68b9      	ldr	r1, [r7, #8]
 801d13a:	6978      	ldr	r0, [r7, #20]
 801d13c:	f7ff ff22 	bl	801cf84 <sys_timeout_abs>
#endif
}
 801d140:	bf00      	nop
 801d142:	3718      	adds	r7, #24
 801d144:	46bd      	mov	sp, r7
 801d146:	bd80      	pop	{r7, pc}
 801d148:	08024070 	.word	0x08024070
 801d14c:	08024174 	.word	0x08024174
 801d150:	0802414c 	.word	0x0802414c

0801d154 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d154:	b580      	push	{r7, lr}
 801d156:	b084      	sub	sp, #16
 801d158:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d15a:	f7e3 fc69 	bl	8000a30 <sys_now>
 801d15e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801d160:	4b17      	ldr	r3, [pc, #92]	; (801d1c0 <sys_check_timeouts+0x6c>)
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801d166:	68bb      	ldr	r3, [r7, #8]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d022      	beq.n	801d1b2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d16c:	68bb      	ldr	r3, [r7, #8]
 801d16e:	685b      	ldr	r3, [r3, #4]
 801d170:	68fa      	ldr	r2, [r7, #12]
 801d172:	1ad3      	subs	r3, r2, r3
 801d174:	0fdb      	lsrs	r3, r3, #31
 801d176:	f003 0301 	and.w	r3, r3, #1
 801d17a:	b2db      	uxtb	r3, r3
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d11a      	bne.n	801d1b6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	4a0e      	ldr	r2, [pc, #56]	; (801d1c0 <sys_check_timeouts+0x6c>)
 801d186:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801d188:	68bb      	ldr	r3, [r7, #8]
 801d18a:	689b      	ldr	r3, [r3, #8]
 801d18c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	68db      	ldr	r3, [r3, #12]
 801d192:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	4a0a      	ldr	r2, [pc, #40]	; (801d1c4 <sys_check_timeouts+0x70>)
 801d19a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d19c:	68b9      	ldr	r1, [r7, #8]
 801d19e:	200a      	movs	r0, #10
 801d1a0:	f7f8 fcee 	bl	8015b80 <memp_free>
    if (handler != NULL) {
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d0da      	beq.n	801d160 <sys_check_timeouts+0xc>
      handler(arg);
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	6838      	ldr	r0, [r7, #0]
 801d1ae:	4798      	blx	r3
  do {
 801d1b0:	e7d6      	b.n	801d160 <sys_check_timeouts+0xc>
      return;
 801d1b2:	bf00      	nop
 801d1b4:	e000      	b.n	801d1b8 <sys_check_timeouts+0x64>
      return;
 801d1b6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d1b8:	3710      	adds	r7, #16
 801d1ba:	46bd      	mov	sp, r7
 801d1bc:	bd80      	pop	{r7, pc}
 801d1be:	bf00      	nop
 801d1c0:	200090c0 	.word	0x200090c0
 801d1c4:	200090c4 	.word	0x200090c4

0801d1c8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b082      	sub	sp, #8
 801d1cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d1ce:	4b16      	ldr	r3, [pc, #88]	; (801d228 <sys_timeouts_sleeptime+0x60>)
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d102      	bne.n	801d1dc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801d1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1da:	e020      	b.n	801d21e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801d1dc:	f7e3 fc28 	bl	8000a30 <sys_now>
 801d1e0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801d1e2:	4b11      	ldr	r3, [pc, #68]	; (801d228 <sys_timeouts_sleeptime+0x60>)
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	685a      	ldr	r2, [r3, #4]
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	1ad3      	subs	r3, r2, r3
 801d1ec:	0fdb      	lsrs	r3, r3, #31
 801d1ee:	f003 0301 	and.w	r3, r3, #1
 801d1f2:	b2db      	uxtb	r3, r3
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d001      	beq.n	801d1fc <sys_timeouts_sleeptime+0x34>
    return 0;
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	e010      	b.n	801d21e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801d1fc:	4b0a      	ldr	r3, [pc, #40]	; (801d228 <sys_timeouts_sleeptime+0x60>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	685a      	ldr	r2, [r3, #4]
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	1ad3      	subs	r3, r2, r3
 801d206:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801d208:	683b      	ldr	r3, [r7, #0]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	da06      	bge.n	801d21c <sys_timeouts_sleeptime+0x54>
 801d20e:	4b07      	ldr	r3, [pc, #28]	; (801d22c <sys_timeouts_sleeptime+0x64>)
 801d210:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801d214:	4906      	ldr	r1, [pc, #24]	; (801d230 <sys_timeouts_sleeptime+0x68>)
 801d216:	4807      	ldr	r0, [pc, #28]	; (801d234 <sys_timeouts_sleeptime+0x6c>)
 801d218:	f001 fdb8 	bl	801ed8c <iprintf>
    return ret;
 801d21c:	683b      	ldr	r3, [r7, #0]
  }
}
 801d21e:	4618      	mov	r0, r3
 801d220:	3708      	adds	r7, #8
 801d222:	46bd      	mov	sp, r7
 801d224:	bd80      	pop	{r7, pc}
 801d226:	bf00      	nop
 801d228:	200090c0 	.word	0x200090c0
 801d22c:	08024070 	.word	0x08024070
 801d230:	080241ac 	.word	0x080241ac
 801d234:	0802414c 	.word	0x0802414c

0801d238 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d238:	b580      	push	{r7, lr}
 801d23a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d23c:	f001 fe34 	bl	801eea8 <rand>
 801d240:	4603      	mov	r3, r0
 801d242:	b29b      	uxth	r3, r3
 801d244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801d248:	b29b      	uxth	r3, r3
 801d24a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801d24e:	b29a      	uxth	r2, r3
 801d250:	4b01      	ldr	r3, [pc, #4]	; (801d258 <udp_init+0x20>)
 801d252:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801d254:	bf00      	nop
 801d256:	bd80      	pop	{r7, pc}
 801d258:	2000003c 	.word	0x2000003c

0801d25c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801d25c:	b480      	push	{r7}
 801d25e:	b083      	sub	sp, #12
 801d260:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801d262:	2300      	movs	r3, #0
 801d264:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801d266:	4b17      	ldr	r3, [pc, #92]	; (801d2c4 <udp_new_port+0x68>)
 801d268:	881b      	ldrh	r3, [r3, #0]
 801d26a:	1c5a      	adds	r2, r3, #1
 801d26c:	b291      	uxth	r1, r2
 801d26e:	4a15      	ldr	r2, [pc, #84]	; (801d2c4 <udp_new_port+0x68>)
 801d270:	8011      	strh	r1, [r2, #0]
 801d272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d276:	4293      	cmp	r3, r2
 801d278:	d103      	bne.n	801d282 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801d27a:	4b12      	ldr	r3, [pc, #72]	; (801d2c4 <udp_new_port+0x68>)
 801d27c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d280:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d282:	4b11      	ldr	r3, [pc, #68]	; (801d2c8 <udp_new_port+0x6c>)
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	603b      	str	r3, [r7, #0]
 801d288:	e011      	b.n	801d2ae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801d28a:	683b      	ldr	r3, [r7, #0]
 801d28c:	8a5a      	ldrh	r2, [r3, #18]
 801d28e:	4b0d      	ldr	r3, [pc, #52]	; (801d2c4 <udp_new_port+0x68>)
 801d290:	881b      	ldrh	r3, [r3, #0]
 801d292:	429a      	cmp	r2, r3
 801d294:	d108      	bne.n	801d2a8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801d296:	88fb      	ldrh	r3, [r7, #6]
 801d298:	3301      	adds	r3, #1
 801d29a:	80fb      	strh	r3, [r7, #6]
 801d29c:	88fb      	ldrh	r3, [r7, #6]
 801d29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d2a2:	d3e0      	bcc.n	801d266 <udp_new_port+0xa>
        return 0;
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	e007      	b.n	801d2b8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d2a8:	683b      	ldr	r3, [r7, #0]
 801d2aa:	68db      	ldr	r3, [r3, #12]
 801d2ac:	603b      	str	r3, [r7, #0]
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d1ea      	bne.n	801d28a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801d2b4:	4b03      	ldr	r3, [pc, #12]	; (801d2c4 <udp_new_port+0x68>)
 801d2b6:	881b      	ldrh	r3, [r3, #0]
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	370c      	adds	r7, #12
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c2:	4770      	bx	lr
 801d2c4:	2000003c 	.word	0x2000003c
 801d2c8:	2001038c 	.word	0x2001038c

0801d2cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b084      	sub	sp, #16
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	60f8      	str	r0, [r7, #12]
 801d2d4:	60b9      	str	r1, [r7, #8]
 801d2d6:	4613      	mov	r3, r2
 801d2d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d105      	bne.n	801d2ec <udp_input_local_match+0x20>
 801d2e0:	4b27      	ldr	r3, [pc, #156]	; (801d380 <udp_input_local_match+0xb4>)
 801d2e2:	2287      	movs	r2, #135	; 0x87
 801d2e4:	4927      	ldr	r1, [pc, #156]	; (801d384 <udp_input_local_match+0xb8>)
 801d2e6:	4828      	ldr	r0, [pc, #160]	; (801d388 <udp_input_local_match+0xbc>)
 801d2e8:	f001 fd50 	bl	801ed8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d105      	bne.n	801d2fe <udp_input_local_match+0x32>
 801d2f2:	4b23      	ldr	r3, [pc, #140]	; (801d380 <udp_input_local_match+0xb4>)
 801d2f4:	2288      	movs	r2, #136	; 0x88
 801d2f6:	4925      	ldr	r1, [pc, #148]	; (801d38c <udp_input_local_match+0xc0>)
 801d2f8:	4823      	ldr	r0, [pc, #140]	; (801d388 <udp_input_local_match+0xbc>)
 801d2fa:	f001 fd47 	bl	801ed8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	7a1b      	ldrb	r3, [r3, #8]
 801d302:	2b00      	cmp	r3, #0
 801d304:	d00b      	beq.n	801d31e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	7a1a      	ldrb	r2, [r3, #8]
 801d30a:	4b21      	ldr	r3, [pc, #132]	; (801d390 <udp_input_local_match+0xc4>)
 801d30c:	685b      	ldr	r3, [r3, #4]
 801d30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d312:	3301      	adds	r3, #1
 801d314:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d316:	429a      	cmp	r2, r3
 801d318:	d001      	beq.n	801d31e <udp_input_local_match+0x52>
    return 0;
 801d31a:	2300      	movs	r3, #0
 801d31c:	e02b      	b.n	801d376 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d31e:	79fb      	ldrb	r3, [r7, #7]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d018      	beq.n	801d356 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d013      	beq.n	801d352 <udp_input_local_match+0x86>
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d00f      	beq.n	801d352 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d332:	4b17      	ldr	r3, [pc, #92]	; (801d390 <udp_input_local_match+0xc4>)
 801d334:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d33a:	d00a      	beq.n	801d352 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	681a      	ldr	r2, [r3, #0]
 801d340:	4b13      	ldr	r3, [pc, #76]	; (801d390 <udp_input_local_match+0xc4>)
 801d342:	695b      	ldr	r3, [r3, #20]
 801d344:	405a      	eors	r2, r3
 801d346:	68bb      	ldr	r3, [r7, #8]
 801d348:	3308      	adds	r3, #8
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d110      	bne.n	801d374 <udp_input_local_match+0xa8>
          return 1;
 801d352:	2301      	movs	r3, #1
 801d354:	e00f      	b.n	801d376 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d009      	beq.n	801d370 <udp_input_local_match+0xa4>
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	2b00      	cmp	r3, #0
 801d362:	d005      	beq.n	801d370 <udp_input_local_match+0xa4>
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	681a      	ldr	r2, [r3, #0]
 801d368:	4b09      	ldr	r3, [pc, #36]	; (801d390 <udp_input_local_match+0xc4>)
 801d36a:	695b      	ldr	r3, [r3, #20]
 801d36c:	429a      	cmp	r2, r3
 801d36e:	d101      	bne.n	801d374 <udp_input_local_match+0xa8>
        return 1;
 801d370:	2301      	movs	r3, #1
 801d372:	e000      	b.n	801d376 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801d374:	2300      	movs	r3, #0
}
 801d376:	4618      	mov	r0, r3
 801d378:	3710      	adds	r7, #16
 801d37a:	46bd      	mov	sp, r7
 801d37c:	bd80      	pop	{r7, pc}
 801d37e:	bf00      	nop
 801d380:	080241c0 	.word	0x080241c0
 801d384:	08024258 	.word	0x08024258
 801d388:	0802427c 	.word	0x0802427c
 801d38c:	080242a4 	.word	0x080242a4
 801d390:	20009498 	.word	0x20009498

0801d394 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d394:	b590      	push	{r4, r7, lr}
 801d396:	b08d      	sub	sp, #52	; 0x34
 801d398:	af02      	add	r7, sp, #8
 801d39a:	6078      	str	r0, [r7, #4]
 801d39c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801d39e:	2300      	movs	r3, #0
 801d3a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d105      	bne.n	801d3b4 <udp_input+0x20>
 801d3a8:	4b7c      	ldr	r3, [pc, #496]	; (801d59c <udp_input+0x208>)
 801d3aa:	22cf      	movs	r2, #207	; 0xcf
 801d3ac:	497c      	ldr	r1, [pc, #496]	; (801d5a0 <udp_input+0x20c>)
 801d3ae:	487d      	ldr	r0, [pc, #500]	; (801d5a4 <udp_input+0x210>)
 801d3b0:	f001 fcec 	bl	801ed8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d3b4:	683b      	ldr	r3, [r7, #0]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d105      	bne.n	801d3c6 <udp_input+0x32>
 801d3ba:	4b78      	ldr	r3, [pc, #480]	; (801d59c <udp_input+0x208>)
 801d3bc:	22d0      	movs	r2, #208	; 0xd0
 801d3be:	497a      	ldr	r1, [pc, #488]	; (801d5a8 <udp_input+0x214>)
 801d3c0:	4878      	ldr	r0, [pc, #480]	; (801d5a4 <udp_input+0x210>)
 801d3c2:	f001 fce3 	bl	801ed8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	895b      	ldrh	r3, [r3, #10]
 801d3ca:	2b07      	cmp	r3, #7
 801d3cc:	d803      	bhi.n	801d3d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d3ce:	6878      	ldr	r0, [r7, #4]
 801d3d0:	f7f9 fa86 	bl	80168e0 <pbuf_free>
    goto end;
 801d3d4:	e0de      	b.n	801d594 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	685b      	ldr	r3, [r3, #4]
 801d3da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d3dc:	4b73      	ldr	r3, [pc, #460]	; (801d5ac <udp_input+0x218>)
 801d3de:	695b      	ldr	r3, [r3, #20]
 801d3e0:	4a72      	ldr	r2, [pc, #456]	; (801d5ac <udp_input+0x218>)
 801d3e2:	6812      	ldr	r2, [r2, #0]
 801d3e4:	4611      	mov	r1, r2
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7f6 ff06 	bl	80141f8 <ip4_addr_isbroadcast_u32>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d3f0:	697b      	ldr	r3, [r7, #20]
 801d3f2:	881b      	ldrh	r3, [r3, #0]
 801d3f4:	b29b      	uxth	r3, r3
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	f7f7 fe0a 	bl	8015010 <lwip_htons>
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d400:	697b      	ldr	r3, [r7, #20]
 801d402:	885b      	ldrh	r3, [r3, #2]
 801d404:	b29b      	uxth	r3, r3
 801d406:	4618      	mov	r0, r3
 801d408:	f7f7 fe02 	bl	8015010 <lwip_htons>
 801d40c:	4603      	mov	r3, r0
 801d40e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d410:	2300      	movs	r3, #0
 801d412:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d414:	2300      	movs	r3, #0
 801d416:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d418:	2300      	movs	r3, #0
 801d41a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d41c:	4b64      	ldr	r3, [pc, #400]	; (801d5b0 <udp_input+0x21c>)
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	627b      	str	r3, [r7, #36]	; 0x24
 801d422:	e054      	b.n	801d4ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d426:	8a5b      	ldrh	r3, [r3, #18]
 801d428:	89fa      	ldrh	r2, [r7, #14]
 801d42a:	429a      	cmp	r2, r3
 801d42c:	d14a      	bne.n	801d4c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d42e:	7cfb      	ldrb	r3, [r7, #19]
 801d430:	461a      	mov	r2, r3
 801d432:	6839      	ldr	r1, [r7, #0]
 801d434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d436:	f7ff ff49 	bl	801d2cc <udp_input_local_match>
 801d43a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d041      	beq.n	801d4c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d442:	7c1b      	ldrb	r3, [r3, #16]
 801d444:	f003 0304 	and.w	r3, r3, #4
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d11d      	bne.n	801d488 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801d44c:	69fb      	ldr	r3, [r7, #28]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d102      	bne.n	801d458 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d454:	61fb      	str	r3, [r7, #28]
 801d456:	e017      	b.n	801d488 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d458:	7cfb      	ldrb	r3, [r7, #19]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d014      	beq.n	801d488 <udp_input+0xf4>
 801d45e:	4b53      	ldr	r3, [pc, #332]	; (801d5ac <udp_input+0x218>)
 801d460:	695b      	ldr	r3, [r3, #20]
 801d462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d466:	d10f      	bne.n	801d488 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d468:	69fb      	ldr	r3, [r7, #28]
 801d46a:	681a      	ldr	r2, [r3, #0]
 801d46c:	683b      	ldr	r3, [r7, #0]
 801d46e:	3304      	adds	r3, #4
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	429a      	cmp	r2, r3
 801d474:	d008      	beq.n	801d488 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d478:	681a      	ldr	r2, [r3, #0]
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	3304      	adds	r3, #4
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	429a      	cmp	r2, r3
 801d482:	d101      	bne.n	801d488 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d486:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d48a:	8a9b      	ldrh	r3, [r3, #20]
 801d48c:	8a3a      	ldrh	r2, [r7, #16]
 801d48e:	429a      	cmp	r2, r3
 801d490:	d118      	bne.n	801d4c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d494:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d496:	2b00      	cmp	r3, #0
 801d498:	d005      	beq.n	801d4a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d49c:	685a      	ldr	r2, [r3, #4]
 801d49e:	4b43      	ldr	r3, [pc, #268]	; (801d5ac <udp_input+0x218>)
 801d4a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d4a2:	429a      	cmp	r2, r3
 801d4a4:	d10e      	bne.n	801d4c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d4a6:	6a3b      	ldr	r3, [r7, #32]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d014      	beq.n	801d4d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ae:	68da      	ldr	r2, [r3, #12]
 801d4b0:	6a3b      	ldr	r3, [r7, #32]
 801d4b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801d4b4:	4b3e      	ldr	r3, [pc, #248]	; (801d5b0 <udp_input+0x21c>)
 801d4b6:	681a      	ldr	r2, [r3, #0]
 801d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801d4bc:	4a3c      	ldr	r2, [pc, #240]	; (801d5b0 <udp_input+0x21c>)
 801d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801d4c2:	e008      	b.n	801d4d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ca:	68db      	ldr	r3, [r3, #12]
 801d4cc:	627b      	str	r3, [r7, #36]	; 0x24
 801d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d1a7      	bne.n	801d424 <udp_input+0x90>
 801d4d4:	e000      	b.n	801d4d8 <udp_input+0x144>
        break;
 801d4d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d101      	bne.n	801d4e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801d4de:	69fb      	ldr	r3, [r7, #28]
 801d4e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d002      	beq.n	801d4ee <udp_input+0x15a>
    for_us = 1;
 801d4e8:	2301      	movs	r3, #1
 801d4ea:	76fb      	strb	r3, [r7, #27]
 801d4ec:	e00a      	b.n	801d504 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801d4ee:	683b      	ldr	r3, [r7, #0]
 801d4f0:	3304      	adds	r3, #4
 801d4f2:	681a      	ldr	r2, [r3, #0]
 801d4f4:	4b2d      	ldr	r3, [pc, #180]	; (801d5ac <udp_input+0x218>)
 801d4f6:	695b      	ldr	r3, [r3, #20]
 801d4f8:	429a      	cmp	r2, r3
 801d4fa:	bf0c      	ite	eq
 801d4fc:	2301      	moveq	r3, #1
 801d4fe:	2300      	movne	r3, #0
 801d500:	b2db      	uxtb	r3, r3
 801d502:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801d504:	7efb      	ldrb	r3, [r7, #27]
 801d506:	2b00      	cmp	r3, #0
 801d508:	d041      	beq.n	801d58e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d50a:	2108      	movs	r1, #8
 801d50c:	6878      	ldr	r0, [r7, #4]
 801d50e:	f7f9 f961 	bl	80167d4 <pbuf_remove_header>
 801d512:	4603      	mov	r3, r0
 801d514:	2b00      	cmp	r3, #0
 801d516:	d00a      	beq.n	801d52e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d518:	4b20      	ldr	r3, [pc, #128]	; (801d59c <udp_input+0x208>)
 801d51a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d51e:	4925      	ldr	r1, [pc, #148]	; (801d5b4 <udp_input+0x220>)
 801d520:	4820      	ldr	r0, [pc, #128]	; (801d5a4 <udp_input+0x210>)
 801d522:	f001 fc33 	bl	801ed8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	f7f9 f9da 	bl	80168e0 <pbuf_free>
      goto end;
 801d52c:	e032      	b.n	801d594 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801d52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d530:	2b00      	cmp	r3, #0
 801d532:	d012      	beq.n	801d55a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d536:	699b      	ldr	r3, [r3, #24]
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d00a      	beq.n	801d552 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d53e:	699c      	ldr	r4, [r3, #24]
 801d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d542:	69d8      	ldr	r0, [r3, #28]
 801d544:	8a3b      	ldrh	r3, [r7, #16]
 801d546:	9300      	str	r3, [sp, #0]
 801d548:	4b1b      	ldr	r3, [pc, #108]	; (801d5b8 <udp_input+0x224>)
 801d54a:	687a      	ldr	r2, [r7, #4]
 801d54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d54e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801d550:	e021      	b.n	801d596 <udp_input+0x202>
        pbuf_free(p);
 801d552:	6878      	ldr	r0, [r7, #4]
 801d554:	f7f9 f9c4 	bl	80168e0 <pbuf_free>
        goto end;
 801d558:	e01c      	b.n	801d594 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d55a:	7cfb      	ldrb	r3, [r7, #19]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d112      	bne.n	801d586 <udp_input+0x1f2>
 801d560:	4b12      	ldr	r3, [pc, #72]	; (801d5ac <udp_input+0x218>)
 801d562:	695b      	ldr	r3, [r3, #20]
 801d564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d568:	2be0      	cmp	r3, #224	; 0xe0
 801d56a:	d00c      	beq.n	801d586 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d56c:	4b0f      	ldr	r3, [pc, #60]	; (801d5ac <udp_input+0x218>)
 801d56e:	899b      	ldrh	r3, [r3, #12]
 801d570:	3308      	adds	r3, #8
 801d572:	b29b      	uxth	r3, r3
 801d574:	b21b      	sxth	r3, r3
 801d576:	4619      	mov	r1, r3
 801d578:	6878      	ldr	r0, [r7, #4]
 801d57a:	f7f9 f99e 	bl	80168ba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d57e:	2103      	movs	r1, #3
 801d580:	6878      	ldr	r0, [r7, #4]
 801d582:	f7f6 faf1 	bl	8013b68 <icmp_dest_unreach>
      pbuf_free(p);
 801d586:	6878      	ldr	r0, [r7, #4]
 801d588:	f7f9 f9aa 	bl	80168e0 <pbuf_free>
  return;
 801d58c:	e003      	b.n	801d596 <udp_input+0x202>
    pbuf_free(p);
 801d58e:	6878      	ldr	r0, [r7, #4]
 801d590:	f7f9 f9a6 	bl	80168e0 <pbuf_free>
  return;
 801d594:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d596:	372c      	adds	r7, #44	; 0x2c
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd90      	pop	{r4, r7, pc}
 801d59c:	080241c0 	.word	0x080241c0
 801d5a0:	080242cc 	.word	0x080242cc
 801d5a4:	0802427c 	.word	0x0802427c
 801d5a8:	080242e4 	.word	0x080242e4
 801d5ac:	20009498 	.word	0x20009498
 801d5b0:	2001038c 	.word	0x2001038c
 801d5b4:	08024300 	.word	0x08024300
 801d5b8:	200094a8 	.word	0x200094a8

0801d5bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b088      	sub	sp, #32
 801d5c0:	af02      	add	r7, sp, #8
 801d5c2:	60f8      	str	r0, [r7, #12]
 801d5c4:	60b9      	str	r1, [r7, #8]
 801d5c6:	607a      	str	r2, [r7, #4]
 801d5c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d109      	bne.n	801d5e4 <udp_sendto_if+0x28>
 801d5d0:	4b2e      	ldr	r3, [pc, #184]	; (801d68c <udp_sendto_if+0xd0>)
 801d5d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5d6:	492e      	ldr	r1, [pc, #184]	; (801d690 <udp_sendto_if+0xd4>)
 801d5d8:	482e      	ldr	r0, [pc, #184]	; (801d694 <udp_sendto_if+0xd8>)
 801d5da:	f001 fbd7 	bl	801ed8c <iprintf>
 801d5de:	f06f 030f 	mvn.w	r3, #15
 801d5e2:	e04f      	b.n	801d684 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801d5e4:	68bb      	ldr	r3, [r7, #8]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d109      	bne.n	801d5fe <udp_sendto_if+0x42>
 801d5ea:	4b28      	ldr	r3, [pc, #160]	; (801d68c <udp_sendto_if+0xd0>)
 801d5ec:	f240 2281 	movw	r2, #641	; 0x281
 801d5f0:	4929      	ldr	r1, [pc, #164]	; (801d698 <udp_sendto_if+0xdc>)
 801d5f2:	4828      	ldr	r0, [pc, #160]	; (801d694 <udp_sendto_if+0xd8>)
 801d5f4:	f001 fbca 	bl	801ed8c <iprintf>
 801d5f8:	f06f 030f 	mvn.w	r3, #15
 801d5fc:	e042      	b.n	801d684 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d109      	bne.n	801d618 <udp_sendto_if+0x5c>
 801d604:	4b21      	ldr	r3, [pc, #132]	; (801d68c <udp_sendto_if+0xd0>)
 801d606:	f240 2282 	movw	r2, #642	; 0x282
 801d60a:	4924      	ldr	r1, [pc, #144]	; (801d69c <udp_sendto_if+0xe0>)
 801d60c:	4821      	ldr	r0, [pc, #132]	; (801d694 <udp_sendto_if+0xd8>)
 801d60e:	f001 fbbd 	bl	801ed8c <iprintf>
 801d612:	f06f 030f 	mvn.w	r3, #15
 801d616:	e035      	b.n	801d684 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801d618:	6a3b      	ldr	r3, [r7, #32]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d109      	bne.n	801d632 <udp_sendto_if+0x76>
 801d61e:	4b1b      	ldr	r3, [pc, #108]	; (801d68c <udp_sendto_if+0xd0>)
 801d620:	f240 2283 	movw	r2, #643	; 0x283
 801d624:	491e      	ldr	r1, [pc, #120]	; (801d6a0 <udp_sendto_if+0xe4>)
 801d626:	481b      	ldr	r0, [pc, #108]	; (801d694 <udp_sendto_if+0xd8>)
 801d628:	f001 fbb0 	bl	801ed8c <iprintf>
 801d62c:	f06f 030f 	mvn.w	r3, #15
 801d630:	e028      	b.n	801d684 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d009      	beq.n	801d64c <udp_sendto_if+0x90>
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	d005      	beq.n	801d64c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d648:	2be0      	cmp	r3, #224	; 0xe0
 801d64a:	d103      	bne.n	801d654 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801d64c:	6a3b      	ldr	r3, [r7, #32]
 801d64e:	3304      	adds	r3, #4
 801d650:	617b      	str	r3, [r7, #20]
 801d652:	e00b      	b.n	801d66c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	681a      	ldr	r2, [r3, #0]
 801d658:	6a3b      	ldr	r3, [r7, #32]
 801d65a:	3304      	adds	r3, #4
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	429a      	cmp	r2, r3
 801d660:	d002      	beq.n	801d668 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801d662:	f06f 0303 	mvn.w	r3, #3
 801d666:	e00d      	b.n	801d684 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801d66c:	887a      	ldrh	r2, [r7, #2]
 801d66e:	697b      	ldr	r3, [r7, #20]
 801d670:	9301      	str	r3, [sp, #4]
 801d672:	6a3b      	ldr	r3, [r7, #32]
 801d674:	9300      	str	r3, [sp, #0]
 801d676:	4613      	mov	r3, r2
 801d678:	687a      	ldr	r2, [r7, #4]
 801d67a:	68b9      	ldr	r1, [r7, #8]
 801d67c:	68f8      	ldr	r0, [r7, #12]
 801d67e:	f000 f811 	bl	801d6a4 <udp_sendto_if_src>
 801d682:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801d684:	4618      	mov	r0, r3
 801d686:	3718      	adds	r7, #24
 801d688:	46bd      	mov	sp, r7
 801d68a:	bd80      	pop	{r7, pc}
 801d68c:	080241c0 	.word	0x080241c0
 801d690:	0802439c 	.word	0x0802439c
 801d694:	0802427c 	.word	0x0802427c
 801d698:	080243b8 	.word	0x080243b8
 801d69c:	080243d4 	.word	0x080243d4
 801d6a0:	080243f4 	.word	0x080243f4

0801d6a4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b08c      	sub	sp, #48	; 0x30
 801d6a8:	af04      	add	r7, sp, #16
 801d6aa:	60f8      	str	r0, [r7, #12]
 801d6ac:	60b9      	str	r1, [r7, #8]
 801d6ae:	607a      	str	r2, [r7, #4]
 801d6b0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d109      	bne.n	801d6cc <udp_sendto_if_src+0x28>
 801d6b8:	4b65      	ldr	r3, [pc, #404]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d6ba:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d6be:	4965      	ldr	r1, [pc, #404]	; (801d854 <udp_sendto_if_src+0x1b0>)
 801d6c0:	4865      	ldr	r0, [pc, #404]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d6c2:	f001 fb63 	bl	801ed8c <iprintf>
 801d6c6:	f06f 030f 	mvn.w	r3, #15
 801d6ca:	e0bc      	b.n	801d846 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d109      	bne.n	801d6e6 <udp_sendto_if_src+0x42>
 801d6d2:	4b5f      	ldr	r3, [pc, #380]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d6d4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801d6d8:	4960      	ldr	r1, [pc, #384]	; (801d85c <udp_sendto_if_src+0x1b8>)
 801d6da:	485f      	ldr	r0, [pc, #380]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d6dc:	f001 fb56 	bl	801ed8c <iprintf>
 801d6e0:	f06f 030f 	mvn.w	r3, #15
 801d6e4:	e0af      	b.n	801d846 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d109      	bne.n	801d700 <udp_sendto_if_src+0x5c>
 801d6ec:	4b58      	ldr	r3, [pc, #352]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d6ee:	f240 22d3 	movw	r2, #723	; 0x2d3
 801d6f2:	495b      	ldr	r1, [pc, #364]	; (801d860 <udp_sendto_if_src+0x1bc>)
 801d6f4:	4858      	ldr	r0, [pc, #352]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d6f6:	f001 fb49 	bl	801ed8c <iprintf>
 801d6fa:	f06f 030f 	mvn.w	r3, #15
 801d6fe:	e0a2      	b.n	801d846 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d702:	2b00      	cmp	r3, #0
 801d704:	d109      	bne.n	801d71a <udp_sendto_if_src+0x76>
 801d706:	4b52      	ldr	r3, [pc, #328]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d708:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801d70c:	4955      	ldr	r1, [pc, #340]	; (801d864 <udp_sendto_if_src+0x1c0>)
 801d70e:	4852      	ldr	r0, [pc, #328]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d710:	f001 fb3c 	bl	801ed8c <iprintf>
 801d714:	f06f 030f 	mvn.w	r3, #15
 801d718:	e095      	b.n	801d846 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d109      	bne.n	801d734 <udp_sendto_if_src+0x90>
 801d720:	4b4b      	ldr	r3, [pc, #300]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d722:	f240 22d5 	movw	r2, #725	; 0x2d5
 801d726:	4950      	ldr	r1, [pc, #320]	; (801d868 <udp_sendto_if_src+0x1c4>)
 801d728:	484b      	ldr	r0, [pc, #300]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d72a:	f001 fb2f 	bl	801ed8c <iprintf>
 801d72e:	f06f 030f 	mvn.w	r3, #15
 801d732:	e088      	b.n	801d846 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	8a5b      	ldrh	r3, [r3, #18]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d10f      	bne.n	801d75c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d73c:	68f9      	ldr	r1, [r7, #12]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	8a5b      	ldrh	r3, [r3, #18]
 801d742:	461a      	mov	r2, r3
 801d744:	68f8      	ldr	r0, [r7, #12]
 801d746:	f000 f893 	bl	801d870 <udp_bind>
 801d74a:	4603      	mov	r3, r0
 801d74c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801d74e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d752:	2b00      	cmp	r3, #0
 801d754:	d002      	beq.n	801d75c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801d756:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d75a:	e074      	b.n	801d846 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801d75c:	68bb      	ldr	r3, [r7, #8]
 801d75e:	891b      	ldrh	r3, [r3, #8]
 801d760:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801d764:	4293      	cmp	r3, r2
 801d766:	d902      	bls.n	801d76e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801d768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d76c:	e06b      	b.n	801d846 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801d76e:	2108      	movs	r1, #8
 801d770:	68b8      	ldr	r0, [r7, #8]
 801d772:	f7f9 f81f 	bl	80167b4 <pbuf_add_header>
 801d776:	4603      	mov	r3, r0
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d015      	beq.n	801d7a8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801d77c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d780:	2108      	movs	r1, #8
 801d782:	2022      	movs	r0, #34	; 0x22
 801d784:	f7f8 fdc8 	bl	8016318 <pbuf_alloc>
 801d788:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801d78a:	69fb      	ldr	r3, [r7, #28]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d102      	bne.n	801d796 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801d790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d794:	e057      	b.n	801d846 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801d796:	68bb      	ldr	r3, [r7, #8]
 801d798:	891b      	ldrh	r3, [r3, #8]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d006      	beq.n	801d7ac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801d79e:	68b9      	ldr	r1, [r7, #8]
 801d7a0:	69f8      	ldr	r0, [r7, #28]
 801d7a2:	f7f9 f9c1 	bl	8016b28 <pbuf_chain>
 801d7a6:	e001      	b.n	801d7ac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801d7a8:	68bb      	ldr	r3, [r7, #8]
 801d7aa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d7ac:	69fb      	ldr	r3, [r7, #28]
 801d7ae:	895b      	ldrh	r3, [r3, #10]
 801d7b0:	2b07      	cmp	r3, #7
 801d7b2:	d806      	bhi.n	801d7c2 <udp_sendto_if_src+0x11e>
 801d7b4:	4b26      	ldr	r3, [pc, #152]	; (801d850 <udp_sendto_if_src+0x1ac>)
 801d7b6:	f240 320d 	movw	r2, #781	; 0x30d
 801d7ba:	492c      	ldr	r1, [pc, #176]	; (801d86c <udp_sendto_if_src+0x1c8>)
 801d7bc:	4826      	ldr	r0, [pc, #152]	; (801d858 <udp_sendto_if_src+0x1b4>)
 801d7be:	f001 fae5 	bl	801ed8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801d7c2:	69fb      	ldr	r3, [r7, #28]
 801d7c4:	685b      	ldr	r3, [r3, #4]
 801d7c6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	8a5b      	ldrh	r3, [r3, #18]
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f7f7 fc1f 	bl	8015010 <lwip_htons>
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	461a      	mov	r2, r3
 801d7d6:	697b      	ldr	r3, [r7, #20]
 801d7d8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d7da:	887b      	ldrh	r3, [r7, #2]
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f7f7 fc17 	bl	8015010 <lwip_htons>
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	461a      	mov	r2, r3
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801d7ea:	697b      	ldr	r3, [r7, #20]
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	719a      	strb	r2, [r3, #6]
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801d7f4:	69fb      	ldr	r3, [r7, #28]
 801d7f6:	891b      	ldrh	r3, [r3, #8]
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7f7 fc09 	bl	8015010 <lwip_htons>
 801d7fe:	4603      	mov	r3, r0
 801d800:	461a      	mov	r2, r3
 801d802:	697b      	ldr	r3, [r7, #20]
 801d804:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801d806:	2311      	movs	r3, #17
 801d808:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	7adb      	ldrb	r3, [r3, #11]
 801d80e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	7a9b      	ldrb	r3, [r3, #10]
 801d814:	7cb9      	ldrb	r1, [r7, #18]
 801d816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d818:	9202      	str	r2, [sp, #8]
 801d81a:	7cfa      	ldrb	r2, [r7, #19]
 801d81c:	9201      	str	r2, [sp, #4]
 801d81e:	9300      	str	r3, [sp, #0]
 801d820:	460b      	mov	r3, r1
 801d822:	687a      	ldr	r2, [r7, #4]
 801d824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d826:	69f8      	ldr	r0, [r7, #28]
 801d828:	f7f6 fc38 	bl	801409c <ip4_output_if_src>
 801d82c:	4603      	mov	r3, r0
 801d82e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801d830:	69fa      	ldr	r2, [r7, #28]
 801d832:	68bb      	ldr	r3, [r7, #8]
 801d834:	429a      	cmp	r2, r3
 801d836:	d004      	beq.n	801d842 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801d838:	69f8      	ldr	r0, [r7, #28]
 801d83a:	f7f9 f851 	bl	80168e0 <pbuf_free>
    q = NULL;
 801d83e:	2300      	movs	r3, #0
 801d840:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801d842:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801d846:	4618      	mov	r0, r3
 801d848:	3720      	adds	r7, #32
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
 801d84e:	bf00      	nop
 801d850:	080241c0 	.word	0x080241c0
 801d854:	08024414 	.word	0x08024414
 801d858:	0802427c 	.word	0x0802427c
 801d85c:	08024434 	.word	0x08024434
 801d860:	08024454 	.word	0x08024454
 801d864:	08024478 	.word	0x08024478
 801d868:	0802449c 	.word	0x0802449c
 801d86c:	080244c0 	.word	0x080244c0

0801d870 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	b086      	sub	sp, #24
 801d874:	af00      	add	r7, sp, #0
 801d876:	60f8      	str	r0, [r7, #12]
 801d878:	60b9      	str	r1, [r7, #8]
 801d87a:	4613      	mov	r3, r2
 801d87c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d87e:	68bb      	ldr	r3, [r7, #8]
 801d880:	2b00      	cmp	r3, #0
 801d882:	d101      	bne.n	801d888 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d884:	4b39      	ldr	r3, [pc, #228]	; (801d96c <udp_bind+0xfc>)
 801d886:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d109      	bne.n	801d8a2 <udp_bind+0x32>
 801d88e:	4b38      	ldr	r3, [pc, #224]	; (801d970 <udp_bind+0x100>)
 801d890:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d894:	4937      	ldr	r1, [pc, #220]	; (801d974 <udp_bind+0x104>)
 801d896:	4838      	ldr	r0, [pc, #224]	; (801d978 <udp_bind+0x108>)
 801d898:	f001 fa78 	bl	801ed8c <iprintf>
 801d89c:	f06f 030f 	mvn.w	r3, #15
 801d8a0:	e060      	b.n	801d964 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d8a6:	4b35      	ldr	r3, [pc, #212]	; (801d97c <udp_bind+0x10c>)
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	617b      	str	r3, [r7, #20]
 801d8ac:	e009      	b.n	801d8c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d8ae:	68fa      	ldr	r2, [r7, #12]
 801d8b0:	697b      	ldr	r3, [r7, #20]
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	d102      	bne.n	801d8bc <udp_bind+0x4c>
      rebind = 1;
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	74fb      	strb	r3, [r7, #19]
      break;
 801d8ba:	e005      	b.n	801d8c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d8bc:	697b      	ldr	r3, [r7, #20]
 801d8be:	68db      	ldr	r3, [r3, #12]
 801d8c0:	617b      	str	r3, [r7, #20]
 801d8c2:	697b      	ldr	r3, [r7, #20]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d1f2      	bne.n	801d8ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d8c8:	88fb      	ldrh	r3, [r7, #6]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d109      	bne.n	801d8e2 <udp_bind+0x72>
    port = udp_new_port();
 801d8ce:	f7ff fcc5 	bl	801d25c <udp_new_port>
 801d8d2:	4603      	mov	r3, r0
 801d8d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d8d6:	88fb      	ldrh	r3, [r7, #6]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d12c      	bne.n	801d936 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d8dc:	f06f 0307 	mvn.w	r3, #7
 801d8e0:	e040      	b.n	801d964 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d8e2:	4b26      	ldr	r3, [pc, #152]	; (801d97c <udp_bind+0x10c>)
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	617b      	str	r3, [r7, #20]
 801d8e8:	e022      	b.n	801d930 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801d8ea:	68fa      	ldr	r2, [r7, #12]
 801d8ec:	697b      	ldr	r3, [r7, #20]
 801d8ee:	429a      	cmp	r2, r3
 801d8f0:	d01b      	beq.n	801d92a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d8f2:	697b      	ldr	r3, [r7, #20]
 801d8f4:	8a5b      	ldrh	r3, [r3, #18]
 801d8f6:	88fa      	ldrh	r2, [r7, #6]
 801d8f8:	429a      	cmp	r2, r3
 801d8fa:	d116      	bne.n	801d92a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d8fc:	697b      	ldr	r3, [r7, #20]
 801d8fe:	681a      	ldr	r2, [r3, #0]
 801d900:	68bb      	ldr	r3, [r7, #8]
 801d902:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d904:	429a      	cmp	r2, r3
 801d906:	d00d      	beq.n	801d924 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d908:	68bb      	ldr	r3, [r7, #8]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d00a      	beq.n	801d924 <udp_bind+0xb4>
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	2b00      	cmp	r3, #0
 801d914:	d006      	beq.n	801d924 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d916:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d003      	beq.n	801d924 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d91c:	697b      	ldr	r3, [r7, #20]
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d102      	bne.n	801d92a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d924:	f06f 0307 	mvn.w	r3, #7
 801d928:	e01c      	b.n	801d964 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d92a:	697b      	ldr	r3, [r7, #20]
 801d92c:	68db      	ldr	r3, [r3, #12]
 801d92e:	617b      	str	r3, [r7, #20]
 801d930:	697b      	ldr	r3, [r7, #20]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d1d9      	bne.n	801d8ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d002      	beq.n	801d942 <udp_bind+0xd2>
 801d93c:	68bb      	ldr	r3, [r7, #8]
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	e000      	b.n	801d944 <udp_bind+0xd4>
 801d942:	2300      	movs	r3, #0
 801d944:	68fa      	ldr	r2, [r7, #12]
 801d946:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	88fa      	ldrh	r2, [r7, #6]
 801d94c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d94e:	7cfb      	ldrb	r3, [r7, #19]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d106      	bne.n	801d962 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d954:	4b09      	ldr	r3, [pc, #36]	; (801d97c <udp_bind+0x10c>)
 801d956:	681a      	ldr	r2, [r3, #0]
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d95c:	4a07      	ldr	r2, [pc, #28]	; (801d97c <udp_bind+0x10c>)
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d962:	2300      	movs	r3, #0
}
 801d964:	4618      	mov	r0, r3
 801d966:	3718      	adds	r7, #24
 801d968:	46bd      	mov	sp, r7
 801d96a:	bd80      	pop	{r7, pc}
 801d96c:	08024da4 	.word	0x08024da4
 801d970:	080241c0 	.word	0x080241c0
 801d974:	080244f0 	.word	0x080244f0
 801d978:	0802427c 	.word	0x0802427c
 801d97c:	2001038c 	.word	0x2001038c

0801d980 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b086      	sub	sp, #24
 801d984:	af00      	add	r7, sp, #0
 801d986:	60f8      	str	r0, [r7, #12]
 801d988:	60b9      	str	r1, [r7, #8]
 801d98a:	4613      	mov	r3, r2
 801d98c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d109      	bne.n	801d9a8 <udp_connect+0x28>
 801d994:	4b2c      	ldr	r3, [pc, #176]	; (801da48 <udp_connect+0xc8>)
 801d996:	f240 4235 	movw	r2, #1077	; 0x435
 801d99a:	492c      	ldr	r1, [pc, #176]	; (801da4c <udp_connect+0xcc>)
 801d99c:	482c      	ldr	r0, [pc, #176]	; (801da50 <udp_connect+0xd0>)
 801d99e:	f001 f9f5 	bl	801ed8c <iprintf>
 801d9a2:	f06f 030f 	mvn.w	r3, #15
 801d9a6:	e04b      	b.n	801da40 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d109      	bne.n	801d9c2 <udp_connect+0x42>
 801d9ae:	4b26      	ldr	r3, [pc, #152]	; (801da48 <udp_connect+0xc8>)
 801d9b0:	f240 4236 	movw	r2, #1078	; 0x436
 801d9b4:	4927      	ldr	r1, [pc, #156]	; (801da54 <udp_connect+0xd4>)
 801d9b6:	4826      	ldr	r0, [pc, #152]	; (801da50 <udp_connect+0xd0>)
 801d9b8:	f001 f9e8 	bl	801ed8c <iprintf>
 801d9bc:	f06f 030f 	mvn.w	r3, #15
 801d9c0:	e03e      	b.n	801da40 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	8a5b      	ldrh	r3, [r3, #18]
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d10f      	bne.n	801d9ea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d9ca:	68f9      	ldr	r1, [r7, #12]
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	8a5b      	ldrh	r3, [r3, #18]
 801d9d0:	461a      	mov	r2, r3
 801d9d2:	68f8      	ldr	r0, [r7, #12]
 801d9d4:	f7ff ff4c 	bl	801d870 <udp_bind>
 801d9d8:	4603      	mov	r3, r0
 801d9da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d9dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d002      	beq.n	801d9ea <udp_connect+0x6a>
      return err;
 801d9e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d9e8:	e02a      	b.n	801da40 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d9ea:	68bb      	ldr	r3, [r7, #8]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d002      	beq.n	801d9f6 <udp_connect+0x76>
 801d9f0:	68bb      	ldr	r3, [r7, #8]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	e000      	b.n	801d9f8 <udp_connect+0x78>
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	68fa      	ldr	r2, [r7, #12]
 801d9fa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	88fa      	ldrh	r2, [r7, #6]
 801da00:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	7c1b      	ldrb	r3, [r3, #16]
 801da06:	f043 0304 	orr.w	r3, r3, #4
 801da0a:	b2da      	uxtb	r2, r3
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801da10:	4b11      	ldr	r3, [pc, #68]	; (801da58 <udp_connect+0xd8>)
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	617b      	str	r3, [r7, #20]
 801da16:	e008      	b.n	801da2a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801da18:	68fa      	ldr	r2, [r7, #12]
 801da1a:	697b      	ldr	r3, [r7, #20]
 801da1c:	429a      	cmp	r2, r3
 801da1e:	d101      	bne.n	801da24 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801da20:	2300      	movs	r3, #0
 801da22:	e00d      	b.n	801da40 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801da24:	697b      	ldr	r3, [r7, #20]
 801da26:	68db      	ldr	r3, [r3, #12]
 801da28:	617b      	str	r3, [r7, #20]
 801da2a:	697b      	ldr	r3, [r7, #20]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d1f3      	bne.n	801da18 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801da30:	4b09      	ldr	r3, [pc, #36]	; (801da58 <udp_connect+0xd8>)
 801da32:	681a      	ldr	r2, [r3, #0]
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801da38:	4a07      	ldr	r2, [pc, #28]	; (801da58 <udp_connect+0xd8>)
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801da3e:	2300      	movs	r3, #0
}
 801da40:	4618      	mov	r0, r3
 801da42:	3718      	adds	r7, #24
 801da44:	46bd      	mov	sp, r7
 801da46:	bd80      	pop	{r7, pc}
 801da48:	080241c0 	.word	0x080241c0
 801da4c:	08024508 	.word	0x08024508
 801da50:	0802427c 	.word	0x0802427c
 801da54:	08024524 	.word	0x08024524
 801da58:	2001038c 	.word	0x2001038c

0801da5c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801da5c:	b580      	push	{r7, lr}
 801da5e:	b084      	sub	sp, #16
 801da60:	af00      	add	r7, sp, #0
 801da62:	60f8      	str	r0, [r7, #12]
 801da64:	60b9      	str	r1, [r7, #8]
 801da66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d107      	bne.n	801da7e <udp_recv+0x22>
 801da6e:	4b08      	ldr	r3, [pc, #32]	; (801da90 <udp_recv+0x34>)
 801da70:	f240 428a 	movw	r2, #1162	; 0x48a
 801da74:	4907      	ldr	r1, [pc, #28]	; (801da94 <udp_recv+0x38>)
 801da76:	4808      	ldr	r0, [pc, #32]	; (801da98 <udp_recv+0x3c>)
 801da78:	f001 f988 	bl	801ed8c <iprintf>
 801da7c:	e005      	b.n	801da8a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	68ba      	ldr	r2, [r7, #8]
 801da82:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	687a      	ldr	r2, [r7, #4]
 801da88:	61da      	str	r2, [r3, #28]
}
 801da8a:	3710      	adds	r7, #16
 801da8c:	46bd      	mov	sp, r7
 801da8e:	bd80      	pop	{r7, pc}
 801da90:	080241c0 	.word	0x080241c0
 801da94:	0802455c 	.word	0x0802455c
 801da98:	0802427c 	.word	0x0802427c

0801da9c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b084      	sub	sp, #16
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d107      	bne.n	801daba <udp_remove+0x1e>
 801daaa:	4b19      	ldr	r3, [pc, #100]	; (801db10 <udp_remove+0x74>)
 801daac:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801dab0:	4918      	ldr	r1, [pc, #96]	; (801db14 <udp_remove+0x78>)
 801dab2:	4819      	ldr	r0, [pc, #100]	; (801db18 <udp_remove+0x7c>)
 801dab4:	f001 f96a 	bl	801ed8c <iprintf>
 801dab8:	e026      	b.n	801db08 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801daba:	4b18      	ldr	r3, [pc, #96]	; (801db1c <udp_remove+0x80>)
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	687a      	ldr	r2, [r7, #4]
 801dac0:	429a      	cmp	r2, r3
 801dac2:	d105      	bne.n	801dad0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801dac4:	4b15      	ldr	r3, [pc, #84]	; (801db1c <udp_remove+0x80>)
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	68db      	ldr	r3, [r3, #12]
 801daca:	4a14      	ldr	r2, [pc, #80]	; (801db1c <udp_remove+0x80>)
 801dacc:	6013      	str	r3, [r2, #0]
 801dace:	e017      	b.n	801db00 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801dad0:	4b12      	ldr	r3, [pc, #72]	; (801db1c <udp_remove+0x80>)
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	60fb      	str	r3, [r7, #12]
 801dad6:	e010      	b.n	801dafa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	68db      	ldr	r3, [r3, #12]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d009      	beq.n	801daf4 <udp_remove+0x58>
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	68db      	ldr	r3, [r3, #12]
 801dae4:	687a      	ldr	r2, [r7, #4]
 801dae6:	429a      	cmp	r2, r3
 801dae8:	d104      	bne.n	801daf4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	68da      	ldr	r2, [r3, #12]
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	60da      	str	r2, [r3, #12]
        break;
 801daf2:	e005      	b.n	801db00 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	68db      	ldr	r3, [r3, #12]
 801daf8:	60fb      	str	r3, [r7, #12]
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d1eb      	bne.n	801dad8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801db00:	6879      	ldr	r1, [r7, #4]
 801db02:	2000      	movs	r0, #0
 801db04:	f7f8 f83c 	bl	8015b80 <memp_free>
}
 801db08:	3710      	adds	r7, #16
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd80      	pop	{r7, pc}
 801db0e:	bf00      	nop
 801db10:	080241c0 	.word	0x080241c0
 801db14:	08024574 	.word	0x08024574
 801db18:	0802427c 	.word	0x0802427c
 801db1c:	2001038c 	.word	0x2001038c

0801db20 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801db20:	b580      	push	{r7, lr}
 801db22:	b082      	sub	sp, #8
 801db24:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801db26:	2000      	movs	r0, #0
 801db28:	f7f7 ffb4 	bl	8015a94 <memp_malloc>
 801db2c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d007      	beq.n	801db44 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801db34:	2220      	movs	r2, #32
 801db36:	2100      	movs	r1, #0
 801db38:	6878      	ldr	r0, [r7, #4]
 801db3a:	f001 f91f 	bl	801ed7c <memset>
    pcb->ttl = UDP_TTL;
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	22ff      	movs	r2, #255	; 0xff
 801db42:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801db44:	687b      	ldr	r3, [r7, #4]
}
 801db46:	4618      	mov	r0, r3
 801db48:	3708      	adds	r7, #8
 801db4a:	46bd      	mov	sp, r7
 801db4c:	bd80      	pop	{r7, pc}

0801db4e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801db4e:	b580      	push	{r7, lr}
 801db50:	b084      	sub	sp, #16
 801db52:	af00      	add	r7, sp, #0
 801db54:	4603      	mov	r3, r0
 801db56:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801db58:	f7ff ffe2 	bl	801db20 <udp_new>
 801db5c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801db5e:	68fb      	ldr	r3, [r7, #12]
}
 801db60:	4618      	mov	r0, r3
 801db62:	3710      	adds	r7, #16
 801db64:	46bd      	mov	sp, r7
 801db66:	bd80      	pop	{r7, pc}

0801db68 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801db68:	b480      	push	{r7}
 801db6a:	b085      	sub	sp, #20
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	6078      	str	r0, [r7, #4]
 801db70:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	2b00      	cmp	r3, #0
 801db76:	d01e      	beq.n	801dbb6 <udp_netif_ip_addr_changed+0x4e>
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d01a      	beq.n	801dbb6 <udp_netif_ip_addr_changed+0x4e>
 801db80:	683b      	ldr	r3, [r7, #0]
 801db82:	2b00      	cmp	r3, #0
 801db84:	d017      	beq.n	801dbb6 <udp_netif_ip_addr_changed+0x4e>
 801db86:	683b      	ldr	r3, [r7, #0]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d013      	beq.n	801dbb6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801db8e:	4b0d      	ldr	r3, [pc, #52]	; (801dbc4 <udp_netif_ip_addr_changed+0x5c>)
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	60fb      	str	r3, [r7, #12]
 801db94:	e00c      	b.n	801dbb0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	681a      	ldr	r2, [r3, #0]
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	429a      	cmp	r2, r3
 801dba0:	d103      	bne.n	801dbaa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	681a      	ldr	r2, [r3, #0]
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	68db      	ldr	r3, [r3, #12]
 801dbae:	60fb      	str	r3, [r7, #12]
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d1ef      	bne.n	801db96 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801dbb6:	bf00      	nop
 801dbb8:	3714      	adds	r7, #20
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc0:	4770      	bx	lr
 801dbc2:	bf00      	nop
 801dbc4:	2001038c 	.word	0x2001038c

0801dbc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b086      	sub	sp, #24
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
 801dbd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dbd2:	230e      	movs	r3, #14
 801dbd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	895b      	ldrh	r3, [r3, #10]
 801dbda:	2b0e      	cmp	r3, #14
 801dbdc:	d96e      	bls.n	801dcbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	7bdb      	ldrb	r3, [r3, #15]
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d106      	bne.n	801dbf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dbe6:	683b      	ldr	r3, [r7, #0]
 801dbe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbec:	3301      	adds	r3, #1
 801dbee:	b2da      	uxtb	r2, r3
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	685b      	ldr	r3, [r3, #4]
 801dbf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dbfa:	693b      	ldr	r3, [r7, #16]
 801dbfc:	7b1a      	ldrb	r2, [r3, #12]
 801dbfe:	7b5b      	ldrb	r3, [r3, #13]
 801dc00:	021b      	lsls	r3, r3, #8
 801dc02:	4313      	orrs	r3, r2
 801dc04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dc06:	693b      	ldr	r3, [r7, #16]
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	f003 0301 	and.w	r3, r3, #1
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d023      	beq.n	801dc5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dc12:	693b      	ldr	r3, [r7, #16]
 801dc14:	781b      	ldrb	r3, [r3, #0]
 801dc16:	2b01      	cmp	r3, #1
 801dc18:	d10f      	bne.n	801dc3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dc1a:	693b      	ldr	r3, [r7, #16]
 801dc1c:	785b      	ldrb	r3, [r3, #1]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d11b      	bne.n	801dc5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dc22:	693b      	ldr	r3, [r7, #16]
 801dc24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dc26:	2b5e      	cmp	r3, #94	; 0x5e
 801dc28:	d117      	bne.n	801dc5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	7b5b      	ldrb	r3, [r3, #13]
 801dc2e:	f043 0310 	orr.w	r3, r3, #16
 801dc32:	b2da      	uxtb	r2, r3
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	735a      	strb	r2, [r3, #13]
 801dc38:	e00f      	b.n	801dc5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dc3a:	693b      	ldr	r3, [r7, #16]
 801dc3c:	2206      	movs	r2, #6
 801dc3e:	4928      	ldr	r1, [pc, #160]	; (801dce0 <ethernet_input+0x118>)
 801dc40:	4618      	mov	r0, r3
 801dc42:	f001 f865 	bl	801ed10 <memcmp>
 801dc46:	4603      	mov	r3, r0
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d106      	bne.n	801dc5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	7b5b      	ldrb	r3, [r3, #13]
 801dc50:	f043 0308 	orr.w	r3, r3, #8
 801dc54:	b2da      	uxtb	r2, r3
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dc5a:	89fb      	ldrh	r3, [r7, #14]
 801dc5c:	2b08      	cmp	r3, #8
 801dc5e:	d003      	beq.n	801dc68 <ethernet_input+0xa0>
 801dc60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801dc64:	d014      	beq.n	801dc90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dc66:	e032      	b.n	801dcce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dc6e:	f003 0308 	and.w	r3, r3, #8
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d024      	beq.n	801dcc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc76:	8afb      	ldrh	r3, [r7, #22]
 801dc78:	4619      	mov	r1, r3
 801dc7a:	6878      	ldr	r0, [r7, #4]
 801dc7c:	f7f8 fdaa 	bl	80167d4 <pbuf_remove_header>
 801dc80:	4603      	mov	r3, r0
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d11e      	bne.n	801dcc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dc86:	6839      	ldr	r1, [r7, #0]
 801dc88:	6878      	ldr	r0, [r7, #4]
 801dc8a:	f7f6 f89b 	bl	8013dc4 <ip4_input>
      break;
 801dc8e:	e013      	b.n	801dcb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dc96:	f003 0308 	and.w	r3, r3, #8
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d014      	beq.n	801dcc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc9e:	8afb      	ldrh	r3, [r7, #22]
 801dca0:	4619      	mov	r1, r3
 801dca2:	6878      	ldr	r0, [r7, #4]
 801dca4:	f7f8 fd96 	bl	80167d4 <pbuf_remove_header>
 801dca8:	4603      	mov	r3, r0
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d10e      	bne.n	801dccc <ethernet_input+0x104>
        etharp_input(p, netif);
 801dcae:	6839      	ldr	r1, [r7, #0]
 801dcb0:	6878      	ldr	r0, [r7, #4]
 801dcb2:	f7f5 fa1b 	bl	80130ec <etharp_input>
      break;
 801dcb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dcb8:	2300      	movs	r3, #0
 801dcba:	e00c      	b.n	801dcd6 <ethernet_input+0x10e>
    goto free_and_return;
 801dcbc:	bf00      	nop
 801dcbe:	e006      	b.n	801dcce <ethernet_input+0x106>
        goto free_and_return;
 801dcc0:	bf00      	nop
 801dcc2:	e004      	b.n	801dcce <ethernet_input+0x106>
        goto free_and_return;
 801dcc4:	bf00      	nop
 801dcc6:	e002      	b.n	801dcce <ethernet_input+0x106>
        goto free_and_return;
 801dcc8:	bf00      	nop
 801dcca:	e000      	b.n	801dcce <ethernet_input+0x106>
        goto free_and_return;
 801dccc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dcce:	6878      	ldr	r0, [r7, #4]
 801dcd0:	f7f8 fe06 	bl	80168e0 <pbuf_free>
  return ERR_OK;
 801dcd4:	2300      	movs	r3, #0
}
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	3718      	adds	r7, #24
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}
 801dcde:	bf00      	nop
 801dce0:	08024ecc 	.word	0x08024ecc

0801dce4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b086      	sub	sp, #24
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	60f8      	str	r0, [r7, #12]
 801dcec:	60b9      	str	r1, [r7, #8]
 801dcee:	607a      	str	r2, [r7, #4]
 801dcf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dcf2:	8c3b      	ldrh	r3, [r7, #32]
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	f7f7 f98b 	bl	8015010 <lwip_htons>
 801dcfa:	4603      	mov	r3, r0
 801dcfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dcfe:	210e      	movs	r1, #14
 801dd00:	68b8      	ldr	r0, [r7, #8]
 801dd02:	f7f8 fd57 	bl	80167b4 <pbuf_add_header>
 801dd06:	4603      	mov	r3, r0
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d125      	bne.n	801dd58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dd0c:	68bb      	ldr	r3, [r7, #8]
 801dd0e:	685b      	ldr	r3, [r3, #4]
 801dd10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dd12:	693b      	ldr	r3, [r7, #16]
 801dd14:	8afa      	ldrh	r2, [r7, #22]
 801dd16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dd18:	693b      	ldr	r3, [r7, #16]
 801dd1a:	2206      	movs	r2, #6
 801dd1c:	6839      	ldr	r1, [r7, #0]
 801dd1e:	4618      	mov	r0, r3
 801dd20:	f001 f804 	bl	801ed2c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dd24:	693b      	ldr	r3, [r7, #16]
 801dd26:	3306      	adds	r3, #6
 801dd28:	2206      	movs	r2, #6
 801dd2a:	6879      	ldr	r1, [r7, #4]
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	f000 fffd 	bl	801ed2c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dd38:	2b06      	cmp	r3, #6
 801dd3a:	d006      	beq.n	801dd4a <ethernet_output+0x66>
 801dd3c:	4b0a      	ldr	r3, [pc, #40]	; (801dd68 <ethernet_output+0x84>)
 801dd3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dd42:	490a      	ldr	r1, [pc, #40]	; (801dd6c <ethernet_output+0x88>)
 801dd44:	480a      	ldr	r0, [pc, #40]	; (801dd70 <ethernet_output+0x8c>)
 801dd46:	f001 f821 	bl	801ed8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	699b      	ldr	r3, [r3, #24]
 801dd4e:	68b9      	ldr	r1, [r7, #8]
 801dd50:	68f8      	ldr	r0, [r7, #12]
 801dd52:	4798      	blx	r3
 801dd54:	4603      	mov	r3, r0
 801dd56:	e002      	b.n	801dd5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dd58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dd5a:	f06f 0301 	mvn.w	r3, #1
}
 801dd5e:	4618      	mov	r0, r3
 801dd60:	3718      	adds	r7, #24
 801dd62:	46bd      	mov	sp, r7
 801dd64:	bd80      	pop	{r7, pc}
 801dd66:	bf00      	nop
 801dd68:	0802458c 	.word	0x0802458c
 801dd6c:	0802462c 	.word	0x0802462c
 801dd70:	08024660 	.word	0x08024660

0801dd74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801dd74:	b580      	push	{r7, lr}
 801dd76:	b082      	sub	sp, #8
 801dd78:	af00      	add	r7, sp, #0
 801dd7a:	6078      	str	r0, [r7, #4]
 801dd7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801dd7e:	683b      	ldr	r3, [r7, #0]
 801dd80:	2200      	movs	r2, #0
 801dd82:	2104      	movs	r1, #4
 801dd84:	4618      	mov	r0, r3
 801dd86:	f7ef ff35 	bl	800dbf4 <osMessageQueueNew>
 801dd8a:	4602      	mov	r2, r0
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d102      	bne.n	801dd9e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801dd98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dd9c:	e000      	b.n	801dda0 <sys_mbox_new+0x2c>

  return ERR_OK;
 801dd9e:	2300      	movs	r3, #0
}
 801dda0:	4618      	mov	r0, r3
 801dda2:	3708      	adds	r7, #8
 801dda4:	46bd      	mov	sp, r7
 801dda6:	bd80      	pop	{r7, pc}

0801dda8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b082      	sub	sp, #8
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	4618      	mov	r0, r3
 801ddb6:	f7f0 f84f 	bl	800de58 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f7f0 f86a 	bl	800de98 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ddc4:	bf00      	nop
 801ddc6:	3708      	adds	r7, #8
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}

0801ddcc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b084      	sub	sp, #16
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
 801ddd4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	6818      	ldr	r0, [r3, #0]
 801ddda:	4639      	mov	r1, r7
 801dddc:	2300      	movs	r3, #0
 801ddde:	2200      	movs	r2, #0
 801dde0:	f7ef ff7c 	bl	800dcdc <osMessageQueuePut>
 801dde4:	4603      	mov	r3, r0
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d102      	bne.n	801ddf0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ddea:	2300      	movs	r3, #0
 801ddec:	73fb      	strb	r3, [r7, #15]
 801ddee:	e001      	b.n	801ddf4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ddf0:	23ff      	movs	r3, #255	; 0xff
 801ddf2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ddf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	3710      	adds	r7, #16
 801ddfc:	46bd      	mov	sp, r7
 801ddfe:	bd80      	pop	{r7, pc}

0801de00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801de00:	b580      	push	{r7, lr}
 801de02:	b086      	sub	sp, #24
 801de04:	af00      	add	r7, sp, #0
 801de06:	60f8      	str	r0, [r7, #12]
 801de08:	60b9      	str	r1, [r7, #8]
 801de0a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801de0c:	f7ef fbb0 	bl	800d570 <osKernelGetTickCount>
 801de10:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	2b00      	cmp	r3, #0
 801de16:	d013      	beq.n	801de40 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	6818      	ldr	r0, [r3, #0]
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	2200      	movs	r2, #0
 801de20:	68b9      	ldr	r1, [r7, #8]
 801de22:	f7ef ffbb 	bl	800dd9c <osMessageQueueGet>
 801de26:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801de28:	693b      	ldr	r3, [r7, #16]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d105      	bne.n	801de3a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801de2e:	f7ef fb9f 	bl	800d570 <osKernelGetTickCount>
 801de32:	4602      	mov	r2, r0
 801de34:	697b      	ldr	r3, [r7, #20]
 801de36:	1ad3      	subs	r3, r2, r3
 801de38:	e00f      	b.n	801de5a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801de3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de3e:	e00c      	b.n	801de5a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	6818      	ldr	r0, [r3, #0]
 801de44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de48:	2200      	movs	r2, #0
 801de4a:	68b9      	ldr	r1, [r7, #8]
 801de4c:	f7ef ffa6 	bl	800dd9c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801de50:	f7ef fb8e 	bl	800d570 <osKernelGetTickCount>
 801de54:	4602      	mov	r2, r0
 801de56:	697b      	ldr	r3, [r7, #20]
 801de58:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801de5a:	4618      	mov	r0, r3
 801de5c:	3718      	adds	r7, #24
 801de5e:	46bd      	mov	sp, r7
 801de60:	bd80      	pop	{r7, pc}

0801de62 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801de62:	b580      	push	{r7, lr}
 801de64:	b082      	sub	sp, #8
 801de66:	af00      	add	r7, sp, #0
 801de68:	6078      	str	r0, [r7, #4]
 801de6a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	6818      	ldr	r0, [r3, #0]
 801de70:	2300      	movs	r3, #0
 801de72:	2200      	movs	r2, #0
 801de74:	6839      	ldr	r1, [r7, #0]
 801de76:	f7ef ff91 	bl	800dd9c <osMessageQueueGet>
 801de7a:	4603      	mov	r3, r0
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d101      	bne.n	801de84 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801de80:	2300      	movs	r3, #0
 801de82:	e001      	b.n	801de88 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801de84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801de88:	4618      	mov	r0, r3
 801de8a:	3708      	adds	r7, #8
 801de8c:	46bd      	mov	sp, r7
 801de8e:	bd80      	pop	{r7, pc}

0801de90 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801de90:	b480      	push	{r7}
 801de92:	b083      	sub	sp, #12
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d101      	bne.n	801dea4 <sys_mbox_valid+0x14>
    return 0;
 801dea0:	2300      	movs	r3, #0
 801dea2:	e000      	b.n	801dea6 <sys_mbox_valid+0x16>
  else
    return 1;
 801dea4:	2301      	movs	r3, #1
}
 801dea6:	4618      	mov	r0, r3
 801dea8:	370c      	adds	r7, #12
 801deaa:	46bd      	mov	sp, r7
 801deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb0:	4770      	bx	lr

0801deb2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801deb2:	b480      	push	{r7}
 801deb4:	b083      	sub	sp, #12
 801deb6:	af00      	add	r7, sp, #0
 801deb8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	2200      	movs	r2, #0
 801debe:	601a      	str	r2, [r3, #0]
}
 801dec0:	bf00      	nop
 801dec2:	370c      	adds	r7, #12
 801dec4:	46bd      	mov	sp, r7
 801dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deca:	4770      	bx	lr

0801decc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801decc:	b580      	push	{r7, lr}
 801dece:	b082      	sub	sp, #8
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
 801ded4:	460b      	mov	r3, r1
 801ded6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801ded8:	78fb      	ldrb	r3, [r7, #3]
 801deda:	2200      	movs	r2, #0
 801dedc:	4619      	mov	r1, r3
 801dede:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801dee2:	f7ef fd43 	bl	800d96c <osSemaphoreNew>
 801dee6:	4602      	mov	r2, r0
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	2b00      	cmp	r3, #0
 801def2:	d102      	bne.n	801defa <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801def4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801def8:	e009      	b.n	801df0e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801defa:	78fb      	ldrb	r3, [r7, #3]
 801defc:	2b00      	cmp	r3, #0
 801defe:	d105      	bne.n	801df0c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	2100      	movs	r1, #0
 801df06:	4618      	mov	r0, r3
 801df08:	f7ef fdba 	bl	800da80 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801df0c:	2300      	movs	r3, #0
}
 801df0e:	4618      	mov	r0, r3
 801df10:	3708      	adds	r7, #8
 801df12:	46bd      	mov	sp, r7
 801df14:	bd80      	pop	{r7, pc}

0801df16 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801df16:	b580      	push	{r7, lr}
 801df18:	b084      	sub	sp, #16
 801df1a:	af00      	add	r7, sp, #0
 801df1c:	6078      	str	r0, [r7, #4]
 801df1e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801df20:	f7ef fb26 	bl	800d570 <osKernelGetTickCount>
 801df24:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801df26:	683b      	ldr	r3, [r7, #0]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d011      	beq.n	801df50 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	6839      	ldr	r1, [r7, #0]
 801df32:	4618      	mov	r0, r3
 801df34:	f7ef fda4 	bl	800da80 <osSemaphoreAcquire>
 801df38:	4603      	mov	r3, r0
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d105      	bne.n	801df4a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801df3e:	f7ef fb17 	bl	800d570 <osKernelGetTickCount>
 801df42:	4602      	mov	r2, r0
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	1ad3      	subs	r3, r2, r3
 801df48:	e012      	b.n	801df70 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801df4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df4e:	e00f      	b.n	801df70 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801df50:	bf00      	nop
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801df5a:	4618      	mov	r0, r3
 801df5c:	f7ef fd90 	bl	800da80 <osSemaphoreAcquire>
 801df60:	4603      	mov	r3, r0
 801df62:	2b00      	cmp	r3, #0
 801df64:	d1f5      	bne.n	801df52 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801df66:	f7ef fb03 	bl	800d570 <osKernelGetTickCount>
 801df6a:	4602      	mov	r2, r0
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801df70:	4618      	mov	r0, r3
 801df72:	3710      	adds	r7, #16
 801df74:	46bd      	mov	sp, r7
 801df76:	bd80      	pop	{r7, pc}

0801df78 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801df78:	b580      	push	{r7, lr}
 801df7a:	b082      	sub	sp, #8
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	4618      	mov	r0, r3
 801df86:	f7ef fdcd 	bl	800db24 <osSemaphoreRelease>
}
 801df8a:	bf00      	nop
 801df8c:	3708      	adds	r7, #8
 801df8e:	46bd      	mov	sp, r7
 801df90:	bd80      	pop	{r7, pc}

0801df92 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801df92:	b580      	push	{r7, lr}
 801df94:	b082      	sub	sp, #8
 801df96:	af00      	add	r7, sp, #0
 801df98:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	4618      	mov	r0, r3
 801dfa0:	f7ef fe04 	bl	800dbac <osSemaphoreDelete>
}
 801dfa4:	bf00      	nop
 801dfa6:	3708      	adds	r7, #8
 801dfa8:	46bd      	mov	sp, r7
 801dfaa:	bd80      	pop	{r7, pc}

0801dfac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dfac:	b480      	push	{r7}
 801dfae:	b083      	sub	sp, #12
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d101      	bne.n	801dfc0 <sys_sem_valid+0x14>
    return 0;
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	e000      	b.n	801dfc2 <sys_sem_valid+0x16>
  else
    return 1;
 801dfc0:	2301      	movs	r3, #1
}
 801dfc2:	4618      	mov	r0, r3
 801dfc4:	370c      	adds	r7, #12
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfcc:	4770      	bx	lr

0801dfce <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dfce:	b480      	push	{r7}
 801dfd0:	b083      	sub	sp, #12
 801dfd2:	af00      	add	r7, sp, #0
 801dfd4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	2200      	movs	r2, #0
 801dfda:	601a      	str	r2, [r3, #0]
}
 801dfdc:	bf00      	nop
 801dfde:	370c      	adds	r7, #12
 801dfe0:	46bd      	mov	sp, r7
 801dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe6:	4770      	bx	lr

0801dfe8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dfe8:	b580      	push	{r7, lr}
 801dfea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801dfec:	2000      	movs	r0, #0
 801dfee:	f7ef fbaf 	bl	800d750 <osMutexNew>
 801dff2:	4603      	mov	r3, r0
 801dff4:	4a01      	ldr	r2, [pc, #4]	; (801dffc <sys_init+0x14>)
 801dff6:	6013      	str	r3, [r2, #0]
#endif
}
 801dff8:	bf00      	nop
 801dffa:	bd80      	pop	{r7, pc}
 801dffc:	20010394 	.word	0x20010394

0801e000 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e000:	b580      	push	{r7, lr}
 801e002:	b082      	sub	sp, #8
 801e004:	af00      	add	r7, sp, #0
 801e006:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e008:	2000      	movs	r0, #0
 801e00a:	f7ef fba1 	bl	800d750 <osMutexNew>
 801e00e:	4602      	mov	r2, r0
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d102      	bne.n	801e022 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e020:	e000      	b.n	801e024 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e022:	2300      	movs	r3, #0
}
 801e024:	4618      	mov	r0, r3
 801e026:	3708      	adds	r7, #8
 801e028:	46bd      	mov	sp, r7
 801e02a:	bd80      	pop	{r7, pc}

0801e02c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e02c:	b580      	push	{r7, lr}
 801e02e:	b082      	sub	sp, #8
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e03c:	4618      	mov	r0, r3
 801e03e:	f7ef fc0d 	bl	800d85c <osMutexAcquire>
#endif
}
 801e042:	bf00      	nop
 801e044:	3708      	adds	r7, #8
 801e046:	46bd      	mov	sp, r7
 801e048:	bd80      	pop	{r7, pc}

0801e04a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e04a:	b580      	push	{r7, lr}
 801e04c:	b082      	sub	sp, #8
 801e04e:	af00      	add	r7, sp, #0
 801e050:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	4618      	mov	r0, r3
 801e058:	f7ef fc4b 	bl	800d8f2 <osMutexRelease>
}
 801e05c:	bf00      	nop
 801e05e:	3708      	adds	r7, #8
 801e060:	46bd      	mov	sp, r7
 801e062:	bd80      	pop	{r7, pc}

0801e064 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b08e      	sub	sp, #56	; 0x38
 801e068:	af00      	add	r7, sp, #0
 801e06a:	60f8      	str	r0, [r7, #12]
 801e06c:	60b9      	str	r1, [r7, #8]
 801e06e:	607a      	str	r2, [r7, #4]
 801e070:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e072:	f107 0314 	add.w	r3, r7, #20
 801e076:	2224      	movs	r2, #36	; 0x24
 801e078:	2100      	movs	r1, #0
 801e07a:	4618      	mov	r0, r3
 801e07c:	f000 fe7e 	bl	801ed7c <memset>
 801e080:	68fb      	ldr	r3, [r7, #12]
 801e082:	617b      	str	r3, [r7, #20]
 801e084:	683b      	ldr	r3, [r7, #0]
 801e086:	62bb      	str	r3, [r7, #40]	; 0x28
 801e088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e08a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e08c:	f107 0314 	add.w	r3, r7, #20
 801e090:	461a      	mov	r2, r3
 801e092:	6879      	ldr	r1, [r7, #4]
 801e094:	68b8      	ldr	r0, [r7, #8]
 801e096:	f7ef fa80 	bl	800d59a <osThreadNew>
 801e09a:	4603      	mov	r3, r0
#endif
}
 801e09c:	4618      	mov	r0, r3
 801e09e:	3738      	adds	r7, #56	; 0x38
 801e0a0:	46bd      	mov	sp, r7
 801e0a2:	bd80      	pop	{r7, pc}

0801e0a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e0a8:	4b04      	ldr	r3, [pc, #16]	; (801e0bc <sys_arch_protect+0x18>)
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	f7ef fbd3 	bl	800d85c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e0b6:	2301      	movs	r3, #1
}
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	bd80      	pop	{r7, pc}
 801e0bc:	20010394 	.word	0x20010394

0801e0c0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b082      	sub	sp, #8
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e0c8:	4b04      	ldr	r3, [pc, #16]	; (801e0dc <sys_arch_unprotect+0x1c>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	4618      	mov	r0, r3
 801e0ce:	f7ef fc10 	bl	800d8f2 <osMutexRelease>
}
 801e0d2:	bf00      	nop
 801e0d4:	3708      	adds	r7, #8
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bd80      	pop	{r7, pc}
 801e0da:	bf00      	nop
 801e0dc:	20010394 	.word	0x20010394

0801e0e0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b084      	sub	sp, #16
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
 801e0e8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d002      	beq.n	801e0f6 <fs_open+0x16>
 801e0f0:	683b      	ldr	r3, [r7, #0]
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	d102      	bne.n	801e0fc <fs_open+0x1c>
    return ERR_ARG;
 801e0f6:	f06f 030f 	mvn.w	r3, #15
 801e0fa:	e028      	b.n	801e14e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801e0fc:	4b16      	ldr	r3, [pc, #88]	; (801e158 <fs_open+0x78>)
 801e0fe:	60fb      	str	r3, [r7, #12]
 801e100:	e020      	b.n	801e144 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801e102:	68fb      	ldr	r3, [r7, #12]
 801e104:	685b      	ldr	r3, [r3, #4]
 801e106:	4619      	mov	r1, r3
 801e108:	6838      	ldr	r0, [r7, #0]
 801e10a:	f7e2 f901 	bl	8000310 <strcmp>
 801e10e:	4603      	mov	r3, r0
 801e110:	2b00      	cmp	r3, #0
 801e112:	d114      	bne.n	801e13e <fs_open+0x5e>
      file->data = (const char *)f->data;
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	689a      	ldr	r2, [r3, #8]
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	68da      	ldr	r2, [r3, #12]
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	68da      	ldr	r2, [r3, #12]
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2200      	movs	r2, #0
 801e130:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	7c1a      	ldrb	r2, [r3, #16]
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801e13a:	2300      	movs	r3, #0
 801e13c:	e007      	b.n	801e14e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	60fb      	str	r3, [r7, #12]
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d1db      	bne.n	801e102 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801e14a:	f06f 0305 	mvn.w	r3, #5
}
 801e14e:	4618      	mov	r0, r3
 801e150:	3710      	adds	r7, #16
 801e152:	46bd      	mov	sp, r7
 801e154:	bd80      	pop	{r7, pc}
 801e156:	bf00      	nop
 801e158:	08034f80 	.word	0x08034f80

0801e15c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801e15c:	b480      	push	{r7}
 801e15e:	b083      	sub	sp, #12
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801e164:	bf00      	nop
 801e166:	370c      	adds	r7, #12
 801e168:	46bd      	mov	sp, r7
 801e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e16e:	4770      	bx	lr

0801e170 <UTIL_LCD_TRACE_Init>:
/**
  * @brief  Initializes the LCD Trace module
  * @retval None
  */
UTIL_LCD_TRACE_Status_t UTIL_LCD_TRACE_Init (void)
{
 801e170:	b580      	push	{r7, lr}
 801e172:	b082      	sub	sp, #8
 801e174:	af00      	add	r7, sp, #0
  uint32_t y_size;

  /* Deinit LCD cache */
  UTIL_LCD_TRACE_DeInit();
 801e176:	f000 f831 	bl	801e1dc <UTIL_LCD_TRACE_DeInit>

  /* Set background color */
  UTIL_LCD_SetBackColor(LCD_TRACE_BACKGROUND_COLOR);
 801e17a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e17e:	f000 faa1 	bl	801e6c4 <UTIL_LCD_SetBackColor>

  /* Clear the LCD */
  UTIL_LCD_Clear(LCD_TRACE_BACKGROUND_COLOR);
 801e182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e186:	f000 faf1 	bl	801e76c <UTIL_LCD_Clear>

  BSP_LCD_GetYSize(0, &y_size);
 801e18a:	1d3b      	adds	r3, r7, #4
 801e18c:	4619      	mov	r1, r3
 801e18e:	2000      	movs	r0, #0
 801e190:	f7e4 fd26 	bl	8002be0 <BSP_LCD_GetYSize>
  LcdTrace_Ctx.YWindowSize = ((y_size - (LCD_TRACE_HEADER_FONT.Height * 3U) - \
 801e194:	687a      	ldr	r2, [r7, #4]
 801e196:	4b0e      	ldr	r3, [pc, #56]	; (801e1d0 <UTIL_LCD_TRACE_Init+0x60>)
 801e198:	88db      	ldrh	r3, [r3, #6]
 801e19a:	4619      	mov	r1, r3
 801e19c:	460b      	mov	r3, r1
 801e19e:	005b      	lsls	r3, r3, #1
 801e1a0:	440b      	add	r3, r1
 801e1a2:	1ad3      	subs	r3, r2, r3
    LCD_TRACE_FOOTER_FONT.Height - 4U)/LCD_TRACE_TEXT_FONT.Height);
 801e1a4:	4a0a      	ldr	r2, [pc, #40]	; (801e1d0 <UTIL_LCD_TRACE_Init+0x60>)
 801e1a6:	88d2      	ldrh	r2, [r2, #6]
  LcdTrace_Ctx.YWindowSize = ((y_size - (LCD_TRACE_HEADER_FONT.Height * 3U) - \
 801e1a8:	1a9b      	subs	r3, r3, r2
    LCD_TRACE_FOOTER_FONT.Height - 4U)/LCD_TRACE_TEXT_FONT.Height);
 801e1aa:	3b04      	subs	r3, #4
 801e1ac:	4a09      	ldr	r2, [pc, #36]	; (801e1d4 <UTIL_LCD_TRACE_Init+0x64>)
 801e1ae:	88d2      	ldrh	r2, [r2, #6]
 801e1b0:	fbb3 f3f2 	udiv	r3, r3, r2
  LcdTrace_Ctx.YWindowSize = ((y_size - (LCD_TRACE_HEADER_FONT.Height * 3U) - \
 801e1b4:	4a08      	ldr	r2, [pc, #32]	; (801e1d8 <UTIL_LCD_TRACE_Init+0x68>)
 801e1b6:	6153      	str	r3, [r2, #20]

  if (YWINDOW_SIZE > LcdTrace_Ctx.YWindowSize)
 801e1b8:	4b07      	ldr	r3, [pc, #28]	; (801e1d8 <UTIL_LCD_TRACE_Init+0x68>)
 801e1ba:	695b      	ldr	r3, [r3, #20]
 801e1bc:	2b0c      	cmp	r3, #12
 801e1be:	d801      	bhi.n	801e1c4 <UTIL_LCD_TRACE_Init+0x54>
  {
    return UTIL_LCD_TRACE_ERROR;
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	e000      	b.n	801e1c6 <UTIL_LCD_TRACE_Init+0x56>
  }

  return UTIL_LCD_TRACE_OK;
 801e1c4:	2300      	movs	r3, #0
}
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3708      	adds	r7, #8
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd80      	pop	{r7, pc}
 801e1ce:	bf00      	nop
 801e1d0:	20000040 	.word	0x20000040
 801e1d4:	20000048 	.word	0x20000048
 801e1d8:	20010398 	.word	0x20010398

0801e1dc <UTIL_LCD_TRACE_DeInit>:
/**
  * @brief DeInitializes the LCD Trace module.
  * @retval None
  */
void UTIL_LCD_TRACE_DeInit(void)
{
 801e1dc:	b480      	push	{r7}
 801e1de:	af00      	add	r7, sp, #0
  LcdTrace_Ctx.LineColor                 = LCD_TRACE_TEXT_COLOR;
 801e1e0:	4b14      	ldr	r3, [pc, #80]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e1e2:	4a15      	ldr	r2, [pc, #84]	; (801e238 <UTIL_LCD_TRACE_DeInit+0x5c>)
 801e1e4:	611a      	str	r2, [r3, #16]
  LcdTrace_Ctx.CacheBufferXptr           = 0U;
 801e1e6:	4b13      	ldr	r3, [pc, #76]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e1e8:	2200      	movs	r2, #0
 801e1ea:	809a      	strh	r2, [r3, #4]
  LcdTrace_Ctx.CacheBufferYptrTop        = 0U;
 801e1ec:	4b11      	ldr	r3, [pc, #68]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	80da      	strh	r2, [r3, #6]
  LcdTrace_Ctx.CacheBufferYptrBottom     = 0U;
 801e1f2:	4b10      	ldr	r3, [pc, #64]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	811a      	strh	r2, [r3, #8]
  LcdTrace_Ctx.CacheBufferYptrTopBack    = 0U;
 801e1f8:	4b0e      	ldr	r3, [pc, #56]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e1fa:	2200      	movs	r2, #0
 801e1fc:	815a      	strh	r2, [r3, #10]
  LcdTrace_Ctx.CacheBufferYptrBottomBack = 0U;
 801e1fe:	4b0d      	ldr	r3, [pc, #52]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e200:	2200      	movs	r2, #0
 801e202:	819a      	strh	r2, [r3, #12]
  LcdTrace_Ctx.CacheBufferYptrInvert     = ENABLE;
 801e204:	4b0b      	ldr	r3, [pc, #44]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e206:	2201      	movs	r2, #1
 801e208:	701a      	strb	r2, [r3, #0]
  LcdTrace_Ctx.ScrollActive              = DISABLE;
 801e20a:	4b0a      	ldr	r3, [pc, #40]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e20c:	2200      	movs	r2, #0
 801e20e:	705a      	strb	r2, [r3, #1]
  LcdTrace_Ctx.Lock                      = DISABLE;
 801e210:	4b08      	ldr	r3, [pc, #32]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e212:	2200      	movs	r2, #0
 801e214:	709a      	strb	r2, [r3, #2]
  LcdTrace_Ctx.Scrolled                  = DISABLE;
 801e216:	4b07      	ldr	r3, [pc, #28]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e218:	2200      	movs	r2, #0
 801e21a:	70da      	strb	r2, [r3, #3]
  LcdTrace_Ctx.ScrollBackStep            = 0U;
 801e21c:	4b05      	ldr	r3, [pc, #20]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e21e:	2200      	movs	r2, #0
 801e220:	81da      	strh	r2, [r3, #14]
  LcdTrace_Ctx.YWindowSize               = 0U;
 801e222:	4b04      	ldr	r3, [pc, #16]	; (801e234 <UTIL_LCD_TRACE_DeInit+0x58>)
 801e224:	2200      	movs	r2, #0
 801e226:	615a      	str	r2, [r3, #20]
}
 801e228:	bf00      	nop
 801e22a:	46bd      	mov	sp, r7
 801e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e230:	4770      	bx	lr
 801e232:	bf00      	nop
 801e234:	20010398 	.word	0x20010398
 801e238:	ff000080 	.word	0xff000080

0801e23c <UTIL_LCD_TRACE_SetHeader>:
  * @brief  Display the application header on the LCD screen
  * @param  Header  pointer to the string to be displayed
  * @retval None
  */
void UTIL_LCD_TRACE_SetHeader (uint8_t *Header)
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b086      	sub	sp, #24
 801e240:	af02      	add	r7, sp, #8
 801e242:	6078      	str	r0, [r7, #4]
  uint32_t x_size;

  BSP_LCD_GetXSize(0, &x_size);
 801e244:	f107 030c 	add.w	r3, r7, #12
 801e248:	4619      	mov	r1, r3
 801e24a:	2000      	movs	r0, #0
 801e24c:	f7e4 fca6 	bl	8002b9c <BSP_LCD_GetXSize>

  /* Set the LCD Font */
  UTIL_LCD_SetFont (&LCD_TRACE_HEADER_FONT);
 801e250:	4817      	ldr	r0, [pc, #92]	; (801e2b0 <UTIL_LCD_TRACE_SetHeader+0x74>)
 801e252:	f000 fa4b 	bl	801e6ec <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(0, 0, x_size, LCD_TRACE_HEADER_FONT.Height * 3, LCD_TRACE_SOLID_BACKGROUND_COLOR);
 801e256:	68fa      	ldr	r2, [r7, #12]
 801e258:	4b15      	ldr	r3, [pc, #84]	; (801e2b0 <UTIL_LCD_TRACE_SetHeader+0x74>)
 801e25a:	88db      	ldrh	r3, [r3, #6]
 801e25c:	4619      	mov	r1, r3
 801e25e:	460b      	mov	r3, r1
 801e260:	005b      	lsls	r3, r3, #1
 801e262:	440b      	add	r3, r1
 801e264:	4619      	mov	r1, r3
 801e266:	4b13      	ldr	r3, [pc, #76]	; (801e2b4 <UTIL_LCD_TRACE_SetHeader+0x78>)
 801e268:	9300      	str	r3, [sp, #0]
 801e26a:	460b      	mov	r3, r1
 801e26c:	2100      	movs	r1, #0
 801e26e:	2000      	movs	r0, #0
 801e270:	f000 fb8c 	bl	801e98c <UTIL_LCD_FillRect>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(LCD_TRACE_SOLID_TEXT_COLOR);
 801e274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e278:	f000 fa10 	bl	801e69c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(LCD_TRACE_SOLID_BACKGROUND_COLOR);
 801e27c:	480d      	ldr	r0, [pc, #52]	; (801e2b4 <UTIL_LCD_TRACE_SetHeader+0x78>)
 801e27e:	f000 fa21 	bl	801e6c4 <UTIL_LCD_SetBackColor>

  UTIL_LCD_DisplayStringAt(0, LCD_TRACE_HEADER_FONT.Height, Header, CENTER_MODE);
 801e282:	4b0b      	ldr	r3, [pc, #44]	; (801e2b0 <UTIL_LCD_TRACE_SetHeader+0x74>)
 801e284:	88db      	ldrh	r3, [r3, #6]
 801e286:	4619      	mov	r1, r3
 801e288:	2301      	movs	r3, #1
 801e28a:	687a      	ldr	r2, [r7, #4]
 801e28c:	2000      	movs	r0, #0
 801e28e:	f000 fab9 	bl	801e804 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetBackColor(LCD_TRACE_BACKGROUND_COLOR);
 801e292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e296:	f000 fa15 	bl	801e6c4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(LCD_TRACE_TEXT_COLOR);
 801e29a:	4807      	ldr	r0, [pc, #28]	; (801e2b8 <UTIL_LCD_TRACE_SetHeader+0x7c>)
 801e29c:	f000 f9fe 	bl	801e69c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont (&LCD_TRACE_TEXT_FONT);
 801e2a0:	4806      	ldr	r0, [pc, #24]	; (801e2bc <UTIL_LCD_TRACE_SetHeader+0x80>)
 801e2a2:	f000 fa23 	bl	801e6ec <UTIL_LCD_SetFont>
}
 801e2a6:	bf00      	nop
 801e2a8:	3710      	adds	r7, #16
 801e2aa:	46bd      	mov	sp, r7
 801e2ac:	bd80      	pop	{r7, pc}
 801e2ae:	bf00      	nop
 801e2b0:	20000040 	.word	0x20000040
 801e2b4:	ff0000ff 	.word	0xff0000ff
 801e2b8:	ff000080 	.word	0xff000080
 801e2bc:	20000048 	.word	0x20000048

0801e2c0 <UTIL_LCD_TRACE_SetFooter>:
  * @brief  Display the application footer on the LCD screen
  * @param  Footer  pointer to the string to be displayed
  * @retval None
  */
void UTIL_LCD_TRACE_SetFooter(uint8_t *Footer)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	b086      	sub	sp, #24
 801e2c4:	af02      	add	r7, sp, #8
 801e2c6:	6078      	str	r0, [r7, #4]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 801e2c8:	f107 030c 	add.w	r3, r7, #12
 801e2cc:	4619      	mov	r1, r3
 801e2ce:	2000      	movs	r0, #0
 801e2d0:	f7e4 fc64 	bl	8002b9c <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 801e2d4:	f107 0308 	add.w	r3, r7, #8
 801e2d8:	4619      	mov	r1, r3
 801e2da:	2000      	movs	r0, #0
 801e2dc:	f7e4 fc80 	bl	8002be0 <BSP_LCD_GetYSize>

  /* Set the LCD Font */
  UTIL_LCD_SetFont (&LCD_TRACE_FOOTER_FONT);
 801e2e0:	4818      	ldr	r0, [pc, #96]	; (801e344 <UTIL_LCD_TRACE_SetFooter+0x84>)
 801e2e2:	f000 fa03 	bl	801e6ec <UTIL_LCD_SetFont>

  UTIL_LCD_FillRect(0, y_size - LCD_TRACE_FOOTER_FONT.Height - 4, x_size, LCD_TRACE_FOOTER_FONT.Height + 4, LCD_TRACE_SOLID_BACKGROUND_COLOR);
 801e2e6:	68bb      	ldr	r3, [r7, #8]
 801e2e8:	4a16      	ldr	r2, [pc, #88]	; (801e344 <UTIL_LCD_TRACE_SetFooter+0x84>)
 801e2ea:	88d2      	ldrh	r2, [r2, #6]
 801e2ec:	1a9b      	subs	r3, r3, r2
 801e2ee:	1f19      	subs	r1, r3, #4
 801e2f0:	68fa      	ldr	r2, [r7, #12]
 801e2f2:	4b14      	ldr	r3, [pc, #80]	; (801e344 <UTIL_LCD_TRACE_SetFooter+0x84>)
 801e2f4:	88db      	ldrh	r3, [r3, #6]
 801e2f6:	3304      	adds	r3, #4
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	4b13      	ldr	r3, [pc, #76]	; (801e348 <UTIL_LCD_TRACE_SetFooter+0x88>)
 801e2fc:	9300      	str	r3, [sp, #0]
 801e2fe:	4603      	mov	r3, r0
 801e300:	2000      	movs	r0, #0
 801e302:	f000 fb43 	bl	801e98c <UTIL_LCD_FillRect>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(LCD_TRACE_SOLID_TEXT_COLOR);
 801e306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e30a:	f000 f9c7 	bl	801e69c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(LCD_TRACE_SOLID_BACKGROUND_COLOR);
 801e30e:	480e      	ldr	r0, [pc, #56]	; (801e348 <UTIL_LCD_TRACE_SetFooter+0x88>)
 801e310:	f000 f9d8 	bl	801e6c4 <UTIL_LCD_SetBackColor>

  UTIL_LCD_DisplayStringAt(0, y_size - LCD_TRACE_FOOTER_FONT.Height, Footer, CENTER_MODE);
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	4a0b      	ldr	r2, [pc, #44]	; (801e344 <UTIL_LCD_TRACE_SetFooter+0x84>)
 801e318:	88d2      	ldrh	r2, [r2, #6]
 801e31a:	1a99      	subs	r1, r3, r2
 801e31c:	2301      	movs	r3, #1
 801e31e:	687a      	ldr	r2, [r7, #4]
 801e320:	2000      	movs	r0, #0
 801e322:	f000 fa6f 	bl	801e804 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetBackColor(LCD_TRACE_BACKGROUND_COLOR);
 801e326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e32a:	f000 f9cb 	bl	801e6c4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(LCD_TRACE_TEXT_COLOR);
 801e32e:	4807      	ldr	r0, [pc, #28]	; (801e34c <UTIL_LCD_TRACE_SetFooter+0x8c>)
 801e330:	f000 f9b4 	bl	801e69c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont (&LCD_TRACE_TEXT_FONT);
 801e334:	4806      	ldr	r0, [pc, #24]	; (801e350 <UTIL_LCD_TRACE_SetFooter+0x90>)
 801e336:	f000 f9d9 	bl	801e6ec <UTIL_LCD_SetFont>
}
 801e33a:	bf00      	nop
 801e33c:	3710      	adds	r7, #16
 801e33e:	46bd      	mov	sp, r7
 801e340:	bd80      	pop	{r7, pc}
 801e342:	bf00      	nop
 801e344:	20000040 	.word	0x20000040
 801e348:	ff0000ff 	.word	0xff0000ff
 801e34c:	ff000080 	.word	0xff000080
 801e350:	20000048 	.word	0x20000048

0801e354 <__io_putchar>:
/**
  * @brief  Redirect the printf to the LCD
  * @retval None
 */
UTIL_LCD_TRACE_PUTCHAR
{
 801e354:	b590      	push	{r4, r7, lr}
 801e356:	b087      	sub	sp, #28
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
  uint32_t x_size;

  BSP_LCD_GetXSize(0, &x_size);
 801e35c:	f107 030c 	add.w	r3, r7, #12
 801e360:	4619      	mov	r1, r3
 801e362:	2000      	movs	r0, #0
 801e364:	f7e4 fc1a 	bl	8002b9c <BSP_LCD_GetXSize>

  sFONT *cFont = UTIL_LCD_GetFont();
 801e368:	f000 f9d4 	bl	801e714 <UTIL_LCD_GetFont>
 801e36c:	6138      	str	r0, [r7, #16]
  uint32_t idx;

  if(LcdTrace_Ctx.Lock == DISABLE)
 801e36e:	4b5e      	ldr	r3, [pc, #376]	; (801e4e8 <__io_putchar+0x194>)
 801e370:	789b      	ldrb	r3, [r3, #2]
 801e372:	2b00      	cmp	r3, #0
 801e374:	f040 80b2 	bne.w	801e4dc <__io_putchar+0x188>
  {
    if(LcdTrace_Ctx.ScrollActive == ENABLE)
 801e378:	4b5b      	ldr	r3, [pc, #364]	; (801e4e8 <__io_putchar+0x194>)
 801e37a:	785b      	ldrb	r3, [r3, #1]
 801e37c:	2b01      	cmp	r3, #1
 801e37e:	d110      	bne.n	801e3a2 <__io_putchar+0x4e>
    {
      LcdTrace_Ctx.CacheBufferYptrBottom = LcdTrace_Ctx.CacheBufferYptrBottomBack;
 801e380:	4b59      	ldr	r3, [pc, #356]	; (801e4e8 <__io_putchar+0x194>)
 801e382:	899a      	ldrh	r2, [r3, #12]
 801e384:	4b58      	ldr	r3, [pc, #352]	; (801e4e8 <__io_putchar+0x194>)
 801e386:	811a      	strh	r2, [r3, #8]
      LcdTrace_Ctx.CacheBufferYptrTop    = LcdTrace_Ctx.CacheBufferYptrTopBack;
 801e388:	4b57      	ldr	r3, [pc, #348]	; (801e4e8 <__io_putchar+0x194>)
 801e38a:	895a      	ldrh	r2, [r3, #10]
 801e38c:	4b56      	ldr	r3, [pc, #344]	; (801e4e8 <__io_putchar+0x194>)
 801e38e:	80da      	strh	r2, [r3, #6]
      LcdTrace_Ctx.ScrollActive = DISABLE;
 801e390:	4b55      	ldr	r3, [pc, #340]	; (801e4e8 <__io_putchar+0x194>)
 801e392:	2200      	movs	r2, #0
 801e394:	705a      	strb	r2, [r3, #1]
      LcdTrace_Ctx.Scrolled = DISABLE;
 801e396:	4b54      	ldr	r3, [pc, #336]	; (801e4e8 <__io_putchar+0x194>)
 801e398:	2200      	movs	r2, #0
 801e39a:	70da      	strb	r2, [r3, #3]
      LcdTrace_Ctx.ScrollBackStep = 0;
 801e39c:	4b52      	ldr	r3, [pc, #328]	; (801e4e8 <__io_putchar+0x194>)
 801e39e:	2200      	movs	r2, #0
 801e3a0:	81da      	strh	r2, [r3, #14]
    }

    if(( LcdTrace_Ctx.CacheBufferXptr < (x_size) /cFont->Width ) &&  ( ch != '\n'))
 801e3a2:	4b51      	ldr	r3, [pc, #324]	; (801e4e8 <__io_putchar+0x194>)
 801e3a4:	889b      	ldrh	r3, [r3, #4]
 801e3a6:	4619      	mov	r1, r3
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	693a      	ldr	r2, [r7, #16]
 801e3ac:	8892      	ldrh	r2, [r2, #4]
 801e3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 801e3b2:	4299      	cmp	r1, r3
 801e3b4:	d218      	bcs.n	801e3e8 <__io_putchar+0x94>
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	2b0a      	cmp	r3, #10
 801e3ba:	d015      	beq.n	801e3e8 <__io_putchar+0x94>
    {
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
 801e3bc:	4b4a      	ldr	r3, [pc, #296]	; (801e4e8 <__io_putchar+0x194>)
 801e3be:	891b      	ldrh	r3, [r3, #8]
 801e3c0:	4619      	mov	r1, r3
 801e3c2:	4b49      	ldr	r3, [pc, #292]	; (801e4e8 <__io_putchar+0x194>)
 801e3c4:	889b      	ldrh	r3, [r3, #4]
 801e3c6:	1c5a      	adds	r2, r3, #1
 801e3c8:	b290      	uxth	r0, r2
 801e3ca:	4a47      	ldr	r2, [pc, #284]	; (801e4e8 <__io_putchar+0x194>)
 801e3cc:	8090      	strh	r0, [r2, #4]
 801e3ce:	461c      	mov	r4, r3
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	b2d8      	uxtb	r0, r3
 801e3d4:	4a45      	ldr	r2, [pc, #276]	; (801e4ec <__io_putchar+0x198>)
 801e3d6:	460b      	mov	r3, r1
 801e3d8:	015b      	lsls	r3, r3, #5
 801e3da:	440b      	add	r3, r1
 801e3dc:	009b      	lsls	r3, r3, #2
 801e3de:	4413      	add	r3, r2
 801e3e0:	4423      	add	r3, r4
 801e3e2:	4602      	mov	r2, r0
 801e3e4:	701a      	strb	r2, [r3, #0]
 801e3e6:	e079      	b.n	801e4dc <__io_putchar+0x188>
    }
    else
    {
      if(LcdTrace_Ctx.CacheBufferYptrTop >= LcdTrace_Ctx.CacheBufferYptrBottom)
 801e3e8:	4b3f      	ldr	r3, [pc, #252]	; (801e4e8 <__io_putchar+0x194>)
 801e3ea:	88da      	ldrh	r2, [r3, #6]
 801e3ec:	4b3e      	ldr	r3, [pc, #248]	; (801e4e8 <__io_putchar+0x194>)
 801e3ee:	891b      	ldrh	r3, [r3, #8]
 801e3f0:	429a      	cmp	r2, r3
 801e3f2:	d314      	bcc.n	801e41e <__io_putchar+0xca>
      {

        if(LcdTrace_Ctx.CacheBufferYptrInvert == DISABLE)
 801e3f4:	4b3c      	ldr	r3, [pc, #240]	; (801e4e8 <__io_putchar+0x194>)
 801e3f6:	781b      	ldrb	r3, [r3, #0]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d10d      	bne.n	801e418 <__io_putchar+0xc4>
        {
          LcdTrace_Ctx.CacheBufferYptrTop++;
 801e3fc:	4b3a      	ldr	r3, [pc, #232]	; (801e4e8 <__io_putchar+0x194>)
 801e3fe:	88db      	ldrh	r3, [r3, #6]
 801e400:	3301      	adds	r3, #1
 801e402:	b29a      	uxth	r2, r3
 801e404:	4b38      	ldr	r3, [pc, #224]	; (801e4e8 <__io_putchar+0x194>)
 801e406:	80da      	strh	r2, [r3, #6]

          if(LcdTrace_Ctx.CacheBufferYptrTop == LCD_CACHE_DEPTH)
 801e408:	4b37      	ldr	r3, [pc, #220]	; (801e4e8 <__io_putchar+0x194>)
 801e40a:	88db      	ldrh	r3, [r3, #6]
 801e40c:	2b71      	cmp	r3, #113	; 0x71
 801e40e:	d106      	bne.n	801e41e <__io_putchar+0xca>
          {
            LcdTrace_Ctx.CacheBufferYptrTop = 0;
 801e410:	4b35      	ldr	r3, [pc, #212]	; (801e4e8 <__io_putchar+0x194>)
 801e412:	2200      	movs	r2, #0
 801e414:	80da      	strh	r2, [r3, #6]
 801e416:	e002      	b.n	801e41e <__io_putchar+0xca>
          }
        }
        else
        {
          LcdTrace_Ctx.CacheBufferYptrInvert = DISABLE;
 801e418:	4b33      	ldr	r3, [pc, #204]	; (801e4e8 <__io_putchar+0x194>)
 801e41a:	2200      	movs	r2, #0
 801e41c:	701a      	strb	r2, [r3, #0]
        }
      }

      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
 801e41e:	4b32      	ldr	r3, [pc, #200]	; (801e4e8 <__io_putchar+0x194>)
 801e420:	889b      	ldrh	r3, [r3, #4]
 801e422:	617b      	str	r3, [r7, #20]
 801e424:	e015      	b.n	801e452 <__io_putchar+0xfe>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = ' ';
 801e426:	4b30      	ldr	r3, [pc, #192]	; (801e4e8 <__io_putchar+0x194>)
 801e428:	891b      	ldrh	r3, [r3, #8]
 801e42a:	4619      	mov	r1, r3
 801e42c:	4b2e      	ldr	r3, [pc, #184]	; (801e4e8 <__io_putchar+0x194>)
 801e42e:	889b      	ldrh	r3, [r3, #4]
 801e430:	1c5a      	adds	r2, r3, #1
 801e432:	b290      	uxth	r0, r2
 801e434:	4a2c      	ldr	r2, [pc, #176]	; (801e4e8 <__io_putchar+0x194>)
 801e436:	8090      	strh	r0, [r2, #4]
 801e438:	4618      	mov	r0, r3
 801e43a:	4a2c      	ldr	r2, [pc, #176]	; (801e4ec <__io_putchar+0x198>)
 801e43c:	460b      	mov	r3, r1
 801e43e:	015b      	lsls	r3, r3, #5
 801e440:	440b      	add	r3, r1
 801e442:	009b      	lsls	r3, r3, #2
 801e444:	4413      	add	r3, r2
 801e446:	4403      	add	r3, r0
 801e448:	2220      	movs	r2, #32
 801e44a:	701a      	strb	r2, [r3, #0]
      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
 801e44c:	697b      	ldr	r3, [r7, #20]
 801e44e:	3301      	adds	r3, #1
 801e450:	617b      	str	r3, [r7, #20]
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	693a      	ldr	r2, [r7, #16]
 801e456:	8892      	ldrh	r2, [r2, #4]
 801e458:	fbb3 f3f2 	udiv	r3, r3, r2
 801e45c:	697a      	ldr	r2, [r7, #20]
 801e45e:	429a      	cmp	r2, r3
 801e460:	d3e1      	bcc.n	801e426 <__io_putchar+0xd2>
      }
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Color = LcdTrace_Ctx.LineColor;
 801e462:	4b21      	ldr	r3, [pc, #132]	; (801e4e8 <__io_putchar+0x194>)
 801e464:	891b      	ldrh	r3, [r3, #8]
 801e466:	4618      	mov	r0, r3
 801e468:	4b1f      	ldr	r3, [pc, #124]	; (801e4e8 <__io_putchar+0x194>)
 801e46a:	691a      	ldr	r2, [r3, #16]
 801e46c:	491f      	ldr	r1, [pc, #124]	; (801e4ec <__io_putchar+0x198>)
 801e46e:	4603      	mov	r3, r0
 801e470:	015b      	lsls	r3, r3, #5
 801e472:	4403      	add	r3, r0
 801e474:	009b      	lsls	r3, r3, #2
 801e476:	440b      	add	r3, r1
 801e478:	3380      	adds	r3, #128	; 0x80
 801e47a:	601a      	str	r2, [r3, #0]

      LcdTrace_Ctx.CacheBufferXptr = 0;
 801e47c:	4b1a      	ldr	r3, [pc, #104]	; (801e4e8 <__io_putchar+0x194>)
 801e47e:	2200      	movs	r2, #0
 801e480:	809a      	strh	r2, [r3, #4]

      UTIL_LCD_TRACE_UpdateDisplay ();
 801e482:	f000 f835 	bl	801e4f0 <UTIL_LCD_TRACE_UpdateDisplay>

      LcdTrace_Ctx.CacheBufferYptrBottom ++;
 801e486:	4b18      	ldr	r3, [pc, #96]	; (801e4e8 <__io_putchar+0x194>)
 801e488:	891b      	ldrh	r3, [r3, #8]
 801e48a:	3301      	adds	r3, #1
 801e48c:	b29a      	uxth	r2, r3
 801e48e:	4b16      	ldr	r3, [pc, #88]	; (801e4e8 <__io_putchar+0x194>)
 801e490:	811a      	strh	r2, [r3, #8]

      if (LcdTrace_Ctx.CacheBufferYptrBottom == LCD_CACHE_DEPTH)
 801e492:	4b15      	ldr	r3, [pc, #84]	; (801e4e8 <__io_putchar+0x194>)
 801e494:	891b      	ldrh	r3, [r3, #8]
 801e496:	2b71      	cmp	r3, #113	; 0x71
 801e498:	d108      	bne.n	801e4ac <__io_putchar+0x158>
      {
        LcdTrace_Ctx.CacheBufferYptrBottom = 0;
 801e49a:	4b13      	ldr	r3, [pc, #76]	; (801e4e8 <__io_putchar+0x194>)
 801e49c:	2200      	movs	r2, #0
 801e49e:	811a      	strh	r2, [r3, #8]
        LcdTrace_Ctx.CacheBufferYptrTop = 1;
 801e4a0:	4b11      	ldr	r3, [pc, #68]	; (801e4e8 <__io_putchar+0x194>)
 801e4a2:	2201      	movs	r2, #1
 801e4a4:	80da      	strh	r2, [r3, #6]
        LcdTrace_Ctx.CacheBufferYptrInvert = ENABLE;
 801e4a6:	4b10      	ldr	r3, [pc, #64]	; (801e4e8 <__io_putchar+0x194>)
 801e4a8:	2201      	movs	r2, #1
 801e4aa:	701a      	strb	r2, [r3, #0]
      }

      if( ch != '\n')
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	2b0a      	cmp	r3, #10
 801e4b0:	d014      	beq.n	801e4dc <__io_putchar+0x188>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
 801e4b2:	4b0d      	ldr	r3, [pc, #52]	; (801e4e8 <__io_putchar+0x194>)
 801e4b4:	891b      	ldrh	r3, [r3, #8]
 801e4b6:	4619      	mov	r1, r3
 801e4b8:	4b0b      	ldr	r3, [pc, #44]	; (801e4e8 <__io_putchar+0x194>)
 801e4ba:	889b      	ldrh	r3, [r3, #4]
 801e4bc:	1c5a      	adds	r2, r3, #1
 801e4be:	b290      	uxth	r0, r2
 801e4c0:	4a09      	ldr	r2, [pc, #36]	; (801e4e8 <__io_putchar+0x194>)
 801e4c2:	8090      	strh	r0, [r2, #4]
 801e4c4:	461c      	mov	r4, r3
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	b2d8      	uxtb	r0, r3
 801e4ca:	4a08      	ldr	r2, [pc, #32]	; (801e4ec <__io_putchar+0x198>)
 801e4cc:	460b      	mov	r3, r1
 801e4ce:	015b      	lsls	r3, r3, #5
 801e4d0:	440b      	add	r3, r1
 801e4d2:	009b      	lsls	r3, r3, #2
 801e4d4:	4413      	add	r3, r2
 801e4d6:	4423      	add	r3, r4
 801e4d8:	4602      	mov	r2, r0
 801e4da:	701a      	strb	r2, [r3, #0]
      }

    }
  }
  return ch;
 801e4dc:	687b      	ldr	r3, [r7, #4]
}
 801e4de:	4618      	mov	r0, r3
 801e4e0:	371c      	adds	r7, #28
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	bd90      	pop	{r4, r7, pc}
 801e4e6:	bf00      	nop
 801e4e8:	20010398 	.word	0x20010398
 801e4ec:	200103b0 	.word	0x200103b0

0801e4f0 <UTIL_LCD_TRACE_UpdateDisplay>:
/**
  * @brief  Update the text area display
  * @retval None
  */
void UTIL_LCD_TRACE_UpdateDisplay (void)
{
 801e4f0:	b580      	push	{r7, lr}
 801e4f2:	b084      	sub	sp, #16
 801e4f4:	af00      	add	r7, sp, #0
  uint32_t cnt = 0U, length, ptr, index;
 801e4f6:	2300      	movs	r3, #0
 801e4f8:	60fb      	str	r3, [r7, #12]

  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
 801e4fa:	4b3a      	ldr	r3, [pc, #232]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e4fc:	891b      	ldrh	r3, [r3, #8]
 801e4fe:	2b0b      	cmp	r3, #11
 801e500:	d827      	bhi.n	801e552 <UTIL_LCD_TRACE_UpdateDisplay+0x62>
     (LcdTrace_Ctx.CacheBufferYptrBottom  >= LcdTrace_Ctx.CacheBufferYptrTop))
 801e502:	4b38      	ldr	r3, [pc, #224]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e504:	891a      	ldrh	r2, [r3, #8]
 801e506:	4b37      	ldr	r3, [pc, #220]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e508:	88db      	ldrh	r3, [r3, #6]
  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
 801e50a:	429a      	cmp	r2, r3
 801e50c:	d321      	bcc.n	801e552 <UTIL_LCD_TRACE_UpdateDisplay+0x62>
  {
    UTIL_LCD_SetTextColor(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Color);
 801e50e:	4b35      	ldr	r3, [pc, #212]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e510:	891b      	ldrh	r3, [r3, #8]
 801e512:	461a      	mov	r2, r3
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	441a      	add	r2, r3
 801e518:	4933      	ldr	r1, [pc, #204]	; (801e5e8 <UTIL_LCD_TRACE_UpdateDisplay+0xf8>)
 801e51a:	4613      	mov	r3, r2
 801e51c:	015b      	lsls	r3, r3, #5
 801e51e:	4413      	add	r3, r2
 801e520:	009b      	lsls	r3, r3, #2
 801e522:	440b      	add	r3, r1
 801e524:	3380      	adds	r3, #128	; 0x80
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	4618      	mov	r0, r3
 801e52a:	f000 f8b7 	bl	801e69c <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
 801e52e:	4b2d      	ldr	r3, [pc, #180]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e530:	891b      	ldrh	r3, [r3, #8]
 801e532:	1d18      	adds	r0, r3, #4
                           (uint8_t *)(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Line));
 801e534:	4b2b      	ldr	r3, [pc, #172]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e536:	891b      	ldrh	r3, [r3, #8]
 801e538:	461a      	mov	r2, r3
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	441a      	add	r2, r3
 801e53e:	4613      	mov	r3, r2
 801e540:	015b      	lsls	r3, r3, #5
 801e542:	4413      	add	r3, r2
 801e544:	009b      	lsls	r3, r3, #2
 801e546:	4a28      	ldr	r2, [pc, #160]	; (801e5e8 <UTIL_LCD_TRACE_UpdateDisplay+0xf8>)
 801e548:	4413      	add	r3, r2
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
 801e54a:	4619      	mov	r1, r3
 801e54c:	f000 fa08 	bl	801e960 <UTIL_LCD_DisplayStringAtLine>
 801e550:	e043      	b.n	801e5da <UTIL_LCD_TRACE_UpdateDisplay+0xea>
  }
  else
  {
    if(LcdTrace_Ctx.CacheBufferYptrBottom < LcdTrace_Ctx.CacheBufferYptrTop)
 801e552:	4b24      	ldr	r3, [pc, #144]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e554:	891a      	ldrh	r2, [r3, #8]
 801e556:	4b23      	ldr	r3, [pc, #140]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e558:	88db      	ldrh	r3, [r3, #6]
 801e55a:	429a      	cmp	r2, r3
 801e55c:	d204      	bcs.n	801e568 <UTIL_LCD_TRACE_UpdateDisplay+0x78>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LcdTrace_Ctx.CacheBufferYptrBottom ;
 801e55e:	4b21      	ldr	r3, [pc, #132]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e560:	891b      	ldrh	r3, [r3, #8]
 801e562:	3371      	adds	r3, #113	; 0x71
 801e564:	60bb      	str	r3, [r7, #8]
 801e566:	e002      	b.n	801e56e <UTIL_LCD_TRACE_UpdateDisplay+0x7e>
    }
    else
    {
      length = LcdTrace_Ctx.CacheBufferYptrBottom;
 801e568:	4b1e      	ldr	r3, [pc, #120]	; (801e5e4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
 801e56a:	891b      	ldrh	r3, [r3, #8]
 801e56c:	60bb      	str	r3, [r7, #8]
    }

    ptr = length - YWINDOW_SIZE + 1;
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	3b0c      	subs	r3, #12
 801e572:	607b      	str	r3, [r7, #4]

    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 801e574:	2300      	movs	r3, #0
 801e576:	60fb      	str	r3, [r7, #12]
 801e578:	e02b      	b.n	801e5d2 <UTIL_LCD_TRACE_UpdateDisplay+0xe2>
    {
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 801e57a:	68fa      	ldr	r2, [r7, #12]
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	441a      	add	r2, r3
 801e580:	4b1a      	ldr	r3, [pc, #104]	; (801e5ec <UTIL_LCD_TRACE_UpdateDisplay+0xfc>)
 801e582:	fba3 1302 	umull	r1, r3, r3, r2
 801e586:	1ad1      	subs	r1, r2, r3
 801e588:	0849      	lsrs	r1, r1, #1
 801e58a:	440b      	add	r3, r1
 801e58c:	0999      	lsrs	r1, r3, #6
 801e58e:	460b      	mov	r3, r1
 801e590:	00db      	lsls	r3, r3, #3
 801e592:	1a5b      	subs	r3, r3, r1
 801e594:	011b      	lsls	r3, r3, #4
 801e596:	440b      	add	r3, r1
 801e598:	1ad3      	subs	r3, r2, r3
 801e59a:	603b      	str	r3, [r7, #0]

      UTIL_LCD_SetTextColor(LCD_CacheBuffer[index].Color);
 801e59c:	4912      	ldr	r1, [pc, #72]	; (801e5e8 <UTIL_LCD_TRACE_UpdateDisplay+0xf8>)
 801e59e:	683a      	ldr	r2, [r7, #0]
 801e5a0:	4613      	mov	r3, r2
 801e5a2:	015b      	lsls	r3, r3, #5
 801e5a4:	4413      	add	r3, r2
 801e5a6:	009b      	lsls	r3, r3, #2
 801e5a8:	440b      	add	r3, r1
 801e5aa:	3380      	adds	r3, #128	; 0x80
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	f000 f874 	bl	801e69c <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	1d18      	adds	r0, r3, #4
                             (uint8_t *)(LCD_CacheBuffer[index].Line));
 801e5b8:	683a      	ldr	r2, [r7, #0]
 801e5ba:	4613      	mov	r3, r2
 801e5bc:	015b      	lsls	r3, r3, #5
 801e5be:	4413      	add	r3, r2
 801e5c0:	009b      	lsls	r3, r3, #2
 801e5c2:	4a09      	ldr	r2, [pc, #36]	; (801e5e8 <UTIL_LCD_TRACE_UpdateDisplay+0xf8>)
 801e5c4:	4413      	add	r3, r2
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
 801e5c6:	4619      	mov	r1, r3
 801e5c8:	f000 f9ca 	bl	801e960 <UTIL_LCD_DisplayStringAtLine>
    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	3301      	adds	r3, #1
 801e5d0:	60fb      	str	r3, [r7, #12]
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	2b0c      	cmp	r3, #12
 801e5d6:	d9d0      	bls.n	801e57a <UTIL_LCD_TRACE_UpdateDisplay+0x8a>
    }
  }
}
 801e5d8:	bf00      	nop
 801e5da:	bf00      	nop
 801e5dc:	3710      	adds	r7, #16
 801e5de:	46bd      	mov	sp, r7
 801e5e0:	bd80      	pop	{r7, pc}
 801e5e2:	bf00      	nop
 801e5e4:	20010398 	.word	0x20010398
 801e5e8:	200103b0 	.word	0x200103b0
 801e5ec:	21fb7813 	.word	0x21fb7813

0801e5f0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801e5f0:	b580      	push	{r7, lr}
 801e5f2:	b082      	sub	sp, #8
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	4a22      	ldr	r2, [pc, #136]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e5fe:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	685b      	ldr	r3, [r3, #4]
 801e604:	4a20      	ldr	r2, [pc, #128]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e606:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	689b      	ldr	r3, [r3, #8]
 801e60c:	4a1e      	ldr	r2, [pc, #120]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e60e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	68db      	ldr	r3, [r3, #12]
 801e614:	4a1c      	ldr	r2, [pc, #112]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e616:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	691b      	ldr	r3, [r3, #16]
 801e61c:	4a1a      	ldr	r2, [pc, #104]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e61e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	695b      	ldr	r3, [r3, #20]
 801e624:	4a18      	ldr	r2, [pc, #96]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e626:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	699b      	ldr	r3, [r3, #24]
 801e62c:	4a16      	ldr	r2, [pc, #88]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e62e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	69db      	ldr	r3, [r3, #28]
 801e634:	4a14      	ldr	r2, [pc, #80]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e636:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	6a1b      	ldr	r3, [r3, #32]
 801e63c:	4a12      	ldr	r2, [pc, #72]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e63e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e644:	4a10      	ldr	r2, [pc, #64]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e646:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e64c:	4a0e      	ldr	r2, [pc, #56]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e64e:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 801e650:	4b0e      	ldr	r3, [pc, #56]	; (801e68c <UTIL_LCD_SetFuncDriver+0x9c>)
 801e652:	2200      	movs	r2, #0
 801e654:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 801e656:	4b0d      	ldr	r3, [pc, #52]	; (801e68c <UTIL_LCD_SetFuncDriver+0x9c>)
 801e658:	2200      	movs	r2, #0
 801e65a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801e65c:	4b0a      	ldr	r3, [pc, #40]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e65e:	69db      	ldr	r3, [r3, #28]
 801e660:	4a0b      	ldr	r2, [pc, #44]	; (801e690 <UTIL_LCD_SetFuncDriver+0xa0>)
 801e662:	4611      	mov	r1, r2
 801e664:	2000      	movs	r0, #0
 801e666:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801e668:	4b07      	ldr	r3, [pc, #28]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e66a:	6a1b      	ldr	r3, [r3, #32]
 801e66c:	4a09      	ldr	r2, [pc, #36]	; (801e694 <UTIL_LCD_SetFuncDriver+0xa4>)
 801e66e:	4611      	mov	r1, r2
 801e670:	2000      	movs	r0, #0
 801e672:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801e674:	4b04      	ldr	r3, [pc, #16]	; (801e688 <UTIL_LCD_SetFuncDriver+0x98>)
 801e676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e678:	4a07      	ldr	r2, [pc, #28]	; (801e698 <UTIL_LCD_SetFuncDriver+0xa8>)
 801e67a:	4611      	mov	r1, r2
 801e67c:	2000      	movs	r0, #0
 801e67e:	4798      	blx	r3
}
 801e680:	bf00      	nop
 801e682:	3708      	adds	r7, #8
 801e684:	46bd      	mov	sp, r7
 801e686:	bd80      	pop	{r7, pc}
 801e688:	2000910c 	.word	0x2000910c
 801e68c:	200090cc 	.word	0x200090cc
 801e690:	200090e0 	.word	0x200090e0
 801e694:	200090e4 	.word	0x200090e4
 801e698:	200090e8 	.word	0x200090e8

0801e69c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 801e69c:	b480      	push	{r7}
 801e69e:	b083      	sub	sp, #12
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801e6a4:	4b06      	ldr	r3, [pc, #24]	; (801e6c0 <UTIL_LCD_SetTextColor+0x24>)
 801e6a6:	68db      	ldr	r3, [r3, #12]
 801e6a8:	4a05      	ldr	r2, [pc, #20]	; (801e6c0 <UTIL_LCD_SetTextColor+0x24>)
 801e6aa:	015b      	lsls	r3, r3, #5
 801e6ac:	4413      	add	r3, r2
 801e6ae:	687a      	ldr	r2, [r7, #4]
 801e6b0:	601a      	str	r2, [r3, #0]
}
 801e6b2:	bf00      	nop
 801e6b4:	370c      	adds	r7, #12
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6bc:	4770      	bx	lr
 801e6be:	bf00      	nop
 801e6c0:	200090cc 	.word	0x200090cc

0801e6c4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 801e6c4:	b480      	push	{r7}
 801e6c6:	b083      	sub	sp, #12
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801e6cc:	4b06      	ldr	r3, [pc, #24]	; (801e6e8 <UTIL_LCD_SetBackColor+0x24>)
 801e6ce:	68db      	ldr	r3, [r3, #12]
 801e6d0:	4a05      	ldr	r2, [pc, #20]	; (801e6e8 <UTIL_LCD_SetBackColor+0x24>)
 801e6d2:	015b      	lsls	r3, r3, #5
 801e6d4:	4413      	add	r3, r2
 801e6d6:	3304      	adds	r3, #4
 801e6d8:	687a      	ldr	r2, [r7, #4]
 801e6da:	601a      	str	r2, [r3, #0]
}
 801e6dc:	bf00      	nop
 801e6de:	370c      	adds	r7, #12
 801e6e0:	46bd      	mov	sp, r7
 801e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e6:	4770      	bx	lr
 801e6e8:	200090cc 	.word	0x200090cc

0801e6ec <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 801e6ec:	b480      	push	{r7}
 801e6ee:	b083      	sub	sp, #12
 801e6f0:	af00      	add	r7, sp, #0
 801e6f2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801e6f4:	4b06      	ldr	r3, [pc, #24]	; (801e710 <UTIL_LCD_SetFont+0x24>)
 801e6f6:	68db      	ldr	r3, [r3, #12]
 801e6f8:	4a05      	ldr	r2, [pc, #20]	; (801e710 <UTIL_LCD_SetFont+0x24>)
 801e6fa:	015b      	lsls	r3, r3, #5
 801e6fc:	4413      	add	r3, r2
 801e6fe:	3308      	adds	r3, #8
 801e700:	687a      	ldr	r2, [r7, #4]
 801e702:	601a      	str	r2, [r3, #0]
}
 801e704:	bf00      	nop
 801e706:	370c      	adds	r7, #12
 801e708:	46bd      	mov	sp, r7
 801e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e70e:	4770      	bx	lr
 801e710:	200090cc 	.word	0x200090cc

0801e714 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 801e714:	b480      	push	{r7}
 801e716:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 801e718:	4b05      	ldr	r3, [pc, #20]	; (801e730 <UTIL_LCD_GetFont+0x1c>)
 801e71a:	68db      	ldr	r3, [r3, #12]
 801e71c:	4a04      	ldr	r2, [pc, #16]	; (801e730 <UTIL_LCD_GetFont+0x1c>)
 801e71e:	015b      	lsls	r3, r3, #5
 801e720:	4413      	add	r3, r2
 801e722:	3308      	adds	r3, #8
 801e724:	681b      	ldr	r3, [r3, #0]
}
 801e726:	4618      	mov	r0, r3
 801e728:	46bd      	mov	sp, r7
 801e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e72e:	4770      	bx	lr
 801e730:	200090cc 	.word	0x200090cc

0801e734 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 801e734:	b590      	push	{r4, r7, lr}
 801e736:	b087      	sub	sp, #28
 801e738:	af02      	add	r7, sp, #8
 801e73a:	60f8      	str	r0, [r7, #12]
 801e73c:	60b9      	str	r1, [r7, #8]
 801e73e:	607a      	str	r2, [r7, #4]
 801e740:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801e742:	4b08      	ldr	r3, [pc, #32]	; (801e764 <UTIL_LCD_FillRGBRect+0x30>)
 801e744:	685c      	ldr	r4, [r3, #4]
 801e746:	4b08      	ldr	r3, [pc, #32]	; (801e768 <UTIL_LCD_FillRGBRect+0x34>)
 801e748:	6918      	ldr	r0, [r3, #16]
 801e74a:	6a3b      	ldr	r3, [r7, #32]
 801e74c:	9301      	str	r3, [sp, #4]
 801e74e:	683b      	ldr	r3, [r7, #0]
 801e750:	9300      	str	r3, [sp, #0]
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	68ba      	ldr	r2, [r7, #8]
 801e756:	68f9      	ldr	r1, [r7, #12]
 801e758:	47a0      	blx	r4
}
 801e75a:	bf00      	nop
 801e75c:	3714      	adds	r7, #20
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd90      	pop	{r4, r7, pc}
 801e762:	bf00      	nop
 801e764:	2000910c 	.word	0x2000910c
 801e768:	200090cc 	.word	0x200090cc

0801e76c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 801e76c:	b580      	push	{r7, lr}
 801e76e:	b084      	sub	sp, #16
 801e770:	af02      	add	r7, sp, #8
 801e772:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801e774:	4b07      	ldr	r3, [pc, #28]	; (801e794 <UTIL_LCD_Clear+0x28>)
 801e776:	695a      	ldr	r2, [r3, #20]
 801e778:	4b06      	ldr	r3, [pc, #24]	; (801e794 <UTIL_LCD_Clear+0x28>)
 801e77a:	6999      	ldr	r1, [r3, #24]
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	9300      	str	r3, [sp, #0]
 801e780:	460b      	mov	r3, r1
 801e782:	2100      	movs	r1, #0
 801e784:	2000      	movs	r0, #0
 801e786:	f000 f901 	bl	801e98c <UTIL_LCD_FillRect>
}
 801e78a:	bf00      	nop
 801e78c:	3708      	adds	r7, #8
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd80      	pop	{r7, pc}
 801e792:	bf00      	nop
 801e794:	200090cc 	.word	0x200090cc

0801e798 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	b084      	sub	sp, #16
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	60f8      	str	r0, [r7, #12]
 801e7a0:	60b9      	str	r1, [r7, #8]
 801e7a2:	4613      	mov	r3, r2
 801e7a4:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e7a6:	4b16      	ldr	r3, [pc, #88]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7a8:	68db      	ldr	r3, [r3, #12]
 801e7aa:	4a15      	ldr	r2, [pc, #84]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7ac:	015b      	lsls	r3, r3, #5
 801e7ae:	4413      	add	r3, r2
 801e7b0:	3308      	adds	r3, #8
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	681a      	ldr	r2, [r3, #0]
 801e7b6:	79fb      	ldrb	r3, [r7, #7]
 801e7b8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e7ba:	4911      	ldr	r1, [pc, #68]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7bc:	68c9      	ldr	r1, [r1, #12]
 801e7be:	4810      	ldr	r0, [pc, #64]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7c0:	0149      	lsls	r1, r1, #5
 801e7c2:	4401      	add	r1, r0
 801e7c4:	3108      	adds	r1, #8
 801e7c6:	6809      	ldr	r1, [r1, #0]
 801e7c8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e7ca:	fb01 f103 	mul.w	r1, r1, r3
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e7ce:	4b0c      	ldr	r3, [pc, #48]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7d0:	68db      	ldr	r3, [r3, #12]
 801e7d2:	480b      	ldr	r0, [pc, #44]	; (801e800 <UTIL_LCD_DisplayChar+0x68>)
 801e7d4:	015b      	lsls	r3, r3, #5
 801e7d6:	4403      	add	r3, r0
 801e7d8:	3308      	adds	r3, #8
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	889b      	ldrh	r3, [r3, #4]
 801e7de:	3307      	adds	r3, #7
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	da00      	bge.n	801e7e6 <UTIL_LCD_DisplayChar+0x4e>
 801e7e4:	3307      	adds	r3, #7
 801e7e6:	10db      	asrs	r3, r3, #3
 801e7e8:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e7ec:	4413      	add	r3, r2
 801e7ee:	461a      	mov	r2, r3
 801e7f0:	68b9      	ldr	r1, [r7, #8]
 801e7f2:	68f8      	ldr	r0, [r7, #12]
 801e7f4:	f000 f904 	bl	801ea00 <DrawChar>
}
 801e7f8:	bf00      	nop
 801e7fa:	3710      	adds	r7, #16
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	bd80      	pop	{r7, pc}
 801e800:	200090cc 	.word	0x200090cc

0801e804 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 801e804:	b580      	push	{r7, lr}
 801e806:	b08a      	sub	sp, #40	; 0x28
 801e808:	af00      	add	r7, sp, #0
 801e80a:	60f8      	str	r0, [r7, #12]
 801e80c:	60b9      	str	r1, [r7, #8]
 801e80e:	607a      	str	r2, [r7, #4]
 801e810:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 801e812:	2301      	movs	r3, #1
 801e814:	627b      	str	r3, [r7, #36]	; 0x24
 801e816:	2300      	movs	r3, #0
 801e818:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 801e81a:	2300      	movs	r3, #0
 801e81c:	61fb      	str	r3, [r7, #28]
 801e81e:	2300      	movs	r3, #0
 801e820:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 801e826:	e002      	b.n	801e82e <UTIL_LCD_DisplayStringAt+0x2a>
 801e828:	69fb      	ldr	r3, [r7, #28]
 801e82a:	3301      	adds	r3, #1
 801e82c:	61fb      	str	r3, [r7, #28]
 801e82e:	69bb      	ldr	r3, [r7, #24]
 801e830:	1c5a      	adds	r2, r3, #1
 801e832:	61ba      	str	r2, [r7, #24]
 801e834:	781b      	ldrb	r3, [r3, #0]
 801e836:	2b00      	cmp	r3, #0
 801e838:	d1f6      	bne.n	801e828 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801e83a:	4b48      	ldr	r3, [pc, #288]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e83c:	695b      	ldr	r3, [r3, #20]
 801e83e:	4a47      	ldr	r2, [pc, #284]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e840:	68d2      	ldr	r2, [r2, #12]
 801e842:	4946      	ldr	r1, [pc, #280]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e844:	0152      	lsls	r2, r2, #5
 801e846:	440a      	add	r2, r1
 801e848:	3208      	adds	r2, #8
 801e84a:	6812      	ldr	r2, [r2, #0]
 801e84c:	8892      	ldrh	r2, [r2, #4]
 801e84e:	fbb3 f3f2 	udiv	r3, r3, r2
 801e852:	617b      	str	r3, [r7, #20]

  switch (Mode)
 801e854:	78fb      	ldrb	r3, [r7, #3]
 801e856:	2b03      	cmp	r3, #3
 801e858:	d018      	beq.n	801e88c <UTIL_LCD_DisplayStringAt+0x88>
 801e85a:	2b03      	cmp	r3, #3
 801e85c:	dc2a      	bgt.n	801e8b4 <UTIL_LCD_DisplayStringAt+0xb0>
 801e85e:	2b01      	cmp	r3, #1
 801e860:	d002      	beq.n	801e868 <UTIL_LCD_DisplayStringAt+0x64>
 801e862:	2b02      	cmp	r3, #2
 801e864:	d015      	beq.n	801e892 <UTIL_LCD_DisplayStringAt+0x8e>
 801e866:	e025      	b.n	801e8b4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801e868:	697a      	ldr	r2, [r7, #20]
 801e86a:	69fb      	ldr	r3, [r7, #28]
 801e86c:	1ad3      	subs	r3, r2, r3
 801e86e:	4a3b      	ldr	r2, [pc, #236]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e870:	68d2      	ldr	r2, [r2, #12]
 801e872:	493a      	ldr	r1, [pc, #232]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e874:	0152      	lsls	r2, r2, #5
 801e876:	440a      	add	r2, r1
 801e878:	3208      	adds	r2, #8
 801e87a:	6812      	ldr	r2, [r2, #0]
 801e87c:	8892      	ldrh	r2, [r2, #4]
 801e87e:	fb02 f303 	mul.w	r3, r2, r3
 801e882:	085b      	lsrs	r3, r3, #1
 801e884:	68fa      	ldr	r2, [r7, #12]
 801e886:	4413      	add	r3, r2
 801e888:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e88a:	e016      	b.n	801e8ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e890:	e013      	b.n	801e8ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801e892:	697a      	ldr	r2, [r7, #20]
 801e894:	69fb      	ldr	r3, [r7, #28]
 801e896:	1ad3      	subs	r3, r2, r3
 801e898:	4a30      	ldr	r2, [pc, #192]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e89a:	68d2      	ldr	r2, [r2, #12]
 801e89c:	492f      	ldr	r1, [pc, #188]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e89e:	0152      	lsls	r2, r2, #5
 801e8a0:	440a      	add	r2, r1
 801e8a2:	3208      	adds	r2, #8
 801e8a4:	6812      	ldr	r2, [r2, #0]
 801e8a6:	8892      	ldrh	r2, [r2, #4]
 801e8a8:	fb02 f203 	mul.w	r2, r2, r3
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	1ad3      	subs	r3, r2, r3
 801e8b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e8b2:	e002      	b.n	801e8ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 801e8b4:	68fb      	ldr	r3, [r7, #12]
 801e8b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e8b8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d003      	beq.n	801e8c8 <UTIL_LCD_DisplayStringAt+0xc4>
 801e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e8c6:	d31b      	bcc.n	801e900 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 801e8c8:	2301      	movs	r3, #1
 801e8ca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801e8cc:	e018      	b.n	801e900 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	781b      	ldrb	r3, [r3, #0]
 801e8d2:	461a      	mov	r2, r3
 801e8d4:	68b9      	ldr	r1, [r7, #8]
 801e8d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e8d8:	f7ff ff5e 	bl	801e798 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801e8dc:	4b1f      	ldr	r3, [pc, #124]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e8de:	68db      	ldr	r3, [r3, #12]
 801e8e0:	4a1e      	ldr	r2, [pc, #120]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e8e2:	015b      	lsls	r3, r3, #5
 801e8e4:	4413      	add	r3, r2
 801e8e6:	3308      	adds	r3, #8
 801e8e8:	681b      	ldr	r3, [r3, #0]
 801e8ea:	889b      	ldrh	r3, [r3, #4]
 801e8ec:	461a      	mov	r2, r3
 801e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8f0:	4413      	add	r3, r2
 801e8f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	3301      	adds	r3, #1
 801e8f8:	607b      	str	r3, [r7, #4]
    i++;
 801e8fa:	6a3b      	ldr	r3, [r7, #32]
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	781b      	ldrb	r3, [r3, #0]
 801e904:	2b00      	cmp	r3, #0
 801e906:	bf14      	ite	ne
 801e908:	2301      	movne	r3, #1
 801e90a:	2300      	moveq	r3, #0
 801e90c:	b2da      	uxtb	r2, r3
 801e90e:	4b13      	ldr	r3, [pc, #76]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e910:	6959      	ldr	r1, [r3, #20]
 801e912:	4b12      	ldr	r3, [pc, #72]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e914:	68db      	ldr	r3, [r3, #12]
 801e916:	4811      	ldr	r0, [pc, #68]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e918:	015b      	lsls	r3, r3, #5
 801e91a:	4403      	add	r3, r0
 801e91c:	3308      	adds	r3, #8
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	889b      	ldrh	r3, [r3, #4]
 801e922:	4618      	mov	r0, r3
 801e924:	6a3b      	ldr	r3, [r7, #32]
 801e926:	fb03 f300 	mul.w	r3, r3, r0
 801e92a:	1acb      	subs	r3, r1, r3
 801e92c:	b29b      	uxth	r3, r3
 801e92e:	490b      	ldr	r1, [pc, #44]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e930:	68c9      	ldr	r1, [r1, #12]
 801e932:	480a      	ldr	r0, [pc, #40]	; (801e95c <UTIL_LCD_DisplayStringAt+0x158>)
 801e934:	0149      	lsls	r1, r1, #5
 801e936:	4401      	add	r1, r0
 801e938:	3108      	adds	r1, #8
 801e93a:	6809      	ldr	r1, [r1, #0]
 801e93c:	8889      	ldrh	r1, [r1, #4]
 801e93e:	428b      	cmp	r3, r1
 801e940:	bf2c      	ite	cs
 801e942:	2301      	movcs	r3, #1
 801e944:	2300      	movcc	r3, #0
 801e946:	b2db      	uxtb	r3, r3
 801e948:	4013      	ands	r3, r2
 801e94a:	b2db      	uxtb	r3, r3
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d1be      	bne.n	801e8ce <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 801e950:	bf00      	nop
 801e952:	bf00      	nop
 801e954:	3728      	adds	r7, #40	; 0x28
 801e956:	46bd      	mov	sp, r7
 801e958:	bd80      	pop	{r7, pc}
 801e95a:	bf00      	nop
 801e95c:	200090cc 	.word	0x200090cc

0801e960 <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
 801e960:	b580      	push	{r7, lr}
 801e962:	b082      	sub	sp, #8
 801e964:	af00      	add	r7, sp, #0
 801e966:	6078      	str	r0, [r7, #4]
 801e968:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 801e96a:	f7ff fed3 	bl	801e714 <UTIL_LCD_GetFont>
 801e96e:	4603      	mov	r3, r0
 801e970:	88db      	ldrh	r3, [r3, #6]
 801e972:	461a      	mov	r2, r3
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	fb03 f102 	mul.w	r1, r3, r2
 801e97a:	2303      	movs	r3, #3
 801e97c:	683a      	ldr	r2, [r7, #0]
 801e97e:	2000      	movs	r0, #0
 801e980:	f7ff ff40 	bl	801e804 <UTIL_LCD_DisplayStringAt>
}
 801e984:	bf00      	nop
 801e986:	3708      	adds	r7, #8
 801e988:	46bd      	mov	sp, r7
 801e98a:	bd80      	pop	{r7, pc}

0801e98c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 801e98c:	b590      	push	{r4, r7, lr}
 801e98e:	b087      	sub	sp, #28
 801e990:	af02      	add	r7, sp, #8
 801e992:	60f8      	str	r0, [r7, #12]
 801e994:	60b9      	str	r1, [r7, #8]
 801e996:	607a      	str	r2, [r7, #4]
 801e998:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e99a:	4b17      	ldr	r3, [pc, #92]	; (801e9f8 <UTIL_LCD_FillRect+0x6c>)
 801e99c:	69db      	ldr	r3, [r3, #28]
 801e99e:	2b02      	cmp	r3, #2
 801e9a0:	d11a      	bne.n	801e9d8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801e9a2:	4b16      	ldr	r3, [pc, #88]	; (801e9fc <UTIL_LCD_FillRect+0x70>)
 801e9a4:	691c      	ldr	r4, [r3, #16]
 801e9a6:	4b14      	ldr	r3, [pc, #80]	; (801e9f8 <UTIL_LCD_FillRect+0x6c>)
 801e9a8:	6918      	ldr	r0, [r3, #16]
 801e9aa:	6a3b      	ldr	r3, [r7, #32]
 801e9ac:	08db      	lsrs	r3, r3, #3
 801e9ae:	f003 021f 	and.w	r2, r3, #31
 801e9b2:	6a3b      	ldr	r3, [r7, #32]
 801e9b4:	0a9b      	lsrs	r3, r3, #10
 801e9b6:	015b      	lsls	r3, r3, #5
 801e9b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e9bc:	431a      	orrs	r2, r3
 801e9be:	6a3b      	ldr	r3, [r7, #32]
 801e9c0:	0cdb      	lsrs	r3, r3, #19
 801e9c2:	02db      	lsls	r3, r3, #11
 801e9c4:	b29b      	uxth	r3, r3
 801e9c6:	4313      	orrs	r3, r2
 801e9c8:	9301      	str	r3, [sp, #4]
 801e9ca:	683b      	ldr	r3, [r7, #0]
 801e9cc:	9300      	str	r3, [sp, #0]
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	68ba      	ldr	r2, [r7, #8]
 801e9d2:	68f9      	ldr	r1, [r7, #12]
 801e9d4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 801e9d6:	e00b      	b.n	801e9f0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801e9d8:	4b08      	ldr	r3, [pc, #32]	; (801e9fc <UTIL_LCD_FillRect+0x70>)
 801e9da:	691c      	ldr	r4, [r3, #16]
 801e9dc:	4b06      	ldr	r3, [pc, #24]	; (801e9f8 <UTIL_LCD_FillRect+0x6c>)
 801e9de:	6918      	ldr	r0, [r3, #16]
 801e9e0:	6a3b      	ldr	r3, [r7, #32]
 801e9e2:	9301      	str	r3, [sp, #4]
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	9300      	str	r3, [sp, #0]
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	68ba      	ldr	r2, [r7, #8]
 801e9ec:	68f9      	ldr	r1, [r7, #12]
 801e9ee:	47a0      	blx	r4
}
 801e9f0:	bf00      	nop
 801e9f2:	3714      	adds	r7, #20
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	bd90      	pop	{r4, r7, pc}
 801e9f8:	200090cc 	.word	0x200090cc
 801e9fc:	2000910c 	.word	0x2000910c

0801ea00 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b0b2      	sub	sp, #200	; 0xc8
 801ea04:	af02      	add	r7, sp, #8
 801ea06:	60f8      	str	r0, [r7, #12]
 801ea08:	60b9      	str	r1, [r7, #8]
 801ea0a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801ea12:	2300      	movs	r3, #0
 801ea14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 801ea18:	4ba7      	ldr	r3, [pc, #668]	; (801ecb8 <DrawChar+0x2b8>)
 801ea1a:	68db      	ldr	r3, [r3, #12]
 801ea1c:	4aa6      	ldr	r2, [pc, #664]	; (801ecb8 <DrawChar+0x2b8>)
 801ea1e:	015b      	lsls	r3, r3, #5
 801ea20:	4413      	add	r3, r2
 801ea22:	3308      	adds	r3, #8
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	88db      	ldrh	r3, [r3, #6]
 801ea28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 801ea2c:	4ba2      	ldr	r3, [pc, #648]	; (801ecb8 <DrawChar+0x2b8>)
 801ea2e:	68db      	ldr	r3, [r3, #12]
 801ea30:	4aa1      	ldr	r2, [pc, #644]	; (801ecb8 <DrawChar+0x2b8>)
 801ea32:	015b      	lsls	r3, r3, #5
 801ea34:	4413      	add	r3, r2
 801ea36:	3308      	adds	r3, #8
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	889b      	ldrh	r3, [r3, #4]
 801ea3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801ea40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ea44:	3307      	adds	r3, #7
 801ea46:	f023 0207 	bic.w	r2, r3, #7
 801ea4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ea4e:	1ad3      	subs	r3, r2, r3
 801ea50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 801ea54:	2300      	movs	r3, #0
 801ea56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801ea5a:	e120      	b.n	801ec9e <DrawChar+0x29e>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801ea5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ea60:	3307      	adds	r3, #7
 801ea62:	08db      	lsrs	r3, r3, #3
 801ea64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801ea68:	fb02 f303 	mul.w	r3, r2, r3
 801ea6c:	687a      	ldr	r2, [r7, #4]
 801ea6e:	4413      	add	r3, r2
 801ea70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 801ea74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ea78:	3307      	adds	r3, #7
 801ea7a:	08db      	lsrs	r3, r3, #3
 801ea7c:	2b01      	cmp	r3, #1
 801ea7e:	d002      	beq.n	801ea86 <DrawChar+0x86>
 801ea80:	2b02      	cmp	r3, #2
 801ea82:	d006      	beq.n	801ea92 <DrawChar+0x92>
 801ea84:	e011      	b.n	801eaaa <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 801ea86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ea8a:	781b      	ldrb	r3, [r3, #0]
 801ea8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801ea90:	e01d      	b.n	801eace <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 801ea92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ea96:	781b      	ldrb	r3, [r3, #0]
 801ea98:	021b      	lsls	r3, r3, #8
 801ea9a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801ea9e:	3201      	adds	r2, #1
 801eaa0:	7812      	ldrb	r2, [r2, #0]
 801eaa2:	4313      	orrs	r3, r2
 801eaa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801eaa8:	e011      	b.n	801eace <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801eaaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801eaae:	781b      	ldrb	r3, [r3, #0]
 801eab0:	041a      	lsls	r2, r3, #16
 801eab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801eab6:	3301      	adds	r3, #1
 801eab8:	781b      	ldrb	r3, [r3, #0]
 801eaba:	021b      	lsls	r3, r3, #8
 801eabc:	4313      	orrs	r3, r2
 801eabe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801eac2:	3202      	adds	r2, #2
 801eac4:	7812      	ldrb	r2, [r2, #0]
 801eac6:	4313      	orrs	r3, r2
 801eac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801eacc:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eace:	4b7a      	ldr	r3, [pc, #488]	; (801ecb8 <DrawChar+0x2b8>)
 801ead0:	68db      	ldr	r3, [r3, #12]
 801ead2:	4a79      	ldr	r2, [pc, #484]	; (801ecb8 <DrawChar+0x2b8>)
 801ead4:	015b      	lsls	r3, r3, #5
 801ead6:	4413      	add	r3, r2
 801ead8:	331c      	adds	r3, #28
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	2b02      	cmp	r3, #2
 801eade:	f040 808e 	bne.w	801ebfe <DrawChar+0x1fe>
    {
      for (j = 0; j < width; j++)
 801eae2:	2300      	movs	r3, #0
 801eae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801eae8:	e076      	b.n	801ebd8 <DrawChar+0x1d8>
      {
        if(line & (1 << (width- j + offset- 1)))
 801eaea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801eaee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801eaf2:	1ad2      	subs	r2, r2, r3
 801eaf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801eaf8:	4413      	add	r3, r2
 801eafa:	3b01      	subs	r3, #1
 801eafc:	2201      	movs	r2, #1
 801eafe:	fa02 f303 	lsl.w	r3, r2, r3
 801eb02:	461a      	mov	r2, r3
 801eb04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801eb08:	4013      	ands	r3, r2
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d02e      	beq.n	801eb6c <DrawChar+0x16c>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801eb0e:	4b6a      	ldr	r3, [pc, #424]	; (801ecb8 <DrawChar+0x2b8>)
 801eb10:	68db      	ldr	r3, [r3, #12]
 801eb12:	4a69      	ldr	r2, [pc, #420]	; (801ecb8 <DrawChar+0x2b8>)
 801eb14:	015b      	lsls	r3, r3, #5
 801eb16:	4413      	add	r3, r2
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	08db      	lsrs	r3, r3, #3
 801eb1c:	b29b      	uxth	r3, r3
 801eb1e:	f003 031f 	and.w	r3, r3, #31
 801eb22:	b29a      	uxth	r2, r3
 801eb24:	4b64      	ldr	r3, [pc, #400]	; (801ecb8 <DrawChar+0x2b8>)
 801eb26:	68db      	ldr	r3, [r3, #12]
 801eb28:	4963      	ldr	r1, [pc, #396]	; (801ecb8 <DrawChar+0x2b8>)
 801eb2a:	015b      	lsls	r3, r3, #5
 801eb2c:	440b      	add	r3, r1
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	0a9b      	lsrs	r3, r3, #10
 801eb32:	b29b      	uxth	r3, r3
 801eb34:	015b      	lsls	r3, r3, #5
 801eb36:	b29b      	uxth	r3, r3
 801eb38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb3c:	b29b      	uxth	r3, r3
 801eb3e:	4313      	orrs	r3, r2
 801eb40:	b29a      	uxth	r2, r3
 801eb42:	4b5d      	ldr	r3, [pc, #372]	; (801ecb8 <DrawChar+0x2b8>)
 801eb44:	68db      	ldr	r3, [r3, #12]
 801eb46:	495c      	ldr	r1, [pc, #368]	; (801ecb8 <DrawChar+0x2b8>)
 801eb48:	015b      	lsls	r3, r3, #5
 801eb4a:	440b      	add	r3, r1
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	0cdb      	lsrs	r3, r3, #19
 801eb50:	b29b      	uxth	r3, r3
 801eb52:	02db      	lsls	r3, r3, #11
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	4313      	orrs	r3, r2
 801eb58:	b29a      	uxth	r2, r3
 801eb5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801eb5e:	005b      	lsls	r3, r3, #1
 801eb60:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 801eb64:	440b      	add	r3, r1
 801eb66:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801eb6a:	e030      	b.n	801ebce <DrawChar+0x1ce>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801eb6c:	4b52      	ldr	r3, [pc, #328]	; (801ecb8 <DrawChar+0x2b8>)
 801eb6e:	68db      	ldr	r3, [r3, #12]
 801eb70:	4a51      	ldr	r2, [pc, #324]	; (801ecb8 <DrawChar+0x2b8>)
 801eb72:	015b      	lsls	r3, r3, #5
 801eb74:	4413      	add	r3, r2
 801eb76:	3304      	adds	r3, #4
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	08db      	lsrs	r3, r3, #3
 801eb7c:	b29b      	uxth	r3, r3
 801eb7e:	f003 031f 	and.w	r3, r3, #31
 801eb82:	b29a      	uxth	r2, r3
 801eb84:	4b4c      	ldr	r3, [pc, #304]	; (801ecb8 <DrawChar+0x2b8>)
 801eb86:	68db      	ldr	r3, [r3, #12]
 801eb88:	494b      	ldr	r1, [pc, #300]	; (801ecb8 <DrawChar+0x2b8>)
 801eb8a:	015b      	lsls	r3, r3, #5
 801eb8c:	440b      	add	r3, r1
 801eb8e:	3304      	adds	r3, #4
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	0a9b      	lsrs	r3, r3, #10
 801eb94:	b29b      	uxth	r3, r3
 801eb96:	015b      	lsls	r3, r3, #5
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb9e:	b29b      	uxth	r3, r3
 801eba0:	4313      	orrs	r3, r2
 801eba2:	b29a      	uxth	r2, r3
 801eba4:	4b44      	ldr	r3, [pc, #272]	; (801ecb8 <DrawChar+0x2b8>)
 801eba6:	68db      	ldr	r3, [r3, #12]
 801eba8:	4943      	ldr	r1, [pc, #268]	; (801ecb8 <DrawChar+0x2b8>)
 801ebaa:	015b      	lsls	r3, r3, #5
 801ebac:	440b      	add	r3, r1
 801ebae:	3304      	adds	r3, #4
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	0cdb      	lsrs	r3, r3, #19
 801ebb4:	b29b      	uxth	r3, r3
 801ebb6:	02db      	lsls	r3, r3, #11
 801ebb8:	b29b      	uxth	r3, r3
 801ebba:	4313      	orrs	r3, r2
 801ebbc:	b29a      	uxth	r2, r3
 801ebbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ebc2:	005b      	lsls	r3, r3, #1
 801ebc4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 801ebc8:	440b      	add	r3, r1
 801ebca:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 801ebce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ebd2:	3301      	adds	r3, #1
 801ebd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ebd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801ebdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ebe0:	429a      	cmp	r2, r3
 801ebe2:	d382      	bcc.n	801eaea <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 801ebe4:	68b9      	ldr	r1, [r7, #8]
 801ebe6:	1c4b      	adds	r3, r1, #1
 801ebe8:	60bb      	str	r3, [r7, #8]
 801ebea:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801ebee:	2301      	movs	r3, #1
 801ebf0:	9300      	str	r3, [sp, #0]
 801ebf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ebf6:	68f8      	ldr	r0, [r7, #12]
 801ebf8:	f7ff fd9c 	bl	801e734 <UTIL_LCD_FillRGBRect>
 801ebfc:	e04a      	b.n	801ec94 <DrawChar+0x294>
    }
    else
    {
      for (j = 0; j < width; j++)
 801ebfe:	2300      	movs	r3, #0
 801ec00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ec04:	e034      	b.n	801ec70 <DrawChar+0x270>
      {
        if(line & (1 << (width- j + offset- 1)))
 801ec06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ec0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ec0e:	1ad2      	subs	r2, r2, r3
 801ec10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ec14:	4413      	add	r3, r2
 801ec16:	3b01      	subs	r3, #1
 801ec18:	2201      	movs	r2, #1
 801ec1a:	fa02 f303 	lsl.w	r3, r2, r3
 801ec1e:	461a      	mov	r2, r3
 801ec20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ec24:	4013      	ands	r3, r2
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d00e      	beq.n	801ec48 <DrawChar+0x248>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801ec2a:	4b23      	ldr	r3, [pc, #140]	; (801ecb8 <DrawChar+0x2b8>)
 801ec2c:	68db      	ldr	r3, [r3, #12]
 801ec2e:	4a22      	ldr	r2, [pc, #136]	; (801ecb8 <DrawChar+0x2b8>)
 801ec30:	015b      	lsls	r3, r3, #5
 801ec32:	4413      	add	r3, r2
 801ec34:	681a      	ldr	r2, [r3, #0]
 801ec36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ec3a:	009b      	lsls	r3, r3, #2
 801ec3c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 801ec40:	440b      	add	r3, r1
 801ec42:	f843 2cac 	str.w	r2, [r3, #-172]
 801ec46:	e00e      	b.n	801ec66 <DrawChar+0x266>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801ec48:	4b1b      	ldr	r3, [pc, #108]	; (801ecb8 <DrawChar+0x2b8>)
 801ec4a:	68db      	ldr	r3, [r3, #12]
 801ec4c:	4a1a      	ldr	r2, [pc, #104]	; (801ecb8 <DrawChar+0x2b8>)
 801ec4e:	015b      	lsls	r3, r3, #5
 801ec50:	4413      	add	r3, r2
 801ec52:	3304      	adds	r3, #4
 801ec54:	681a      	ldr	r2, [r3, #0]
 801ec56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ec5a:	009b      	lsls	r3, r3, #2
 801ec5c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 801ec60:	440b      	add	r3, r1
 801ec62:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801ec66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ec6a:	3301      	adds	r3, #1
 801ec6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ec70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801ec74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ec78:	429a      	cmp	r2, r3
 801ec7a:	d3c4      	bcc.n	801ec06 <DrawChar+0x206>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 801ec7c:	68b9      	ldr	r1, [r7, #8]
 801ec7e:	1c4b      	adds	r3, r1, #1
 801ec80:	60bb      	str	r3, [r7, #8]
 801ec82:	f107 0214 	add.w	r2, r7, #20
 801ec86:	2301      	movs	r3, #1
 801ec88:	9300      	str	r3, [sp, #0]
 801ec8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ec8e:	68f8      	ldr	r0, [r7, #12]
 801ec90:	f7ff fd50 	bl	801e734 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 801ec94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ec98:	3301      	adds	r3, #1
 801ec9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801ec9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801eca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801eca6:	429a      	cmp	r2, r3
 801eca8:	f4ff aed8 	bcc.w	801ea5c <DrawChar+0x5c>
    }
  }
}
 801ecac:	bf00      	nop
 801ecae:	bf00      	nop
 801ecb0:	37c0      	adds	r7, #192	; 0xc0
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	bd80      	pop	{r7, pc}
 801ecb6:	bf00      	nop
 801ecb8:	200090cc 	.word	0x200090cc

0801ecbc <__errno>:
 801ecbc:	4b01      	ldr	r3, [pc, #4]	; (801ecc4 <__errno+0x8>)
 801ecbe:	6818      	ldr	r0, [r3, #0]
 801ecc0:	4770      	bx	lr
 801ecc2:	bf00      	nop
 801ecc4:	20000050 	.word	0x20000050

0801ecc8 <__libc_init_array>:
 801ecc8:	b570      	push	{r4, r5, r6, lr}
 801ecca:	4d0d      	ldr	r5, [pc, #52]	; (801ed00 <__libc_init_array+0x38>)
 801eccc:	4c0d      	ldr	r4, [pc, #52]	; (801ed04 <__libc_init_array+0x3c>)
 801ecce:	1b64      	subs	r4, r4, r5
 801ecd0:	10a4      	asrs	r4, r4, #2
 801ecd2:	2600      	movs	r6, #0
 801ecd4:	42a6      	cmp	r6, r4
 801ecd6:	d109      	bne.n	801ecec <__libc_init_array+0x24>
 801ecd8:	4d0b      	ldr	r5, [pc, #44]	; (801ed08 <__libc_init_array+0x40>)
 801ecda:	4c0c      	ldr	r4, [pc, #48]	; (801ed0c <__libc_init_array+0x44>)
 801ecdc:	f001 faba 	bl	8020254 <_init>
 801ece0:	1b64      	subs	r4, r4, r5
 801ece2:	10a4      	asrs	r4, r4, #2
 801ece4:	2600      	movs	r6, #0
 801ece6:	42a6      	cmp	r6, r4
 801ece8:	d105      	bne.n	801ecf6 <__libc_init_array+0x2e>
 801ecea:	bd70      	pop	{r4, r5, r6, pc}
 801ecec:	f855 3b04 	ldr.w	r3, [r5], #4
 801ecf0:	4798      	blx	r3
 801ecf2:	3601      	adds	r6, #1
 801ecf4:	e7ee      	b.n	801ecd4 <__libc_init_array+0xc>
 801ecf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ecfa:	4798      	blx	r3
 801ecfc:	3601      	adds	r6, #1
 801ecfe:	e7f2      	b.n	801ece6 <__libc_init_array+0x1e>
 801ed00:	08036134 	.word	0x08036134
 801ed04:	08036134 	.word	0x08036134
 801ed08:	08036134 	.word	0x08036134
 801ed0c:	08036138 	.word	0x08036138

0801ed10 <memcmp>:
 801ed10:	b530      	push	{r4, r5, lr}
 801ed12:	3901      	subs	r1, #1
 801ed14:	2400      	movs	r4, #0
 801ed16:	42a2      	cmp	r2, r4
 801ed18:	d101      	bne.n	801ed1e <memcmp+0xe>
 801ed1a:	2000      	movs	r0, #0
 801ed1c:	e005      	b.n	801ed2a <memcmp+0x1a>
 801ed1e:	5d03      	ldrb	r3, [r0, r4]
 801ed20:	3401      	adds	r4, #1
 801ed22:	5d0d      	ldrb	r5, [r1, r4]
 801ed24:	42ab      	cmp	r3, r5
 801ed26:	d0f6      	beq.n	801ed16 <memcmp+0x6>
 801ed28:	1b58      	subs	r0, r3, r5
 801ed2a:	bd30      	pop	{r4, r5, pc}

0801ed2c <memcpy>:
 801ed2c:	440a      	add	r2, r1
 801ed2e:	4291      	cmp	r1, r2
 801ed30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ed34:	d100      	bne.n	801ed38 <memcpy+0xc>
 801ed36:	4770      	bx	lr
 801ed38:	b510      	push	{r4, lr}
 801ed3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed42:	4291      	cmp	r1, r2
 801ed44:	d1f9      	bne.n	801ed3a <memcpy+0xe>
 801ed46:	bd10      	pop	{r4, pc}

0801ed48 <memmove>:
 801ed48:	4288      	cmp	r0, r1
 801ed4a:	b510      	push	{r4, lr}
 801ed4c:	eb01 0402 	add.w	r4, r1, r2
 801ed50:	d902      	bls.n	801ed58 <memmove+0x10>
 801ed52:	4284      	cmp	r4, r0
 801ed54:	4623      	mov	r3, r4
 801ed56:	d807      	bhi.n	801ed68 <memmove+0x20>
 801ed58:	1e43      	subs	r3, r0, #1
 801ed5a:	42a1      	cmp	r1, r4
 801ed5c:	d008      	beq.n	801ed70 <memmove+0x28>
 801ed5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ed62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ed66:	e7f8      	b.n	801ed5a <memmove+0x12>
 801ed68:	4402      	add	r2, r0
 801ed6a:	4601      	mov	r1, r0
 801ed6c:	428a      	cmp	r2, r1
 801ed6e:	d100      	bne.n	801ed72 <memmove+0x2a>
 801ed70:	bd10      	pop	{r4, pc}
 801ed72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ed76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ed7a:	e7f7      	b.n	801ed6c <memmove+0x24>

0801ed7c <memset>:
 801ed7c:	4402      	add	r2, r0
 801ed7e:	4603      	mov	r3, r0
 801ed80:	4293      	cmp	r3, r2
 801ed82:	d100      	bne.n	801ed86 <memset+0xa>
 801ed84:	4770      	bx	lr
 801ed86:	f803 1b01 	strb.w	r1, [r3], #1
 801ed8a:	e7f9      	b.n	801ed80 <memset+0x4>

0801ed8c <iprintf>:
 801ed8c:	b40f      	push	{r0, r1, r2, r3}
 801ed8e:	4b0a      	ldr	r3, [pc, #40]	; (801edb8 <iprintf+0x2c>)
 801ed90:	b513      	push	{r0, r1, r4, lr}
 801ed92:	681c      	ldr	r4, [r3, #0]
 801ed94:	b124      	cbz	r4, 801eda0 <iprintf+0x14>
 801ed96:	69a3      	ldr	r3, [r4, #24]
 801ed98:	b913      	cbnz	r3, 801eda0 <iprintf+0x14>
 801ed9a:	4620      	mov	r0, r4
 801ed9c:	f000 fb06 	bl	801f3ac <__sinit>
 801eda0:	ab05      	add	r3, sp, #20
 801eda2:	9a04      	ldr	r2, [sp, #16]
 801eda4:	68a1      	ldr	r1, [r4, #8]
 801eda6:	9301      	str	r3, [sp, #4]
 801eda8:	4620      	mov	r0, r4
 801edaa:	f000 fe4d 	bl	801fa48 <_vfiprintf_r>
 801edae:	b002      	add	sp, #8
 801edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edb4:	b004      	add	sp, #16
 801edb6:	4770      	bx	lr
 801edb8:	20000050 	.word	0x20000050

0801edbc <_puts_r>:
 801edbc:	b570      	push	{r4, r5, r6, lr}
 801edbe:	460e      	mov	r6, r1
 801edc0:	4605      	mov	r5, r0
 801edc2:	b118      	cbz	r0, 801edcc <_puts_r+0x10>
 801edc4:	6983      	ldr	r3, [r0, #24]
 801edc6:	b90b      	cbnz	r3, 801edcc <_puts_r+0x10>
 801edc8:	f000 faf0 	bl	801f3ac <__sinit>
 801edcc:	69ab      	ldr	r3, [r5, #24]
 801edce:	68ac      	ldr	r4, [r5, #8]
 801edd0:	b913      	cbnz	r3, 801edd8 <_puts_r+0x1c>
 801edd2:	4628      	mov	r0, r5
 801edd4:	f000 faea 	bl	801f3ac <__sinit>
 801edd8:	4b2c      	ldr	r3, [pc, #176]	; (801ee8c <_puts_r+0xd0>)
 801edda:	429c      	cmp	r4, r3
 801eddc:	d120      	bne.n	801ee20 <_puts_r+0x64>
 801edde:	686c      	ldr	r4, [r5, #4]
 801ede0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ede2:	07db      	lsls	r3, r3, #31
 801ede4:	d405      	bmi.n	801edf2 <_puts_r+0x36>
 801ede6:	89a3      	ldrh	r3, [r4, #12]
 801ede8:	0598      	lsls	r0, r3, #22
 801edea:	d402      	bmi.n	801edf2 <_puts_r+0x36>
 801edec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801edee:	f000 fb8d 	bl	801f50c <__retarget_lock_acquire_recursive>
 801edf2:	89a3      	ldrh	r3, [r4, #12]
 801edf4:	0719      	lsls	r1, r3, #28
 801edf6:	d51d      	bpl.n	801ee34 <_puts_r+0x78>
 801edf8:	6923      	ldr	r3, [r4, #16]
 801edfa:	b1db      	cbz	r3, 801ee34 <_puts_r+0x78>
 801edfc:	3e01      	subs	r6, #1
 801edfe:	68a3      	ldr	r3, [r4, #8]
 801ee00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ee04:	3b01      	subs	r3, #1
 801ee06:	60a3      	str	r3, [r4, #8]
 801ee08:	bb39      	cbnz	r1, 801ee5a <_puts_r+0x9e>
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	da38      	bge.n	801ee80 <_puts_r+0xc4>
 801ee0e:	4622      	mov	r2, r4
 801ee10:	210a      	movs	r1, #10
 801ee12:	4628      	mov	r0, r5
 801ee14:	f000 f8d2 	bl	801efbc <__swbuf_r>
 801ee18:	3001      	adds	r0, #1
 801ee1a:	d011      	beq.n	801ee40 <_puts_r+0x84>
 801ee1c:	250a      	movs	r5, #10
 801ee1e:	e011      	b.n	801ee44 <_puts_r+0x88>
 801ee20:	4b1b      	ldr	r3, [pc, #108]	; (801ee90 <_puts_r+0xd4>)
 801ee22:	429c      	cmp	r4, r3
 801ee24:	d101      	bne.n	801ee2a <_puts_r+0x6e>
 801ee26:	68ac      	ldr	r4, [r5, #8]
 801ee28:	e7da      	b.n	801ede0 <_puts_r+0x24>
 801ee2a:	4b1a      	ldr	r3, [pc, #104]	; (801ee94 <_puts_r+0xd8>)
 801ee2c:	429c      	cmp	r4, r3
 801ee2e:	bf08      	it	eq
 801ee30:	68ec      	ldreq	r4, [r5, #12]
 801ee32:	e7d5      	b.n	801ede0 <_puts_r+0x24>
 801ee34:	4621      	mov	r1, r4
 801ee36:	4628      	mov	r0, r5
 801ee38:	f000 f912 	bl	801f060 <__swsetup_r>
 801ee3c:	2800      	cmp	r0, #0
 801ee3e:	d0dd      	beq.n	801edfc <_puts_r+0x40>
 801ee40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ee44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ee46:	07da      	lsls	r2, r3, #31
 801ee48:	d405      	bmi.n	801ee56 <_puts_r+0x9a>
 801ee4a:	89a3      	ldrh	r3, [r4, #12]
 801ee4c:	059b      	lsls	r3, r3, #22
 801ee4e:	d402      	bmi.n	801ee56 <_puts_r+0x9a>
 801ee50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ee52:	f000 fb5c 	bl	801f50e <__retarget_lock_release_recursive>
 801ee56:	4628      	mov	r0, r5
 801ee58:	bd70      	pop	{r4, r5, r6, pc}
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	da04      	bge.n	801ee68 <_puts_r+0xac>
 801ee5e:	69a2      	ldr	r2, [r4, #24]
 801ee60:	429a      	cmp	r2, r3
 801ee62:	dc06      	bgt.n	801ee72 <_puts_r+0xb6>
 801ee64:	290a      	cmp	r1, #10
 801ee66:	d004      	beq.n	801ee72 <_puts_r+0xb6>
 801ee68:	6823      	ldr	r3, [r4, #0]
 801ee6a:	1c5a      	adds	r2, r3, #1
 801ee6c:	6022      	str	r2, [r4, #0]
 801ee6e:	7019      	strb	r1, [r3, #0]
 801ee70:	e7c5      	b.n	801edfe <_puts_r+0x42>
 801ee72:	4622      	mov	r2, r4
 801ee74:	4628      	mov	r0, r5
 801ee76:	f000 f8a1 	bl	801efbc <__swbuf_r>
 801ee7a:	3001      	adds	r0, #1
 801ee7c:	d1bf      	bne.n	801edfe <_puts_r+0x42>
 801ee7e:	e7df      	b.n	801ee40 <_puts_r+0x84>
 801ee80:	6823      	ldr	r3, [r4, #0]
 801ee82:	250a      	movs	r5, #10
 801ee84:	1c5a      	adds	r2, r3, #1
 801ee86:	6022      	str	r2, [r4, #0]
 801ee88:	701d      	strb	r5, [r3, #0]
 801ee8a:	e7db      	b.n	801ee44 <_puts_r+0x88>
 801ee8c:	080360c0 	.word	0x080360c0
 801ee90:	080360e0 	.word	0x080360e0
 801ee94:	080360a0 	.word	0x080360a0

0801ee98 <puts>:
 801ee98:	4b02      	ldr	r3, [pc, #8]	; (801eea4 <puts+0xc>)
 801ee9a:	4601      	mov	r1, r0
 801ee9c:	6818      	ldr	r0, [r3, #0]
 801ee9e:	f7ff bf8d 	b.w	801edbc <_puts_r>
 801eea2:	bf00      	nop
 801eea4:	20000050 	.word	0x20000050

0801eea8 <rand>:
 801eea8:	4b17      	ldr	r3, [pc, #92]	; (801ef08 <rand+0x60>)
 801eeaa:	b510      	push	{r4, lr}
 801eeac:	681c      	ldr	r4, [r3, #0]
 801eeae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801eeb0:	b9b3      	cbnz	r3, 801eee0 <rand+0x38>
 801eeb2:	2018      	movs	r0, #24
 801eeb4:	f000 fb90 	bl	801f5d8 <malloc>
 801eeb8:	63a0      	str	r0, [r4, #56]	; 0x38
 801eeba:	b928      	cbnz	r0, 801eec8 <rand+0x20>
 801eebc:	4602      	mov	r2, r0
 801eebe:	4b13      	ldr	r3, [pc, #76]	; (801ef0c <rand+0x64>)
 801eec0:	4813      	ldr	r0, [pc, #76]	; (801ef10 <rand+0x68>)
 801eec2:	214e      	movs	r1, #78	; 0x4e
 801eec4:	f000 f93a 	bl	801f13c <__assert_func>
 801eec8:	4a12      	ldr	r2, [pc, #72]	; (801ef14 <rand+0x6c>)
 801eeca:	4b13      	ldr	r3, [pc, #76]	; (801ef18 <rand+0x70>)
 801eecc:	e9c0 2300 	strd	r2, r3, [r0]
 801eed0:	4b12      	ldr	r3, [pc, #72]	; (801ef1c <rand+0x74>)
 801eed2:	6083      	str	r3, [r0, #8]
 801eed4:	230b      	movs	r3, #11
 801eed6:	8183      	strh	r3, [r0, #12]
 801eed8:	2201      	movs	r2, #1
 801eeda:	2300      	movs	r3, #0
 801eedc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801eee0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801eee2:	480f      	ldr	r0, [pc, #60]	; (801ef20 <rand+0x78>)
 801eee4:	690a      	ldr	r2, [r1, #16]
 801eee6:	694b      	ldr	r3, [r1, #20]
 801eee8:	4c0e      	ldr	r4, [pc, #56]	; (801ef24 <rand+0x7c>)
 801eeea:	4350      	muls	r0, r2
 801eeec:	fb04 0003 	mla	r0, r4, r3, r0
 801eef0:	fba2 3404 	umull	r3, r4, r2, r4
 801eef4:	1c5a      	adds	r2, r3, #1
 801eef6:	4404      	add	r4, r0
 801eef8:	f144 0000 	adc.w	r0, r4, #0
 801eefc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ef00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ef04:	bd10      	pop	{r4, pc}
 801ef06:	bf00      	nop
 801ef08:	20000050 	.word	0x20000050
 801ef0c:	08035fec 	.word	0x08035fec
 801ef10:	08036003 	.word	0x08036003
 801ef14:	abcd330e 	.word	0xabcd330e
 801ef18:	e66d1234 	.word	0xe66d1234
 801ef1c:	0005deec 	.word	0x0005deec
 801ef20:	5851f42d 	.word	0x5851f42d
 801ef24:	4c957f2d 	.word	0x4c957f2d

0801ef28 <siprintf>:
 801ef28:	b40e      	push	{r1, r2, r3}
 801ef2a:	b500      	push	{lr}
 801ef2c:	b09c      	sub	sp, #112	; 0x70
 801ef2e:	ab1d      	add	r3, sp, #116	; 0x74
 801ef30:	9002      	str	r0, [sp, #8]
 801ef32:	9006      	str	r0, [sp, #24]
 801ef34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ef38:	4809      	ldr	r0, [pc, #36]	; (801ef60 <siprintf+0x38>)
 801ef3a:	9107      	str	r1, [sp, #28]
 801ef3c:	9104      	str	r1, [sp, #16]
 801ef3e:	4909      	ldr	r1, [pc, #36]	; (801ef64 <siprintf+0x3c>)
 801ef40:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef44:	9105      	str	r1, [sp, #20]
 801ef46:	6800      	ldr	r0, [r0, #0]
 801ef48:	9301      	str	r3, [sp, #4]
 801ef4a:	a902      	add	r1, sp, #8
 801ef4c:	f000 fc52 	bl	801f7f4 <_svfiprintf_r>
 801ef50:	9b02      	ldr	r3, [sp, #8]
 801ef52:	2200      	movs	r2, #0
 801ef54:	701a      	strb	r2, [r3, #0]
 801ef56:	b01c      	add	sp, #112	; 0x70
 801ef58:	f85d eb04 	ldr.w	lr, [sp], #4
 801ef5c:	b003      	add	sp, #12
 801ef5e:	4770      	bx	lr
 801ef60:	20000050 	.word	0x20000050
 801ef64:	ffff0208 	.word	0xffff0208

0801ef68 <strcat>:
 801ef68:	b510      	push	{r4, lr}
 801ef6a:	4602      	mov	r2, r0
 801ef6c:	7814      	ldrb	r4, [r2, #0]
 801ef6e:	4613      	mov	r3, r2
 801ef70:	3201      	adds	r2, #1
 801ef72:	2c00      	cmp	r4, #0
 801ef74:	d1fa      	bne.n	801ef6c <strcat+0x4>
 801ef76:	3b01      	subs	r3, #1
 801ef78:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ef80:	2a00      	cmp	r2, #0
 801ef82:	d1f9      	bne.n	801ef78 <strcat+0x10>
 801ef84:	bd10      	pop	{r4, pc}

0801ef86 <strcpy>:
 801ef86:	4603      	mov	r3, r0
 801ef88:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef8c:	f803 2b01 	strb.w	r2, [r3], #1
 801ef90:	2a00      	cmp	r2, #0
 801ef92:	d1f9      	bne.n	801ef88 <strcpy+0x2>
 801ef94:	4770      	bx	lr

0801ef96 <strncmp>:
 801ef96:	b510      	push	{r4, lr}
 801ef98:	b16a      	cbz	r2, 801efb6 <strncmp+0x20>
 801ef9a:	3901      	subs	r1, #1
 801ef9c:	1884      	adds	r4, r0, r2
 801ef9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801efa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801efa6:	4293      	cmp	r3, r2
 801efa8:	d103      	bne.n	801efb2 <strncmp+0x1c>
 801efaa:	42a0      	cmp	r0, r4
 801efac:	d001      	beq.n	801efb2 <strncmp+0x1c>
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d1f5      	bne.n	801ef9e <strncmp+0x8>
 801efb2:	1a98      	subs	r0, r3, r2
 801efb4:	bd10      	pop	{r4, pc}
 801efb6:	4610      	mov	r0, r2
 801efb8:	e7fc      	b.n	801efb4 <strncmp+0x1e>
	...

0801efbc <__swbuf_r>:
 801efbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efbe:	460e      	mov	r6, r1
 801efc0:	4614      	mov	r4, r2
 801efc2:	4605      	mov	r5, r0
 801efc4:	b118      	cbz	r0, 801efce <__swbuf_r+0x12>
 801efc6:	6983      	ldr	r3, [r0, #24]
 801efc8:	b90b      	cbnz	r3, 801efce <__swbuf_r+0x12>
 801efca:	f000 f9ef 	bl	801f3ac <__sinit>
 801efce:	4b21      	ldr	r3, [pc, #132]	; (801f054 <__swbuf_r+0x98>)
 801efd0:	429c      	cmp	r4, r3
 801efd2:	d12b      	bne.n	801f02c <__swbuf_r+0x70>
 801efd4:	686c      	ldr	r4, [r5, #4]
 801efd6:	69a3      	ldr	r3, [r4, #24]
 801efd8:	60a3      	str	r3, [r4, #8]
 801efda:	89a3      	ldrh	r3, [r4, #12]
 801efdc:	071a      	lsls	r2, r3, #28
 801efde:	d52f      	bpl.n	801f040 <__swbuf_r+0x84>
 801efe0:	6923      	ldr	r3, [r4, #16]
 801efe2:	b36b      	cbz	r3, 801f040 <__swbuf_r+0x84>
 801efe4:	6923      	ldr	r3, [r4, #16]
 801efe6:	6820      	ldr	r0, [r4, #0]
 801efe8:	1ac0      	subs	r0, r0, r3
 801efea:	6963      	ldr	r3, [r4, #20]
 801efec:	b2f6      	uxtb	r6, r6
 801efee:	4283      	cmp	r3, r0
 801eff0:	4637      	mov	r7, r6
 801eff2:	dc04      	bgt.n	801effe <__swbuf_r+0x42>
 801eff4:	4621      	mov	r1, r4
 801eff6:	4628      	mov	r0, r5
 801eff8:	f000 f944 	bl	801f284 <_fflush_r>
 801effc:	bb30      	cbnz	r0, 801f04c <__swbuf_r+0x90>
 801effe:	68a3      	ldr	r3, [r4, #8]
 801f000:	3b01      	subs	r3, #1
 801f002:	60a3      	str	r3, [r4, #8]
 801f004:	6823      	ldr	r3, [r4, #0]
 801f006:	1c5a      	adds	r2, r3, #1
 801f008:	6022      	str	r2, [r4, #0]
 801f00a:	701e      	strb	r6, [r3, #0]
 801f00c:	6963      	ldr	r3, [r4, #20]
 801f00e:	3001      	adds	r0, #1
 801f010:	4283      	cmp	r3, r0
 801f012:	d004      	beq.n	801f01e <__swbuf_r+0x62>
 801f014:	89a3      	ldrh	r3, [r4, #12]
 801f016:	07db      	lsls	r3, r3, #31
 801f018:	d506      	bpl.n	801f028 <__swbuf_r+0x6c>
 801f01a:	2e0a      	cmp	r6, #10
 801f01c:	d104      	bne.n	801f028 <__swbuf_r+0x6c>
 801f01e:	4621      	mov	r1, r4
 801f020:	4628      	mov	r0, r5
 801f022:	f000 f92f 	bl	801f284 <_fflush_r>
 801f026:	b988      	cbnz	r0, 801f04c <__swbuf_r+0x90>
 801f028:	4638      	mov	r0, r7
 801f02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f02c:	4b0a      	ldr	r3, [pc, #40]	; (801f058 <__swbuf_r+0x9c>)
 801f02e:	429c      	cmp	r4, r3
 801f030:	d101      	bne.n	801f036 <__swbuf_r+0x7a>
 801f032:	68ac      	ldr	r4, [r5, #8]
 801f034:	e7cf      	b.n	801efd6 <__swbuf_r+0x1a>
 801f036:	4b09      	ldr	r3, [pc, #36]	; (801f05c <__swbuf_r+0xa0>)
 801f038:	429c      	cmp	r4, r3
 801f03a:	bf08      	it	eq
 801f03c:	68ec      	ldreq	r4, [r5, #12]
 801f03e:	e7ca      	b.n	801efd6 <__swbuf_r+0x1a>
 801f040:	4621      	mov	r1, r4
 801f042:	4628      	mov	r0, r5
 801f044:	f000 f80c 	bl	801f060 <__swsetup_r>
 801f048:	2800      	cmp	r0, #0
 801f04a:	d0cb      	beq.n	801efe4 <__swbuf_r+0x28>
 801f04c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f050:	e7ea      	b.n	801f028 <__swbuf_r+0x6c>
 801f052:	bf00      	nop
 801f054:	080360c0 	.word	0x080360c0
 801f058:	080360e0 	.word	0x080360e0
 801f05c:	080360a0 	.word	0x080360a0

0801f060 <__swsetup_r>:
 801f060:	4b32      	ldr	r3, [pc, #200]	; (801f12c <__swsetup_r+0xcc>)
 801f062:	b570      	push	{r4, r5, r6, lr}
 801f064:	681d      	ldr	r5, [r3, #0]
 801f066:	4606      	mov	r6, r0
 801f068:	460c      	mov	r4, r1
 801f06a:	b125      	cbz	r5, 801f076 <__swsetup_r+0x16>
 801f06c:	69ab      	ldr	r3, [r5, #24]
 801f06e:	b913      	cbnz	r3, 801f076 <__swsetup_r+0x16>
 801f070:	4628      	mov	r0, r5
 801f072:	f000 f99b 	bl	801f3ac <__sinit>
 801f076:	4b2e      	ldr	r3, [pc, #184]	; (801f130 <__swsetup_r+0xd0>)
 801f078:	429c      	cmp	r4, r3
 801f07a:	d10f      	bne.n	801f09c <__swsetup_r+0x3c>
 801f07c:	686c      	ldr	r4, [r5, #4]
 801f07e:	89a3      	ldrh	r3, [r4, #12]
 801f080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f084:	0719      	lsls	r1, r3, #28
 801f086:	d42c      	bmi.n	801f0e2 <__swsetup_r+0x82>
 801f088:	06dd      	lsls	r5, r3, #27
 801f08a:	d411      	bmi.n	801f0b0 <__swsetup_r+0x50>
 801f08c:	2309      	movs	r3, #9
 801f08e:	6033      	str	r3, [r6, #0]
 801f090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f094:	81a3      	strh	r3, [r4, #12]
 801f096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f09a:	e03e      	b.n	801f11a <__swsetup_r+0xba>
 801f09c:	4b25      	ldr	r3, [pc, #148]	; (801f134 <__swsetup_r+0xd4>)
 801f09e:	429c      	cmp	r4, r3
 801f0a0:	d101      	bne.n	801f0a6 <__swsetup_r+0x46>
 801f0a2:	68ac      	ldr	r4, [r5, #8]
 801f0a4:	e7eb      	b.n	801f07e <__swsetup_r+0x1e>
 801f0a6:	4b24      	ldr	r3, [pc, #144]	; (801f138 <__swsetup_r+0xd8>)
 801f0a8:	429c      	cmp	r4, r3
 801f0aa:	bf08      	it	eq
 801f0ac:	68ec      	ldreq	r4, [r5, #12]
 801f0ae:	e7e6      	b.n	801f07e <__swsetup_r+0x1e>
 801f0b0:	0758      	lsls	r0, r3, #29
 801f0b2:	d512      	bpl.n	801f0da <__swsetup_r+0x7a>
 801f0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f0b6:	b141      	cbz	r1, 801f0ca <__swsetup_r+0x6a>
 801f0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f0bc:	4299      	cmp	r1, r3
 801f0be:	d002      	beq.n	801f0c6 <__swsetup_r+0x66>
 801f0c0:	4630      	mov	r0, r6
 801f0c2:	f000 fa91 	bl	801f5e8 <_free_r>
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	6363      	str	r3, [r4, #52]	; 0x34
 801f0ca:	89a3      	ldrh	r3, [r4, #12]
 801f0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f0d0:	81a3      	strh	r3, [r4, #12]
 801f0d2:	2300      	movs	r3, #0
 801f0d4:	6063      	str	r3, [r4, #4]
 801f0d6:	6923      	ldr	r3, [r4, #16]
 801f0d8:	6023      	str	r3, [r4, #0]
 801f0da:	89a3      	ldrh	r3, [r4, #12]
 801f0dc:	f043 0308 	orr.w	r3, r3, #8
 801f0e0:	81a3      	strh	r3, [r4, #12]
 801f0e2:	6923      	ldr	r3, [r4, #16]
 801f0e4:	b94b      	cbnz	r3, 801f0fa <__swsetup_r+0x9a>
 801f0e6:	89a3      	ldrh	r3, [r4, #12]
 801f0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f0f0:	d003      	beq.n	801f0fa <__swsetup_r+0x9a>
 801f0f2:	4621      	mov	r1, r4
 801f0f4:	4630      	mov	r0, r6
 801f0f6:	f000 fa2f 	bl	801f558 <__smakebuf_r>
 801f0fa:	89a0      	ldrh	r0, [r4, #12]
 801f0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f100:	f010 0301 	ands.w	r3, r0, #1
 801f104:	d00a      	beq.n	801f11c <__swsetup_r+0xbc>
 801f106:	2300      	movs	r3, #0
 801f108:	60a3      	str	r3, [r4, #8]
 801f10a:	6963      	ldr	r3, [r4, #20]
 801f10c:	425b      	negs	r3, r3
 801f10e:	61a3      	str	r3, [r4, #24]
 801f110:	6923      	ldr	r3, [r4, #16]
 801f112:	b943      	cbnz	r3, 801f126 <__swsetup_r+0xc6>
 801f114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f118:	d1ba      	bne.n	801f090 <__swsetup_r+0x30>
 801f11a:	bd70      	pop	{r4, r5, r6, pc}
 801f11c:	0781      	lsls	r1, r0, #30
 801f11e:	bf58      	it	pl
 801f120:	6963      	ldrpl	r3, [r4, #20]
 801f122:	60a3      	str	r3, [r4, #8]
 801f124:	e7f4      	b.n	801f110 <__swsetup_r+0xb0>
 801f126:	2000      	movs	r0, #0
 801f128:	e7f7      	b.n	801f11a <__swsetup_r+0xba>
 801f12a:	bf00      	nop
 801f12c:	20000050 	.word	0x20000050
 801f130:	080360c0 	.word	0x080360c0
 801f134:	080360e0 	.word	0x080360e0
 801f138:	080360a0 	.word	0x080360a0

0801f13c <__assert_func>:
 801f13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f13e:	4614      	mov	r4, r2
 801f140:	461a      	mov	r2, r3
 801f142:	4b09      	ldr	r3, [pc, #36]	; (801f168 <__assert_func+0x2c>)
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	4605      	mov	r5, r0
 801f148:	68d8      	ldr	r0, [r3, #12]
 801f14a:	b14c      	cbz	r4, 801f160 <__assert_func+0x24>
 801f14c:	4b07      	ldr	r3, [pc, #28]	; (801f16c <__assert_func+0x30>)
 801f14e:	9100      	str	r1, [sp, #0]
 801f150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f154:	4906      	ldr	r1, [pc, #24]	; (801f170 <__assert_func+0x34>)
 801f156:	462b      	mov	r3, r5
 801f158:	f000 f9a6 	bl	801f4a8 <fiprintf>
 801f15c:	f000 ff9e 	bl	802009c <abort>
 801f160:	4b04      	ldr	r3, [pc, #16]	; (801f174 <__assert_func+0x38>)
 801f162:	461c      	mov	r4, r3
 801f164:	e7f3      	b.n	801f14e <__assert_func+0x12>
 801f166:	bf00      	nop
 801f168:	20000050 	.word	0x20000050
 801f16c:	08036062 	.word	0x08036062
 801f170:	0803606f 	.word	0x0803606f
 801f174:	0803609d 	.word	0x0803609d

0801f178 <__sflush_r>:
 801f178:	898a      	ldrh	r2, [r1, #12]
 801f17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f17e:	4605      	mov	r5, r0
 801f180:	0710      	lsls	r0, r2, #28
 801f182:	460c      	mov	r4, r1
 801f184:	d458      	bmi.n	801f238 <__sflush_r+0xc0>
 801f186:	684b      	ldr	r3, [r1, #4]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dc05      	bgt.n	801f198 <__sflush_r+0x20>
 801f18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f18e:	2b00      	cmp	r3, #0
 801f190:	dc02      	bgt.n	801f198 <__sflush_r+0x20>
 801f192:	2000      	movs	r0, #0
 801f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f19a:	2e00      	cmp	r6, #0
 801f19c:	d0f9      	beq.n	801f192 <__sflush_r+0x1a>
 801f19e:	2300      	movs	r3, #0
 801f1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f1a4:	682f      	ldr	r7, [r5, #0]
 801f1a6:	602b      	str	r3, [r5, #0]
 801f1a8:	d032      	beq.n	801f210 <__sflush_r+0x98>
 801f1aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f1ac:	89a3      	ldrh	r3, [r4, #12]
 801f1ae:	075a      	lsls	r2, r3, #29
 801f1b0:	d505      	bpl.n	801f1be <__sflush_r+0x46>
 801f1b2:	6863      	ldr	r3, [r4, #4]
 801f1b4:	1ac0      	subs	r0, r0, r3
 801f1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1b8:	b10b      	cbz	r3, 801f1be <__sflush_r+0x46>
 801f1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f1bc:	1ac0      	subs	r0, r0, r3
 801f1be:	2300      	movs	r3, #0
 801f1c0:	4602      	mov	r2, r0
 801f1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1c4:	6a21      	ldr	r1, [r4, #32]
 801f1c6:	4628      	mov	r0, r5
 801f1c8:	47b0      	blx	r6
 801f1ca:	1c43      	adds	r3, r0, #1
 801f1cc:	89a3      	ldrh	r3, [r4, #12]
 801f1ce:	d106      	bne.n	801f1de <__sflush_r+0x66>
 801f1d0:	6829      	ldr	r1, [r5, #0]
 801f1d2:	291d      	cmp	r1, #29
 801f1d4:	d82c      	bhi.n	801f230 <__sflush_r+0xb8>
 801f1d6:	4a2a      	ldr	r2, [pc, #168]	; (801f280 <__sflush_r+0x108>)
 801f1d8:	40ca      	lsrs	r2, r1
 801f1da:	07d6      	lsls	r6, r2, #31
 801f1dc:	d528      	bpl.n	801f230 <__sflush_r+0xb8>
 801f1de:	2200      	movs	r2, #0
 801f1e0:	6062      	str	r2, [r4, #4]
 801f1e2:	04d9      	lsls	r1, r3, #19
 801f1e4:	6922      	ldr	r2, [r4, #16]
 801f1e6:	6022      	str	r2, [r4, #0]
 801f1e8:	d504      	bpl.n	801f1f4 <__sflush_r+0x7c>
 801f1ea:	1c42      	adds	r2, r0, #1
 801f1ec:	d101      	bne.n	801f1f2 <__sflush_r+0x7a>
 801f1ee:	682b      	ldr	r3, [r5, #0]
 801f1f0:	b903      	cbnz	r3, 801f1f4 <__sflush_r+0x7c>
 801f1f2:	6560      	str	r0, [r4, #84]	; 0x54
 801f1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f1f6:	602f      	str	r7, [r5, #0]
 801f1f8:	2900      	cmp	r1, #0
 801f1fa:	d0ca      	beq.n	801f192 <__sflush_r+0x1a>
 801f1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f200:	4299      	cmp	r1, r3
 801f202:	d002      	beq.n	801f20a <__sflush_r+0x92>
 801f204:	4628      	mov	r0, r5
 801f206:	f000 f9ef 	bl	801f5e8 <_free_r>
 801f20a:	2000      	movs	r0, #0
 801f20c:	6360      	str	r0, [r4, #52]	; 0x34
 801f20e:	e7c1      	b.n	801f194 <__sflush_r+0x1c>
 801f210:	6a21      	ldr	r1, [r4, #32]
 801f212:	2301      	movs	r3, #1
 801f214:	4628      	mov	r0, r5
 801f216:	47b0      	blx	r6
 801f218:	1c41      	adds	r1, r0, #1
 801f21a:	d1c7      	bne.n	801f1ac <__sflush_r+0x34>
 801f21c:	682b      	ldr	r3, [r5, #0]
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d0c4      	beq.n	801f1ac <__sflush_r+0x34>
 801f222:	2b1d      	cmp	r3, #29
 801f224:	d001      	beq.n	801f22a <__sflush_r+0xb2>
 801f226:	2b16      	cmp	r3, #22
 801f228:	d101      	bne.n	801f22e <__sflush_r+0xb6>
 801f22a:	602f      	str	r7, [r5, #0]
 801f22c:	e7b1      	b.n	801f192 <__sflush_r+0x1a>
 801f22e:	89a3      	ldrh	r3, [r4, #12]
 801f230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f234:	81a3      	strh	r3, [r4, #12]
 801f236:	e7ad      	b.n	801f194 <__sflush_r+0x1c>
 801f238:	690f      	ldr	r7, [r1, #16]
 801f23a:	2f00      	cmp	r7, #0
 801f23c:	d0a9      	beq.n	801f192 <__sflush_r+0x1a>
 801f23e:	0793      	lsls	r3, r2, #30
 801f240:	680e      	ldr	r6, [r1, #0]
 801f242:	bf08      	it	eq
 801f244:	694b      	ldreq	r3, [r1, #20]
 801f246:	600f      	str	r7, [r1, #0]
 801f248:	bf18      	it	ne
 801f24a:	2300      	movne	r3, #0
 801f24c:	eba6 0807 	sub.w	r8, r6, r7
 801f250:	608b      	str	r3, [r1, #8]
 801f252:	f1b8 0f00 	cmp.w	r8, #0
 801f256:	dd9c      	ble.n	801f192 <__sflush_r+0x1a>
 801f258:	6a21      	ldr	r1, [r4, #32]
 801f25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f25c:	4643      	mov	r3, r8
 801f25e:	463a      	mov	r2, r7
 801f260:	4628      	mov	r0, r5
 801f262:	47b0      	blx	r6
 801f264:	2800      	cmp	r0, #0
 801f266:	dc06      	bgt.n	801f276 <__sflush_r+0xfe>
 801f268:	89a3      	ldrh	r3, [r4, #12]
 801f26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f26e:	81a3      	strh	r3, [r4, #12]
 801f270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f274:	e78e      	b.n	801f194 <__sflush_r+0x1c>
 801f276:	4407      	add	r7, r0
 801f278:	eba8 0800 	sub.w	r8, r8, r0
 801f27c:	e7e9      	b.n	801f252 <__sflush_r+0xda>
 801f27e:	bf00      	nop
 801f280:	20400001 	.word	0x20400001

0801f284 <_fflush_r>:
 801f284:	b538      	push	{r3, r4, r5, lr}
 801f286:	690b      	ldr	r3, [r1, #16]
 801f288:	4605      	mov	r5, r0
 801f28a:	460c      	mov	r4, r1
 801f28c:	b913      	cbnz	r3, 801f294 <_fflush_r+0x10>
 801f28e:	2500      	movs	r5, #0
 801f290:	4628      	mov	r0, r5
 801f292:	bd38      	pop	{r3, r4, r5, pc}
 801f294:	b118      	cbz	r0, 801f29e <_fflush_r+0x1a>
 801f296:	6983      	ldr	r3, [r0, #24]
 801f298:	b90b      	cbnz	r3, 801f29e <_fflush_r+0x1a>
 801f29a:	f000 f887 	bl	801f3ac <__sinit>
 801f29e:	4b14      	ldr	r3, [pc, #80]	; (801f2f0 <_fflush_r+0x6c>)
 801f2a0:	429c      	cmp	r4, r3
 801f2a2:	d11b      	bne.n	801f2dc <_fflush_r+0x58>
 801f2a4:	686c      	ldr	r4, [r5, #4]
 801f2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d0ef      	beq.n	801f28e <_fflush_r+0xa>
 801f2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f2b0:	07d0      	lsls	r0, r2, #31
 801f2b2:	d404      	bmi.n	801f2be <_fflush_r+0x3a>
 801f2b4:	0599      	lsls	r1, r3, #22
 801f2b6:	d402      	bmi.n	801f2be <_fflush_r+0x3a>
 801f2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2ba:	f000 f927 	bl	801f50c <__retarget_lock_acquire_recursive>
 801f2be:	4628      	mov	r0, r5
 801f2c0:	4621      	mov	r1, r4
 801f2c2:	f7ff ff59 	bl	801f178 <__sflush_r>
 801f2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f2c8:	07da      	lsls	r2, r3, #31
 801f2ca:	4605      	mov	r5, r0
 801f2cc:	d4e0      	bmi.n	801f290 <_fflush_r+0xc>
 801f2ce:	89a3      	ldrh	r3, [r4, #12]
 801f2d0:	059b      	lsls	r3, r3, #22
 801f2d2:	d4dd      	bmi.n	801f290 <_fflush_r+0xc>
 801f2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2d6:	f000 f91a 	bl	801f50e <__retarget_lock_release_recursive>
 801f2da:	e7d9      	b.n	801f290 <_fflush_r+0xc>
 801f2dc:	4b05      	ldr	r3, [pc, #20]	; (801f2f4 <_fflush_r+0x70>)
 801f2de:	429c      	cmp	r4, r3
 801f2e0:	d101      	bne.n	801f2e6 <_fflush_r+0x62>
 801f2e2:	68ac      	ldr	r4, [r5, #8]
 801f2e4:	e7df      	b.n	801f2a6 <_fflush_r+0x22>
 801f2e6:	4b04      	ldr	r3, [pc, #16]	; (801f2f8 <_fflush_r+0x74>)
 801f2e8:	429c      	cmp	r4, r3
 801f2ea:	bf08      	it	eq
 801f2ec:	68ec      	ldreq	r4, [r5, #12]
 801f2ee:	e7da      	b.n	801f2a6 <_fflush_r+0x22>
 801f2f0:	080360c0 	.word	0x080360c0
 801f2f4:	080360e0 	.word	0x080360e0
 801f2f8:	080360a0 	.word	0x080360a0

0801f2fc <std>:
 801f2fc:	2300      	movs	r3, #0
 801f2fe:	b510      	push	{r4, lr}
 801f300:	4604      	mov	r4, r0
 801f302:	e9c0 3300 	strd	r3, r3, [r0]
 801f306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f30a:	6083      	str	r3, [r0, #8]
 801f30c:	8181      	strh	r1, [r0, #12]
 801f30e:	6643      	str	r3, [r0, #100]	; 0x64
 801f310:	81c2      	strh	r2, [r0, #14]
 801f312:	6183      	str	r3, [r0, #24]
 801f314:	4619      	mov	r1, r3
 801f316:	2208      	movs	r2, #8
 801f318:	305c      	adds	r0, #92	; 0x5c
 801f31a:	f7ff fd2f 	bl	801ed7c <memset>
 801f31e:	4b05      	ldr	r3, [pc, #20]	; (801f334 <std+0x38>)
 801f320:	6263      	str	r3, [r4, #36]	; 0x24
 801f322:	4b05      	ldr	r3, [pc, #20]	; (801f338 <std+0x3c>)
 801f324:	62a3      	str	r3, [r4, #40]	; 0x28
 801f326:	4b05      	ldr	r3, [pc, #20]	; (801f33c <std+0x40>)
 801f328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f32a:	4b05      	ldr	r3, [pc, #20]	; (801f340 <std+0x44>)
 801f32c:	6224      	str	r4, [r4, #32]
 801f32e:	6323      	str	r3, [r4, #48]	; 0x30
 801f330:	bd10      	pop	{r4, pc}
 801f332:	bf00      	nop
 801f334:	0801fff1 	.word	0x0801fff1
 801f338:	08020013 	.word	0x08020013
 801f33c:	0802004b 	.word	0x0802004b
 801f340:	0802006f 	.word	0x0802006f

0801f344 <_cleanup_r>:
 801f344:	4901      	ldr	r1, [pc, #4]	; (801f34c <_cleanup_r+0x8>)
 801f346:	f000 b8c1 	b.w	801f4cc <_fwalk_reent>
 801f34a:	bf00      	nop
 801f34c:	0801f285 	.word	0x0801f285

0801f350 <__sfmoreglue>:
 801f350:	b570      	push	{r4, r5, r6, lr}
 801f352:	1e4a      	subs	r2, r1, #1
 801f354:	2568      	movs	r5, #104	; 0x68
 801f356:	4355      	muls	r5, r2
 801f358:	460e      	mov	r6, r1
 801f35a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f35e:	f000 f993 	bl	801f688 <_malloc_r>
 801f362:	4604      	mov	r4, r0
 801f364:	b140      	cbz	r0, 801f378 <__sfmoreglue+0x28>
 801f366:	2100      	movs	r1, #0
 801f368:	e9c0 1600 	strd	r1, r6, [r0]
 801f36c:	300c      	adds	r0, #12
 801f36e:	60a0      	str	r0, [r4, #8]
 801f370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f374:	f7ff fd02 	bl	801ed7c <memset>
 801f378:	4620      	mov	r0, r4
 801f37a:	bd70      	pop	{r4, r5, r6, pc}

0801f37c <__sfp_lock_acquire>:
 801f37c:	4801      	ldr	r0, [pc, #4]	; (801f384 <__sfp_lock_acquire+0x8>)
 801f37e:	f000 b8c5 	b.w	801f50c <__retarget_lock_acquire_recursive>
 801f382:	bf00      	nop
 801f384:	20013dfc 	.word	0x20013dfc

0801f388 <__sfp_lock_release>:
 801f388:	4801      	ldr	r0, [pc, #4]	; (801f390 <__sfp_lock_release+0x8>)
 801f38a:	f000 b8c0 	b.w	801f50e <__retarget_lock_release_recursive>
 801f38e:	bf00      	nop
 801f390:	20013dfc 	.word	0x20013dfc

0801f394 <__sinit_lock_acquire>:
 801f394:	4801      	ldr	r0, [pc, #4]	; (801f39c <__sinit_lock_acquire+0x8>)
 801f396:	f000 b8b9 	b.w	801f50c <__retarget_lock_acquire_recursive>
 801f39a:	bf00      	nop
 801f39c:	20013df7 	.word	0x20013df7

0801f3a0 <__sinit_lock_release>:
 801f3a0:	4801      	ldr	r0, [pc, #4]	; (801f3a8 <__sinit_lock_release+0x8>)
 801f3a2:	f000 b8b4 	b.w	801f50e <__retarget_lock_release_recursive>
 801f3a6:	bf00      	nop
 801f3a8:	20013df7 	.word	0x20013df7

0801f3ac <__sinit>:
 801f3ac:	b510      	push	{r4, lr}
 801f3ae:	4604      	mov	r4, r0
 801f3b0:	f7ff fff0 	bl	801f394 <__sinit_lock_acquire>
 801f3b4:	69a3      	ldr	r3, [r4, #24]
 801f3b6:	b11b      	cbz	r3, 801f3c0 <__sinit+0x14>
 801f3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3bc:	f7ff bff0 	b.w	801f3a0 <__sinit_lock_release>
 801f3c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f3c4:	6523      	str	r3, [r4, #80]	; 0x50
 801f3c6:	4b13      	ldr	r3, [pc, #76]	; (801f414 <__sinit+0x68>)
 801f3c8:	4a13      	ldr	r2, [pc, #76]	; (801f418 <__sinit+0x6c>)
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	62a2      	str	r2, [r4, #40]	; 0x28
 801f3ce:	42a3      	cmp	r3, r4
 801f3d0:	bf04      	itt	eq
 801f3d2:	2301      	moveq	r3, #1
 801f3d4:	61a3      	streq	r3, [r4, #24]
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	f000 f820 	bl	801f41c <__sfp>
 801f3dc:	6060      	str	r0, [r4, #4]
 801f3de:	4620      	mov	r0, r4
 801f3e0:	f000 f81c 	bl	801f41c <__sfp>
 801f3e4:	60a0      	str	r0, [r4, #8]
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f000 f818 	bl	801f41c <__sfp>
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	60e0      	str	r0, [r4, #12]
 801f3f0:	2104      	movs	r1, #4
 801f3f2:	6860      	ldr	r0, [r4, #4]
 801f3f4:	f7ff ff82 	bl	801f2fc <std>
 801f3f8:	68a0      	ldr	r0, [r4, #8]
 801f3fa:	2201      	movs	r2, #1
 801f3fc:	2109      	movs	r1, #9
 801f3fe:	f7ff ff7d 	bl	801f2fc <std>
 801f402:	68e0      	ldr	r0, [r4, #12]
 801f404:	2202      	movs	r2, #2
 801f406:	2112      	movs	r1, #18
 801f408:	f7ff ff78 	bl	801f2fc <std>
 801f40c:	2301      	movs	r3, #1
 801f40e:	61a3      	str	r3, [r4, #24]
 801f410:	e7d2      	b.n	801f3b8 <__sinit+0xc>
 801f412:	bf00      	nop
 801f414:	08035fe8 	.word	0x08035fe8
 801f418:	0801f345 	.word	0x0801f345

0801f41c <__sfp>:
 801f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f41e:	4607      	mov	r7, r0
 801f420:	f7ff ffac 	bl	801f37c <__sfp_lock_acquire>
 801f424:	4b1e      	ldr	r3, [pc, #120]	; (801f4a0 <__sfp+0x84>)
 801f426:	681e      	ldr	r6, [r3, #0]
 801f428:	69b3      	ldr	r3, [r6, #24]
 801f42a:	b913      	cbnz	r3, 801f432 <__sfp+0x16>
 801f42c:	4630      	mov	r0, r6
 801f42e:	f7ff ffbd 	bl	801f3ac <__sinit>
 801f432:	3648      	adds	r6, #72	; 0x48
 801f434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f438:	3b01      	subs	r3, #1
 801f43a:	d503      	bpl.n	801f444 <__sfp+0x28>
 801f43c:	6833      	ldr	r3, [r6, #0]
 801f43e:	b30b      	cbz	r3, 801f484 <__sfp+0x68>
 801f440:	6836      	ldr	r6, [r6, #0]
 801f442:	e7f7      	b.n	801f434 <__sfp+0x18>
 801f444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f448:	b9d5      	cbnz	r5, 801f480 <__sfp+0x64>
 801f44a:	4b16      	ldr	r3, [pc, #88]	; (801f4a4 <__sfp+0x88>)
 801f44c:	60e3      	str	r3, [r4, #12]
 801f44e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f452:	6665      	str	r5, [r4, #100]	; 0x64
 801f454:	f000 f859 	bl	801f50a <__retarget_lock_init_recursive>
 801f458:	f7ff ff96 	bl	801f388 <__sfp_lock_release>
 801f45c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f464:	6025      	str	r5, [r4, #0]
 801f466:	61a5      	str	r5, [r4, #24]
 801f468:	2208      	movs	r2, #8
 801f46a:	4629      	mov	r1, r5
 801f46c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f470:	f7ff fc84 	bl	801ed7c <memset>
 801f474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f47c:	4620      	mov	r0, r4
 801f47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f480:	3468      	adds	r4, #104	; 0x68
 801f482:	e7d9      	b.n	801f438 <__sfp+0x1c>
 801f484:	2104      	movs	r1, #4
 801f486:	4638      	mov	r0, r7
 801f488:	f7ff ff62 	bl	801f350 <__sfmoreglue>
 801f48c:	4604      	mov	r4, r0
 801f48e:	6030      	str	r0, [r6, #0]
 801f490:	2800      	cmp	r0, #0
 801f492:	d1d5      	bne.n	801f440 <__sfp+0x24>
 801f494:	f7ff ff78 	bl	801f388 <__sfp_lock_release>
 801f498:	230c      	movs	r3, #12
 801f49a:	603b      	str	r3, [r7, #0]
 801f49c:	e7ee      	b.n	801f47c <__sfp+0x60>
 801f49e:	bf00      	nop
 801f4a0:	08035fe8 	.word	0x08035fe8
 801f4a4:	ffff0001 	.word	0xffff0001

0801f4a8 <fiprintf>:
 801f4a8:	b40e      	push	{r1, r2, r3}
 801f4aa:	b503      	push	{r0, r1, lr}
 801f4ac:	4601      	mov	r1, r0
 801f4ae:	ab03      	add	r3, sp, #12
 801f4b0:	4805      	ldr	r0, [pc, #20]	; (801f4c8 <fiprintf+0x20>)
 801f4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4b6:	6800      	ldr	r0, [r0, #0]
 801f4b8:	9301      	str	r3, [sp, #4]
 801f4ba:	f000 fac5 	bl	801fa48 <_vfiprintf_r>
 801f4be:	b002      	add	sp, #8
 801f4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f4c4:	b003      	add	sp, #12
 801f4c6:	4770      	bx	lr
 801f4c8:	20000050 	.word	0x20000050

0801f4cc <_fwalk_reent>:
 801f4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4d0:	4606      	mov	r6, r0
 801f4d2:	4688      	mov	r8, r1
 801f4d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f4d8:	2700      	movs	r7, #0
 801f4da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f4de:	f1b9 0901 	subs.w	r9, r9, #1
 801f4e2:	d505      	bpl.n	801f4f0 <_fwalk_reent+0x24>
 801f4e4:	6824      	ldr	r4, [r4, #0]
 801f4e6:	2c00      	cmp	r4, #0
 801f4e8:	d1f7      	bne.n	801f4da <_fwalk_reent+0xe>
 801f4ea:	4638      	mov	r0, r7
 801f4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4f0:	89ab      	ldrh	r3, [r5, #12]
 801f4f2:	2b01      	cmp	r3, #1
 801f4f4:	d907      	bls.n	801f506 <_fwalk_reent+0x3a>
 801f4f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f4fa:	3301      	adds	r3, #1
 801f4fc:	d003      	beq.n	801f506 <_fwalk_reent+0x3a>
 801f4fe:	4629      	mov	r1, r5
 801f500:	4630      	mov	r0, r6
 801f502:	47c0      	blx	r8
 801f504:	4307      	orrs	r7, r0
 801f506:	3568      	adds	r5, #104	; 0x68
 801f508:	e7e9      	b.n	801f4de <_fwalk_reent+0x12>

0801f50a <__retarget_lock_init_recursive>:
 801f50a:	4770      	bx	lr

0801f50c <__retarget_lock_acquire_recursive>:
 801f50c:	4770      	bx	lr

0801f50e <__retarget_lock_release_recursive>:
 801f50e:	4770      	bx	lr

0801f510 <__swhatbuf_r>:
 801f510:	b570      	push	{r4, r5, r6, lr}
 801f512:	460e      	mov	r6, r1
 801f514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f518:	2900      	cmp	r1, #0
 801f51a:	b096      	sub	sp, #88	; 0x58
 801f51c:	4614      	mov	r4, r2
 801f51e:	461d      	mov	r5, r3
 801f520:	da07      	bge.n	801f532 <__swhatbuf_r+0x22>
 801f522:	2300      	movs	r3, #0
 801f524:	602b      	str	r3, [r5, #0]
 801f526:	89b3      	ldrh	r3, [r6, #12]
 801f528:	061a      	lsls	r2, r3, #24
 801f52a:	d410      	bmi.n	801f54e <__swhatbuf_r+0x3e>
 801f52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f530:	e00e      	b.n	801f550 <__swhatbuf_r+0x40>
 801f532:	466a      	mov	r2, sp
 801f534:	f000 fdca 	bl	80200cc <_fstat_r>
 801f538:	2800      	cmp	r0, #0
 801f53a:	dbf2      	blt.n	801f522 <__swhatbuf_r+0x12>
 801f53c:	9a01      	ldr	r2, [sp, #4]
 801f53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f546:	425a      	negs	r2, r3
 801f548:	415a      	adcs	r2, r3
 801f54a:	602a      	str	r2, [r5, #0]
 801f54c:	e7ee      	b.n	801f52c <__swhatbuf_r+0x1c>
 801f54e:	2340      	movs	r3, #64	; 0x40
 801f550:	2000      	movs	r0, #0
 801f552:	6023      	str	r3, [r4, #0]
 801f554:	b016      	add	sp, #88	; 0x58
 801f556:	bd70      	pop	{r4, r5, r6, pc}

0801f558 <__smakebuf_r>:
 801f558:	898b      	ldrh	r3, [r1, #12]
 801f55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f55c:	079d      	lsls	r5, r3, #30
 801f55e:	4606      	mov	r6, r0
 801f560:	460c      	mov	r4, r1
 801f562:	d507      	bpl.n	801f574 <__smakebuf_r+0x1c>
 801f564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f568:	6023      	str	r3, [r4, #0]
 801f56a:	6123      	str	r3, [r4, #16]
 801f56c:	2301      	movs	r3, #1
 801f56e:	6163      	str	r3, [r4, #20]
 801f570:	b002      	add	sp, #8
 801f572:	bd70      	pop	{r4, r5, r6, pc}
 801f574:	ab01      	add	r3, sp, #4
 801f576:	466a      	mov	r2, sp
 801f578:	f7ff ffca 	bl	801f510 <__swhatbuf_r>
 801f57c:	9900      	ldr	r1, [sp, #0]
 801f57e:	4605      	mov	r5, r0
 801f580:	4630      	mov	r0, r6
 801f582:	f000 f881 	bl	801f688 <_malloc_r>
 801f586:	b948      	cbnz	r0, 801f59c <__smakebuf_r+0x44>
 801f588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f58c:	059a      	lsls	r2, r3, #22
 801f58e:	d4ef      	bmi.n	801f570 <__smakebuf_r+0x18>
 801f590:	f023 0303 	bic.w	r3, r3, #3
 801f594:	f043 0302 	orr.w	r3, r3, #2
 801f598:	81a3      	strh	r3, [r4, #12]
 801f59a:	e7e3      	b.n	801f564 <__smakebuf_r+0xc>
 801f59c:	4b0d      	ldr	r3, [pc, #52]	; (801f5d4 <__smakebuf_r+0x7c>)
 801f59e:	62b3      	str	r3, [r6, #40]	; 0x28
 801f5a0:	89a3      	ldrh	r3, [r4, #12]
 801f5a2:	6020      	str	r0, [r4, #0]
 801f5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f5a8:	81a3      	strh	r3, [r4, #12]
 801f5aa:	9b00      	ldr	r3, [sp, #0]
 801f5ac:	6163      	str	r3, [r4, #20]
 801f5ae:	9b01      	ldr	r3, [sp, #4]
 801f5b0:	6120      	str	r0, [r4, #16]
 801f5b2:	b15b      	cbz	r3, 801f5cc <__smakebuf_r+0x74>
 801f5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f5b8:	4630      	mov	r0, r6
 801f5ba:	f000 fd99 	bl	80200f0 <_isatty_r>
 801f5be:	b128      	cbz	r0, 801f5cc <__smakebuf_r+0x74>
 801f5c0:	89a3      	ldrh	r3, [r4, #12]
 801f5c2:	f023 0303 	bic.w	r3, r3, #3
 801f5c6:	f043 0301 	orr.w	r3, r3, #1
 801f5ca:	81a3      	strh	r3, [r4, #12]
 801f5cc:	89a0      	ldrh	r0, [r4, #12]
 801f5ce:	4305      	orrs	r5, r0
 801f5d0:	81a5      	strh	r5, [r4, #12]
 801f5d2:	e7cd      	b.n	801f570 <__smakebuf_r+0x18>
 801f5d4:	0801f345 	.word	0x0801f345

0801f5d8 <malloc>:
 801f5d8:	4b02      	ldr	r3, [pc, #8]	; (801f5e4 <malloc+0xc>)
 801f5da:	4601      	mov	r1, r0
 801f5dc:	6818      	ldr	r0, [r3, #0]
 801f5de:	f000 b853 	b.w	801f688 <_malloc_r>
 801f5e2:	bf00      	nop
 801f5e4:	20000050 	.word	0x20000050

0801f5e8 <_free_r>:
 801f5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f5ea:	2900      	cmp	r1, #0
 801f5ec:	d048      	beq.n	801f680 <_free_r+0x98>
 801f5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f5f2:	9001      	str	r0, [sp, #4]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	f1a1 0404 	sub.w	r4, r1, #4
 801f5fa:	bfb8      	it	lt
 801f5fc:	18e4      	addlt	r4, r4, r3
 801f5fe:	f000 fd99 	bl	8020134 <__malloc_lock>
 801f602:	4a20      	ldr	r2, [pc, #128]	; (801f684 <_free_r+0x9c>)
 801f604:	9801      	ldr	r0, [sp, #4]
 801f606:	6813      	ldr	r3, [r2, #0]
 801f608:	4615      	mov	r5, r2
 801f60a:	b933      	cbnz	r3, 801f61a <_free_r+0x32>
 801f60c:	6063      	str	r3, [r4, #4]
 801f60e:	6014      	str	r4, [r2, #0]
 801f610:	b003      	add	sp, #12
 801f612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f616:	f000 bd93 	b.w	8020140 <__malloc_unlock>
 801f61a:	42a3      	cmp	r3, r4
 801f61c:	d90b      	bls.n	801f636 <_free_r+0x4e>
 801f61e:	6821      	ldr	r1, [r4, #0]
 801f620:	1862      	adds	r2, r4, r1
 801f622:	4293      	cmp	r3, r2
 801f624:	bf04      	itt	eq
 801f626:	681a      	ldreq	r2, [r3, #0]
 801f628:	685b      	ldreq	r3, [r3, #4]
 801f62a:	6063      	str	r3, [r4, #4]
 801f62c:	bf04      	itt	eq
 801f62e:	1852      	addeq	r2, r2, r1
 801f630:	6022      	streq	r2, [r4, #0]
 801f632:	602c      	str	r4, [r5, #0]
 801f634:	e7ec      	b.n	801f610 <_free_r+0x28>
 801f636:	461a      	mov	r2, r3
 801f638:	685b      	ldr	r3, [r3, #4]
 801f63a:	b10b      	cbz	r3, 801f640 <_free_r+0x58>
 801f63c:	42a3      	cmp	r3, r4
 801f63e:	d9fa      	bls.n	801f636 <_free_r+0x4e>
 801f640:	6811      	ldr	r1, [r2, #0]
 801f642:	1855      	adds	r5, r2, r1
 801f644:	42a5      	cmp	r5, r4
 801f646:	d10b      	bne.n	801f660 <_free_r+0x78>
 801f648:	6824      	ldr	r4, [r4, #0]
 801f64a:	4421      	add	r1, r4
 801f64c:	1854      	adds	r4, r2, r1
 801f64e:	42a3      	cmp	r3, r4
 801f650:	6011      	str	r1, [r2, #0]
 801f652:	d1dd      	bne.n	801f610 <_free_r+0x28>
 801f654:	681c      	ldr	r4, [r3, #0]
 801f656:	685b      	ldr	r3, [r3, #4]
 801f658:	6053      	str	r3, [r2, #4]
 801f65a:	4421      	add	r1, r4
 801f65c:	6011      	str	r1, [r2, #0]
 801f65e:	e7d7      	b.n	801f610 <_free_r+0x28>
 801f660:	d902      	bls.n	801f668 <_free_r+0x80>
 801f662:	230c      	movs	r3, #12
 801f664:	6003      	str	r3, [r0, #0]
 801f666:	e7d3      	b.n	801f610 <_free_r+0x28>
 801f668:	6825      	ldr	r5, [r4, #0]
 801f66a:	1961      	adds	r1, r4, r5
 801f66c:	428b      	cmp	r3, r1
 801f66e:	bf04      	itt	eq
 801f670:	6819      	ldreq	r1, [r3, #0]
 801f672:	685b      	ldreq	r3, [r3, #4]
 801f674:	6063      	str	r3, [r4, #4]
 801f676:	bf04      	itt	eq
 801f678:	1949      	addeq	r1, r1, r5
 801f67a:	6021      	streq	r1, [r4, #0]
 801f67c:	6054      	str	r4, [r2, #4]
 801f67e:	e7c7      	b.n	801f610 <_free_r+0x28>
 801f680:	b003      	add	sp, #12
 801f682:	bd30      	pop	{r4, r5, pc}
 801f684:	20009138 	.word	0x20009138

0801f688 <_malloc_r>:
 801f688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f68a:	1ccd      	adds	r5, r1, #3
 801f68c:	f025 0503 	bic.w	r5, r5, #3
 801f690:	3508      	adds	r5, #8
 801f692:	2d0c      	cmp	r5, #12
 801f694:	bf38      	it	cc
 801f696:	250c      	movcc	r5, #12
 801f698:	2d00      	cmp	r5, #0
 801f69a:	4606      	mov	r6, r0
 801f69c:	db01      	blt.n	801f6a2 <_malloc_r+0x1a>
 801f69e:	42a9      	cmp	r1, r5
 801f6a0:	d903      	bls.n	801f6aa <_malloc_r+0x22>
 801f6a2:	230c      	movs	r3, #12
 801f6a4:	6033      	str	r3, [r6, #0]
 801f6a6:	2000      	movs	r0, #0
 801f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6aa:	f000 fd43 	bl	8020134 <__malloc_lock>
 801f6ae:	4921      	ldr	r1, [pc, #132]	; (801f734 <_malloc_r+0xac>)
 801f6b0:	680a      	ldr	r2, [r1, #0]
 801f6b2:	4614      	mov	r4, r2
 801f6b4:	b99c      	cbnz	r4, 801f6de <_malloc_r+0x56>
 801f6b6:	4f20      	ldr	r7, [pc, #128]	; (801f738 <_malloc_r+0xb0>)
 801f6b8:	683b      	ldr	r3, [r7, #0]
 801f6ba:	b923      	cbnz	r3, 801f6c6 <_malloc_r+0x3e>
 801f6bc:	4621      	mov	r1, r4
 801f6be:	4630      	mov	r0, r6
 801f6c0:	f000 fc86 	bl	801ffd0 <_sbrk_r>
 801f6c4:	6038      	str	r0, [r7, #0]
 801f6c6:	4629      	mov	r1, r5
 801f6c8:	4630      	mov	r0, r6
 801f6ca:	f000 fc81 	bl	801ffd0 <_sbrk_r>
 801f6ce:	1c43      	adds	r3, r0, #1
 801f6d0:	d123      	bne.n	801f71a <_malloc_r+0x92>
 801f6d2:	230c      	movs	r3, #12
 801f6d4:	6033      	str	r3, [r6, #0]
 801f6d6:	4630      	mov	r0, r6
 801f6d8:	f000 fd32 	bl	8020140 <__malloc_unlock>
 801f6dc:	e7e3      	b.n	801f6a6 <_malloc_r+0x1e>
 801f6de:	6823      	ldr	r3, [r4, #0]
 801f6e0:	1b5b      	subs	r3, r3, r5
 801f6e2:	d417      	bmi.n	801f714 <_malloc_r+0x8c>
 801f6e4:	2b0b      	cmp	r3, #11
 801f6e6:	d903      	bls.n	801f6f0 <_malloc_r+0x68>
 801f6e8:	6023      	str	r3, [r4, #0]
 801f6ea:	441c      	add	r4, r3
 801f6ec:	6025      	str	r5, [r4, #0]
 801f6ee:	e004      	b.n	801f6fa <_malloc_r+0x72>
 801f6f0:	6863      	ldr	r3, [r4, #4]
 801f6f2:	42a2      	cmp	r2, r4
 801f6f4:	bf0c      	ite	eq
 801f6f6:	600b      	streq	r3, [r1, #0]
 801f6f8:	6053      	strne	r3, [r2, #4]
 801f6fa:	4630      	mov	r0, r6
 801f6fc:	f000 fd20 	bl	8020140 <__malloc_unlock>
 801f700:	f104 000b 	add.w	r0, r4, #11
 801f704:	1d23      	adds	r3, r4, #4
 801f706:	f020 0007 	bic.w	r0, r0, #7
 801f70a:	1ac2      	subs	r2, r0, r3
 801f70c:	d0cc      	beq.n	801f6a8 <_malloc_r+0x20>
 801f70e:	1a1b      	subs	r3, r3, r0
 801f710:	50a3      	str	r3, [r4, r2]
 801f712:	e7c9      	b.n	801f6a8 <_malloc_r+0x20>
 801f714:	4622      	mov	r2, r4
 801f716:	6864      	ldr	r4, [r4, #4]
 801f718:	e7cc      	b.n	801f6b4 <_malloc_r+0x2c>
 801f71a:	1cc4      	adds	r4, r0, #3
 801f71c:	f024 0403 	bic.w	r4, r4, #3
 801f720:	42a0      	cmp	r0, r4
 801f722:	d0e3      	beq.n	801f6ec <_malloc_r+0x64>
 801f724:	1a21      	subs	r1, r4, r0
 801f726:	4630      	mov	r0, r6
 801f728:	f000 fc52 	bl	801ffd0 <_sbrk_r>
 801f72c:	3001      	adds	r0, #1
 801f72e:	d1dd      	bne.n	801f6ec <_malloc_r+0x64>
 801f730:	e7cf      	b.n	801f6d2 <_malloc_r+0x4a>
 801f732:	bf00      	nop
 801f734:	20009138 	.word	0x20009138
 801f738:	2000913c 	.word	0x2000913c

0801f73c <__ssputs_r>:
 801f73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f740:	688e      	ldr	r6, [r1, #8]
 801f742:	429e      	cmp	r6, r3
 801f744:	4682      	mov	sl, r0
 801f746:	460c      	mov	r4, r1
 801f748:	4690      	mov	r8, r2
 801f74a:	461f      	mov	r7, r3
 801f74c:	d838      	bhi.n	801f7c0 <__ssputs_r+0x84>
 801f74e:	898a      	ldrh	r2, [r1, #12]
 801f750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f754:	d032      	beq.n	801f7bc <__ssputs_r+0x80>
 801f756:	6825      	ldr	r5, [r4, #0]
 801f758:	6909      	ldr	r1, [r1, #16]
 801f75a:	eba5 0901 	sub.w	r9, r5, r1
 801f75e:	6965      	ldr	r5, [r4, #20]
 801f760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f768:	3301      	adds	r3, #1
 801f76a:	444b      	add	r3, r9
 801f76c:	106d      	asrs	r5, r5, #1
 801f76e:	429d      	cmp	r5, r3
 801f770:	bf38      	it	cc
 801f772:	461d      	movcc	r5, r3
 801f774:	0553      	lsls	r3, r2, #21
 801f776:	d531      	bpl.n	801f7dc <__ssputs_r+0xa0>
 801f778:	4629      	mov	r1, r5
 801f77a:	f7ff ff85 	bl	801f688 <_malloc_r>
 801f77e:	4606      	mov	r6, r0
 801f780:	b950      	cbnz	r0, 801f798 <__ssputs_r+0x5c>
 801f782:	230c      	movs	r3, #12
 801f784:	f8ca 3000 	str.w	r3, [sl]
 801f788:	89a3      	ldrh	r3, [r4, #12]
 801f78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f78e:	81a3      	strh	r3, [r4, #12]
 801f790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f798:	6921      	ldr	r1, [r4, #16]
 801f79a:	464a      	mov	r2, r9
 801f79c:	f7ff fac6 	bl	801ed2c <memcpy>
 801f7a0:	89a3      	ldrh	r3, [r4, #12]
 801f7a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f7aa:	81a3      	strh	r3, [r4, #12]
 801f7ac:	6126      	str	r6, [r4, #16]
 801f7ae:	6165      	str	r5, [r4, #20]
 801f7b0:	444e      	add	r6, r9
 801f7b2:	eba5 0509 	sub.w	r5, r5, r9
 801f7b6:	6026      	str	r6, [r4, #0]
 801f7b8:	60a5      	str	r5, [r4, #8]
 801f7ba:	463e      	mov	r6, r7
 801f7bc:	42be      	cmp	r6, r7
 801f7be:	d900      	bls.n	801f7c2 <__ssputs_r+0x86>
 801f7c0:	463e      	mov	r6, r7
 801f7c2:	4632      	mov	r2, r6
 801f7c4:	6820      	ldr	r0, [r4, #0]
 801f7c6:	4641      	mov	r1, r8
 801f7c8:	f7ff fabe 	bl	801ed48 <memmove>
 801f7cc:	68a3      	ldr	r3, [r4, #8]
 801f7ce:	6822      	ldr	r2, [r4, #0]
 801f7d0:	1b9b      	subs	r3, r3, r6
 801f7d2:	4432      	add	r2, r6
 801f7d4:	60a3      	str	r3, [r4, #8]
 801f7d6:	6022      	str	r2, [r4, #0]
 801f7d8:	2000      	movs	r0, #0
 801f7da:	e7db      	b.n	801f794 <__ssputs_r+0x58>
 801f7dc:	462a      	mov	r2, r5
 801f7de:	f000 fcb5 	bl	802014c <_realloc_r>
 801f7e2:	4606      	mov	r6, r0
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d1e1      	bne.n	801f7ac <__ssputs_r+0x70>
 801f7e8:	6921      	ldr	r1, [r4, #16]
 801f7ea:	4650      	mov	r0, sl
 801f7ec:	f7ff fefc 	bl	801f5e8 <_free_r>
 801f7f0:	e7c7      	b.n	801f782 <__ssputs_r+0x46>
	...

0801f7f4 <_svfiprintf_r>:
 801f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f8:	4698      	mov	r8, r3
 801f7fa:	898b      	ldrh	r3, [r1, #12]
 801f7fc:	061b      	lsls	r3, r3, #24
 801f7fe:	b09d      	sub	sp, #116	; 0x74
 801f800:	4607      	mov	r7, r0
 801f802:	460d      	mov	r5, r1
 801f804:	4614      	mov	r4, r2
 801f806:	d50e      	bpl.n	801f826 <_svfiprintf_r+0x32>
 801f808:	690b      	ldr	r3, [r1, #16]
 801f80a:	b963      	cbnz	r3, 801f826 <_svfiprintf_r+0x32>
 801f80c:	2140      	movs	r1, #64	; 0x40
 801f80e:	f7ff ff3b 	bl	801f688 <_malloc_r>
 801f812:	6028      	str	r0, [r5, #0]
 801f814:	6128      	str	r0, [r5, #16]
 801f816:	b920      	cbnz	r0, 801f822 <_svfiprintf_r+0x2e>
 801f818:	230c      	movs	r3, #12
 801f81a:	603b      	str	r3, [r7, #0]
 801f81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f820:	e0d1      	b.n	801f9c6 <_svfiprintf_r+0x1d2>
 801f822:	2340      	movs	r3, #64	; 0x40
 801f824:	616b      	str	r3, [r5, #20]
 801f826:	2300      	movs	r3, #0
 801f828:	9309      	str	r3, [sp, #36]	; 0x24
 801f82a:	2320      	movs	r3, #32
 801f82c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f830:	f8cd 800c 	str.w	r8, [sp, #12]
 801f834:	2330      	movs	r3, #48	; 0x30
 801f836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f9e0 <_svfiprintf_r+0x1ec>
 801f83a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f83e:	f04f 0901 	mov.w	r9, #1
 801f842:	4623      	mov	r3, r4
 801f844:	469a      	mov	sl, r3
 801f846:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f84a:	b10a      	cbz	r2, 801f850 <_svfiprintf_r+0x5c>
 801f84c:	2a25      	cmp	r2, #37	; 0x25
 801f84e:	d1f9      	bne.n	801f844 <_svfiprintf_r+0x50>
 801f850:	ebba 0b04 	subs.w	fp, sl, r4
 801f854:	d00b      	beq.n	801f86e <_svfiprintf_r+0x7a>
 801f856:	465b      	mov	r3, fp
 801f858:	4622      	mov	r2, r4
 801f85a:	4629      	mov	r1, r5
 801f85c:	4638      	mov	r0, r7
 801f85e:	f7ff ff6d 	bl	801f73c <__ssputs_r>
 801f862:	3001      	adds	r0, #1
 801f864:	f000 80aa 	beq.w	801f9bc <_svfiprintf_r+0x1c8>
 801f868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f86a:	445a      	add	r2, fp
 801f86c:	9209      	str	r2, [sp, #36]	; 0x24
 801f86e:	f89a 3000 	ldrb.w	r3, [sl]
 801f872:	2b00      	cmp	r3, #0
 801f874:	f000 80a2 	beq.w	801f9bc <_svfiprintf_r+0x1c8>
 801f878:	2300      	movs	r3, #0
 801f87a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f87e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f882:	f10a 0a01 	add.w	sl, sl, #1
 801f886:	9304      	str	r3, [sp, #16]
 801f888:	9307      	str	r3, [sp, #28]
 801f88a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f88e:	931a      	str	r3, [sp, #104]	; 0x68
 801f890:	4654      	mov	r4, sl
 801f892:	2205      	movs	r2, #5
 801f894:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f898:	4851      	ldr	r0, [pc, #324]	; (801f9e0 <_svfiprintf_r+0x1ec>)
 801f89a:	f7e0 fd51 	bl	8000340 <memchr>
 801f89e:	9a04      	ldr	r2, [sp, #16]
 801f8a0:	b9d8      	cbnz	r0, 801f8da <_svfiprintf_r+0xe6>
 801f8a2:	06d0      	lsls	r0, r2, #27
 801f8a4:	bf44      	itt	mi
 801f8a6:	2320      	movmi	r3, #32
 801f8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8ac:	0711      	lsls	r1, r2, #28
 801f8ae:	bf44      	itt	mi
 801f8b0:	232b      	movmi	r3, #43	; 0x2b
 801f8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8b6:	f89a 3000 	ldrb.w	r3, [sl]
 801f8ba:	2b2a      	cmp	r3, #42	; 0x2a
 801f8bc:	d015      	beq.n	801f8ea <_svfiprintf_r+0xf6>
 801f8be:	9a07      	ldr	r2, [sp, #28]
 801f8c0:	4654      	mov	r4, sl
 801f8c2:	2000      	movs	r0, #0
 801f8c4:	f04f 0c0a 	mov.w	ip, #10
 801f8c8:	4621      	mov	r1, r4
 801f8ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8ce:	3b30      	subs	r3, #48	; 0x30
 801f8d0:	2b09      	cmp	r3, #9
 801f8d2:	d94e      	bls.n	801f972 <_svfiprintf_r+0x17e>
 801f8d4:	b1b0      	cbz	r0, 801f904 <_svfiprintf_r+0x110>
 801f8d6:	9207      	str	r2, [sp, #28]
 801f8d8:	e014      	b.n	801f904 <_svfiprintf_r+0x110>
 801f8da:	eba0 0308 	sub.w	r3, r0, r8
 801f8de:	fa09 f303 	lsl.w	r3, r9, r3
 801f8e2:	4313      	orrs	r3, r2
 801f8e4:	9304      	str	r3, [sp, #16]
 801f8e6:	46a2      	mov	sl, r4
 801f8e8:	e7d2      	b.n	801f890 <_svfiprintf_r+0x9c>
 801f8ea:	9b03      	ldr	r3, [sp, #12]
 801f8ec:	1d19      	adds	r1, r3, #4
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	9103      	str	r1, [sp, #12]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	bfbb      	ittet	lt
 801f8f6:	425b      	neglt	r3, r3
 801f8f8:	f042 0202 	orrlt.w	r2, r2, #2
 801f8fc:	9307      	strge	r3, [sp, #28]
 801f8fe:	9307      	strlt	r3, [sp, #28]
 801f900:	bfb8      	it	lt
 801f902:	9204      	strlt	r2, [sp, #16]
 801f904:	7823      	ldrb	r3, [r4, #0]
 801f906:	2b2e      	cmp	r3, #46	; 0x2e
 801f908:	d10c      	bne.n	801f924 <_svfiprintf_r+0x130>
 801f90a:	7863      	ldrb	r3, [r4, #1]
 801f90c:	2b2a      	cmp	r3, #42	; 0x2a
 801f90e:	d135      	bne.n	801f97c <_svfiprintf_r+0x188>
 801f910:	9b03      	ldr	r3, [sp, #12]
 801f912:	1d1a      	adds	r2, r3, #4
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	9203      	str	r2, [sp, #12]
 801f918:	2b00      	cmp	r3, #0
 801f91a:	bfb8      	it	lt
 801f91c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f920:	3402      	adds	r4, #2
 801f922:	9305      	str	r3, [sp, #20]
 801f924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f9f0 <_svfiprintf_r+0x1fc>
 801f928:	7821      	ldrb	r1, [r4, #0]
 801f92a:	2203      	movs	r2, #3
 801f92c:	4650      	mov	r0, sl
 801f92e:	f7e0 fd07 	bl	8000340 <memchr>
 801f932:	b140      	cbz	r0, 801f946 <_svfiprintf_r+0x152>
 801f934:	2340      	movs	r3, #64	; 0x40
 801f936:	eba0 000a 	sub.w	r0, r0, sl
 801f93a:	fa03 f000 	lsl.w	r0, r3, r0
 801f93e:	9b04      	ldr	r3, [sp, #16]
 801f940:	4303      	orrs	r3, r0
 801f942:	3401      	adds	r4, #1
 801f944:	9304      	str	r3, [sp, #16]
 801f946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f94a:	4826      	ldr	r0, [pc, #152]	; (801f9e4 <_svfiprintf_r+0x1f0>)
 801f94c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f950:	2206      	movs	r2, #6
 801f952:	f7e0 fcf5 	bl	8000340 <memchr>
 801f956:	2800      	cmp	r0, #0
 801f958:	d038      	beq.n	801f9cc <_svfiprintf_r+0x1d8>
 801f95a:	4b23      	ldr	r3, [pc, #140]	; (801f9e8 <_svfiprintf_r+0x1f4>)
 801f95c:	bb1b      	cbnz	r3, 801f9a6 <_svfiprintf_r+0x1b2>
 801f95e:	9b03      	ldr	r3, [sp, #12]
 801f960:	3307      	adds	r3, #7
 801f962:	f023 0307 	bic.w	r3, r3, #7
 801f966:	3308      	adds	r3, #8
 801f968:	9303      	str	r3, [sp, #12]
 801f96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f96c:	4433      	add	r3, r6
 801f96e:	9309      	str	r3, [sp, #36]	; 0x24
 801f970:	e767      	b.n	801f842 <_svfiprintf_r+0x4e>
 801f972:	fb0c 3202 	mla	r2, ip, r2, r3
 801f976:	460c      	mov	r4, r1
 801f978:	2001      	movs	r0, #1
 801f97a:	e7a5      	b.n	801f8c8 <_svfiprintf_r+0xd4>
 801f97c:	2300      	movs	r3, #0
 801f97e:	3401      	adds	r4, #1
 801f980:	9305      	str	r3, [sp, #20]
 801f982:	4619      	mov	r1, r3
 801f984:	f04f 0c0a 	mov.w	ip, #10
 801f988:	4620      	mov	r0, r4
 801f98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f98e:	3a30      	subs	r2, #48	; 0x30
 801f990:	2a09      	cmp	r2, #9
 801f992:	d903      	bls.n	801f99c <_svfiprintf_r+0x1a8>
 801f994:	2b00      	cmp	r3, #0
 801f996:	d0c5      	beq.n	801f924 <_svfiprintf_r+0x130>
 801f998:	9105      	str	r1, [sp, #20]
 801f99a:	e7c3      	b.n	801f924 <_svfiprintf_r+0x130>
 801f99c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f9a0:	4604      	mov	r4, r0
 801f9a2:	2301      	movs	r3, #1
 801f9a4:	e7f0      	b.n	801f988 <_svfiprintf_r+0x194>
 801f9a6:	ab03      	add	r3, sp, #12
 801f9a8:	9300      	str	r3, [sp, #0]
 801f9aa:	462a      	mov	r2, r5
 801f9ac:	4b0f      	ldr	r3, [pc, #60]	; (801f9ec <_svfiprintf_r+0x1f8>)
 801f9ae:	a904      	add	r1, sp, #16
 801f9b0:	4638      	mov	r0, r7
 801f9b2:	f3af 8000 	nop.w
 801f9b6:	1c42      	adds	r2, r0, #1
 801f9b8:	4606      	mov	r6, r0
 801f9ba:	d1d6      	bne.n	801f96a <_svfiprintf_r+0x176>
 801f9bc:	89ab      	ldrh	r3, [r5, #12]
 801f9be:	065b      	lsls	r3, r3, #25
 801f9c0:	f53f af2c 	bmi.w	801f81c <_svfiprintf_r+0x28>
 801f9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9c6:	b01d      	add	sp, #116	; 0x74
 801f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9cc:	ab03      	add	r3, sp, #12
 801f9ce:	9300      	str	r3, [sp, #0]
 801f9d0:	462a      	mov	r2, r5
 801f9d2:	4b06      	ldr	r3, [pc, #24]	; (801f9ec <_svfiprintf_r+0x1f8>)
 801f9d4:	a904      	add	r1, sp, #16
 801f9d6:	4638      	mov	r0, r7
 801f9d8:	f000 f9d4 	bl	801fd84 <_printf_i>
 801f9dc:	e7eb      	b.n	801f9b6 <_svfiprintf_r+0x1c2>
 801f9de:	bf00      	nop
 801f9e0:	08036100 	.word	0x08036100
 801f9e4:	0803610a 	.word	0x0803610a
 801f9e8:	00000000 	.word	0x00000000
 801f9ec:	0801f73d 	.word	0x0801f73d
 801f9f0:	08036106 	.word	0x08036106

0801f9f4 <__sfputc_r>:
 801f9f4:	6893      	ldr	r3, [r2, #8]
 801f9f6:	3b01      	subs	r3, #1
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	b410      	push	{r4}
 801f9fc:	6093      	str	r3, [r2, #8]
 801f9fe:	da08      	bge.n	801fa12 <__sfputc_r+0x1e>
 801fa00:	6994      	ldr	r4, [r2, #24]
 801fa02:	42a3      	cmp	r3, r4
 801fa04:	db01      	blt.n	801fa0a <__sfputc_r+0x16>
 801fa06:	290a      	cmp	r1, #10
 801fa08:	d103      	bne.n	801fa12 <__sfputc_r+0x1e>
 801fa0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa0e:	f7ff bad5 	b.w	801efbc <__swbuf_r>
 801fa12:	6813      	ldr	r3, [r2, #0]
 801fa14:	1c58      	adds	r0, r3, #1
 801fa16:	6010      	str	r0, [r2, #0]
 801fa18:	7019      	strb	r1, [r3, #0]
 801fa1a:	4608      	mov	r0, r1
 801fa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa20:	4770      	bx	lr

0801fa22 <__sfputs_r>:
 801fa22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa24:	4606      	mov	r6, r0
 801fa26:	460f      	mov	r7, r1
 801fa28:	4614      	mov	r4, r2
 801fa2a:	18d5      	adds	r5, r2, r3
 801fa2c:	42ac      	cmp	r4, r5
 801fa2e:	d101      	bne.n	801fa34 <__sfputs_r+0x12>
 801fa30:	2000      	movs	r0, #0
 801fa32:	e007      	b.n	801fa44 <__sfputs_r+0x22>
 801fa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa38:	463a      	mov	r2, r7
 801fa3a:	4630      	mov	r0, r6
 801fa3c:	f7ff ffda 	bl	801f9f4 <__sfputc_r>
 801fa40:	1c43      	adds	r3, r0, #1
 801fa42:	d1f3      	bne.n	801fa2c <__sfputs_r+0xa>
 801fa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fa48 <_vfiprintf_r>:
 801fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa4c:	460d      	mov	r5, r1
 801fa4e:	b09d      	sub	sp, #116	; 0x74
 801fa50:	4614      	mov	r4, r2
 801fa52:	4698      	mov	r8, r3
 801fa54:	4606      	mov	r6, r0
 801fa56:	b118      	cbz	r0, 801fa60 <_vfiprintf_r+0x18>
 801fa58:	6983      	ldr	r3, [r0, #24]
 801fa5a:	b90b      	cbnz	r3, 801fa60 <_vfiprintf_r+0x18>
 801fa5c:	f7ff fca6 	bl	801f3ac <__sinit>
 801fa60:	4b89      	ldr	r3, [pc, #548]	; (801fc88 <_vfiprintf_r+0x240>)
 801fa62:	429d      	cmp	r5, r3
 801fa64:	d11b      	bne.n	801fa9e <_vfiprintf_r+0x56>
 801fa66:	6875      	ldr	r5, [r6, #4]
 801fa68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa6a:	07d9      	lsls	r1, r3, #31
 801fa6c:	d405      	bmi.n	801fa7a <_vfiprintf_r+0x32>
 801fa6e:	89ab      	ldrh	r3, [r5, #12]
 801fa70:	059a      	lsls	r2, r3, #22
 801fa72:	d402      	bmi.n	801fa7a <_vfiprintf_r+0x32>
 801fa74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa76:	f7ff fd49 	bl	801f50c <__retarget_lock_acquire_recursive>
 801fa7a:	89ab      	ldrh	r3, [r5, #12]
 801fa7c:	071b      	lsls	r3, r3, #28
 801fa7e:	d501      	bpl.n	801fa84 <_vfiprintf_r+0x3c>
 801fa80:	692b      	ldr	r3, [r5, #16]
 801fa82:	b9eb      	cbnz	r3, 801fac0 <_vfiprintf_r+0x78>
 801fa84:	4629      	mov	r1, r5
 801fa86:	4630      	mov	r0, r6
 801fa88:	f7ff faea 	bl	801f060 <__swsetup_r>
 801fa8c:	b1c0      	cbz	r0, 801fac0 <_vfiprintf_r+0x78>
 801fa8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa90:	07dc      	lsls	r4, r3, #31
 801fa92:	d50e      	bpl.n	801fab2 <_vfiprintf_r+0x6a>
 801fa94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa98:	b01d      	add	sp, #116	; 0x74
 801fa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa9e:	4b7b      	ldr	r3, [pc, #492]	; (801fc8c <_vfiprintf_r+0x244>)
 801faa0:	429d      	cmp	r5, r3
 801faa2:	d101      	bne.n	801faa8 <_vfiprintf_r+0x60>
 801faa4:	68b5      	ldr	r5, [r6, #8]
 801faa6:	e7df      	b.n	801fa68 <_vfiprintf_r+0x20>
 801faa8:	4b79      	ldr	r3, [pc, #484]	; (801fc90 <_vfiprintf_r+0x248>)
 801faaa:	429d      	cmp	r5, r3
 801faac:	bf08      	it	eq
 801faae:	68f5      	ldreq	r5, [r6, #12]
 801fab0:	e7da      	b.n	801fa68 <_vfiprintf_r+0x20>
 801fab2:	89ab      	ldrh	r3, [r5, #12]
 801fab4:	0598      	lsls	r0, r3, #22
 801fab6:	d4ed      	bmi.n	801fa94 <_vfiprintf_r+0x4c>
 801fab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801faba:	f7ff fd28 	bl	801f50e <__retarget_lock_release_recursive>
 801fabe:	e7e9      	b.n	801fa94 <_vfiprintf_r+0x4c>
 801fac0:	2300      	movs	r3, #0
 801fac2:	9309      	str	r3, [sp, #36]	; 0x24
 801fac4:	2320      	movs	r3, #32
 801fac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801faca:	f8cd 800c 	str.w	r8, [sp, #12]
 801face:	2330      	movs	r3, #48	; 0x30
 801fad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fc94 <_vfiprintf_r+0x24c>
 801fad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fad8:	f04f 0901 	mov.w	r9, #1
 801fadc:	4623      	mov	r3, r4
 801fade:	469a      	mov	sl, r3
 801fae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fae4:	b10a      	cbz	r2, 801faea <_vfiprintf_r+0xa2>
 801fae6:	2a25      	cmp	r2, #37	; 0x25
 801fae8:	d1f9      	bne.n	801fade <_vfiprintf_r+0x96>
 801faea:	ebba 0b04 	subs.w	fp, sl, r4
 801faee:	d00b      	beq.n	801fb08 <_vfiprintf_r+0xc0>
 801faf0:	465b      	mov	r3, fp
 801faf2:	4622      	mov	r2, r4
 801faf4:	4629      	mov	r1, r5
 801faf6:	4630      	mov	r0, r6
 801faf8:	f7ff ff93 	bl	801fa22 <__sfputs_r>
 801fafc:	3001      	adds	r0, #1
 801fafe:	f000 80aa 	beq.w	801fc56 <_vfiprintf_r+0x20e>
 801fb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb04:	445a      	add	r2, fp
 801fb06:	9209      	str	r2, [sp, #36]	; 0x24
 801fb08:	f89a 3000 	ldrb.w	r3, [sl]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	f000 80a2 	beq.w	801fc56 <_vfiprintf_r+0x20e>
 801fb12:	2300      	movs	r3, #0
 801fb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fb1c:	f10a 0a01 	add.w	sl, sl, #1
 801fb20:	9304      	str	r3, [sp, #16]
 801fb22:	9307      	str	r3, [sp, #28]
 801fb24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fb28:	931a      	str	r3, [sp, #104]	; 0x68
 801fb2a:	4654      	mov	r4, sl
 801fb2c:	2205      	movs	r2, #5
 801fb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb32:	4858      	ldr	r0, [pc, #352]	; (801fc94 <_vfiprintf_r+0x24c>)
 801fb34:	f7e0 fc04 	bl	8000340 <memchr>
 801fb38:	9a04      	ldr	r2, [sp, #16]
 801fb3a:	b9d8      	cbnz	r0, 801fb74 <_vfiprintf_r+0x12c>
 801fb3c:	06d1      	lsls	r1, r2, #27
 801fb3e:	bf44      	itt	mi
 801fb40:	2320      	movmi	r3, #32
 801fb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb46:	0713      	lsls	r3, r2, #28
 801fb48:	bf44      	itt	mi
 801fb4a:	232b      	movmi	r3, #43	; 0x2b
 801fb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb50:	f89a 3000 	ldrb.w	r3, [sl]
 801fb54:	2b2a      	cmp	r3, #42	; 0x2a
 801fb56:	d015      	beq.n	801fb84 <_vfiprintf_r+0x13c>
 801fb58:	9a07      	ldr	r2, [sp, #28]
 801fb5a:	4654      	mov	r4, sl
 801fb5c:	2000      	movs	r0, #0
 801fb5e:	f04f 0c0a 	mov.w	ip, #10
 801fb62:	4621      	mov	r1, r4
 801fb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fb68:	3b30      	subs	r3, #48	; 0x30
 801fb6a:	2b09      	cmp	r3, #9
 801fb6c:	d94e      	bls.n	801fc0c <_vfiprintf_r+0x1c4>
 801fb6e:	b1b0      	cbz	r0, 801fb9e <_vfiprintf_r+0x156>
 801fb70:	9207      	str	r2, [sp, #28]
 801fb72:	e014      	b.n	801fb9e <_vfiprintf_r+0x156>
 801fb74:	eba0 0308 	sub.w	r3, r0, r8
 801fb78:	fa09 f303 	lsl.w	r3, r9, r3
 801fb7c:	4313      	orrs	r3, r2
 801fb7e:	9304      	str	r3, [sp, #16]
 801fb80:	46a2      	mov	sl, r4
 801fb82:	e7d2      	b.n	801fb2a <_vfiprintf_r+0xe2>
 801fb84:	9b03      	ldr	r3, [sp, #12]
 801fb86:	1d19      	adds	r1, r3, #4
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	9103      	str	r1, [sp, #12]
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	bfbb      	ittet	lt
 801fb90:	425b      	neglt	r3, r3
 801fb92:	f042 0202 	orrlt.w	r2, r2, #2
 801fb96:	9307      	strge	r3, [sp, #28]
 801fb98:	9307      	strlt	r3, [sp, #28]
 801fb9a:	bfb8      	it	lt
 801fb9c:	9204      	strlt	r2, [sp, #16]
 801fb9e:	7823      	ldrb	r3, [r4, #0]
 801fba0:	2b2e      	cmp	r3, #46	; 0x2e
 801fba2:	d10c      	bne.n	801fbbe <_vfiprintf_r+0x176>
 801fba4:	7863      	ldrb	r3, [r4, #1]
 801fba6:	2b2a      	cmp	r3, #42	; 0x2a
 801fba8:	d135      	bne.n	801fc16 <_vfiprintf_r+0x1ce>
 801fbaa:	9b03      	ldr	r3, [sp, #12]
 801fbac:	1d1a      	adds	r2, r3, #4
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	9203      	str	r2, [sp, #12]
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	bfb8      	it	lt
 801fbb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fbba:	3402      	adds	r4, #2
 801fbbc:	9305      	str	r3, [sp, #20]
 801fbbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fca4 <_vfiprintf_r+0x25c>
 801fbc2:	7821      	ldrb	r1, [r4, #0]
 801fbc4:	2203      	movs	r2, #3
 801fbc6:	4650      	mov	r0, sl
 801fbc8:	f7e0 fbba 	bl	8000340 <memchr>
 801fbcc:	b140      	cbz	r0, 801fbe0 <_vfiprintf_r+0x198>
 801fbce:	2340      	movs	r3, #64	; 0x40
 801fbd0:	eba0 000a 	sub.w	r0, r0, sl
 801fbd4:	fa03 f000 	lsl.w	r0, r3, r0
 801fbd8:	9b04      	ldr	r3, [sp, #16]
 801fbda:	4303      	orrs	r3, r0
 801fbdc:	3401      	adds	r4, #1
 801fbde:	9304      	str	r3, [sp, #16]
 801fbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbe4:	482c      	ldr	r0, [pc, #176]	; (801fc98 <_vfiprintf_r+0x250>)
 801fbe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fbea:	2206      	movs	r2, #6
 801fbec:	f7e0 fba8 	bl	8000340 <memchr>
 801fbf0:	2800      	cmp	r0, #0
 801fbf2:	d03f      	beq.n	801fc74 <_vfiprintf_r+0x22c>
 801fbf4:	4b29      	ldr	r3, [pc, #164]	; (801fc9c <_vfiprintf_r+0x254>)
 801fbf6:	bb1b      	cbnz	r3, 801fc40 <_vfiprintf_r+0x1f8>
 801fbf8:	9b03      	ldr	r3, [sp, #12]
 801fbfa:	3307      	adds	r3, #7
 801fbfc:	f023 0307 	bic.w	r3, r3, #7
 801fc00:	3308      	adds	r3, #8
 801fc02:	9303      	str	r3, [sp, #12]
 801fc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc06:	443b      	add	r3, r7
 801fc08:	9309      	str	r3, [sp, #36]	; 0x24
 801fc0a:	e767      	b.n	801fadc <_vfiprintf_r+0x94>
 801fc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 801fc10:	460c      	mov	r4, r1
 801fc12:	2001      	movs	r0, #1
 801fc14:	e7a5      	b.n	801fb62 <_vfiprintf_r+0x11a>
 801fc16:	2300      	movs	r3, #0
 801fc18:	3401      	adds	r4, #1
 801fc1a:	9305      	str	r3, [sp, #20]
 801fc1c:	4619      	mov	r1, r3
 801fc1e:	f04f 0c0a 	mov.w	ip, #10
 801fc22:	4620      	mov	r0, r4
 801fc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fc28:	3a30      	subs	r2, #48	; 0x30
 801fc2a:	2a09      	cmp	r2, #9
 801fc2c:	d903      	bls.n	801fc36 <_vfiprintf_r+0x1ee>
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d0c5      	beq.n	801fbbe <_vfiprintf_r+0x176>
 801fc32:	9105      	str	r1, [sp, #20]
 801fc34:	e7c3      	b.n	801fbbe <_vfiprintf_r+0x176>
 801fc36:	fb0c 2101 	mla	r1, ip, r1, r2
 801fc3a:	4604      	mov	r4, r0
 801fc3c:	2301      	movs	r3, #1
 801fc3e:	e7f0      	b.n	801fc22 <_vfiprintf_r+0x1da>
 801fc40:	ab03      	add	r3, sp, #12
 801fc42:	9300      	str	r3, [sp, #0]
 801fc44:	462a      	mov	r2, r5
 801fc46:	4b16      	ldr	r3, [pc, #88]	; (801fca0 <_vfiprintf_r+0x258>)
 801fc48:	a904      	add	r1, sp, #16
 801fc4a:	4630      	mov	r0, r6
 801fc4c:	f3af 8000 	nop.w
 801fc50:	4607      	mov	r7, r0
 801fc52:	1c78      	adds	r0, r7, #1
 801fc54:	d1d6      	bne.n	801fc04 <_vfiprintf_r+0x1bc>
 801fc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc58:	07d9      	lsls	r1, r3, #31
 801fc5a:	d405      	bmi.n	801fc68 <_vfiprintf_r+0x220>
 801fc5c:	89ab      	ldrh	r3, [r5, #12]
 801fc5e:	059a      	lsls	r2, r3, #22
 801fc60:	d402      	bmi.n	801fc68 <_vfiprintf_r+0x220>
 801fc62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc64:	f7ff fc53 	bl	801f50e <__retarget_lock_release_recursive>
 801fc68:	89ab      	ldrh	r3, [r5, #12]
 801fc6a:	065b      	lsls	r3, r3, #25
 801fc6c:	f53f af12 	bmi.w	801fa94 <_vfiprintf_r+0x4c>
 801fc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fc72:	e711      	b.n	801fa98 <_vfiprintf_r+0x50>
 801fc74:	ab03      	add	r3, sp, #12
 801fc76:	9300      	str	r3, [sp, #0]
 801fc78:	462a      	mov	r2, r5
 801fc7a:	4b09      	ldr	r3, [pc, #36]	; (801fca0 <_vfiprintf_r+0x258>)
 801fc7c:	a904      	add	r1, sp, #16
 801fc7e:	4630      	mov	r0, r6
 801fc80:	f000 f880 	bl	801fd84 <_printf_i>
 801fc84:	e7e4      	b.n	801fc50 <_vfiprintf_r+0x208>
 801fc86:	bf00      	nop
 801fc88:	080360c0 	.word	0x080360c0
 801fc8c:	080360e0 	.word	0x080360e0
 801fc90:	080360a0 	.word	0x080360a0
 801fc94:	08036100 	.word	0x08036100
 801fc98:	0803610a 	.word	0x0803610a
 801fc9c:	00000000 	.word	0x00000000
 801fca0:	0801fa23 	.word	0x0801fa23
 801fca4:	08036106 	.word	0x08036106

0801fca8 <_printf_common>:
 801fca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fcac:	4616      	mov	r6, r2
 801fcae:	4699      	mov	r9, r3
 801fcb0:	688a      	ldr	r2, [r1, #8]
 801fcb2:	690b      	ldr	r3, [r1, #16]
 801fcb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fcb8:	4293      	cmp	r3, r2
 801fcba:	bfb8      	it	lt
 801fcbc:	4613      	movlt	r3, r2
 801fcbe:	6033      	str	r3, [r6, #0]
 801fcc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fcc4:	4607      	mov	r7, r0
 801fcc6:	460c      	mov	r4, r1
 801fcc8:	b10a      	cbz	r2, 801fcce <_printf_common+0x26>
 801fcca:	3301      	adds	r3, #1
 801fccc:	6033      	str	r3, [r6, #0]
 801fcce:	6823      	ldr	r3, [r4, #0]
 801fcd0:	0699      	lsls	r1, r3, #26
 801fcd2:	bf42      	ittt	mi
 801fcd4:	6833      	ldrmi	r3, [r6, #0]
 801fcd6:	3302      	addmi	r3, #2
 801fcd8:	6033      	strmi	r3, [r6, #0]
 801fcda:	6825      	ldr	r5, [r4, #0]
 801fcdc:	f015 0506 	ands.w	r5, r5, #6
 801fce0:	d106      	bne.n	801fcf0 <_printf_common+0x48>
 801fce2:	f104 0a19 	add.w	sl, r4, #25
 801fce6:	68e3      	ldr	r3, [r4, #12]
 801fce8:	6832      	ldr	r2, [r6, #0]
 801fcea:	1a9b      	subs	r3, r3, r2
 801fcec:	42ab      	cmp	r3, r5
 801fcee:	dc26      	bgt.n	801fd3e <_printf_common+0x96>
 801fcf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fcf4:	1e13      	subs	r3, r2, #0
 801fcf6:	6822      	ldr	r2, [r4, #0]
 801fcf8:	bf18      	it	ne
 801fcfa:	2301      	movne	r3, #1
 801fcfc:	0692      	lsls	r2, r2, #26
 801fcfe:	d42b      	bmi.n	801fd58 <_printf_common+0xb0>
 801fd00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fd04:	4649      	mov	r1, r9
 801fd06:	4638      	mov	r0, r7
 801fd08:	47c0      	blx	r8
 801fd0a:	3001      	adds	r0, #1
 801fd0c:	d01e      	beq.n	801fd4c <_printf_common+0xa4>
 801fd0e:	6823      	ldr	r3, [r4, #0]
 801fd10:	68e5      	ldr	r5, [r4, #12]
 801fd12:	6832      	ldr	r2, [r6, #0]
 801fd14:	f003 0306 	and.w	r3, r3, #6
 801fd18:	2b04      	cmp	r3, #4
 801fd1a:	bf08      	it	eq
 801fd1c:	1aad      	subeq	r5, r5, r2
 801fd1e:	68a3      	ldr	r3, [r4, #8]
 801fd20:	6922      	ldr	r2, [r4, #16]
 801fd22:	bf0c      	ite	eq
 801fd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fd28:	2500      	movne	r5, #0
 801fd2a:	4293      	cmp	r3, r2
 801fd2c:	bfc4      	itt	gt
 801fd2e:	1a9b      	subgt	r3, r3, r2
 801fd30:	18ed      	addgt	r5, r5, r3
 801fd32:	2600      	movs	r6, #0
 801fd34:	341a      	adds	r4, #26
 801fd36:	42b5      	cmp	r5, r6
 801fd38:	d11a      	bne.n	801fd70 <_printf_common+0xc8>
 801fd3a:	2000      	movs	r0, #0
 801fd3c:	e008      	b.n	801fd50 <_printf_common+0xa8>
 801fd3e:	2301      	movs	r3, #1
 801fd40:	4652      	mov	r2, sl
 801fd42:	4649      	mov	r1, r9
 801fd44:	4638      	mov	r0, r7
 801fd46:	47c0      	blx	r8
 801fd48:	3001      	adds	r0, #1
 801fd4a:	d103      	bne.n	801fd54 <_printf_common+0xac>
 801fd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd54:	3501      	adds	r5, #1
 801fd56:	e7c6      	b.n	801fce6 <_printf_common+0x3e>
 801fd58:	18e1      	adds	r1, r4, r3
 801fd5a:	1c5a      	adds	r2, r3, #1
 801fd5c:	2030      	movs	r0, #48	; 0x30
 801fd5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fd62:	4422      	add	r2, r4
 801fd64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fd68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fd6c:	3302      	adds	r3, #2
 801fd6e:	e7c7      	b.n	801fd00 <_printf_common+0x58>
 801fd70:	2301      	movs	r3, #1
 801fd72:	4622      	mov	r2, r4
 801fd74:	4649      	mov	r1, r9
 801fd76:	4638      	mov	r0, r7
 801fd78:	47c0      	blx	r8
 801fd7a:	3001      	adds	r0, #1
 801fd7c:	d0e6      	beq.n	801fd4c <_printf_common+0xa4>
 801fd7e:	3601      	adds	r6, #1
 801fd80:	e7d9      	b.n	801fd36 <_printf_common+0x8e>
	...

0801fd84 <_printf_i>:
 801fd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fd88:	460c      	mov	r4, r1
 801fd8a:	4691      	mov	r9, r2
 801fd8c:	7e27      	ldrb	r7, [r4, #24]
 801fd8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd90:	2f78      	cmp	r7, #120	; 0x78
 801fd92:	4680      	mov	r8, r0
 801fd94:	469a      	mov	sl, r3
 801fd96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fd9a:	d807      	bhi.n	801fdac <_printf_i+0x28>
 801fd9c:	2f62      	cmp	r7, #98	; 0x62
 801fd9e:	d80a      	bhi.n	801fdb6 <_printf_i+0x32>
 801fda0:	2f00      	cmp	r7, #0
 801fda2:	f000 80d8 	beq.w	801ff56 <_printf_i+0x1d2>
 801fda6:	2f58      	cmp	r7, #88	; 0x58
 801fda8:	f000 80a3 	beq.w	801fef2 <_printf_i+0x16e>
 801fdac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fdb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fdb4:	e03a      	b.n	801fe2c <_printf_i+0xa8>
 801fdb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fdba:	2b15      	cmp	r3, #21
 801fdbc:	d8f6      	bhi.n	801fdac <_printf_i+0x28>
 801fdbe:	a001      	add	r0, pc, #4	; (adr r0, 801fdc4 <_printf_i+0x40>)
 801fdc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fdc4:	0801fe1d 	.word	0x0801fe1d
 801fdc8:	0801fe31 	.word	0x0801fe31
 801fdcc:	0801fdad 	.word	0x0801fdad
 801fdd0:	0801fdad 	.word	0x0801fdad
 801fdd4:	0801fdad 	.word	0x0801fdad
 801fdd8:	0801fdad 	.word	0x0801fdad
 801fddc:	0801fe31 	.word	0x0801fe31
 801fde0:	0801fdad 	.word	0x0801fdad
 801fde4:	0801fdad 	.word	0x0801fdad
 801fde8:	0801fdad 	.word	0x0801fdad
 801fdec:	0801fdad 	.word	0x0801fdad
 801fdf0:	0801ff3d 	.word	0x0801ff3d
 801fdf4:	0801fe61 	.word	0x0801fe61
 801fdf8:	0801ff1f 	.word	0x0801ff1f
 801fdfc:	0801fdad 	.word	0x0801fdad
 801fe00:	0801fdad 	.word	0x0801fdad
 801fe04:	0801ff5f 	.word	0x0801ff5f
 801fe08:	0801fdad 	.word	0x0801fdad
 801fe0c:	0801fe61 	.word	0x0801fe61
 801fe10:	0801fdad 	.word	0x0801fdad
 801fe14:	0801fdad 	.word	0x0801fdad
 801fe18:	0801ff27 	.word	0x0801ff27
 801fe1c:	680b      	ldr	r3, [r1, #0]
 801fe1e:	1d1a      	adds	r2, r3, #4
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	600a      	str	r2, [r1, #0]
 801fe24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fe28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fe2c:	2301      	movs	r3, #1
 801fe2e:	e0a3      	b.n	801ff78 <_printf_i+0x1f4>
 801fe30:	6825      	ldr	r5, [r4, #0]
 801fe32:	6808      	ldr	r0, [r1, #0]
 801fe34:	062e      	lsls	r6, r5, #24
 801fe36:	f100 0304 	add.w	r3, r0, #4
 801fe3a:	d50a      	bpl.n	801fe52 <_printf_i+0xce>
 801fe3c:	6805      	ldr	r5, [r0, #0]
 801fe3e:	600b      	str	r3, [r1, #0]
 801fe40:	2d00      	cmp	r5, #0
 801fe42:	da03      	bge.n	801fe4c <_printf_i+0xc8>
 801fe44:	232d      	movs	r3, #45	; 0x2d
 801fe46:	426d      	negs	r5, r5
 801fe48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe4c:	485e      	ldr	r0, [pc, #376]	; (801ffc8 <_printf_i+0x244>)
 801fe4e:	230a      	movs	r3, #10
 801fe50:	e019      	b.n	801fe86 <_printf_i+0x102>
 801fe52:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fe56:	6805      	ldr	r5, [r0, #0]
 801fe58:	600b      	str	r3, [r1, #0]
 801fe5a:	bf18      	it	ne
 801fe5c:	b22d      	sxthne	r5, r5
 801fe5e:	e7ef      	b.n	801fe40 <_printf_i+0xbc>
 801fe60:	680b      	ldr	r3, [r1, #0]
 801fe62:	6825      	ldr	r5, [r4, #0]
 801fe64:	1d18      	adds	r0, r3, #4
 801fe66:	6008      	str	r0, [r1, #0]
 801fe68:	0628      	lsls	r0, r5, #24
 801fe6a:	d501      	bpl.n	801fe70 <_printf_i+0xec>
 801fe6c:	681d      	ldr	r5, [r3, #0]
 801fe6e:	e002      	b.n	801fe76 <_printf_i+0xf2>
 801fe70:	0669      	lsls	r1, r5, #25
 801fe72:	d5fb      	bpl.n	801fe6c <_printf_i+0xe8>
 801fe74:	881d      	ldrh	r5, [r3, #0]
 801fe76:	4854      	ldr	r0, [pc, #336]	; (801ffc8 <_printf_i+0x244>)
 801fe78:	2f6f      	cmp	r7, #111	; 0x6f
 801fe7a:	bf0c      	ite	eq
 801fe7c:	2308      	moveq	r3, #8
 801fe7e:	230a      	movne	r3, #10
 801fe80:	2100      	movs	r1, #0
 801fe82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fe86:	6866      	ldr	r6, [r4, #4]
 801fe88:	60a6      	str	r6, [r4, #8]
 801fe8a:	2e00      	cmp	r6, #0
 801fe8c:	bfa2      	ittt	ge
 801fe8e:	6821      	ldrge	r1, [r4, #0]
 801fe90:	f021 0104 	bicge.w	r1, r1, #4
 801fe94:	6021      	strge	r1, [r4, #0]
 801fe96:	b90d      	cbnz	r5, 801fe9c <_printf_i+0x118>
 801fe98:	2e00      	cmp	r6, #0
 801fe9a:	d04d      	beq.n	801ff38 <_printf_i+0x1b4>
 801fe9c:	4616      	mov	r6, r2
 801fe9e:	fbb5 f1f3 	udiv	r1, r5, r3
 801fea2:	fb03 5711 	mls	r7, r3, r1, r5
 801fea6:	5dc7      	ldrb	r7, [r0, r7]
 801fea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801feac:	462f      	mov	r7, r5
 801feae:	42bb      	cmp	r3, r7
 801feb0:	460d      	mov	r5, r1
 801feb2:	d9f4      	bls.n	801fe9e <_printf_i+0x11a>
 801feb4:	2b08      	cmp	r3, #8
 801feb6:	d10b      	bne.n	801fed0 <_printf_i+0x14c>
 801feb8:	6823      	ldr	r3, [r4, #0]
 801feba:	07df      	lsls	r7, r3, #31
 801febc:	d508      	bpl.n	801fed0 <_printf_i+0x14c>
 801febe:	6923      	ldr	r3, [r4, #16]
 801fec0:	6861      	ldr	r1, [r4, #4]
 801fec2:	4299      	cmp	r1, r3
 801fec4:	bfde      	ittt	le
 801fec6:	2330      	movle	r3, #48	; 0x30
 801fec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fecc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801fed0:	1b92      	subs	r2, r2, r6
 801fed2:	6122      	str	r2, [r4, #16]
 801fed4:	f8cd a000 	str.w	sl, [sp]
 801fed8:	464b      	mov	r3, r9
 801feda:	aa03      	add	r2, sp, #12
 801fedc:	4621      	mov	r1, r4
 801fede:	4640      	mov	r0, r8
 801fee0:	f7ff fee2 	bl	801fca8 <_printf_common>
 801fee4:	3001      	adds	r0, #1
 801fee6:	d14c      	bne.n	801ff82 <_printf_i+0x1fe>
 801fee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801feec:	b004      	add	sp, #16
 801feee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fef2:	4835      	ldr	r0, [pc, #212]	; (801ffc8 <_printf_i+0x244>)
 801fef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fef8:	6823      	ldr	r3, [r4, #0]
 801fefa:	680e      	ldr	r6, [r1, #0]
 801fefc:	061f      	lsls	r7, r3, #24
 801fefe:	f856 5b04 	ldr.w	r5, [r6], #4
 801ff02:	600e      	str	r6, [r1, #0]
 801ff04:	d514      	bpl.n	801ff30 <_printf_i+0x1ac>
 801ff06:	07d9      	lsls	r1, r3, #31
 801ff08:	bf44      	itt	mi
 801ff0a:	f043 0320 	orrmi.w	r3, r3, #32
 801ff0e:	6023      	strmi	r3, [r4, #0]
 801ff10:	b91d      	cbnz	r5, 801ff1a <_printf_i+0x196>
 801ff12:	6823      	ldr	r3, [r4, #0]
 801ff14:	f023 0320 	bic.w	r3, r3, #32
 801ff18:	6023      	str	r3, [r4, #0]
 801ff1a:	2310      	movs	r3, #16
 801ff1c:	e7b0      	b.n	801fe80 <_printf_i+0xfc>
 801ff1e:	6823      	ldr	r3, [r4, #0]
 801ff20:	f043 0320 	orr.w	r3, r3, #32
 801ff24:	6023      	str	r3, [r4, #0]
 801ff26:	2378      	movs	r3, #120	; 0x78
 801ff28:	4828      	ldr	r0, [pc, #160]	; (801ffcc <_printf_i+0x248>)
 801ff2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ff2e:	e7e3      	b.n	801fef8 <_printf_i+0x174>
 801ff30:	065e      	lsls	r6, r3, #25
 801ff32:	bf48      	it	mi
 801ff34:	b2ad      	uxthmi	r5, r5
 801ff36:	e7e6      	b.n	801ff06 <_printf_i+0x182>
 801ff38:	4616      	mov	r6, r2
 801ff3a:	e7bb      	b.n	801feb4 <_printf_i+0x130>
 801ff3c:	680b      	ldr	r3, [r1, #0]
 801ff3e:	6826      	ldr	r6, [r4, #0]
 801ff40:	6960      	ldr	r0, [r4, #20]
 801ff42:	1d1d      	adds	r5, r3, #4
 801ff44:	600d      	str	r5, [r1, #0]
 801ff46:	0635      	lsls	r5, r6, #24
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	d501      	bpl.n	801ff50 <_printf_i+0x1cc>
 801ff4c:	6018      	str	r0, [r3, #0]
 801ff4e:	e002      	b.n	801ff56 <_printf_i+0x1d2>
 801ff50:	0671      	lsls	r1, r6, #25
 801ff52:	d5fb      	bpl.n	801ff4c <_printf_i+0x1c8>
 801ff54:	8018      	strh	r0, [r3, #0]
 801ff56:	2300      	movs	r3, #0
 801ff58:	6123      	str	r3, [r4, #16]
 801ff5a:	4616      	mov	r6, r2
 801ff5c:	e7ba      	b.n	801fed4 <_printf_i+0x150>
 801ff5e:	680b      	ldr	r3, [r1, #0]
 801ff60:	1d1a      	adds	r2, r3, #4
 801ff62:	600a      	str	r2, [r1, #0]
 801ff64:	681e      	ldr	r6, [r3, #0]
 801ff66:	6862      	ldr	r2, [r4, #4]
 801ff68:	2100      	movs	r1, #0
 801ff6a:	4630      	mov	r0, r6
 801ff6c:	f7e0 f9e8 	bl	8000340 <memchr>
 801ff70:	b108      	cbz	r0, 801ff76 <_printf_i+0x1f2>
 801ff72:	1b80      	subs	r0, r0, r6
 801ff74:	6060      	str	r0, [r4, #4]
 801ff76:	6863      	ldr	r3, [r4, #4]
 801ff78:	6123      	str	r3, [r4, #16]
 801ff7a:	2300      	movs	r3, #0
 801ff7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff80:	e7a8      	b.n	801fed4 <_printf_i+0x150>
 801ff82:	6923      	ldr	r3, [r4, #16]
 801ff84:	4632      	mov	r2, r6
 801ff86:	4649      	mov	r1, r9
 801ff88:	4640      	mov	r0, r8
 801ff8a:	47d0      	blx	sl
 801ff8c:	3001      	adds	r0, #1
 801ff8e:	d0ab      	beq.n	801fee8 <_printf_i+0x164>
 801ff90:	6823      	ldr	r3, [r4, #0]
 801ff92:	079b      	lsls	r3, r3, #30
 801ff94:	d413      	bmi.n	801ffbe <_printf_i+0x23a>
 801ff96:	68e0      	ldr	r0, [r4, #12]
 801ff98:	9b03      	ldr	r3, [sp, #12]
 801ff9a:	4298      	cmp	r0, r3
 801ff9c:	bfb8      	it	lt
 801ff9e:	4618      	movlt	r0, r3
 801ffa0:	e7a4      	b.n	801feec <_printf_i+0x168>
 801ffa2:	2301      	movs	r3, #1
 801ffa4:	4632      	mov	r2, r6
 801ffa6:	4649      	mov	r1, r9
 801ffa8:	4640      	mov	r0, r8
 801ffaa:	47d0      	blx	sl
 801ffac:	3001      	adds	r0, #1
 801ffae:	d09b      	beq.n	801fee8 <_printf_i+0x164>
 801ffb0:	3501      	adds	r5, #1
 801ffb2:	68e3      	ldr	r3, [r4, #12]
 801ffb4:	9903      	ldr	r1, [sp, #12]
 801ffb6:	1a5b      	subs	r3, r3, r1
 801ffb8:	42ab      	cmp	r3, r5
 801ffba:	dcf2      	bgt.n	801ffa2 <_printf_i+0x21e>
 801ffbc:	e7eb      	b.n	801ff96 <_printf_i+0x212>
 801ffbe:	2500      	movs	r5, #0
 801ffc0:	f104 0619 	add.w	r6, r4, #25
 801ffc4:	e7f5      	b.n	801ffb2 <_printf_i+0x22e>
 801ffc6:	bf00      	nop
 801ffc8:	08036111 	.word	0x08036111
 801ffcc:	08036122 	.word	0x08036122

0801ffd0 <_sbrk_r>:
 801ffd0:	b538      	push	{r3, r4, r5, lr}
 801ffd2:	4d06      	ldr	r5, [pc, #24]	; (801ffec <_sbrk_r+0x1c>)
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	4608      	mov	r0, r1
 801ffda:	602b      	str	r3, [r5, #0]
 801ffdc:	f7e1 fd1a 	bl	8001a14 <_sbrk>
 801ffe0:	1c43      	adds	r3, r0, #1
 801ffe2:	d102      	bne.n	801ffea <_sbrk_r+0x1a>
 801ffe4:	682b      	ldr	r3, [r5, #0]
 801ffe6:	b103      	cbz	r3, 801ffea <_sbrk_r+0x1a>
 801ffe8:	6023      	str	r3, [r4, #0]
 801ffea:	bd38      	pop	{r3, r4, r5, pc}
 801ffec:	20010390 	.word	0x20010390

0801fff0 <__sread>:
 801fff0:	b510      	push	{r4, lr}
 801fff2:	460c      	mov	r4, r1
 801fff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fff8:	f000 f8ce 	bl	8020198 <_read_r>
 801fffc:	2800      	cmp	r0, #0
 801fffe:	bfab      	itete	ge
 8020000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020002:	89a3      	ldrhlt	r3, [r4, #12]
 8020004:	181b      	addge	r3, r3, r0
 8020006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802000a:	bfac      	ite	ge
 802000c:	6563      	strge	r3, [r4, #84]	; 0x54
 802000e:	81a3      	strhlt	r3, [r4, #12]
 8020010:	bd10      	pop	{r4, pc}

08020012 <__swrite>:
 8020012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020016:	461f      	mov	r7, r3
 8020018:	898b      	ldrh	r3, [r1, #12]
 802001a:	05db      	lsls	r3, r3, #23
 802001c:	4605      	mov	r5, r0
 802001e:	460c      	mov	r4, r1
 8020020:	4616      	mov	r6, r2
 8020022:	d505      	bpl.n	8020030 <__swrite+0x1e>
 8020024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020028:	2302      	movs	r3, #2
 802002a:	2200      	movs	r2, #0
 802002c:	f000 f870 	bl	8020110 <_lseek_r>
 8020030:	89a3      	ldrh	r3, [r4, #12]
 8020032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802003a:	81a3      	strh	r3, [r4, #12]
 802003c:	4632      	mov	r2, r6
 802003e:	463b      	mov	r3, r7
 8020040:	4628      	mov	r0, r5
 8020042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020046:	f000 b817 	b.w	8020078 <_write_r>

0802004a <__sseek>:
 802004a:	b510      	push	{r4, lr}
 802004c:	460c      	mov	r4, r1
 802004e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020052:	f000 f85d 	bl	8020110 <_lseek_r>
 8020056:	1c43      	adds	r3, r0, #1
 8020058:	89a3      	ldrh	r3, [r4, #12]
 802005a:	bf15      	itete	ne
 802005c:	6560      	strne	r0, [r4, #84]	; 0x54
 802005e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020066:	81a3      	strheq	r3, [r4, #12]
 8020068:	bf18      	it	ne
 802006a:	81a3      	strhne	r3, [r4, #12]
 802006c:	bd10      	pop	{r4, pc}

0802006e <__sclose>:
 802006e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020072:	f000 b81b 	b.w	80200ac <_close_r>
	...

08020078 <_write_r>:
 8020078:	b538      	push	{r3, r4, r5, lr}
 802007a:	4d07      	ldr	r5, [pc, #28]	; (8020098 <_write_r+0x20>)
 802007c:	4604      	mov	r4, r0
 802007e:	4608      	mov	r0, r1
 8020080:	4611      	mov	r1, r2
 8020082:	2200      	movs	r2, #0
 8020084:	602a      	str	r2, [r5, #0]
 8020086:	461a      	mov	r2, r3
 8020088:	f7e1 fc73 	bl	8001972 <_write>
 802008c:	1c43      	adds	r3, r0, #1
 802008e:	d102      	bne.n	8020096 <_write_r+0x1e>
 8020090:	682b      	ldr	r3, [r5, #0]
 8020092:	b103      	cbz	r3, 8020096 <_write_r+0x1e>
 8020094:	6023      	str	r3, [r4, #0]
 8020096:	bd38      	pop	{r3, r4, r5, pc}
 8020098:	20010390 	.word	0x20010390

0802009c <abort>:
 802009c:	b508      	push	{r3, lr}
 802009e:	2006      	movs	r0, #6
 80200a0:	f000 f8b4 	bl	802020c <raise>
 80200a4:	2001      	movs	r0, #1
 80200a6:	f7e1 fc3d 	bl	8001924 <_exit>
	...

080200ac <_close_r>:
 80200ac:	b538      	push	{r3, r4, r5, lr}
 80200ae:	4d06      	ldr	r5, [pc, #24]	; (80200c8 <_close_r+0x1c>)
 80200b0:	2300      	movs	r3, #0
 80200b2:	4604      	mov	r4, r0
 80200b4:	4608      	mov	r0, r1
 80200b6:	602b      	str	r3, [r5, #0]
 80200b8:	f7e1 fc77 	bl	80019aa <_close>
 80200bc:	1c43      	adds	r3, r0, #1
 80200be:	d102      	bne.n	80200c6 <_close_r+0x1a>
 80200c0:	682b      	ldr	r3, [r5, #0]
 80200c2:	b103      	cbz	r3, 80200c6 <_close_r+0x1a>
 80200c4:	6023      	str	r3, [r4, #0]
 80200c6:	bd38      	pop	{r3, r4, r5, pc}
 80200c8:	20010390 	.word	0x20010390

080200cc <_fstat_r>:
 80200cc:	b538      	push	{r3, r4, r5, lr}
 80200ce:	4d07      	ldr	r5, [pc, #28]	; (80200ec <_fstat_r+0x20>)
 80200d0:	2300      	movs	r3, #0
 80200d2:	4604      	mov	r4, r0
 80200d4:	4608      	mov	r0, r1
 80200d6:	4611      	mov	r1, r2
 80200d8:	602b      	str	r3, [r5, #0]
 80200da:	f7e1 fc72 	bl	80019c2 <_fstat>
 80200de:	1c43      	adds	r3, r0, #1
 80200e0:	d102      	bne.n	80200e8 <_fstat_r+0x1c>
 80200e2:	682b      	ldr	r3, [r5, #0]
 80200e4:	b103      	cbz	r3, 80200e8 <_fstat_r+0x1c>
 80200e6:	6023      	str	r3, [r4, #0]
 80200e8:	bd38      	pop	{r3, r4, r5, pc}
 80200ea:	bf00      	nop
 80200ec:	20010390 	.word	0x20010390

080200f0 <_isatty_r>:
 80200f0:	b538      	push	{r3, r4, r5, lr}
 80200f2:	4d06      	ldr	r5, [pc, #24]	; (802010c <_isatty_r+0x1c>)
 80200f4:	2300      	movs	r3, #0
 80200f6:	4604      	mov	r4, r0
 80200f8:	4608      	mov	r0, r1
 80200fa:	602b      	str	r3, [r5, #0]
 80200fc:	f7e1 fc71 	bl	80019e2 <_isatty>
 8020100:	1c43      	adds	r3, r0, #1
 8020102:	d102      	bne.n	802010a <_isatty_r+0x1a>
 8020104:	682b      	ldr	r3, [r5, #0]
 8020106:	b103      	cbz	r3, 802010a <_isatty_r+0x1a>
 8020108:	6023      	str	r3, [r4, #0]
 802010a:	bd38      	pop	{r3, r4, r5, pc}
 802010c:	20010390 	.word	0x20010390

08020110 <_lseek_r>:
 8020110:	b538      	push	{r3, r4, r5, lr}
 8020112:	4d07      	ldr	r5, [pc, #28]	; (8020130 <_lseek_r+0x20>)
 8020114:	4604      	mov	r4, r0
 8020116:	4608      	mov	r0, r1
 8020118:	4611      	mov	r1, r2
 802011a:	2200      	movs	r2, #0
 802011c:	602a      	str	r2, [r5, #0]
 802011e:	461a      	mov	r2, r3
 8020120:	f7e1 fc6a 	bl	80019f8 <_lseek>
 8020124:	1c43      	adds	r3, r0, #1
 8020126:	d102      	bne.n	802012e <_lseek_r+0x1e>
 8020128:	682b      	ldr	r3, [r5, #0]
 802012a:	b103      	cbz	r3, 802012e <_lseek_r+0x1e>
 802012c:	6023      	str	r3, [r4, #0]
 802012e:	bd38      	pop	{r3, r4, r5, pc}
 8020130:	20010390 	.word	0x20010390

08020134 <__malloc_lock>:
 8020134:	4801      	ldr	r0, [pc, #4]	; (802013c <__malloc_lock+0x8>)
 8020136:	f7ff b9e9 	b.w	801f50c <__retarget_lock_acquire_recursive>
 802013a:	bf00      	nop
 802013c:	20013df8 	.word	0x20013df8

08020140 <__malloc_unlock>:
 8020140:	4801      	ldr	r0, [pc, #4]	; (8020148 <__malloc_unlock+0x8>)
 8020142:	f7ff b9e4 	b.w	801f50e <__retarget_lock_release_recursive>
 8020146:	bf00      	nop
 8020148:	20013df8 	.word	0x20013df8

0802014c <_realloc_r>:
 802014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802014e:	4607      	mov	r7, r0
 8020150:	4614      	mov	r4, r2
 8020152:	460e      	mov	r6, r1
 8020154:	b921      	cbnz	r1, 8020160 <_realloc_r+0x14>
 8020156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802015a:	4611      	mov	r1, r2
 802015c:	f7ff ba94 	b.w	801f688 <_malloc_r>
 8020160:	b922      	cbnz	r2, 802016c <_realloc_r+0x20>
 8020162:	f7ff fa41 	bl	801f5e8 <_free_r>
 8020166:	4625      	mov	r5, r4
 8020168:	4628      	mov	r0, r5
 802016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802016c:	f000 f86a 	bl	8020244 <_malloc_usable_size_r>
 8020170:	42a0      	cmp	r0, r4
 8020172:	d20f      	bcs.n	8020194 <_realloc_r+0x48>
 8020174:	4621      	mov	r1, r4
 8020176:	4638      	mov	r0, r7
 8020178:	f7ff fa86 	bl	801f688 <_malloc_r>
 802017c:	4605      	mov	r5, r0
 802017e:	2800      	cmp	r0, #0
 8020180:	d0f2      	beq.n	8020168 <_realloc_r+0x1c>
 8020182:	4631      	mov	r1, r6
 8020184:	4622      	mov	r2, r4
 8020186:	f7fe fdd1 	bl	801ed2c <memcpy>
 802018a:	4631      	mov	r1, r6
 802018c:	4638      	mov	r0, r7
 802018e:	f7ff fa2b 	bl	801f5e8 <_free_r>
 8020192:	e7e9      	b.n	8020168 <_realloc_r+0x1c>
 8020194:	4635      	mov	r5, r6
 8020196:	e7e7      	b.n	8020168 <_realloc_r+0x1c>

08020198 <_read_r>:
 8020198:	b538      	push	{r3, r4, r5, lr}
 802019a:	4d07      	ldr	r5, [pc, #28]	; (80201b8 <_read_r+0x20>)
 802019c:	4604      	mov	r4, r0
 802019e:	4608      	mov	r0, r1
 80201a0:	4611      	mov	r1, r2
 80201a2:	2200      	movs	r2, #0
 80201a4:	602a      	str	r2, [r5, #0]
 80201a6:	461a      	mov	r2, r3
 80201a8:	f7e1 fbc6 	bl	8001938 <_read>
 80201ac:	1c43      	adds	r3, r0, #1
 80201ae:	d102      	bne.n	80201b6 <_read_r+0x1e>
 80201b0:	682b      	ldr	r3, [r5, #0]
 80201b2:	b103      	cbz	r3, 80201b6 <_read_r+0x1e>
 80201b4:	6023      	str	r3, [r4, #0]
 80201b6:	bd38      	pop	{r3, r4, r5, pc}
 80201b8:	20010390 	.word	0x20010390

080201bc <_raise_r>:
 80201bc:	291f      	cmp	r1, #31
 80201be:	b538      	push	{r3, r4, r5, lr}
 80201c0:	4604      	mov	r4, r0
 80201c2:	460d      	mov	r5, r1
 80201c4:	d904      	bls.n	80201d0 <_raise_r+0x14>
 80201c6:	2316      	movs	r3, #22
 80201c8:	6003      	str	r3, [r0, #0]
 80201ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80201ce:	bd38      	pop	{r3, r4, r5, pc}
 80201d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80201d2:	b112      	cbz	r2, 80201da <_raise_r+0x1e>
 80201d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80201d8:	b94b      	cbnz	r3, 80201ee <_raise_r+0x32>
 80201da:	4620      	mov	r0, r4
 80201dc:	f000 f830 	bl	8020240 <_getpid_r>
 80201e0:	462a      	mov	r2, r5
 80201e2:	4601      	mov	r1, r0
 80201e4:	4620      	mov	r0, r4
 80201e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80201ea:	f000 b817 	b.w	802021c <_kill_r>
 80201ee:	2b01      	cmp	r3, #1
 80201f0:	d00a      	beq.n	8020208 <_raise_r+0x4c>
 80201f2:	1c59      	adds	r1, r3, #1
 80201f4:	d103      	bne.n	80201fe <_raise_r+0x42>
 80201f6:	2316      	movs	r3, #22
 80201f8:	6003      	str	r3, [r0, #0]
 80201fa:	2001      	movs	r0, #1
 80201fc:	e7e7      	b.n	80201ce <_raise_r+0x12>
 80201fe:	2400      	movs	r4, #0
 8020200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020204:	4628      	mov	r0, r5
 8020206:	4798      	blx	r3
 8020208:	2000      	movs	r0, #0
 802020a:	e7e0      	b.n	80201ce <_raise_r+0x12>

0802020c <raise>:
 802020c:	4b02      	ldr	r3, [pc, #8]	; (8020218 <raise+0xc>)
 802020e:	4601      	mov	r1, r0
 8020210:	6818      	ldr	r0, [r3, #0]
 8020212:	f7ff bfd3 	b.w	80201bc <_raise_r>
 8020216:	bf00      	nop
 8020218:	20000050 	.word	0x20000050

0802021c <_kill_r>:
 802021c:	b538      	push	{r3, r4, r5, lr}
 802021e:	4d07      	ldr	r5, [pc, #28]	; (802023c <_kill_r+0x20>)
 8020220:	2300      	movs	r3, #0
 8020222:	4604      	mov	r4, r0
 8020224:	4608      	mov	r0, r1
 8020226:	4611      	mov	r1, r2
 8020228:	602b      	str	r3, [r5, #0]
 802022a:	f7e1 fb6b 	bl	8001904 <_kill>
 802022e:	1c43      	adds	r3, r0, #1
 8020230:	d102      	bne.n	8020238 <_kill_r+0x1c>
 8020232:	682b      	ldr	r3, [r5, #0]
 8020234:	b103      	cbz	r3, 8020238 <_kill_r+0x1c>
 8020236:	6023      	str	r3, [r4, #0]
 8020238:	bd38      	pop	{r3, r4, r5, pc}
 802023a:	bf00      	nop
 802023c:	20010390 	.word	0x20010390

08020240 <_getpid_r>:
 8020240:	f7e1 bb58 	b.w	80018f4 <_getpid>

08020244 <_malloc_usable_size_r>:
 8020244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020248:	1f18      	subs	r0, r3, #4
 802024a:	2b00      	cmp	r3, #0
 802024c:	bfbc      	itt	lt
 802024e:	580b      	ldrlt	r3, [r1, r0]
 8020250:	18c0      	addlt	r0, r0, r3
 8020252:	4770      	bx	lr

08020254 <_init>:
 8020254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020256:	bf00      	nop
 8020258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802025a:	bc08      	pop	{r3}
 802025c:	469e      	mov	lr, r3
 802025e:	4770      	bx	lr

08020260 <_fini>:
 8020260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020262:	bf00      	nop
 8020264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020266:	bc08      	pop	{r3}
 8020268:	469e      	mov	lr, r3
 802026a:	4770      	bx	lr
